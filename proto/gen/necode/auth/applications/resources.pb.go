// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: necode/auth/applications/resources.proto

package applications

import (
	provider "github.com/rskvp/necode/proto/gen/necode/auth/provider"
	user "github.com/rskvp/necode/proto/gen/necode/identity/user"
	types "github.com/rskvp/necode/proto/gen/necode/types"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// AppPassword stores information about secondary passwords generated by users
// to be used with third-party applications.
type AppPassword struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// REQUIRED.
	// The generated access password.
	Password string `protobuf:"bytes,1,opt,name=password,proto3" json:"password,omitempty"`
	// OPTIONAL.
	// The scope of the token to be issued.
	// This would be a list of resources with corresponding role-based access scope.
	TokenScope map[string]*provider.Scope `protobuf:"bytes,2,rep,name=token_scope,json=tokenScope,proto3" json:"token_scope,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// OPTIONAL.
	// A label to be associated with the password.
	Label string `protobuf:"bytes,3,opt,name=label,proto3" json:"label,omitempty"`
	// REQUIRED.
	// The user who created the password.
	User *user.UserId `protobuf:"bytes,4,opt,name=user,proto3" json:"user,omitempty"`
	// OPTIONAL.
	// The time when the token will expire.
	Expiration *types.Timestamp `protobuf:"bytes,5,opt,name=expiration,proto3" json:"expiration,omitempty"`
	// REQUIRED.
	// The creation time of the password.
	Ctime *types.Timestamp `protobuf:"bytes,6,opt,name=ctime,proto3" json:"ctime,omitempty"`
	// REQUIRED.
	// The last time the password was used.
	Utime *types.Timestamp `protobuf:"bytes,7,opt,name=utime,proto3" json:"utime,omitempty"`
}

func (x *AppPassword) Reset() {
	*x = AppPassword{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_auth_applications_resources_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppPassword) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppPassword) ProtoMessage() {}

func (x *AppPassword) ProtoReflect() protoreflect.Message {
	mi := &file_necode_auth_applications_resources_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppPassword.ProtoReflect.Descriptor instead.
func (*AppPassword) Descriptor() ([]byte, []int) {
	return file_necode_auth_applications_resources_proto_rawDescGZIP(), []int{0}
}

func (x *AppPassword) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *AppPassword) GetTokenScope() map[string]*provider.Scope {
	if x != nil {
		return x.TokenScope
	}
	return nil
}

func (x *AppPassword) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *AppPassword) GetUser() *user.UserId {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *AppPassword) GetExpiration() *types.Timestamp {
	if x != nil {
		return x.Expiration
	}
	return nil
}

func (x *AppPassword) GetCtime() *types.Timestamp {
	if x != nil {
		return x.Ctime
	}
	return nil
}

func (x *AppPassword) GetUtime() *types.Timestamp {
	if x != nil {
		return x.Utime
	}
	return nil
}

var File_necode_auth_applications_resources_proto protoreflect.FileDescriptor

var file_necode_auth_applications_resources_proto_rawDesc = []byte{
	0x0a, 0x28, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x6e, 0x65, 0x63, 0x6f,
	0x64, 0x65, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x24, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2f, 0x61, 0x75, 0x74,
	0x68, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x6e, 0x65, 0x63, 0x6f,
	0x64, 0x65, 0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2f, 0x75, 0x73, 0x65, 0x72,
	0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x18, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbc, 0x03, 0x0a, 0x0b, 0x41,
	0x70, 0x70, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x56, 0x0a, 0x0b, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6e, 0x65,
	0x63, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x70, 0x70, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0a, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x12, 0x30, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x63,
	0x6f, 0x64, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2d, 0x0a, 0x05, 0x63, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x63, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x2d,
	0x0a, 0x05, 0x75, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x75, 0x74, 0x69, 0x6d, 0x65, 0x1a, 0x5a, 0x0a,
	0x0f, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0xec, 0x01, 0x0a, 0x1c, 0x63, 0x6f,
	0x6d, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x0e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3a, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x73, 0x6b, 0x76, 0x70, 0x2f, 0x6e,
	0x65, 0x63, 0x6f, 0x64, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f,
	0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0xa2, 0x02, 0x03, 0x4e, 0x41, 0x41, 0xaa, 0x02,
	0x18, 0x4e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x2e, 0x41, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0xca, 0x02, 0x18, 0x4e, 0x65, 0x63, 0x6f,
	0x64, 0x65, 0x5c, 0x41, 0x75, 0x74, 0x68, 0x5c, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0xe2, 0x02, 0x24, 0x4e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x5c, 0x41, 0x75,
	0x74, 0x68, 0x5c, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5c,
	0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x1a, 0x4e, 0x65,
	0x63, 0x6f, 0x64, 0x65, 0x3a, 0x3a, 0x41, 0x75, 0x74, 0x68, 0x3a, 0x3a, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_necode_auth_applications_resources_proto_rawDescOnce sync.Once
	file_necode_auth_applications_resources_proto_rawDescData = file_necode_auth_applications_resources_proto_rawDesc
)

func file_necode_auth_applications_resources_proto_rawDescGZIP() []byte {
	file_necode_auth_applications_resources_proto_rawDescOnce.Do(func() {
		file_necode_auth_applications_resources_proto_rawDescData = protoimpl.X.CompressGZIP(file_necode_auth_applications_resources_proto_rawDescData)
	})
	return file_necode_auth_applications_resources_proto_rawDescData
}

var file_necode_auth_applications_resources_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_necode_auth_applications_resources_proto_goTypes = []interface{}{
	(*AppPassword)(nil),     // 0: necode.auth.applications.AppPassword
	nil,                     // 1: necode.auth.applications.AppPassword.TokenScopeEntry
	(*user.UserId)(nil),     // 2: necode.identity.user.UserId
	(*types.Timestamp)(nil), // 3: necode.types.Timestamp
	(*provider.Scope)(nil),  // 4: necode.auth.provider.Scope
}
var file_necode_auth_applications_resources_proto_depIdxs = []int32{
	1, // 0: necode.auth.applications.AppPassword.token_scope:type_name -> necode.auth.applications.AppPassword.TokenScopeEntry
	2, // 1: necode.auth.applications.AppPassword.user:type_name -> necode.identity.user.UserId
	3, // 2: necode.auth.applications.AppPassword.expiration:type_name -> necode.types.Timestamp
	3, // 3: necode.auth.applications.AppPassword.ctime:type_name -> necode.types.Timestamp
	3, // 4: necode.auth.applications.AppPassword.utime:type_name -> necode.types.Timestamp
	4, // 5: necode.auth.applications.AppPassword.TokenScopeEntry.value:type_name -> necode.auth.provider.Scope
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_necode_auth_applications_resources_proto_init() }
func file_necode_auth_applications_resources_proto_init() {
	if File_necode_auth_applications_resources_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_necode_auth_applications_resources_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppPassword); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_necode_auth_applications_resources_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_necode_auth_applications_resources_proto_goTypes,
		DependencyIndexes: file_necode_auth_applications_resources_proto_depIdxs,
		MessageInfos:      file_necode_auth_applications_resources_proto_msgTypes,
	}.Build()
	File_necode_auth_applications_resources_proto = out.File
	file_necode_auth_applications_resources_proto_rawDesc = nil
	file_necode_auth_applications_resources_proto_goTypes = nil
	file_necode_auth_applications_resources_proto_depIdxs = nil
}
