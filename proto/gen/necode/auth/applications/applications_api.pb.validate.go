// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: necode/auth/applications/applications_api.proto

package applications

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GenerateAppPasswordRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GenerateAppPasswordRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerateAppPasswordRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GenerateAppPasswordRequestMultiError, or nil if none found.
func (m *GenerateAppPasswordRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateAppPasswordRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GenerateAppPasswordRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GenerateAppPasswordRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GenerateAppPasswordRequestValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	{
		sorted_keys := make([]string, len(m.GetTokenScope()))
		i := 0
		for key := range m.GetTokenScope() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetTokenScope()[key]
			_ = val

			// no validation rules for TokenScope[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, GenerateAppPasswordRequestValidationError{
							field:  fmt.Sprintf("TokenScope[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, GenerateAppPasswordRequestValidationError{
							field:  fmt.Sprintf("TokenScope[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return GenerateAppPasswordRequestValidationError{
						field:  fmt.Sprintf("TokenScope[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	// no validation rules for Label

	if all {
		switch v := interface{}(m.GetExpiration()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GenerateAppPasswordRequestValidationError{
					field:  "Expiration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GenerateAppPasswordRequestValidationError{
					field:  "Expiration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpiration()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GenerateAppPasswordRequestValidationError{
				field:  "Expiration",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GenerateAppPasswordRequestMultiError(errors)
	}

	return nil
}

// GenerateAppPasswordRequestMultiError is an error wrapping multiple
// validation errors returned by GenerateAppPasswordRequest.ValidateAll() if
// the designated constraints aren't met.
type GenerateAppPasswordRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateAppPasswordRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateAppPasswordRequestMultiError) AllErrors() []error { return m }

// GenerateAppPasswordRequestValidationError is the validation error returned
// by GenerateAppPasswordRequest.Validate if the designated constraints aren't met.
type GenerateAppPasswordRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateAppPasswordRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateAppPasswordRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateAppPasswordRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateAppPasswordRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateAppPasswordRequestValidationError) ErrorName() string {
	return "GenerateAppPasswordRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GenerateAppPasswordRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateAppPasswordRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateAppPasswordRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateAppPasswordRequestValidationError{}

// Validate checks the field values on GenerateAppPasswordResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GenerateAppPasswordResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerateAppPasswordResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GenerateAppPasswordResponseMultiError, or nil if none found.
func (m *GenerateAppPasswordResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateAppPasswordResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GenerateAppPasswordResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GenerateAppPasswordResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GenerateAppPasswordResponseValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GenerateAppPasswordResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GenerateAppPasswordResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GenerateAppPasswordResponseValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAppPassword()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GenerateAppPasswordResponseValidationError{
					field:  "AppPassword",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GenerateAppPasswordResponseValidationError{
					field:  "AppPassword",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAppPassword()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GenerateAppPasswordResponseValidationError{
				field:  "AppPassword",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GenerateAppPasswordResponseMultiError(errors)
	}

	return nil
}

// GenerateAppPasswordResponseMultiError is an error wrapping multiple
// validation errors returned by GenerateAppPasswordResponse.ValidateAll() if
// the designated constraints aren't met.
type GenerateAppPasswordResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateAppPasswordResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateAppPasswordResponseMultiError) AllErrors() []error { return m }

// GenerateAppPasswordResponseValidationError is the validation error returned
// by GenerateAppPasswordResponse.Validate if the designated constraints
// aren't met.
type GenerateAppPasswordResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateAppPasswordResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateAppPasswordResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateAppPasswordResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateAppPasswordResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateAppPasswordResponseValidationError) ErrorName() string {
	return "GenerateAppPasswordResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GenerateAppPasswordResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateAppPasswordResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateAppPasswordResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateAppPasswordResponseValidationError{}

// Validate checks the field values on ListAppPasswordsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAppPasswordsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAppPasswordsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAppPasswordsRequestMultiError, or nil if none found.
func (m *ListAppPasswordsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAppPasswordsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListAppPasswordsRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListAppPasswordsRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListAppPasswordsRequestValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListAppPasswordsRequestMultiError(errors)
	}

	return nil
}

// ListAppPasswordsRequestMultiError is an error wrapping multiple validation
// errors returned by ListAppPasswordsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListAppPasswordsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAppPasswordsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAppPasswordsRequestMultiError) AllErrors() []error { return m }

// ListAppPasswordsRequestValidationError is the validation error returned by
// ListAppPasswordsRequest.Validate if the designated constraints aren't met.
type ListAppPasswordsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAppPasswordsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAppPasswordsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAppPasswordsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAppPasswordsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAppPasswordsRequestValidationError) ErrorName() string {
	return "ListAppPasswordsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAppPasswordsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAppPasswordsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAppPasswordsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAppPasswordsRequestValidationError{}

// Validate checks the field values on ListAppPasswordsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAppPasswordsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAppPasswordsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAppPasswordsResponseMultiError, or nil if none found.
func (m *ListAppPasswordsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAppPasswordsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListAppPasswordsResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListAppPasswordsResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListAppPasswordsResponseValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListAppPasswordsResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListAppPasswordsResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListAppPasswordsResponseValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetAppPasswords() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAppPasswordsResponseValidationError{
						field:  fmt.Sprintf("AppPasswords[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAppPasswordsResponseValidationError{
						field:  fmt.Sprintf("AppPasswords[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAppPasswordsResponseValidationError{
					field:  fmt.Sprintf("AppPasswords[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListAppPasswordsResponseMultiError(errors)
	}

	return nil
}

// ListAppPasswordsResponseMultiError is an error wrapping multiple validation
// errors returned by ListAppPasswordsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListAppPasswordsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAppPasswordsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAppPasswordsResponseMultiError) AllErrors() []error { return m }

// ListAppPasswordsResponseValidationError is the validation error returned by
// ListAppPasswordsResponse.Validate if the designated constraints aren't met.
type ListAppPasswordsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAppPasswordsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAppPasswordsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAppPasswordsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAppPasswordsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAppPasswordsResponseValidationError) ErrorName() string {
	return "ListAppPasswordsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListAppPasswordsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAppPasswordsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAppPasswordsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAppPasswordsResponseValidationError{}

// Validate checks the field values on InvalidateAppPasswordRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InvalidateAppPasswordRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InvalidateAppPasswordRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InvalidateAppPasswordRequestMultiError, or nil if none found.
func (m *InvalidateAppPasswordRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *InvalidateAppPasswordRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InvalidateAppPasswordRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InvalidateAppPasswordRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InvalidateAppPasswordRequestValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Password

	if len(errors) > 0 {
		return InvalidateAppPasswordRequestMultiError(errors)
	}

	return nil
}

// InvalidateAppPasswordRequestMultiError is an error wrapping multiple
// validation errors returned by InvalidateAppPasswordRequest.ValidateAll() if
// the designated constraints aren't met.
type InvalidateAppPasswordRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InvalidateAppPasswordRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InvalidateAppPasswordRequestMultiError) AllErrors() []error { return m }

// InvalidateAppPasswordRequestValidationError is the validation error returned
// by InvalidateAppPasswordRequest.Validate if the designated constraints
// aren't met.
type InvalidateAppPasswordRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InvalidateAppPasswordRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InvalidateAppPasswordRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InvalidateAppPasswordRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InvalidateAppPasswordRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InvalidateAppPasswordRequestValidationError) ErrorName() string {
	return "InvalidateAppPasswordRequestValidationError"
}

// Error satisfies the builtin error interface
func (e InvalidateAppPasswordRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInvalidateAppPasswordRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InvalidateAppPasswordRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InvalidateAppPasswordRequestValidationError{}

// Validate checks the field values on InvalidateAppPasswordResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InvalidateAppPasswordResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InvalidateAppPasswordResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// InvalidateAppPasswordResponseMultiError, or nil if none found.
func (m *InvalidateAppPasswordResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *InvalidateAppPasswordResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InvalidateAppPasswordResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InvalidateAppPasswordResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InvalidateAppPasswordResponseValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InvalidateAppPasswordResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InvalidateAppPasswordResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InvalidateAppPasswordResponseValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return InvalidateAppPasswordResponseMultiError(errors)
	}

	return nil
}

// InvalidateAppPasswordResponseMultiError is an error wrapping multiple
// validation errors returned by InvalidateAppPasswordResponse.ValidateAll()
// if the designated constraints aren't met.
type InvalidateAppPasswordResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InvalidateAppPasswordResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InvalidateAppPasswordResponseMultiError) AllErrors() []error { return m }

// InvalidateAppPasswordResponseValidationError is the validation error
// returned by InvalidateAppPasswordResponse.Validate if the designated
// constraints aren't met.
type InvalidateAppPasswordResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InvalidateAppPasswordResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InvalidateAppPasswordResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InvalidateAppPasswordResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InvalidateAppPasswordResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InvalidateAppPasswordResponseValidationError) ErrorName() string {
	return "InvalidateAppPasswordResponseValidationError"
}

// Error satisfies the builtin error interface
func (e InvalidateAppPasswordResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInvalidateAppPasswordResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InvalidateAppPasswordResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InvalidateAppPasswordResponseValidationError{}

// Validate checks the field values on GetAppPasswordRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAppPasswordRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAppPasswordRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAppPasswordRequestMultiError, or nil if none found.
func (m *GetAppPasswordRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAppPasswordRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetAppPasswordRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetAppPasswordRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAppPasswordRequestValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetAppPasswordRequestValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetAppPasswordRequestValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAppPasswordRequestValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Password

	if len(errors) > 0 {
		return GetAppPasswordRequestMultiError(errors)
	}

	return nil
}

// GetAppPasswordRequestMultiError is an error wrapping multiple validation
// errors returned by GetAppPasswordRequest.ValidateAll() if the designated
// constraints aren't met.
type GetAppPasswordRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAppPasswordRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAppPasswordRequestMultiError) AllErrors() []error { return m }

// GetAppPasswordRequestValidationError is the validation error returned by
// GetAppPasswordRequest.Validate if the designated constraints aren't met.
type GetAppPasswordRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAppPasswordRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAppPasswordRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAppPasswordRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAppPasswordRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAppPasswordRequestValidationError) ErrorName() string {
	return "GetAppPasswordRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAppPasswordRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAppPasswordRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAppPasswordRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAppPasswordRequestValidationError{}

// Validate checks the field values on GetAppPasswordResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAppPasswordResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAppPasswordResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAppPasswordResponseMultiError, or nil if none found.
func (m *GetAppPasswordResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAppPasswordResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetAppPasswordResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetAppPasswordResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAppPasswordResponseValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetAppPasswordResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetAppPasswordResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAppPasswordResponseValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAppPassword()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetAppPasswordResponseValidationError{
					field:  "AppPassword",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetAppPasswordResponseValidationError{
					field:  "AppPassword",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAppPassword()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAppPasswordResponseValidationError{
				field:  "AppPassword",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetAppPasswordResponseMultiError(errors)
	}

	return nil
}

// GetAppPasswordResponseMultiError is an error wrapping multiple validation
// errors returned by GetAppPasswordResponse.ValidateAll() if the designated
// constraints aren't met.
type GetAppPasswordResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAppPasswordResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAppPasswordResponseMultiError) AllErrors() []error { return m }

// GetAppPasswordResponseValidationError is the validation error returned by
// GetAppPasswordResponse.Validate if the designated constraints aren't met.
type GetAppPasswordResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAppPasswordResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAppPasswordResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAppPasswordResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAppPasswordResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAppPasswordResponseValidationError) ErrorName() string {
	return "GetAppPasswordResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAppPasswordResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAppPasswordResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAppPasswordResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAppPasswordResponseValidationError{}
