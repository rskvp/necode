// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: necode/workflowservice/request_response.proto

package workflowservice

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	enums "github.com/rskvp/necode/proto/gen/necode/enums"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = enums.ArchivalState(0)
)

// Validate checks the field values on RegisterNamespaceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterNamespaceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterNamespaceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterNamespaceRequestMultiError, or nil if none found.
func (m *RegisterNamespaceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterNamespaceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Namespace

	// no validation rules for Description

	// no validation rules for OwnerEmail

	if all {
		switch v := interface{}(m.GetWorkflowExecutionRetentionPeriod()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RegisterNamespaceRequestValidationError{
					field:  "WorkflowExecutionRetentionPeriod",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RegisterNamespaceRequestValidationError{
					field:  "WorkflowExecutionRetentionPeriod",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkflowExecutionRetentionPeriod()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RegisterNamespaceRequestValidationError{
				field:  "WorkflowExecutionRetentionPeriod",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetClusters() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RegisterNamespaceRequestValidationError{
						field:  fmt.Sprintf("Clusters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RegisterNamespaceRequestValidationError{
						field:  fmt.Sprintf("Clusters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RegisterNamespaceRequestValidationError{
					field:  fmt.Sprintf("Clusters[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for ActiveClusterName

	// no validation rules for Data

	// no validation rules for SecurityToken

	// no validation rules for IsGlobalNamespace

	// no validation rules for HistoryArchivalState

	// no validation rules for HistoryArchivalUri

	// no validation rules for VisibilityArchivalState

	// no validation rules for VisibilityArchivalUri

	if len(errors) > 0 {
		return RegisterNamespaceRequestMultiError(errors)
	}

	return nil
}

// RegisterNamespaceRequestMultiError is an error wrapping multiple validation
// errors returned by RegisterNamespaceRequest.ValidateAll() if the designated
// constraints aren't met.
type RegisterNamespaceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterNamespaceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterNamespaceRequestMultiError) AllErrors() []error { return m }

// RegisterNamespaceRequestValidationError is the validation error returned by
// RegisterNamespaceRequest.Validate if the designated constraints aren't met.
type RegisterNamespaceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterNamespaceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterNamespaceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterNamespaceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterNamespaceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterNamespaceRequestValidationError) ErrorName() string {
	return "RegisterNamespaceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterNamespaceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterNamespaceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterNamespaceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterNamespaceRequestValidationError{}

// Validate checks the field values on RegisterNamespaceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterNamespaceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterNamespaceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterNamespaceResponseMultiError, or nil if none found.
func (m *RegisterNamespaceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterNamespaceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RegisterNamespaceResponseMultiError(errors)
	}

	return nil
}

// RegisterNamespaceResponseMultiError is an error wrapping multiple validation
// errors returned by RegisterNamespaceResponse.ValidateAll() if the
// designated constraints aren't met.
type RegisterNamespaceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterNamespaceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterNamespaceResponseMultiError) AllErrors() []error { return m }

// RegisterNamespaceResponseValidationError is the validation error returned by
// RegisterNamespaceResponse.Validate if the designated constraints aren't met.
type RegisterNamespaceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterNamespaceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterNamespaceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterNamespaceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterNamespaceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterNamespaceResponseValidationError) ErrorName() string {
	return "RegisterNamespaceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterNamespaceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterNamespaceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterNamespaceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterNamespaceResponseValidationError{}

// Validate checks the field values on ListNamespacesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListNamespacesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListNamespacesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListNamespacesRequestMultiError, or nil if none found.
func (m *ListNamespacesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListNamespacesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageSize

	// no validation rules for NextPageToken

	if all {
		switch v := interface{}(m.GetNamespaceFilter()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListNamespacesRequestValidationError{
					field:  "NamespaceFilter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListNamespacesRequestValidationError{
					field:  "NamespaceFilter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNamespaceFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListNamespacesRequestValidationError{
				field:  "NamespaceFilter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListNamespacesRequestMultiError(errors)
	}

	return nil
}

// ListNamespacesRequestMultiError is an error wrapping multiple validation
// errors returned by ListNamespacesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListNamespacesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListNamespacesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListNamespacesRequestMultiError) AllErrors() []error { return m }

// ListNamespacesRequestValidationError is the validation error returned by
// ListNamespacesRequest.Validate if the designated constraints aren't met.
type ListNamespacesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListNamespacesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListNamespacesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListNamespacesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListNamespacesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListNamespacesRequestValidationError) ErrorName() string {
	return "ListNamespacesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListNamespacesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListNamespacesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListNamespacesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListNamespacesRequestValidationError{}

// Validate checks the field values on ListNamespacesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListNamespacesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListNamespacesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListNamespacesResponseMultiError, or nil if none found.
func (m *ListNamespacesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListNamespacesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetNamespaces() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListNamespacesResponseValidationError{
						field:  fmt.Sprintf("Namespaces[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListNamespacesResponseValidationError{
						field:  fmt.Sprintf("Namespaces[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListNamespacesResponseValidationError{
					field:  fmt.Sprintf("Namespaces[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListNamespacesResponseMultiError(errors)
	}

	return nil
}

// ListNamespacesResponseMultiError is an error wrapping multiple validation
// errors returned by ListNamespacesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListNamespacesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListNamespacesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListNamespacesResponseMultiError) AllErrors() []error { return m }

// ListNamespacesResponseValidationError is the validation error returned by
// ListNamespacesResponse.Validate if the designated constraints aren't met.
type ListNamespacesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListNamespacesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListNamespacesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListNamespacesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListNamespacesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListNamespacesResponseValidationError) ErrorName() string {
	return "ListNamespacesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListNamespacesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListNamespacesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListNamespacesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListNamespacesResponseValidationError{}

// Validate checks the field values on DescribeNamespaceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeNamespaceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeNamespaceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribeNamespaceRequestMultiError, or nil if none found.
func (m *DescribeNamespaceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeNamespaceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Namespace

	// no validation rules for Id

	if len(errors) > 0 {
		return DescribeNamespaceRequestMultiError(errors)
	}

	return nil
}

// DescribeNamespaceRequestMultiError is an error wrapping multiple validation
// errors returned by DescribeNamespaceRequest.ValidateAll() if the designated
// constraints aren't met.
type DescribeNamespaceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeNamespaceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeNamespaceRequestMultiError) AllErrors() []error { return m }

// DescribeNamespaceRequestValidationError is the validation error returned by
// DescribeNamespaceRequest.Validate if the designated constraints aren't met.
type DescribeNamespaceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeNamespaceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeNamespaceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeNamespaceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeNamespaceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeNamespaceRequestValidationError) ErrorName() string {
	return "DescribeNamespaceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeNamespaceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeNamespaceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeNamespaceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeNamespaceRequestValidationError{}

// Validate checks the field values on DescribeNamespaceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeNamespaceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeNamespaceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribeNamespaceResponseMultiError, or nil if none found.
func (m *DescribeNamespaceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeNamespaceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetNamespaceInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DescribeNamespaceResponseValidationError{
					field:  "NamespaceInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DescribeNamespaceResponseValidationError{
					field:  "NamespaceInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNamespaceInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DescribeNamespaceResponseValidationError{
				field:  "NamespaceInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DescribeNamespaceResponseValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DescribeNamespaceResponseValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DescribeNamespaceResponseValidationError{
				field:  "Config",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetReplicationConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DescribeNamespaceResponseValidationError{
					field:  "ReplicationConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DescribeNamespaceResponseValidationError{
					field:  "ReplicationConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReplicationConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DescribeNamespaceResponseValidationError{
				field:  "ReplicationConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for FailoverVersion

	// no validation rules for IsGlobalNamespace

	for idx, item := range m.GetFailoverHistory() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DescribeNamespaceResponseValidationError{
						field:  fmt.Sprintf("FailoverHistory[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DescribeNamespaceResponseValidationError{
						field:  fmt.Sprintf("FailoverHistory[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DescribeNamespaceResponseValidationError{
					field:  fmt.Sprintf("FailoverHistory[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DescribeNamespaceResponseMultiError(errors)
	}

	return nil
}

// DescribeNamespaceResponseMultiError is an error wrapping multiple validation
// errors returned by DescribeNamespaceResponse.ValidateAll() if the
// designated constraints aren't met.
type DescribeNamespaceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeNamespaceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeNamespaceResponseMultiError) AllErrors() []error { return m }

// DescribeNamespaceResponseValidationError is the validation error returned by
// DescribeNamespaceResponse.Validate if the designated constraints aren't met.
type DescribeNamespaceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeNamespaceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeNamespaceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeNamespaceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeNamespaceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeNamespaceResponseValidationError) ErrorName() string {
	return "DescribeNamespaceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeNamespaceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeNamespaceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeNamespaceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeNamespaceResponseValidationError{}

// Validate checks the field values on UpdateNamespaceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateNamespaceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateNamespaceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateNamespaceRequestMultiError, or nil if none found.
func (m *UpdateNamespaceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateNamespaceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Namespace

	if all {
		switch v := interface{}(m.GetUpdateInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateNamespaceRequestValidationError{
					field:  "UpdateInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateNamespaceRequestValidationError{
					field:  "UpdateInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateNamespaceRequestValidationError{
				field:  "UpdateInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateNamespaceRequestValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateNamespaceRequestValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateNamespaceRequestValidationError{
				field:  "Config",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetReplicationConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateNamespaceRequestValidationError{
					field:  "ReplicationConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateNamespaceRequestValidationError{
					field:  "ReplicationConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReplicationConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateNamespaceRequestValidationError{
				field:  "ReplicationConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for SecurityToken

	// no validation rules for DeleteBadBinary

	// no validation rules for PromoteNamespace

	if len(errors) > 0 {
		return UpdateNamespaceRequestMultiError(errors)
	}

	return nil
}

// UpdateNamespaceRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateNamespaceRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateNamespaceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateNamespaceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateNamespaceRequestMultiError) AllErrors() []error { return m }

// UpdateNamespaceRequestValidationError is the validation error returned by
// UpdateNamespaceRequest.Validate if the designated constraints aren't met.
type UpdateNamespaceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateNamespaceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateNamespaceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateNamespaceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateNamespaceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateNamespaceRequestValidationError) ErrorName() string {
	return "UpdateNamespaceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateNamespaceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateNamespaceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateNamespaceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateNamespaceRequestValidationError{}

// Validate checks the field values on UpdateNamespaceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateNamespaceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateNamespaceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateNamespaceResponseMultiError, or nil if none found.
func (m *UpdateNamespaceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateNamespaceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetNamespaceInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateNamespaceResponseValidationError{
					field:  "NamespaceInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateNamespaceResponseValidationError{
					field:  "NamespaceInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNamespaceInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateNamespaceResponseValidationError{
				field:  "NamespaceInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateNamespaceResponseValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateNamespaceResponseValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateNamespaceResponseValidationError{
				field:  "Config",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetReplicationConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateNamespaceResponseValidationError{
					field:  "ReplicationConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateNamespaceResponseValidationError{
					field:  "ReplicationConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReplicationConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateNamespaceResponseValidationError{
				field:  "ReplicationConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for FailoverVersion

	// no validation rules for IsGlobalNamespace

	if len(errors) > 0 {
		return UpdateNamespaceResponseMultiError(errors)
	}

	return nil
}

// UpdateNamespaceResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateNamespaceResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateNamespaceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateNamespaceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateNamespaceResponseMultiError) AllErrors() []error { return m }

// UpdateNamespaceResponseValidationError is the validation error returned by
// UpdateNamespaceResponse.Validate if the designated constraints aren't met.
type UpdateNamespaceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateNamespaceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateNamespaceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateNamespaceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateNamespaceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateNamespaceResponseValidationError) ErrorName() string {
	return "UpdateNamespaceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateNamespaceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateNamespaceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateNamespaceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateNamespaceResponseValidationError{}

// Validate checks the field values on DeprecateNamespaceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeprecateNamespaceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeprecateNamespaceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeprecateNamespaceRequestMultiError, or nil if none found.
func (m *DeprecateNamespaceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeprecateNamespaceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Namespace

	// no validation rules for SecurityToken

	if len(errors) > 0 {
		return DeprecateNamespaceRequestMultiError(errors)
	}

	return nil
}

// DeprecateNamespaceRequestMultiError is an error wrapping multiple validation
// errors returned by DeprecateNamespaceRequest.ValidateAll() if the
// designated constraints aren't met.
type DeprecateNamespaceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeprecateNamespaceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeprecateNamespaceRequestMultiError) AllErrors() []error { return m }

// DeprecateNamespaceRequestValidationError is the validation error returned by
// DeprecateNamespaceRequest.Validate if the designated constraints aren't met.
type DeprecateNamespaceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeprecateNamespaceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeprecateNamespaceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeprecateNamespaceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeprecateNamespaceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeprecateNamespaceRequestValidationError) ErrorName() string {
	return "DeprecateNamespaceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeprecateNamespaceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeprecateNamespaceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeprecateNamespaceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeprecateNamespaceRequestValidationError{}

// Validate checks the field values on DeprecateNamespaceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeprecateNamespaceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeprecateNamespaceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeprecateNamespaceResponseMultiError, or nil if none found.
func (m *DeprecateNamespaceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeprecateNamespaceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeprecateNamespaceResponseMultiError(errors)
	}

	return nil
}

// DeprecateNamespaceResponseMultiError is an error wrapping multiple
// validation errors returned by DeprecateNamespaceResponse.ValidateAll() if
// the designated constraints aren't met.
type DeprecateNamespaceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeprecateNamespaceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeprecateNamespaceResponseMultiError) AllErrors() []error { return m }

// DeprecateNamespaceResponseValidationError is the validation error returned
// by DeprecateNamespaceResponse.Validate if the designated constraints aren't met.
type DeprecateNamespaceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeprecateNamespaceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeprecateNamespaceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeprecateNamespaceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeprecateNamespaceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeprecateNamespaceResponseValidationError) ErrorName() string {
	return "DeprecateNamespaceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeprecateNamespaceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeprecateNamespaceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeprecateNamespaceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeprecateNamespaceResponseValidationError{}

// Validate checks the field values on StartWorkflowExecutionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StartWorkflowExecutionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartWorkflowExecutionRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// StartWorkflowExecutionRequestMultiError, or nil if none found.
func (m *StartWorkflowExecutionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StartWorkflowExecutionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Namespace

	// no validation rules for WorkflowId

	if all {
		switch v := interface{}(m.GetWorkflowType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StartWorkflowExecutionRequestValidationError{
					field:  "WorkflowType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StartWorkflowExecutionRequestValidationError{
					field:  "WorkflowType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkflowType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StartWorkflowExecutionRequestValidationError{
				field:  "WorkflowType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTaskQueue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StartWorkflowExecutionRequestValidationError{
					field:  "TaskQueue",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StartWorkflowExecutionRequestValidationError{
					field:  "TaskQueue",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTaskQueue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StartWorkflowExecutionRequestValidationError{
				field:  "TaskQueue",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetInput()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StartWorkflowExecutionRequestValidationError{
					field:  "Input",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StartWorkflowExecutionRequestValidationError{
					field:  "Input",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInput()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StartWorkflowExecutionRequestValidationError{
				field:  "Input",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetWorkflowExecutionTimeout()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StartWorkflowExecutionRequestValidationError{
					field:  "WorkflowExecutionTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StartWorkflowExecutionRequestValidationError{
					field:  "WorkflowExecutionTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkflowExecutionTimeout()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StartWorkflowExecutionRequestValidationError{
				field:  "WorkflowExecutionTimeout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetWorkflowRunTimeout()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StartWorkflowExecutionRequestValidationError{
					field:  "WorkflowRunTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StartWorkflowExecutionRequestValidationError{
					field:  "WorkflowRunTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkflowRunTimeout()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StartWorkflowExecutionRequestValidationError{
				field:  "WorkflowRunTimeout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetWorkflowTaskTimeout()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StartWorkflowExecutionRequestValidationError{
					field:  "WorkflowTaskTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StartWorkflowExecutionRequestValidationError{
					field:  "WorkflowTaskTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkflowTaskTimeout()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StartWorkflowExecutionRequestValidationError{
				field:  "WorkflowTaskTimeout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Identity

	// no validation rules for RequestId

	// no validation rules for WorkflowIdReusePolicy

	if all {
		switch v := interface{}(m.GetRetryPolicy()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StartWorkflowExecutionRequestValidationError{
					field:  "RetryPolicy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StartWorkflowExecutionRequestValidationError{
					field:  "RetryPolicy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRetryPolicy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StartWorkflowExecutionRequestValidationError{
				field:  "RetryPolicy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CronSchedule

	if all {
		switch v := interface{}(m.GetMemo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StartWorkflowExecutionRequestValidationError{
					field:  "Memo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StartWorkflowExecutionRequestValidationError{
					field:  "Memo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMemo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StartWorkflowExecutionRequestValidationError{
				field:  "Memo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSearchAttributes()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StartWorkflowExecutionRequestValidationError{
					field:  "SearchAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StartWorkflowExecutionRequestValidationError{
					field:  "SearchAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSearchAttributes()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StartWorkflowExecutionRequestValidationError{
				field:  "SearchAttributes",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetHeader()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StartWorkflowExecutionRequestValidationError{
					field:  "Header",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StartWorkflowExecutionRequestValidationError{
					field:  "Header",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHeader()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StartWorkflowExecutionRequestValidationError{
				field:  "Header",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for RequestEagerExecution

	if all {
		switch v := interface{}(m.GetContinuedFailure()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StartWorkflowExecutionRequestValidationError{
					field:  "ContinuedFailure",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StartWorkflowExecutionRequestValidationError{
					field:  "ContinuedFailure",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetContinuedFailure()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StartWorkflowExecutionRequestValidationError{
				field:  "ContinuedFailure",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetLastCompletionResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StartWorkflowExecutionRequestValidationError{
					field:  "LastCompletionResult",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StartWorkflowExecutionRequestValidationError{
					field:  "LastCompletionResult",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLastCompletionResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StartWorkflowExecutionRequestValidationError{
				field:  "LastCompletionResult",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetWorkflowStartDelay()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StartWorkflowExecutionRequestValidationError{
					field:  "WorkflowStartDelay",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StartWorkflowExecutionRequestValidationError{
					field:  "WorkflowStartDelay",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkflowStartDelay()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StartWorkflowExecutionRequestValidationError{
				field:  "WorkflowStartDelay",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return StartWorkflowExecutionRequestMultiError(errors)
	}

	return nil
}

// StartWorkflowExecutionRequestMultiError is an error wrapping multiple
// validation errors returned by StartWorkflowExecutionRequest.ValidateAll()
// if the designated constraints aren't met.
type StartWorkflowExecutionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartWorkflowExecutionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartWorkflowExecutionRequestMultiError) AllErrors() []error { return m }

// StartWorkflowExecutionRequestValidationError is the validation error
// returned by StartWorkflowExecutionRequest.Validate if the designated
// constraints aren't met.
type StartWorkflowExecutionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartWorkflowExecutionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartWorkflowExecutionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartWorkflowExecutionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartWorkflowExecutionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartWorkflowExecutionRequestValidationError) ErrorName() string {
	return "StartWorkflowExecutionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StartWorkflowExecutionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartWorkflowExecutionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartWorkflowExecutionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartWorkflowExecutionRequestValidationError{}

// Validate checks the field values on StartWorkflowExecutionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StartWorkflowExecutionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartWorkflowExecutionResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// StartWorkflowExecutionResponseMultiError, or nil if none found.
func (m *StartWorkflowExecutionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StartWorkflowExecutionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RunId

	if all {
		switch v := interface{}(m.GetEagerWorkflowTask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StartWorkflowExecutionResponseValidationError{
					field:  "EagerWorkflowTask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StartWorkflowExecutionResponseValidationError{
					field:  "EagerWorkflowTask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEagerWorkflowTask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StartWorkflowExecutionResponseValidationError{
				field:  "EagerWorkflowTask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return StartWorkflowExecutionResponseMultiError(errors)
	}

	return nil
}

// StartWorkflowExecutionResponseMultiError is an error wrapping multiple
// validation errors returned by StartWorkflowExecutionResponse.ValidateAll()
// if the designated constraints aren't met.
type StartWorkflowExecutionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartWorkflowExecutionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartWorkflowExecutionResponseMultiError) AllErrors() []error { return m }

// StartWorkflowExecutionResponseValidationError is the validation error
// returned by StartWorkflowExecutionResponse.Validate if the designated
// constraints aren't met.
type StartWorkflowExecutionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartWorkflowExecutionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartWorkflowExecutionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartWorkflowExecutionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartWorkflowExecutionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartWorkflowExecutionResponseValidationError) ErrorName() string {
	return "StartWorkflowExecutionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e StartWorkflowExecutionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartWorkflowExecutionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartWorkflowExecutionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartWorkflowExecutionResponseValidationError{}

// Validate checks the field values on GetWorkflowExecutionHistoryRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetWorkflowExecutionHistoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetWorkflowExecutionHistoryRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetWorkflowExecutionHistoryRequestMultiError, or nil if none found.
func (m *GetWorkflowExecutionHistoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWorkflowExecutionHistoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Namespace

	if all {
		switch v := interface{}(m.GetExecution()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetWorkflowExecutionHistoryRequestValidationError{
					field:  "Execution",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetWorkflowExecutionHistoryRequestValidationError{
					field:  "Execution",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExecution()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetWorkflowExecutionHistoryRequestValidationError{
				field:  "Execution",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for MaximumPageSize

	// no validation rules for NextPageToken

	// no validation rules for WaitNewEvent

	// no validation rules for HistoryEventFilterType

	// no validation rules for SkipArchival

	if len(errors) > 0 {
		return GetWorkflowExecutionHistoryRequestMultiError(errors)
	}

	return nil
}

// GetWorkflowExecutionHistoryRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetWorkflowExecutionHistoryRequest.ValidateAll() if the designated
// constraints aren't met.
type GetWorkflowExecutionHistoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWorkflowExecutionHistoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWorkflowExecutionHistoryRequestMultiError) AllErrors() []error { return m }

// GetWorkflowExecutionHistoryRequestValidationError is the validation error
// returned by GetWorkflowExecutionHistoryRequest.Validate if the designated
// constraints aren't met.
type GetWorkflowExecutionHistoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWorkflowExecutionHistoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWorkflowExecutionHistoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWorkflowExecutionHistoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWorkflowExecutionHistoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWorkflowExecutionHistoryRequestValidationError) ErrorName() string {
	return "GetWorkflowExecutionHistoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetWorkflowExecutionHistoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWorkflowExecutionHistoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWorkflowExecutionHistoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWorkflowExecutionHistoryRequestValidationError{}

// Validate checks the field values on GetWorkflowExecutionHistoryResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetWorkflowExecutionHistoryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetWorkflowExecutionHistoryResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetWorkflowExecutionHistoryResponseMultiError, or nil if none found.
func (m *GetWorkflowExecutionHistoryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWorkflowExecutionHistoryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetHistory()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetWorkflowExecutionHistoryResponseValidationError{
					field:  "History",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetWorkflowExecutionHistoryResponseValidationError{
					field:  "History",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHistory()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetWorkflowExecutionHistoryResponseValidationError{
				field:  "History",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetRawHistory() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetWorkflowExecutionHistoryResponseValidationError{
						field:  fmt.Sprintf("RawHistory[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetWorkflowExecutionHistoryResponseValidationError{
						field:  fmt.Sprintf("RawHistory[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetWorkflowExecutionHistoryResponseValidationError{
					field:  fmt.Sprintf("RawHistory[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	// no validation rules for Archived

	if len(errors) > 0 {
		return GetWorkflowExecutionHistoryResponseMultiError(errors)
	}

	return nil
}

// GetWorkflowExecutionHistoryResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetWorkflowExecutionHistoryResponse.ValidateAll() if the designated
// constraints aren't met.
type GetWorkflowExecutionHistoryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWorkflowExecutionHistoryResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWorkflowExecutionHistoryResponseMultiError) AllErrors() []error { return m }

// GetWorkflowExecutionHistoryResponseValidationError is the validation error
// returned by GetWorkflowExecutionHistoryResponse.Validate if the designated
// constraints aren't met.
type GetWorkflowExecutionHistoryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWorkflowExecutionHistoryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWorkflowExecutionHistoryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWorkflowExecutionHistoryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWorkflowExecutionHistoryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWorkflowExecutionHistoryResponseValidationError) ErrorName() string {
	return "GetWorkflowExecutionHistoryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetWorkflowExecutionHistoryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWorkflowExecutionHistoryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWorkflowExecutionHistoryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWorkflowExecutionHistoryResponseValidationError{}

// Validate checks the field values on
// GetWorkflowExecutionHistoryReverseRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetWorkflowExecutionHistoryReverseRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetWorkflowExecutionHistoryReverseRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// GetWorkflowExecutionHistoryReverseRequestMultiError, or nil if none found.
func (m *GetWorkflowExecutionHistoryReverseRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWorkflowExecutionHistoryReverseRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Namespace

	if all {
		switch v := interface{}(m.GetExecution()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetWorkflowExecutionHistoryReverseRequestValidationError{
					field:  "Execution",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetWorkflowExecutionHistoryReverseRequestValidationError{
					field:  "Execution",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExecution()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetWorkflowExecutionHistoryReverseRequestValidationError{
				field:  "Execution",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for MaximumPageSize

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return GetWorkflowExecutionHistoryReverseRequestMultiError(errors)
	}

	return nil
}

// GetWorkflowExecutionHistoryReverseRequestMultiError is an error wrapping
// multiple validation errors returned by
// GetWorkflowExecutionHistoryReverseRequest.ValidateAll() if the designated
// constraints aren't met.
type GetWorkflowExecutionHistoryReverseRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWorkflowExecutionHistoryReverseRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWorkflowExecutionHistoryReverseRequestMultiError) AllErrors() []error { return m }

// GetWorkflowExecutionHistoryReverseRequestValidationError is the validation
// error returned by GetWorkflowExecutionHistoryReverseRequest.Validate if the
// designated constraints aren't met.
type GetWorkflowExecutionHistoryReverseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWorkflowExecutionHistoryReverseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWorkflowExecutionHistoryReverseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWorkflowExecutionHistoryReverseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWorkflowExecutionHistoryReverseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWorkflowExecutionHistoryReverseRequestValidationError) ErrorName() string {
	return "GetWorkflowExecutionHistoryReverseRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetWorkflowExecutionHistoryReverseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWorkflowExecutionHistoryReverseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWorkflowExecutionHistoryReverseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWorkflowExecutionHistoryReverseRequestValidationError{}

// Validate checks the field values on
// GetWorkflowExecutionHistoryReverseResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetWorkflowExecutionHistoryReverseResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetWorkflowExecutionHistoryReverseResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// GetWorkflowExecutionHistoryReverseResponseMultiError, or nil if none found.
func (m *GetWorkflowExecutionHistoryReverseResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWorkflowExecutionHistoryReverseResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetHistory()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetWorkflowExecutionHistoryReverseResponseValidationError{
					field:  "History",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetWorkflowExecutionHistoryReverseResponseValidationError{
					field:  "History",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHistory()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetWorkflowExecutionHistoryReverseResponseValidationError{
				field:  "History",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return GetWorkflowExecutionHistoryReverseResponseMultiError(errors)
	}

	return nil
}

// GetWorkflowExecutionHistoryReverseResponseMultiError is an error wrapping
// multiple validation errors returned by
// GetWorkflowExecutionHistoryReverseResponse.ValidateAll() if the designated
// constraints aren't met.
type GetWorkflowExecutionHistoryReverseResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWorkflowExecutionHistoryReverseResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWorkflowExecutionHistoryReverseResponseMultiError) AllErrors() []error { return m }

// GetWorkflowExecutionHistoryReverseResponseValidationError is the validation
// error returned by GetWorkflowExecutionHistoryReverseResponse.Validate if
// the designated constraints aren't met.
type GetWorkflowExecutionHistoryReverseResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWorkflowExecutionHistoryReverseResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWorkflowExecutionHistoryReverseResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWorkflowExecutionHistoryReverseResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWorkflowExecutionHistoryReverseResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWorkflowExecutionHistoryReverseResponseValidationError) ErrorName() string {
	return "GetWorkflowExecutionHistoryReverseResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetWorkflowExecutionHistoryReverseResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWorkflowExecutionHistoryReverseResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWorkflowExecutionHistoryReverseResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWorkflowExecutionHistoryReverseResponseValidationError{}

// Validate checks the field values on PollWorkflowTaskQueueRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PollWorkflowTaskQueueRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PollWorkflowTaskQueueRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PollWorkflowTaskQueueRequestMultiError, or nil if none found.
func (m *PollWorkflowTaskQueueRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PollWorkflowTaskQueueRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Namespace

	if all {
		switch v := interface{}(m.GetTaskQueue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PollWorkflowTaskQueueRequestValidationError{
					field:  "TaskQueue",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PollWorkflowTaskQueueRequestValidationError{
					field:  "TaskQueue",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTaskQueue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PollWorkflowTaskQueueRequestValidationError{
				field:  "TaskQueue",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Identity

	// no validation rules for BinaryChecksum

	if all {
		switch v := interface{}(m.GetWorkerVersionCapabilities()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PollWorkflowTaskQueueRequestValidationError{
					field:  "WorkerVersionCapabilities",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PollWorkflowTaskQueueRequestValidationError{
					field:  "WorkerVersionCapabilities",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkerVersionCapabilities()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PollWorkflowTaskQueueRequestValidationError{
				field:  "WorkerVersionCapabilities",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PollWorkflowTaskQueueRequestMultiError(errors)
	}

	return nil
}

// PollWorkflowTaskQueueRequestMultiError is an error wrapping multiple
// validation errors returned by PollWorkflowTaskQueueRequest.ValidateAll() if
// the designated constraints aren't met.
type PollWorkflowTaskQueueRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PollWorkflowTaskQueueRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PollWorkflowTaskQueueRequestMultiError) AllErrors() []error { return m }

// PollWorkflowTaskQueueRequestValidationError is the validation error returned
// by PollWorkflowTaskQueueRequest.Validate if the designated constraints
// aren't met.
type PollWorkflowTaskQueueRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PollWorkflowTaskQueueRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PollWorkflowTaskQueueRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PollWorkflowTaskQueueRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PollWorkflowTaskQueueRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PollWorkflowTaskQueueRequestValidationError) ErrorName() string {
	return "PollWorkflowTaskQueueRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PollWorkflowTaskQueueRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPollWorkflowTaskQueueRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PollWorkflowTaskQueueRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PollWorkflowTaskQueueRequestValidationError{}

// Validate checks the field values on PollWorkflowTaskQueueResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PollWorkflowTaskQueueResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PollWorkflowTaskQueueResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// PollWorkflowTaskQueueResponseMultiError, or nil if none found.
func (m *PollWorkflowTaskQueueResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PollWorkflowTaskQueueResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TaskToken

	if all {
		switch v := interface{}(m.GetWorkflowExecution()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PollWorkflowTaskQueueResponseValidationError{
					field:  "WorkflowExecution",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PollWorkflowTaskQueueResponseValidationError{
					field:  "WorkflowExecution",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkflowExecution()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PollWorkflowTaskQueueResponseValidationError{
				field:  "WorkflowExecution",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetWorkflowType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PollWorkflowTaskQueueResponseValidationError{
					field:  "WorkflowType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PollWorkflowTaskQueueResponseValidationError{
					field:  "WorkflowType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkflowType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PollWorkflowTaskQueueResponseValidationError{
				field:  "WorkflowType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for PreviousStartedEventId

	// no validation rules for StartedEventId

	// no validation rules for Attempt

	// no validation rules for BacklogCountHint

	if all {
		switch v := interface{}(m.GetHistory()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PollWorkflowTaskQueueResponseValidationError{
					field:  "History",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PollWorkflowTaskQueueResponseValidationError{
					field:  "History",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHistory()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PollWorkflowTaskQueueResponseValidationError{
				field:  "History",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for NextPageToken

	if all {
		switch v := interface{}(m.GetQuery()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PollWorkflowTaskQueueResponseValidationError{
					field:  "Query",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PollWorkflowTaskQueueResponseValidationError{
					field:  "Query",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetQuery()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PollWorkflowTaskQueueResponseValidationError{
				field:  "Query",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetWorkflowExecutionTaskQueue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PollWorkflowTaskQueueResponseValidationError{
					field:  "WorkflowExecutionTaskQueue",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PollWorkflowTaskQueueResponseValidationError{
					field:  "WorkflowExecutionTaskQueue",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkflowExecutionTaskQueue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PollWorkflowTaskQueueResponseValidationError{
				field:  "WorkflowExecutionTaskQueue",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetScheduledTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PollWorkflowTaskQueueResponseValidationError{
					field:  "ScheduledTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PollWorkflowTaskQueueResponseValidationError{
					field:  "ScheduledTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetScheduledTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PollWorkflowTaskQueueResponseValidationError{
				field:  "ScheduledTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStartedTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PollWorkflowTaskQueueResponseValidationError{
					field:  "StartedTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PollWorkflowTaskQueueResponseValidationError{
					field:  "StartedTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartedTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PollWorkflowTaskQueueResponseValidationError{
				field:  "StartedTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	{
		sorted_keys := make([]string, len(m.GetQueries()))
		i := 0
		for key := range m.GetQueries() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetQueries()[key]
			_ = val

			// no validation rules for Queries[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, PollWorkflowTaskQueueResponseValidationError{
							field:  fmt.Sprintf("Queries[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, PollWorkflowTaskQueueResponseValidationError{
							field:  fmt.Sprintf("Queries[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return PollWorkflowTaskQueueResponseValidationError{
						field:  fmt.Sprintf("Queries[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	for idx, item := range m.GetMessages() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PollWorkflowTaskQueueResponseValidationError{
						field:  fmt.Sprintf("Messages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PollWorkflowTaskQueueResponseValidationError{
						field:  fmt.Sprintf("Messages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PollWorkflowTaskQueueResponseValidationError{
					field:  fmt.Sprintf("Messages[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PollWorkflowTaskQueueResponseMultiError(errors)
	}

	return nil
}

// PollWorkflowTaskQueueResponseMultiError is an error wrapping multiple
// validation errors returned by PollWorkflowTaskQueueResponse.ValidateAll()
// if the designated constraints aren't met.
type PollWorkflowTaskQueueResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PollWorkflowTaskQueueResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PollWorkflowTaskQueueResponseMultiError) AllErrors() []error { return m }

// PollWorkflowTaskQueueResponseValidationError is the validation error
// returned by PollWorkflowTaskQueueResponse.Validate if the designated
// constraints aren't met.
type PollWorkflowTaskQueueResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PollWorkflowTaskQueueResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PollWorkflowTaskQueueResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PollWorkflowTaskQueueResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PollWorkflowTaskQueueResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PollWorkflowTaskQueueResponseValidationError) ErrorName() string {
	return "PollWorkflowTaskQueueResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PollWorkflowTaskQueueResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPollWorkflowTaskQueueResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PollWorkflowTaskQueueResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PollWorkflowTaskQueueResponseValidationError{}

// Validate checks the field values on RespondWorkflowTaskCompletedRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *RespondWorkflowTaskCompletedRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RespondWorkflowTaskCompletedRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// RespondWorkflowTaskCompletedRequestMultiError, or nil if none found.
func (m *RespondWorkflowTaskCompletedRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RespondWorkflowTaskCompletedRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TaskToken

	for idx, item := range m.GetCommands() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RespondWorkflowTaskCompletedRequestValidationError{
						field:  fmt.Sprintf("Commands[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RespondWorkflowTaskCompletedRequestValidationError{
						field:  fmt.Sprintf("Commands[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RespondWorkflowTaskCompletedRequestValidationError{
					field:  fmt.Sprintf("Commands[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Identity

	if all {
		switch v := interface{}(m.GetStickyAttributes()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RespondWorkflowTaskCompletedRequestValidationError{
					field:  "StickyAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RespondWorkflowTaskCompletedRequestValidationError{
					field:  "StickyAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStickyAttributes()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RespondWorkflowTaskCompletedRequestValidationError{
				field:  "StickyAttributes",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ReturnNewWorkflowTask

	// no validation rules for ForceCreateNewWorkflowTask

	// no validation rules for BinaryChecksum

	{
		sorted_keys := make([]string, len(m.GetQueryResults()))
		i := 0
		for key := range m.GetQueryResults() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetQueryResults()[key]
			_ = val

			// no validation rules for QueryResults[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, RespondWorkflowTaskCompletedRequestValidationError{
							field:  fmt.Sprintf("QueryResults[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, RespondWorkflowTaskCompletedRequestValidationError{
							field:  fmt.Sprintf("QueryResults[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return RespondWorkflowTaskCompletedRequestValidationError{
						field:  fmt.Sprintf("QueryResults[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	// no validation rules for Namespace

	if all {
		switch v := interface{}(m.GetWorkerVersionStamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RespondWorkflowTaskCompletedRequestValidationError{
					field:  "WorkerVersionStamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RespondWorkflowTaskCompletedRequestValidationError{
					field:  "WorkerVersionStamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkerVersionStamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RespondWorkflowTaskCompletedRequestValidationError{
				field:  "WorkerVersionStamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetMessages() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RespondWorkflowTaskCompletedRequestValidationError{
						field:  fmt.Sprintf("Messages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RespondWorkflowTaskCompletedRequestValidationError{
						field:  fmt.Sprintf("Messages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RespondWorkflowTaskCompletedRequestValidationError{
					field:  fmt.Sprintf("Messages[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetSdkMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RespondWorkflowTaskCompletedRequestValidationError{
					field:  "SdkMetadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RespondWorkflowTaskCompletedRequestValidationError{
					field:  "SdkMetadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSdkMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RespondWorkflowTaskCompletedRequestValidationError{
				field:  "SdkMetadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMeteringMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RespondWorkflowTaskCompletedRequestValidationError{
					field:  "MeteringMetadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RespondWorkflowTaskCompletedRequestValidationError{
					field:  "MeteringMetadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMeteringMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RespondWorkflowTaskCompletedRequestValidationError{
				field:  "MeteringMetadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RespondWorkflowTaskCompletedRequestMultiError(errors)
	}

	return nil
}

// RespondWorkflowTaskCompletedRequestMultiError is an error wrapping multiple
// validation errors returned by
// RespondWorkflowTaskCompletedRequest.ValidateAll() if the designated
// constraints aren't met.
type RespondWorkflowTaskCompletedRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RespondWorkflowTaskCompletedRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RespondWorkflowTaskCompletedRequestMultiError) AllErrors() []error { return m }

// RespondWorkflowTaskCompletedRequestValidationError is the validation error
// returned by RespondWorkflowTaskCompletedRequest.Validate if the designated
// constraints aren't met.
type RespondWorkflowTaskCompletedRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RespondWorkflowTaskCompletedRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RespondWorkflowTaskCompletedRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RespondWorkflowTaskCompletedRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RespondWorkflowTaskCompletedRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RespondWorkflowTaskCompletedRequestValidationError) ErrorName() string {
	return "RespondWorkflowTaskCompletedRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RespondWorkflowTaskCompletedRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRespondWorkflowTaskCompletedRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RespondWorkflowTaskCompletedRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RespondWorkflowTaskCompletedRequestValidationError{}

// Validate checks the field values on RespondWorkflowTaskCompletedResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *RespondWorkflowTaskCompletedResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RespondWorkflowTaskCompletedResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// RespondWorkflowTaskCompletedResponseMultiError, or nil if none found.
func (m *RespondWorkflowTaskCompletedResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RespondWorkflowTaskCompletedResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetWorkflowTask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RespondWorkflowTaskCompletedResponseValidationError{
					field:  "WorkflowTask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RespondWorkflowTaskCompletedResponseValidationError{
					field:  "WorkflowTask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkflowTask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RespondWorkflowTaskCompletedResponseValidationError{
				field:  "WorkflowTask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetActivityTasks() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RespondWorkflowTaskCompletedResponseValidationError{
						field:  fmt.Sprintf("ActivityTasks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RespondWorkflowTaskCompletedResponseValidationError{
						field:  fmt.Sprintf("ActivityTasks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RespondWorkflowTaskCompletedResponseValidationError{
					field:  fmt.Sprintf("ActivityTasks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for ResetHistoryEventId

	if len(errors) > 0 {
		return RespondWorkflowTaskCompletedResponseMultiError(errors)
	}

	return nil
}

// RespondWorkflowTaskCompletedResponseMultiError is an error wrapping multiple
// validation errors returned by
// RespondWorkflowTaskCompletedResponse.ValidateAll() if the designated
// constraints aren't met.
type RespondWorkflowTaskCompletedResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RespondWorkflowTaskCompletedResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RespondWorkflowTaskCompletedResponseMultiError) AllErrors() []error { return m }

// RespondWorkflowTaskCompletedResponseValidationError is the validation error
// returned by RespondWorkflowTaskCompletedResponse.Validate if the designated
// constraints aren't met.
type RespondWorkflowTaskCompletedResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RespondWorkflowTaskCompletedResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RespondWorkflowTaskCompletedResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RespondWorkflowTaskCompletedResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RespondWorkflowTaskCompletedResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RespondWorkflowTaskCompletedResponseValidationError) ErrorName() string {
	return "RespondWorkflowTaskCompletedResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RespondWorkflowTaskCompletedResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRespondWorkflowTaskCompletedResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RespondWorkflowTaskCompletedResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RespondWorkflowTaskCompletedResponseValidationError{}

// Validate checks the field values on RespondWorkflowTaskFailedRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *RespondWorkflowTaskFailedRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RespondWorkflowTaskFailedRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RespondWorkflowTaskFailedRequestMultiError, or nil if none found.
func (m *RespondWorkflowTaskFailedRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RespondWorkflowTaskFailedRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TaskToken

	// no validation rules for Cause

	if all {
		switch v := interface{}(m.GetFailure()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RespondWorkflowTaskFailedRequestValidationError{
					field:  "Failure",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RespondWorkflowTaskFailedRequestValidationError{
					field:  "Failure",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFailure()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RespondWorkflowTaskFailedRequestValidationError{
				field:  "Failure",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Identity

	// no validation rules for BinaryChecksum

	// no validation rules for Namespace

	for idx, item := range m.GetMessages() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RespondWorkflowTaskFailedRequestValidationError{
						field:  fmt.Sprintf("Messages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RespondWorkflowTaskFailedRequestValidationError{
						field:  fmt.Sprintf("Messages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RespondWorkflowTaskFailedRequestValidationError{
					field:  fmt.Sprintf("Messages[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetWorkerVersion()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RespondWorkflowTaskFailedRequestValidationError{
					field:  "WorkerVersion",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RespondWorkflowTaskFailedRequestValidationError{
					field:  "WorkerVersion",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkerVersion()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RespondWorkflowTaskFailedRequestValidationError{
				field:  "WorkerVersion",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RespondWorkflowTaskFailedRequestMultiError(errors)
	}

	return nil
}

// RespondWorkflowTaskFailedRequestMultiError is an error wrapping multiple
// validation errors returned by
// RespondWorkflowTaskFailedRequest.ValidateAll() if the designated
// constraints aren't met.
type RespondWorkflowTaskFailedRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RespondWorkflowTaskFailedRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RespondWorkflowTaskFailedRequestMultiError) AllErrors() []error { return m }

// RespondWorkflowTaskFailedRequestValidationError is the validation error
// returned by RespondWorkflowTaskFailedRequest.Validate if the designated
// constraints aren't met.
type RespondWorkflowTaskFailedRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RespondWorkflowTaskFailedRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RespondWorkflowTaskFailedRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RespondWorkflowTaskFailedRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RespondWorkflowTaskFailedRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RespondWorkflowTaskFailedRequestValidationError) ErrorName() string {
	return "RespondWorkflowTaskFailedRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RespondWorkflowTaskFailedRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRespondWorkflowTaskFailedRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RespondWorkflowTaskFailedRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RespondWorkflowTaskFailedRequestValidationError{}

// Validate checks the field values on RespondWorkflowTaskFailedResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *RespondWorkflowTaskFailedResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RespondWorkflowTaskFailedResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// RespondWorkflowTaskFailedResponseMultiError, or nil if none found.
func (m *RespondWorkflowTaskFailedResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RespondWorkflowTaskFailedResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RespondWorkflowTaskFailedResponseMultiError(errors)
	}

	return nil
}

// RespondWorkflowTaskFailedResponseMultiError is an error wrapping multiple
// validation errors returned by
// RespondWorkflowTaskFailedResponse.ValidateAll() if the designated
// constraints aren't met.
type RespondWorkflowTaskFailedResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RespondWorkflowTaskFailedResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RespondWorkflowTaskFailedResponseMultiError) AllErrors() []error { return m }

// RespondWorkflowTaskFailedResponseValidationError is the validation error
// returned by RespondWorkflowTaskFailedResponse.Validate if the designated
// constraints aren't met.
type RespondWorkflowTaskFailedResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RespondWorkflowTaskFailedResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RespondWorkflowTaskFailedResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RespondWorkflowTaskFailedResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RespondWorkflowTaskFailedResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RespondWorkflowTaskFailedResponseValidationError) ErrorName() string {
	return "RespondWorkflowTaskFailedResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RespondWorkflowTaskFailedResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRespondWorkflowTaskFailedResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RespondWorkflowTaskFailedResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RespondWorkflowTaskFailedResponseValidationError{}

// Validate checks the field values on PollActivityTaskQueueRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PollActivityTaskQueueRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PollActivityTaskQueueRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PollActivityTaskQueueRequestMultiError, or nil if none found.
func (m *PollActivityTaskQueueRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PollActivityTaskQueueRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Namespace

	if all {
		switch v := interface{}(m.GetTaskQueue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PollActivityTaskQueueRequestValidationError{
					field:  "TaskQueue",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PollActivityTaskQueueRequestValidationError{
					field:  "TaskQueue",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTaskQueue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PollActivityTaskQueueRequestValidationError{
				field:  "TaskQueue",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Identity

	if all {
		switch v := interface{}(m.GetTaskQueueMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PollActivityTaskQueueRequestValidationError{
					field:  "TaskQueueMetadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PollActivityTaskQueueRequestValidationError{
					field:  "TaskQueueMetadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTaskQueueMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PollActivityTaskQueueRequestValidationError{
				field:  "TaskQueueMetadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetWorkerVersionCapabilities()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PollActivityTaskQueueRequestValidationError{
					field:  "WorkerVersionCapabilities",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PollActivityTaskQueueRequestValidationError{
					field:  "WorkerVersionCapabilities",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkerVersionCapabilities()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PollActivityTaskQueueRequestValidationError{
				field:  "WorkerVersionCapabilities",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PollActivityTaskQueueRequestMultiError(errors)
	}

	return nil
}

// PollActivityTaskQueueRequestMultiError is an error wrapping multiple
// validation errors returned by PollActivityTaskQueueRequest.ValidateAll() if
// the designated constraints aren't met.
type PollActivityTaskQueueRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PollActivityTaskQueueRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PollActivityTaskQueueRequestMultiError) AllErrors() []error { return m }

// PollActivityTaskQueueRequestValidationError is the validation error returned
// by PollActivityTaskQueueRequest.Validate if the designated constraints
// aren't met.
type PollActivityTaskQueueRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PollActivityTaskQueueRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PollActivityTaskQueueRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PollActivityTaskQueueRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PollActivityTaskQueueRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PollActivityTaskQueueRequestValidationError) ErrorName() string {
	return "PollActivityTaskQueueRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PollActivityTaskQueueRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPollActivityTaskQueueRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PollActivityTaskQueueRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PollActivityTaskQueueRequestValidationError{}

// Validate checks the field values on PollActivityTaskQueueResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PollActivityTaskQueueResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PollActivityTaskQueueResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// PollActivityTaskQueueResponseMultiError, or nil if none found.
func (m *PollActivityTaskQueueResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PollActivityTaskQueueResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TaskToken

	// no validation rules for WorkflowNamespace

	if all {
		switch v := interface{}(m.GetWorkflowType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PollActivityTaskQueueResponseValidationError{
					field:  "WorkflowType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PollActivityTaskQueueResponseValidationError{
					field:  "WorkflowType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkflowType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PollActivityTaskQueueResponseValidationError{
				field:  "WorkflowType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetWorkflowExecution()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PollActivityTaskQueueResponseValidationError{
					field:  "WorkflowExecution",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PollActivityTaskQueueResponseValidationError{
					field:  "WorkflowExecution",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkflowExecution()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PollActivityTaskQueueResponseValidationError{
				field:  "WorkflowExecution",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetActivityType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PollActivityTaskQueueResponseValidationError{
					field:  "ActivityType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PollActivityTaskQueueResponseValidationError{
					field:  "ActivityType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetActivityType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PollActivityTaskQueueResponseValidationError{
				field:  "ActivityType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ActivityId

	if all {
		switch v := interface{}(m.GetHeader()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PollActivityTaskQueueResponseValidationError{
					field:  "Header",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PollActivityTaskQueueResponseValidationError{
					field:  "Header",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHeader()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PollActivityTaskQueueResponseValidationError{
				field:  "Header",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetInput()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PollActivityTaskQueueResponseValidationError{
					field:  "Input",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PollActivityTaskQueueResponseValidationError{
					field:  "Input",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInput()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PollActivityTaskQueueResponseValidationError{
				field:  "Input",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetHeartbeatDetails()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PollActivityTaskQueueResponseValidationError{
					field:  "HeartbeatDetails",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PollActivityTaskQueueResponseValidationError{
					field:  "HeartbeatDetails",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHeartbeatDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PollActivityTaskQueueResponseValidationError{
				field:  "HeartbeatDetails",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetScheduledTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PollActivityTaskQueueResponseValidationError{
					field:  "ScheduledTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PollActivityTaskQueueResponseValidationError{
					field:  "ScheduledTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetScheduledTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PollActivityTaskQueueResponseValidationError{
				field:  "ScheduledTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCurrentAttemptScheduledTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PollActivityTaskQueueResponseValidationError{
					field:  "CurrentAttemptScheduledTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PollActivityTaskQueueResponseValidationError{
					field:  "CurrentAttemptScheduledTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCurrentAttemptScheduledTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PollActivityTaskQueueResponseValidationError{
				field:  "CurrentAttemptScheduledTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStartedTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PollActivityTaskQueueResponseValidationError{
					field:  "StartedTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PollActivityTaskQueueResponseValidationError{
					field:  "StartedTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartedTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PollActivityTaskQueueResponseValidationError{
				field:  "StartedTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Attempt

	if all {
		switch v := interface{}(m.GetScheduleToCloseTimeout()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PollActivityTaskQueueResponseValidationError{
					field:  "ScheduleToCloseTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PollActivityTaskQueueResponseValidationError{
					field:  "ScheduleToCloseTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetScheduleToCloseTimeout()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PollActivityTaskQueueResponseValidationError{
				field:  "ScheduleToCloseTimeout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStartToCloseTimeout()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PollActivityTaskQueueResponseValidationError{
					field:  "StartToCloseTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PollActivityTaskQueueResponseValidationError{
					field:  "StartToCloseTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartToCloseTimeout()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PollActivityTaskQueueResponseValidationError{
				field:  "StartToCloseTimeout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetHeartbeatTimeout()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PollActivityTaskQueueResponseValidationError{
					field:  "HeartbeatTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PollActivityTaskQueueResponseValidationError{
					field:  "HeartbeatTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHeartbeatTimeout()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PollActivityTaskQueueResponseValidationError{
				field:  "HeartbeatTimeout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRetryPolicy()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PollActivityTaskQueueResponseValidationError{
					field:  "RetryPolicy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PollActivityTaskQueueResponseValidationError{
					field:  "RetryPolicy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRetryPolicy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PollActivityTaskQueueResponseValidationError{
				field:  "RetryPolicy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PollActivityTaskQueueResponseMultiError(errors)
	}

	return nil
}

// PollActivityTaskQueueResponseMultiError is an error wrapping multiple
// validation errors returned by PollActivityTaskQueueResponse.ValidateAll()
// if the designated constraints aren't met.
type PollActivityTaskQueueResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PollActivityTaskQueueResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PollActivityTaskQueueResponseMultiError) AllErrors() []error { return m }

// PollActivityTaskQueueResponseValidationError is the validation error
// returned by PollActivityTaskQueueResponse.Validate if the designated
// constraints aren't met.
type PollActivityTaskQueueResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PollActivityTaskQueueResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PollActivityTaskQueueResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PollActivityTaskQueueResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PollActivityTaskQueueResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PollActivityTaskQueueResponseValidationError) ErrorName() string {
	return "PollActivityTaskQueueResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PollActivityTaskQueueResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPollActivityTaskQueueResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PollActivityTaskQueueResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PollActivityTaskQueueResponseValidationError{}

// Validate checks the field values on RecordActivityTaskHeartbeatRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *RecordActivityTaskHeartbeatRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RecordActivityTaskHeartbeatRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// RecordActivityTaskHeartbeatRequestMultiError, or nil if none found.
func (m *RecordActivityTaskHeartbeatRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RecordActivityTaskHeartbeatRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TaskToken

	if all {
		switch v := interface{}(m.GetDetails()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RecordActivityTaskHeartbeatRequestValidationError{
					field:  "Details",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RecordActivityTaskHeartbeatRequestValidationError{
					field:  "Details",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RecordActivityTaskHeartbeatRequestValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Identity

	// no validation rules for Namespace

	if len(errors) > 0 {
		return RecordActivityTaskHeartbeatRequestMultiError(errors)
	}

	return nil
}

// RecordActivityTaskHeartbeatRequestMultiError is an error wrapping multiple
// validation errors returned by
// RecordActivityTaskHeartbeatRequest.ValidateAll() if the designated
// constraints aren't met.
type RecordActivityTaskHeartbeatRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RecordActivityTaskHeartbeatRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RecordActivityTaskHeartbeatRequestMultiError) AllErrors() []error { return m }

// RecordActivityTaskHeartbeatRequestValidationError is the validation error
// returned by RecordActivityTaskHeartbeatRequest.Validate if the designated
// constraints aren't met.
type RecordActivityTaskHeartbeatRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RecordActivityTaskHeartbeatRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RecordActivityTaskHeartbeatRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RecordActivityTaskHeartbeatRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RecordActivityTaskHeartbeatRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RecordActivityTaskHeartbeatRequestValidationError) ErrorName() string {
	return "RecordActivityTaskHeartbeatRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RecordActivityTaskHeartbeatRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRecordActivityTaskHeartbeatRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RecordActivityTaskHeartbeatRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RecordActivityTaskHeartbeatRequestValidationError{}

// Validate checks the field values on RecordActivityTaskHeartbeatResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *RecordActivityTaskHeartbeatResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RecordActivityTaskHeartbeatResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// RecordActivityTaskHeartbeatResponseMultiError, or nil if none found.
func (m *RecordActivityTaskHeartbeatResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RecordActivityTaskHeartbeatResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CancelRequested

	if len(errors) > 0 {
		return RecordActivityTaskHeartbeatResponseMultiError(errors)
	}

	return nil
}

// RecordActivityTaskHeartbeatResponseMultiError is an error wrapping multiple
// validation errors returned by
// RecordActivityTaskHeartbeatResponse.ValidateAll() if the designated
// constraints aren't met.
type RecordActivityTaskHeartbeatResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RecordActivityTaskHeartbeatResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RecordActivityTaskHeartbeatResponseMultiError) AllErrors() []error { return m }

// RecordActivityTaskHeartbeatResponseValidationError is the validation error
// returned by RecordActivityTaskHeartbeatResponse.Validate if the designated
// constraints aren't met.
type RecordActivityTaskHeartbeatResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RecordActivityTaskHeartbeatResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RecordActivityTaskHeartbeatResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RecordActivityTaskHeartbeatResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RecordActivityTaskHeartbeatResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RecordActivityTaskHeartbeatResponseValidationError) ErrorName() string {
	return "RecordActivityTaskHeartbeatResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RecordActivityTaskHeartbeatResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRecordActivityTaskHeartbeatResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RecordActivityTaskHeartbeatResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RecordActivityTaskHeartbeatResponseValidationError{}

// Validate checks the field values on RecordActivityTaskHeartbeatByIdRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *RecordActivityTaskHeartbeatByIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// RecordActivityTaskHeartbeatByIdRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// RecordActivityTaskHeartbeatByIdRequestMultiError, or nil if none found.
func (m *RecordActivityTaskHeartbeatByIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RecordActivityTaskHeartbeatByIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Namespace

	// no validation rules for WorkflowId

	// no validation rules for RunId

	// no validation rules for ActivityId

	if all {
		switch v := interface{}(m.GetDetails()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RecordActivityTaskHeartbeatByIdRequestValidationError{
					field:  "Details",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RecordActivityTaskHeartbeatByIdRequestValidationError{
					field:  "Details",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RecordActivityTaskHeartbeatByIdRequestValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Identity

	if len(errors) > 0 {
		return RecordActivityTaskHeartbeatByIdRequestMultiError(errors)
	}

	return nil
}

// RecordActivityTaskHeartbeatByIdRequestMultiError is an error wrapping
// multiple validation errors returned by
// RecordActivityTaskHeartbeatByIdRequest.ValidateAll() if the designated
// constraints aren't met.
type RecordActivityTaskHeartbeatByIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RecordActivityTaskHeartbeatByIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RecordActivityTaskHeartbeatByIdRequestMultiError) AllErrors() []error { return m }

// RecordActivityTaskHeartbeatByIdRequestValidationError is the validation
// error returned by RecordActivityTaskHeartbeatByIdRequest.Validate if the
// designated constraints aren't met.
type RecordActivityTaskHeartbeatByIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RecordActivityTaskHeartbeatByIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RecordActivityTaskHeartbeatByIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RecordActivityTaskHeartbeatByIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RecordActivityTaskHeartbeatByIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RecordActivityTaskHeartbeatByIdRequestValidationError) ErrorName() string {
	return "RecordActivityTaskHeartbeatByIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RecordActivityTaskHeartbeatByIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRecordActivityTaskHeartbeatByIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RecordActivityTaskHeartbeatByIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RecordActivityTaskHeartbeatByIdRequestValidationError{}

// Validate checks the field values on RecordActivityTaskHeartbeatByIdResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *RecordActivityTaskHeartbeatByIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// RecordActivityTaskHeartbeatByIdResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// RecordActivityTaskHeartbeatByIdResponseMultiError, or nil if none found.
func (m *RecordActivityTaskHeartbeatByIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RecordActivityTaskHeartbeatByIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CancelRequested

	if len(errors) > 0 {
		return RecordActivityTaskHeartbeatByIdResponseMultiError(errors)
	}

	return nil
}

// RecordActivityTaskHeartbeatByIdResponseMultiError is an error wrapping
// multiple validation errors returned by
// RecordActivityTaskHeartbeatByIdResponse.ValidateAll() if the designated
// constraints aren't met.
type RecordActivityTaskHeartbeatByIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RecordActivityTaskHeartbeatByIdResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RecordActivityTaskHeartbeatByIdResponseMultiError) AllErrors() []error { return m }

// RecordActivityTaskHeartbeatByIdResponseValidationError is the validation
// error returned by RecordActivityTaskHeartbeatByIdResponse.Validate if the
// designated constraints aren't met.
type RecordActivityTaskHeartbeatByIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RecordActivityTaskHeartbeatByIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RecordActivityTaskHeartbeatByIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RecordActivityTaskHeartbeatByIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RecordActivityTaskHeartbeatByIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RecordActivityTaskHeartbeatByIdResponseValidationError) ErrorName() string {
	return "RecordActivityTaskHeartbeatByIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RecordActivityTaskHeartbeatByIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRecordActivityTaskHeartbeatByIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RecordActivityTaskHeartbeatByIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RecordActivityTaskHeartbeatByIdResponseValidationError{}

// Validate checks the field values on RespondActivityTaskCompletedRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *RespondActivityTaskCompletedRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RespondActivityTaskCompletedRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// RespondActivityTaskCompletedRequestMultiError, or nil if none found.
func (m *RespondActivityTaskCompletedRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RespondActivityTaskCompletedRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TaskToken

	if all {
		switch v := interface{}(m.GetResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RespondActivityTaskCompletedRequestValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RespondActivityTaskCompletedRequestValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RespondActivityTaskCompletedRequestValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Identity

	// no validation rules for Namespace

	if all {
		switch v := interface{}(m.GetWorkerVersion()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RespondActivityTaskCompletedRequestValidationError{
					field:  "WorkerVersion",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RespondActivityTaskCompletedRequestValidationError{
					field:  "WorkerVersion",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkerVersion()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RespondActivityTaskCompletedRequestValidationError{
				field:  "WorkerVersion",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RespondActivityTaskCompletedRequestMultiError(errors)
	}

	return nil
}

// RespondActivityTaskCompletedRequestMultiError is an error wrapping multiple
// validation errors returned by
// RespondActivityTaskCompletedRequest.ValidateAll() if the designated
// constraints aren't met.
type RespondActivityTaskCompletedRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RespondActivityTaskCompletedRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RespondActivityTaskCompletedRequestMultiError) AllErrors() []error { return m }

// RespondActivityTaskCompletedRequestValidationError is the validation error
// returned by RespondActivityTaskCompletedRequest.Validate if the designated
// constraints aren't met.
type RespondActivityTaskCompletedRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RespondActivityTaskCompletedRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RespondActivityTaskCompletedRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RespondActivityTaskCompletedRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RespondActivityTaskCompletedRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RespondActivityTaskCompletedRequestValidationError) ErrorName() string {
	return "RespondActivityTaskCompletedRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RespondActivityTaskCompletedRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRespondActivityTaskCompletedRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RespondActivityTaskCompletedRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RespondActivityTaskCompletedRequestValidationError{}

// Validate checks the field values on RespondActivityTaskCompletedResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *RespondActivityTaskCompletedResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RespondActivityTaskCompletedResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// RespondActivityTaskCompletedResponseMultiError, or nil if none found.
func (m *RespondActivityTaskCompletedResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RespondActivityTaskCompletedResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RespondActivityTaskCompletedResponseMultiError(errors)
	}

	return nil
}

// RespondActivityTaskCompletedResponseMultiError is an error wrapping multiple
// validation errors returned by
// RespondActivityTaskCompletedResponse.ValidateAll() if the designated
// constraints aren't met.
type RespondActivityTaskCompletedResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RespondActivityTaskCompletedResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RespondActivityTaskCompletedResponseMultiError) AllErrors() []error { return m }

// RespondActivityTaskCompletedResponseValidationError is the validation error
// returned by RespondActivityTaskCompletedResponse.Validate if the designated
// constraints aren't met.
type RespondActivityTaskCompletedResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RespondActivityTaskCompletedResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RespondActivityTaskCompletedResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RespondActivityTaskCompletedResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RespondActivityTaskCompletedResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RespondActivityTaskCompletedResponseValidationError) ErrorName() string {
	return "RespondActivityTaskCompletedResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RespondActivityTaskCompletedResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRespondActivityTaskCompletedResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RespondActivityTaskCompletedResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RespondActivityTaskCompletedResponseValidationError{}

// Validate checks the field values on RespondActivityTaskCompletedByIdRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *RespondActivityTaskCompletedByIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// RespondActivityTaskCompletedByIdRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// RespondActivityTaskCompletedByIdRequestMultiError, or nil if none found.
func (m *RespondActivityTaskCompletedByIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RespondActivityTaskCompletedByIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Namespace

	// no validation rules for WorkflowId

	// no validation rules for RunId

	// no validation rules for ActivityId

	if all {
		switch v := interface{}(m.GetResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RespondActivityTaskCompletedByIdRequestValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RespondActivityTaskCompletedByIdRequestValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RespondActivityTaskCompletedByIdRequestValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Identity

	if len(errors) > 0 {
		return RespondActivityTaskCompletedByIdRequestMultiError(errors)
	}

	return nil
}

// RespondActivityTaskCompletedByIdRequestMultiError is an error wrapping
// multiple validation errors returned by
// RespondActivityTaskCompletedByIdRequest.ValidateAll() if the designated
// constraints aren't met.
type RespondActivityTaskCompletedByIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RespondActivityTaskCompletedByIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RespondActivityTaskCompletedByIdRequestMultiError) AllErrors() []error { return m }

// RespondActivityTaskCompletedByIdRequestValidationError is the validation
// error returned by RespondActivityTaskCompletedByIdRequest.Validate if the
// designated constraints aren't met.
type RespondActivityTaskCompletedByIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RespondActivityTaskCompletedByIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RespondActivityTaskCompletedByIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RespondActivityTaskCompletedByIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RespondActivityTaskCompletedByIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RespondActivityTaskCompletedByIdRequestValidationError) ErrorName() string {
	return "RespondActivityTaskCompletedByIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RespondActivityTaskCompletedByIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRespondActivityTaskCompletedByIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RespondActivityTaskCompletedByIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RespondActivityTaskCompletedByIdRequestValidationError{}

// Validate checks the field values on RespondActivityTaskCompletedByIdResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *RespondActivityTaskCompletedByIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// RespondActivityTaskCompletedByIdResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// RespondActivityTaskCompletedByIdResponseMultiError, or nil if none found.
func (m *RespondActivityTaskCompletedByIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RespondActivityTaskCompletedByIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RespondActivityTaskCompletedByIdResponseMultiError(errors)
	}

	return nil
}

// RespondActivityTaskCompletedByIdResponseMultiError is an error wrapping
// multiple validation errors returned by
// RespondActivityTaskCompletedByIdResponse.ValidateAll() if the designated
// constraints aren't met.
type RespondActivityTaskCompletedByIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RespondActivityTaskCompletedByIdResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RespondActivityTaskCompletedByIdResponseMultiError) AllErrors() []error { return m }

// RespondActivityTaskCompletedByIdResponseValidationError is the validation
// error returned by RespondActivityTaskCompletedByIdResponse.Validate if the
// designated constraints aren't met.
type RespondActivityTaskCompletedByIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RespondActivityTaskCompletedByIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RespondActivityTaskCompletedByIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RespondActivityTaskCompletedByIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RespondActivityTaskCompletedByIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RespondActivityTaskCompletedByIdResponseValidationError) ErrorName() string {
	return "RespondActivityTaskCompletedByIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RespondActivityTaskCompletedByIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRespondActivityTaskCompletedByIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RespondActivityTaskCompletedByIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RespondActivityTaskCompletedByIdResponseValidationError{}

// Validate checks the field values on RespondActivityTaskFailedRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *RespondActivityTaskFailedRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RespondActivityTaskFailedRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RespondActivityTaskFailedRequestMultiError, or nil if none found.
func (m *RespondActivityTaskFailedRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RespondActivityTaskFailedRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TaskToken

	if all {
		switch v := interface{}(m.GetFailure()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RespondActivityTaskFailedRequestValidationError{
					field:  "Failure",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RespondActivityTaskFailedRequestValidationError{
					field:  "Failure",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFailure()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RespondActivityTaskFailedRequestValidationError{
				field:  "Failure",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Identity

	// no validation rules for Namespace

	if all {
		switch v := interface{}(m.GetLastHeartbeatDetails()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RespondActivityTaskFailedRequestValidationError{
					field:  "LastHeartbeatDetails",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RespondActivityTaskFailedRequestValidationError{
					field:  "LastHeartbeatDetails",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLastHeartbeatDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RespondActivityTaskFailedRequestValidationError{
				field:  "LastHeartbeatDetails",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetWorkerVersion()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RespondActivityTaskFailedRequestValidationError{
					field:  "WorkerVersion",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RespondActivityTaskFailedRequestValidationError{
					field:  "WorkerVersion",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkerVersion()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RespondActivityTaskFailedRequestValidationError{
				field:  "WorkerVersion",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RespondActivityTaskFailedRequestMultiError(errors)
	}

	return nil
}

// RespondActivityTaskFailedRequestMultiError is an error wrapping multiple
// validation errors returned by
// RespondActivityTaskFailedRequest.ValidateAll() if the designated
// constraints aren't met.
type RespondActivityTaskFailedRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RespondActivityTaskFailedRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RespondActivityTaskFailedRequestMultiError) AllErrors() []error { return m }

// RespondActivityTaskFailedRequestValidationError is the validation error
// returned by RespondActivityTaskFailedRequest.Validate if the designated
// constraints aren't met.
type RespondActivityTaskFailedRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RespondActivityTaskFailedRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RespondActivityTaskFailedRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RespondActivityTaskFailedRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RespondActivityTaskFailedRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RespondActivityTaskFailedRequestValidationError) ErrorName() string {
	return "RespondActivityTaskFailedRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RespondActivityTaskFailedRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRespondActivityTaskFailedRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RespondActivityTaskFailedRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RespondActivityTaskFailedRequestValidationError{}

// Validate checks the field values on RespondActivityTaskFailedResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *RespondActivityTaskFailedResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RespondActivityTaskFailedResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// RespondActivityTaskFailedResponseMultiError, or nil if none found.
func (m *RespondActivityTaskFailedResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RespondActivityTaskFailedResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetFailures() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RespondActivityTaskFailedResponseValidationError{
						field:  fmt.Sprintf("Failures[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RespondActivityTaskFailedResponseValidationError{
						field:  fmt.Sprintf("Failures[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RespondActivityTaskFailedResponseValidationError{
					field:  fmt.Sprintf("Failures[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RespondActivityTaskFailedResponseMultiError(errors)
	}

	return nil
}

// RespondActivityTaskFailedResponseMultiError is an error wrapping multiple
// validation errors returned by
// RespondActivityTaskFailedResponse.ValidateAll() if the designated
// constraints aren't met.
type RespondActivityTaskFailedResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RespondActivityTaskFailedResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RespondActivityTaskFailedResponseMultiError) AllErrors() []error { return m }

// RespondActivityTaskFailedResponseValidationError is the validation error
// returned by RespondActivityTaskFailedResponse.Validate if the designated
// constraints aren't met.
type RespondActivityTaskFailedResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RespondActivityTaskFailedResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RespondActivityTaskFailedResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RespondActivityTaskFailedResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RespondActivityTaskFailedResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RespondActivityTaskFailedResponseValidationError) ErrorName() string {
	return "RespondActivityTaskFailedResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RespondActivityTaskFailedResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRespondActivityTaskFailedResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RespondActivityTaskFailedResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RespondActivityTaskFailedResponseValidationError{}

// Validate checks the field values on RespondActivityTaskFailedByIdRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *RespondActivityTaskFailedByIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RespondActivityTaskFailedByIdRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// RespondActivityTaskFailedByIdRequestMultiError, or nil if none found.
func (m *RespondActivityTaskFailedByIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RespondActivityTaskFailedByIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Namespace

	// no validation rules for WorkflowId

	// no validation rules for RunId

	// no validation rules for ActivityId

	if all {
		switch v := interface{}(m.GetFailure()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RespondActivityTaskFailedByIdRequestValidationError{
					field:  "Failure",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RespondActivityTaskFailedByIdRequestValidationError{
					field:  "Failure",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFailure()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RespondActivityTaskFailedByIdRequestValidationError{
				field:  "Failure",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Identity

	if all {
		switch v := interface{}(m.GetLastHeartbeatDetails()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RespondActivityTaskFailedByIdRequestValidationError{
					field:  "LastHeartbeatDetails",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RespondActivityTaskFailedByIdRequestValidationError{
					field:  "LastHeartbeatDetails",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLastHeartbeatDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RespondActivityTaskFailedByIdRequestValidationError{
				field:  "LastHeartbeatDetails",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RespondActivityTaskFailedByIdRequestMultiError(errors)
	}

	return nil
}

// RespondActivityTaskFailedByIdRequestMultiError is an error wrapping multiple
// validation errors returned by
// RespondActivityTaskFailedByIdRequest.ValidateAll() if the designated
// constraints aren't met.
type RespondActivityTaskFailedByIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RespondActivityTaskFailedByIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RespondActivityTaskFailedByIdRequestMultiError) AllErrors() []error { return m }

// RespondActivityTaskFailedByIdRequestValidationError is the validation error
// returned by RespondActivityTaskFailedByIdRequest.Validate if the designated
// constraints aren't met.
type RespondActivityTaskFailedByIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RespondActivityTaskFailedByIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RespondActivityTaskFailedByIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RespondActivityTaskFailedByIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RespondActivityTaskFailedByIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RespondActivityTaskFailedByIdRequestValidationError) ErrorName() string {
	return "RespondActivityTaskFailedByIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RespondActivityTaskFailedByIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRespondActivityTaskFailedByIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RespondActivityTaskFailedByIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RespondActivityTaskFailedByIdRequestValidationError{}

// Validate checks the field values on RespondActivityTaskFailedByIdResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *RespondActivityTaskFailedByIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RespondActivityTaskFailedByIdResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// RespondActivityTaskFailedByIdResponseMultiError, or nil if none found.
func (m *RespondActivityTaskFailedByIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RespondActivityTaskFailedByIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetFailures() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RespondActivityTaskFailedByIdResponseValidationError{
						field:  fmt.Sprintf("Failures[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RespondActivityTaskFailedByIdResponseValidationError{
						field:  fmt.Sprintf("Failures[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RespondActivityTaskFailedByIdResponseValidationError{
					field:  fmt.Sprintf("Failures[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RespondActivityTaskFailedByIdResponseMultiError(errors)
	}

	return nil
}

// RespondActivityTaskFailedByIdResponseMultiError is an error wrapping
// multiple validation errors returned by
// RespondActivityTaskFailedByIdResponse.ValidateAll() if the designated
// constraints aren't met.
type RespondActivityTaskFailedByIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RespondActivityTaskFailedByIdResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RespondActivityTaskFailedByIdResponseMultiError) AllErrors() []error { return m }

// RespondActivityTaskFailedByIdResponseValidationError is the validation error
// returned by RespondActivityTaskFailedByIdResponse.Validate if the
// designated constraints aren't met.
type RespondActivityTaskFailedByIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RespondActivityTaskFailedByIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RespondActivityTaskFailedByIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RespondActivityTaskFailedByIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RespondActivityTaskFailedByIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RespondActivityTaskFailedByIdResponseValidationError) ErrorName() string {
	return "RespondActivityTaskFailedByIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RespondActivityTaskFailedByIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRespondActivityTaskFailedByIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RespondActivityTaskFailedByIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RespondActivityTaskFailedByIdResponseValidationError{}

// Validate checks the field values on RespondActivityTaskCanceledRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *RespondActivityTaskCanceledRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RespondActivityTaskCanceledRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// RespondActivityTaskCanceledRequestMultiError, or nil if none found.
func (m *RespondActivityTaskCanceledRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RespondActivityTaskCanceledRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TaskToken

	if all {
		switch v := interface{}(m.GetDetails()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RespondActivityTaskCanceledRequestValidationError{
					field:  "Details",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RespondActivityTaskCanceledRequestValidationError{
					field:  "Details",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RespondActivityTaskCanceledRequestValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Identity

	// no validation rules for Namespace

	if all {
		switch v := interface{}(m.GetWorkerVersion()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RespondActivityTaskCanceledRequestValidationError{
					field:  "WorkerVersion",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RespondActivityTaskCanceledRequestValidationError{
					field:  "WorkerVersion",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkerVersion()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RespondActivityTaskCanceledRequestValidationError{
				field:  "WorkerVersion",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RespondActivityTaskCanceledRequestMultiError(errors)
	}

	return nil
}

// RespondActivityTaskCanceledRequestMultiError is an error wrapping multiple
// validation errors returned by
// RespondActivityTaskCanceledRequest.ValidateAll() if the designated
// constraints aren't met.
type RespondActivityTaskCanceledRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RespondActivityTaskCanceledRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RespondActivityTaskCanceledRequestMultiError) AllErrors() []error { return m }

// RespondActivityTaskCanceledRequestValidationError is the validation error
// returned by RespondActivityTaskCanceledRequest.Validate if the designated
// constraints aren't met.
type RespondActivityTaskCanceledRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RespondActivityTaskCanceledRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RespondActivityTaskCanceledRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RespondActivityTaskCanceledRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RespondActivityTaskCanceledRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RespondActivityTaskCanceledRequestValidationError) ErrorName() string {
	return "RespondActivityTaskCanceledRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RespondActivityTaskCanceledRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRespondActivityTaskCanceledRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RespondActivityTaskCanceledRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RespondActivityTaskCanceledRequestValidationError{}

// Validate checks the field values on RespondActivityTaskCanceledResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *RespondActivityTaskCanceledResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RespondActivityTaskCanceledResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// RespondActivityTaskCanceledResponseMultiError, or nil if none found.
func (m *RespondActivityTaskCanceledResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RespondActivityTaskCanceledResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RespondActivityTaskCanceledResponseMultiError(errors)
	}

	return nil
}

// RespondActivityTaskCanceledResponseMultiError is an error wrapping multiple
// validation errors returned by
// RespondActivityTaskCanceledResponse.ValidateAll() if the designated
// constraints aren't met.
type RespondActivityTaskCanceledResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RespondActivityTaskCanceledResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RespondActivityTaskCanceledResponseMultiError) AllErrors() []error { return m }

// RespondActivityTaskCanceledResponseValidationError is the validation error
// returned by RespondActivityTaskCanceledResponse.Validate if the designated
// constraints aren't met.
type RespondActivityTaskCanceledResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RespondActivityTaskCanceledResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RespondActivityTaskCanceledResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RespondActivityTaskCanceledResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RespondActivityTaskCanceledResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RespondActivityTaskCanceledResponseValidationError) ErrorName() string {
	return "RespondActivityTaskCanceledResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RespondActivityTaskCanceledResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRespondActivityTaskCanceledResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RespondActivityTaskCanceledResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RespondActivityTaskCanceledResponseValidationError{}

// Validate checks the field values on RespondActivityTaskCanceledByIdRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *RespondActivityTaskCanceledByIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// RespondActivityTaskCanceledByIdRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// RespondActivityTaskCanceledByIdRequestMultiError, or nil if none found.
func (m *RespondActivityTaskCanceledByIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RespondActivityTaskCanceledByIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Namespace

	// no validation rules for WorkflowId

	// no validation rules for RunId

	// no validation rules for ActivityId

	if all {
		switch v := interface{}(m.GetDetails()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RespondActivityTaskCanceledByIdRequestValidationError{
					field:  "Details",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RespondActivityTaskCanceledByIdRequestValidationError{
					field:  "Details",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RespondActivityTaskCanceledByIdRequestValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Identity

	if len(errors) > 0 {
		return RespondActivityTaskCanceledByIdRequestMultiError(errors)
	}

	return nil
}

// RespondActivityTaskCanceledByIdRequestMultiError is an error wrapping
// multiple validation errors returned by
// RespondActivityTaskCanceledByIdRequest.ValidateAll() if the designated
// constraints aren't met.
type RespondActivityTaskCanceledByIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RespondActivityTaskCanceledByIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RespondActivityTaskCanceledByIdRequestMultiError) AllErrors() []error { return m }

// RespondActivityTaskCanceledByIdRequestValidationError is the validation
// error returned by RespondActivityTaskCanceledByIdRequest.Validate if the
// designated constraints aren't met.
type RespondActivityTaskCanceledByIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RespondActivityTaskCanceledByIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RespondActivityTaskCanceledByIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RespondActivityTaskCanceledByIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RespondActivityTaskCanceledByIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RespondActivityTaskCanceledByIdRequestValidationError) ErrorName() string {
	return "RespondActivityTaskCanceledByIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RespondActivityTaskCanceledByIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRespondActivityTaskCanceledByIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RespondActivityTaskCanceledByIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RespondActivityTaskCanceledByIdRequestValidationError{}

// Validate checks the field values on RespondActivityTaskCanceledByIdResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *RespondActivityTaskCanceledByIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// RespondActivityTaskCanceledByIdResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// RespondActivityTaskCanceledByIdResponseMultiError, or nil if none found.
func (m *RespondActivityTaskCanceledByIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RespondActivityTaskCanceledByIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RespondActivityTaskCanceledByIdResponseMultiError(errors)
	}

	return nil
}

// RespondActivityTaskCanceledByIdResponseMultiError is an error wrapping
// multiple validation errors returned by
// RespondActivityTaskCanceledByIdResponse.ValidateAll() if the designated
// constraints aren't met.
type RespondActivityTaskCanceledByIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RespondActivityTaskCanceledByIdResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RespondActivityTaskCanceledByIdResponseMultiError) AllErrors() []error { return m }

// RespondActivityTaskCanceledByIdResponseValidationError is the validation
// error returned by RespondActivityTaskCanceledByIdResponse.Validate if the
// designated constraints aren't met.
type RespondActivityTaskCanceledByIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RespondActivityTaskCanceledByIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RespondActivityTaskCanceledByIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RespondActivityTaskCanceledByIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RespondActivityTaskCanceledByIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RespondActivityTaskCanceledByIdResponseValidationError) ErrorName() string {
	return "RespondActivityTaskCanceledByIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RespondActivityTaskCanceledByIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRespondActivityTaskCanceledByIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RespondActivityTaskCanceledByIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RespondActivityTaskCanceledByIdResponseValidationError{}

// Validate checks the field values on RequestCancelWorkflowExecutionRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *RequestCancelWorkflowExecutionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RequestCancelWorkflowExecutionRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// RequestCancelWorkflowExecutionRequestMultiError, or nil if none found.
func (m *RequestCancelWorkflowExecutionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RequestCancelWorkflowExecutionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Namespace

	if all {
		switch v := interface{}(m.GetWorkflowExecution()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RequestCancelWorkflowExecutionRequestValidationError{
					field:  "WorkflowExecution",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RequestCancelWorkflowExecutionRequestValidationError{
					field:  "WorkflowExecution",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkflowExecution()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RequestCancelWorkflowExecutionRequestValidationError{
				field:  "WorkflowExecution",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Identity

	// no validation rules for RequestId

	// no validation rules for FirstExecutionRunId

	// no validation rules for Reason

	if len(errors) > 0 {
		return RequestCancelWorkflowExecutionRequestMultiError(errors)
	}

	return nil
}

// RequestCancelWorkflowExecutionRequestMultiError is an error wrapping
// multiple validation errors returned by
// RequestCancelWorkflowExecutionRequest.ValidateAll() if the designated
// constraints aren't met.
type RequestCancelWorkflowExecutionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RequestCancelWorkflowExecutionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RequestCancelWorkflowExecutionRequestMultiError) AllErrors() []error { return m }

// RequestCancelWorkflowExecutionRequestValidationError is the validation error
// returned by RequestCancelWorkflowExecutionRequest.Validate if the
// designated constraints aren't met.
type RequestCancelWorkflowExecutionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestCancelWorkflowExecutionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequestCancelWorkflowExecutionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequestCancelWorkflowExecutionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequestCancelWorkflowExecutionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequestCancelWorkflowExecutionRequestValidationError) ErrorName() string {
	return "RequestCancelWorkflowExecutionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RequestCancelWorkflowExecutionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequestCancelWorkflowExecutionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestCancelWorkflowExecutionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestCancelWorkflowExecutionRequestValidationError{}

// Validate checks the field values on RequestCancelWorkflowExecutionResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *RequestCancelWorkflowExecutionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// RequestCancelWorkflowExecutionResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// RequestCancelWorkflowExecutionResponseMultiError, or nil if none found.
func (m *RequestCancelWorkflowExecutionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RequestCancelWorkflowExecutionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RequestCancelWorkflowExecutionResponseMultiError(errors)
	}

	return nil
}

// RequestCancelWorkflowExecutionResponseMultiError is an error wrapping
// multiple validation errors returned by
// RequestCancelWorkflowExecutionResponse.ValidateAll() if the designated
// constraints aren't met.
type RequestCancelWorkflowExecutionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RequestCancelWorkflowExecutionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RequestCancelWorkflowExecutionResponseMultiError) AllErrors() []error { return m }

// RequestCancelWorkflowExecutionResponseValidationError is the validation
// error returned by RequestCancelWorkflowExecutionResponse.Validate if the
// designated constraints aren't met.
type RequestCancelWorkflowExecutionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestCancelWorkflowExecutionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequestCancelWorkflowExecutionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequestCancelWorkflowExecutionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequestCancelWorkflowExecutionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequestCancelWorkflowExecutionResponseValidationError) ErrorName() string {
	return "RequestCancelWorkflowExecutionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RequestCancelWorkflowExecutionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequestCancelWorkflowExecutionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestCancelWorkflowExecutionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestCancelWorkflowExecutionResponseValidationError{}

// Validate checks the field values on SignalWorkflowExecutionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SignalWorkflowExecutionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SignalWorkflowExecutionRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SignalWorkflowExecutionRequestMultiError, or nil if none found.
func (m *SignalWorkflowExecutionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SignalWorkflowExecutionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Namespace

	if all {
		switch v := interface{}(m.GetWorkflowExecution()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SignalWorkflowExecutionRequestValidationError{
					field:  "WorkflowExecution",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SignalWorkflowExecutionRequestValidationError{
					field:  "WorkflowExecution",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkflowExecution()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SignalWorkflowExecutionRequestValidationError{
				field:  "WorkflowExecution",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for SignalName

	if all {
		switch v := interface{}(m.GetInput()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SignalWorkflowExecutionRequestValidationError{
					field:  "Input",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SignalWorkflowExecutionRequestValidationError{
					field:  "Input",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInput()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SignalWorkflowExecutionRequestValidationError{
				field:  "Input",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Identity

	// no validation rules for RequestId

	// no validation rules for Control

	if all {
		switch v := interface{}(m.GetHeader()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SignalWorkflowExecutionRequestValidationError{
					field:  "Header",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SignalWorkflowExecutionRequestValidationError{
					field:  "Header",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHeader()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SignalWorkflowExecutionRequestValidationError{
				field:  "Header",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for SkipGenerateWorkflowTask

	if len(errors) > 0 {
		return SignalWorkflowExecutionRequestMultiError(errors)
	}

	return nil
}

// SignalWorkflowExecutionRequestMultiError is an error wrapping multiple
// validation errors returned by SignalWorkflowExecutionRequest.ValidateAll()
// if the designated constraints aren't met.
type SignalWorkflowExecutionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SignalWorkflowExecutionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SignalWorkflowExecutionRequestMultiError) AllErrors() []error { return m }

// SignalWorkflowExecutionRequestValidationError is the validation error
// returned by SignalWorkflowExecutionRequest.Validate if the designated
// constraints aren't met.
type SignalWorkflowExecutionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SignalWorkflowExecutionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SignalWorkflowExecutionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SignalWorkflowExecutionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SignalWorkflowExecutionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SignalWorkflowExecutionRequestValidationError) ErrorName() string {
	return "SignalWorkflowExecutionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SignalWorkflowExecutionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSignalWorkflowExecutionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SignalWorkflowExecutionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SignalWorkflowExecutionRequestValidationError{}

// Validate checks the field values on SignalWorkflowExecutionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SignalWorkflowExecutionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SignalWorkflowExecutionResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SignalWorkflowExecutionResponseMultiError, or nil if none found.
func (m *SignalWorkflowExecutionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SignalWorkflowExecutionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SignalWorkflowExecutionResponseMultiError(errors)
	}

	return nil
}

// SignalWorkflowExecutionResponseMultiError is an error wrapping multiple
// validation errors returned by SignalWorkflowExecutionResponse.ValidateAll()
// if the designated constraints aren't met.
type SignalWorkflowExecutionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SignalWorkflowExecutionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SignalWorkflowExecutionResponseMultiError) AllErrors() []error { return m }

// SignalWorkflowExecutionResponseValidationError is the validation error
// returned by SignalWorkflowExecutionResponse.Validate if the designated
// constraints aren't met.
type SignalWorkflowExecutionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SignalWorkflowExecutionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SignalWorkflowExecutionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SignalWorkflowExecutionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SignalWorkflowExecutionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SignalWorkflowExecutionResponseValidationError) ErrorName() string {
	return "SignalWorkflowExecutionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SignalWorkflowExecutionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSignalWorkflowExecutionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SignalWorkflowExecutionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SignalWorkflowExecutionResponseValidationError{}

// Validate checks the field values on SignalWithStartWorkflowExecutionRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *SignalWithStartWorkflowExecutionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SignalWithStartWorkflowExecutionRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// SignalWithStartWorkflowExecutionRequestMultiError, or nil if none found.
func (m *SignalWithStartWorkflowExecutionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SignalWithStartWorkflowExecutionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Namespace

	// no validation rules for WorkflowId

	if all {
		switch v := interface{}(m.GetWorkflowType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SignalWithStartWorkflowExecutionRequestValidationError{
					field:  "WorkflowType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SignalWithStartWorkflowExecutionRequestValidationError{
					field:  "WorkflowType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkflowType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SignalWithStartWorkflowExecutionRequestValidationError{
				field:  "WorkflowType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTaskQueue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SignalWithStartWorkflowExecutionRequestValidationError{
					field:  "TaskQueue",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SignalWithStartWorkflowExecutionRequestValidationError{
					field:  "TaskQueue",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTaskQueue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SignalWithStartWorkflowExecutionRequestValidationError{
				field:  "TaskQueue",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetInput()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SignalWithStartWorkflowExecutionRequestValidationError{
					field:  "Input",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SignalWithStartWorkflowExecutionRequestValidationError{
					field:  "Input",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInput()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SignalWithStartWorkflowExecutionRequestValidationError{
				field:  "Input",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetWorkflowExecutionTimeout()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SignalWithStartWorkflowExecutionRequestValidationError{
					field:  "WorkflowExecutionTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SignalWithStartWorkflowExecutionRequestValidationError{
					field:  "WorkflowExecutionTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkflowExecutionTimeout()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SignalWithStartWorkflowExecutionRequestValidationError{
				field:  "WorkflowExecutionTimeout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetWorkflowRunTimeout()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SignalWithStartWorkflowExecutionRequestValidationError{
					field:  "WorkflowRunTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SignalWithStartWorkflowExecutionRequestValidationError{
					field:  "WorkflowRunTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkflowRunTimeout()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SignalWithStartWorkflowExecutionRequestValidationError{
				field:  "WorkflowRunTimeout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetWorkflowTaskTimeout()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SignalWithStartWorkflowExecutionRequestValidationError{
					field:  "WorkflowTaskTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SignalWithStartWorkflowExecutionRequestValidationError{
					field:  "WorkflowTaskTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkflowTaskTimeout()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SignalWithStartWorkflowExecutionRequestValidationError{
				field:  "WorkflowTaskTimeout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Identity

	// no validation rules for RequestId

	// no validation rules for WorkflowIdReusePolicy

	// no validation rules for SignalName

	if all {
		switch v := interface{}(m.GetSignalInput()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SignalWithStartWorkflowExecutionRequestValidationError{
					field:  "SignalInput",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SignalWithStartWorkflowExecutionRequestValidationError{
					field:  "SignalInput",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSignalInput()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SignalWithStartWorkflowExecutionRequestValidationError{
				field:  "SignalInput",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Control

	if all {
		switch v := interface{}(m.GetRetryPolicy()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SignalWithStartWorkflowExecutionRequestValidationError{
					field:  "RetryPolicy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SignalWithStartWorkflowExecutionRequestValidationError{
					field:  "RetryPolicy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRetryPolicy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SignalWithStartWorkflowExecutionRequestValidationError{
				field:  "RetryPolicy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CronSchedule

	if all {
		switch v := interface{}(m.GetMemo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SignalWithStartWorkflowExecutionRequestValidationError{
					field:  "Memo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SignalWithStartWorkflowExecutionRequestValidationError{
					field:  "Memo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMemo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SignalWithStartWorkflowExecutionRequestValidationError{
				field:  "Memo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSearchAttributes()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SignalWithStartWorkflowExecutionRequestValidationError{
					field:  "SearchAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SignalWithStartWorkflowExecutionRequestValidationError{
					field:  "SearchAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSearchAttributes()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SignalWithStartWorkflowExecutionRequestValidationError{
				field:  "SearchAttributes",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetHeader()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SignalWithStartWorkflowExecutionRequestValidationError{
					field:  "Header",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SignalWithStartWorkflowExecutionRequestValidationError{
					field:  "Header",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHeader()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SignalWithStartWorkflowExecutionRequestValidationError{
				field:  "Header",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetWorkflowStartDelay()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SignalWithStartWorkflowExecutionRequestValidationError{
					field:  "WorkflowStartDelay",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SignalWithStartWorkflowExecutionRequestValidationError{
					field:  "WorkflowStartDelay",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkflowStartDelay()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SignalWithStartWorkflowExecutionRequestValidationError{
				field:  "WorkflowStartDelay",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for SkipGenerateWorkflowTask

	if len(errors) > 0 {
		return SignalWithStartWorkflowExecutionRequestMultiError(errors)
	}

	return nil
}

// SignalWithStartWorkflowExecutionRequestMultiError is an error wrapping
// multiple validation errors returned by
// SignalWithStartWorkflowExecutionRequest.ValidateAll() if the designated
// constraints aren't met.
type SignalWithStartWorkflowExecutionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SignalWithStartWorkflowExecutionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SignalWithStartWorkflowExecutionRequestMultiError) AllErrors() []error { return m }

// SignalWithStartWorkflowExecutionRequestValidationError is the validation
// error returned by SignalWithStartWorkflowExecutionRequest.Validate if the
// designated constraints aren't met.
type SignalWithStartWorkflowExecutionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SignalWithStartWorkflowExecutionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SignalWithStartWorkflowExecutionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SignalWithStartWorkflowExecutionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SignalWithStartWorkflowExecutionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SignalWithStartWorkflowExecutionRequestValidationError) ErrorName() string {
	return "SignalWithStartWorkflowExecutionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SignalWithStartWorkflowExecutionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSignalWithStartWorkflowExecutionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SignalWithStartWorkflowExecutionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SignalWithStartWorkflowExecutionRequestValidationError{}

// Validate checks the field values on SignalWithStartWorkflowExecutionResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *SignalWithStartWorkflowExecutionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SignalWithStartWorkflowExecutionResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// SignalWithStartWorkflowExecutionResponseMultiError, or nil if none found.
func (m *SignalWithStartWorkflowExecutionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SignalWithStartWorkflowExecutionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RunId

	if len(errors) > 0 {
		return SignalWithStartWorkflowExecutionResponseMultiError(errors)
	}

	return nil
}

// SignalWithStartWorkflowExecutionResponseMultiError is an error wrapping
// multiple validation errors returned by
// SignalWithStartWorkflowExecutionResponse.ValidateAll() if the designated
// constraints aren't met.
type SignalWithStartWorkflowExecutionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SignalWithStartWorkflowExecutionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SignalWithStartWorkflowExecutionResponseMultiError) AllErrors() []error { return m }

// SignalWithStartWorkflowExecutionResponseValidationError is the validation
// error returned by SignalWithStartWorkflowExecutionResponse.Validate if the
// designated constraints aren't met.
type SignalWithStartWorkflowExecutionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SignalWithStartWorkflowExecutionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SignalWithStartWorkflowExecutionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SignalWithStartWorkflowExecutionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SignalWithStartWorkflowExecutionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SignalWithStartWorkflowExecutionResponseValidationError) ErrorName() string {
	return "SignalWithStartWorkflowExecutionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SignalWithStartWorkflowExecutionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSignalWithStartWorkflowExecutionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SignalWithStartWorkflowExecutionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SignalWithStartWorkflowExecutionResponseValidationError{}

// Validate checks the field values on ResetWorkflowExecutionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResetWorkflowExecutionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResetWorkflowExecutionRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ResetWorkflowExecutionRequestMultiError, or nil if none found.
func (m *ResetWorkflowExecutionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ResetWorkflowExecutionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Namespace

	if all {
		switch v := interface{}(m.GetWorkflowExecution()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ResetWorkflowExecutionRequestValidationError{
					field:  "WorkflowExecution",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ResetWorkflowExecutionRequestValidationError{
					field:  "WorkflowExecution",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkflowExecution()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResetWorkflowExecutionRequestValidationError{
				field:  "WorkflowExecution",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Reason

	// no validation rules for WorkflowTaskFinishEventId

	// no validation rules for RequestId

	// no validation rules for ResetReapplyType

	if len(errors) > 0 {
		return ResetWorkflowExecutionRequestMultiError(errors)
	}

	return nil
}

// ResetWorkflowExecutionRequestMultiError is an error wrapping multiple
// validation errors returned by ResetWorkflowExecutionRequest.ValidateAll()
// if the designated constraints aren't met.
type ResetWorkflowExecutionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResetWorkflowExecutionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResetWorkflowExecutionRequestMultiError) AllErrors() []error { return m }

// ResetWorkflowExecutionRequestValidationError is the validation error
// returned by ResetWorkflowExecutionRequest.Validate if the designated
// constraints aren't met.
type ResetWorkflowExecutionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetWorkflowExecutionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResetWorkflowExecutionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResetWorkflowExecutionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResetWorkflowExecutionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResetWorkflowExecutionRequestValidationError) ErrorName() string {
	return "ResetWorkflowExecutionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ResetWorkflowExecutionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetWorkflowExecutionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetWorkflowExecutionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetWorkflowExecutionRequestValidationError{}

// Validate checks the field values on ResetWorkflowExecutionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResetWorkflowExecutionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResetWorkflowExecutionResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ResetWorkflowExecutionResponseMultiError, or nil if none found.
func (m *ResetWorkflowExecutionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ResetWorkflowExecutionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RunId

	if len(errors) > 0 {
		return ResetWorkflowExecutionResponseMultiError(errors)
	}

	return nil
}

// ResetWorkflowExecutionResponseMultiError is an error wrapping multiple
// validation errors returned by ResetWorkflowExecutionResponse.ValidateAll()
// if the designated constraints aren't met.
type ResetWorkflowExecutionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResetWorkflowExecutionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResetWorkflowExecutionResponseMultiError) AllErrors() []error { return m }

// ResetWorkflowExecutionResponseValidationError is the validation error
// returned by ResetWorkflowExecutionResponse.Validate if the designated
// constraints aren't met.
type ResetWorkflowExecutionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetWorkflowExecutionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResetWorkflowExecutionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResetWorkflowExecutionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResetWorkflowExecutionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResetWorkflowExecutionResponseValidationError) ErrorName() string {
	return "ResetWorkflowExecutionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ResetWorkflowExecutionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetWorkflowExecutionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetWorkflowExecutionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetWorkflowExecutionResponseValidationError{}

// Validate checks the field values on TerminateWorkflowExecutionRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *TerminateWorkflowExecutionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TerminateWorkflowExecutionRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// TerminateWorkflowExecutionRequestMultiError, or nil if none found.
func (m *TerminateWorkflowExecutionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TerminateWorkflowExecutionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Namespace

	if all {
		switch v := interface{}(m.GetWorkflowExecution()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TerminateWorkflowExecutionRequestValidationError{
					field:  "WorkflowExecution",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TerminateWorkflowExecutionRequestValidationError{
					field:  "WorkflowExecution",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkflowExecution()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TerminateWorkflowExecutionRequestValidationError{
				field:  "WorkflowExecution",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Reason

	if all {
		switch v := interface{}(m.GetDetails()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TerminateWorkflowExecutionRequestValidationError{
					field:  "Details",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TerminateWorkflowExecutionRequestValidationError{
					field:  "Details",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TerminateWorkflowExecutionRequestValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Identity

	// no validation rules for FirstExecutionRunId

	if len(errors) > 0 {
		return TerminateWorkflowExecutionRequestMultiError(errors)
	}

	return nil
}

// TerminateWorkflowExecutionRequestMultiError is an error wrapping multiple
// validation errors returned by
// TerminateWorkflowExecutionRequest.ValidateAll() if the designated
// constraints aren't met.
type TerminateWorkflowExecutionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TerminateWorkflowExecutionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TerminateWorkflowExecutionRequestMultiError) AllErrors() []error { return m }

// TerminateWorkflowExecutionRequestValidationError is the validation error
// returned by TerminateWorkflowExecutionRequest.Validate if the designated
// constraints aren't met.
type TerminateWorkflowExecutionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TerminateWorkflowExecutionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TerminateWorkflowExecutionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TerminateWorkflowExecutionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TerminateWorkflowExecutionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TerminateWorkflowExecutionRequestValidationError) ErrorName() string {
	return "TerminateWorkflowExecutionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TerminateWorkflowExecutionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTerminateWorkflowExecutionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TerminateWorkflowExecutionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TerminateWorkflowExecutionRequestValidationError{}

// Validate checks the field values on TerminateWorkflowExecutionResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *TerminateWorkflowExecutionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TerminateWorkflowExecutionResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// TerminateWorkflowExecutionResponseMultiError, or nil if none found.
func (m *TerminateWorkflowExecutionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TerminateWorkflowExecutionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return TerminateWorkflowExecutionResponseMultiError(errors)
	}

	return nil
}

// TerminateWorkflowExecutionResponseMultiError is an error wrapping multiple
// validation errors returned by
// TerminateWorkflowExecutionResponse.ValidateAll() if the designated
// constraints aren't met.
type TerminateWorkflowExecutionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TerminateWorkflowExecutionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TerminateWorkflowExecutionResponseMultiError) AllErrors() []error { return m }

// TerminateWorkflowExecutionResponseValidationError is the validation error
// returned by TerminateWorkflowExecutionResponse.Validate if the designated
// constraints aren't met.
type TerminateWorkflowExecutionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TerminateWorkflowExecutionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TerminateWorkflowExecutionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TerminateWorkflowExecutionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TerminateWorkflowExecutionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TerminateWorkflowExecutionResponseValidationError) ErrorName() string {
	return "TerminateWorkflowExecutionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TerminateWorkflowExecutionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTerminateWorkflowExecutionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TerminateWorkflowExecutionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TerminateWorkflowExecutionResponseValidationError{}

// Validate checks the field values on DeleteWorkflowExecutionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteWorkflowExecutionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteWorkflowExecutionRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteWorkflowExecutionRequestMultiError, or nil if none found.
func (m *DeleteWorkflowExecutionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteWorkflowExecutionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Namespace

	if all {
		switch v := interface{}(m.GetWorkflowExecution()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteWorkflowExecutionRequestValidationError{
					field:  "WorkflowExecution",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteWorkflowExecutionRequestValidationError{
					field:  "WorkflowExecution",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkflowExecution()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteWorkflowExecutionRequestValidationError{
				field:  "WorkflowExecution",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteWorkflowExecutionRequestMultiError(errors)
	}

	return nil
}

// DeleteWorkflowExecutionRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteWorkflowExecutionRequest.ValidateAll()
// if the designated constraints aren't met.
type DeleteWorkflowExecutionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteWorkflowExecutionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteWorkflowExecutionRequestMultiError) AllErrors() []error { return m }

// DeleteWorkflowExecutionRequestValidationError is the validation error
// returned by DeleteWorkflowExecutionRequest.Validate if the designated
// constraints aren't met.
type DeleteWorkflowExecutionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteWorkflowExecutionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteWorkflowExecutionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteWorkflowExecutionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteWorkflowExecutionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteWorkflowExecutionRequestValidationError) ErrorName() string {
	return "DeleteWorkflowExecutionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteWorkflowExecutionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteWorkflowExecutionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteWorkflowExecutionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteWorkflowExecutionRequestValidationError{}

// Validate checks the field values on DeleteWorkflowExecutionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteWorkflowExecutionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteWorkflowExecutionResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteWorkflowExecutionResponseMultiError, or nil if none found.
func (m *DeleteWorkflowExecutionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteWorkflowExecutionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteWorkflowExecutionResponseMultiError(errors)
	}

	return nil
}

// DeleteWorkflowExecutionResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteWorkflowExecutionResponse.ValidateAll()
// if the designated constraints aren't met.
type DeleteWorkflowExecutionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteWorkflowExecutionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteWorkflowExecutionResponseMultiError) AllErrors() []error { return m }

// DeleteWorkflowExecutionResponseValidationError is the validation error
// returned by DeleteWorkflowExecutionResponse.Validate if the designated
// constraints aren't met.
type DeleteWorkflowExecutionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteWorkflowExecutionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteWorkflowExecutionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteWorkflowExecutionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteWorkflowExecutionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteWorkflowExecutionResponseValidationError) ErrorName() string {
	return "DeleteWorkflowExecutionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteWorkflowExecutionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteWorkflowExecutionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteWorkflowExecutionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteWorkflowExecutionResponseValidationError{}

// Validate checks the field values on ListOpenWorkflowExecutionsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListOpenWorkflowExecutionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOpenWorkflowExecutionsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListOpenWorkflowExecutionsRequestMultiError, or nil if none found.
func (m *ListOpenWorkflowExecutionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOpenWorkflowExecutionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Namespace

	// no validation rules for MaximumPageSize

	// no validation rules for NextPageToken

	if all {
		switch v := interface{}(m.GetStartTimeFilter()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListOpenWorkflowExecutionsRequestValidationError{
					field:  "StartTimeFilter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListOpenWorkflowExecutionsRequestValidationError{
					field:  "StartTimeFilter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartTimeFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListOpenWorkflowExecutionsRequestValidationError{
				field:  "StartTimeFilter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	switch v := m.Filters.(type) {
	case *ListOpenWorkflowExecutionsRequest_ExecutionFilter:
		if v == nil {
			err := ListOpenWorkflowExecutionsRequestValidationError{
				field:  "Filters",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetExecutionFilter()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListOpenWorkflowExecutionsRequestValidationError{
						field:  "ExecutionFilter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListOpenWorkflowExecutionsRequestValidationError{
						field:  "ExecutionFilter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetExecutionFilter()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOpenWorkflowExecutionsRequestValidationError{
					field:  "ExecutionFilter",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ListOpenWorkflowExecutionsRequest_TypeFilter:
		if v == nil {
			err := ListOpenWorkflowExecutionsRequestValidationError{
				field:  "Filters",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetTypeFilter()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListOpenWorkflowExecutionsRequestValidationError{
						field:  "TypeFilter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListOpenWorkflowExecutionsRequestValidationError{
						field:  "TypeFilter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTypeFilter()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOpenWorkflowExecutionsRequestValidationError{
					field:  "TypeFilter",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return ListOpenWorkflowExecutionsRequestMultiError(errors)
	}

	return nil
}

// ListOpenWorkflowExecutionsRequestMultiError is an error wrapping multiple
// validation errors returned by
// ListOpenWorkflowExecutionsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListOpenWorkflowExecutionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOpenWorkflowExecutionsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOpenWorkflowExecutionsRequestMultiError) AllErrors() []error { return m }

// ListOpenWorkflowExecutionsRequestValidationError is the validation error
// returned by ListOpenWorkflowExecutionsRequest.Validate if the designated
// constraints aren't met.
type ListOpenWorkflowExecutionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOpenWorkflowExecutionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOpenWorkflowExecutionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOpenWorkflowExecutionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOpenWorkflowExecutionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOpenWorkflowExecutionsRequestValidationError) ErrorName() string {
	return "ListOpenWorkflowExecutionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListOpenWorkflowExecutionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOpenWorkflowExecutionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOpenWorkflowExecutionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOpenWorkflowExecutionsRequestValidationError{}

// Validate checks the field values on ListOpenWorkflowExecutionsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListOpenWorkflowExecutionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOpenWorkflowExecutionsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListOpenWorkflowExecutionsResponseMultiError, or nil if none found.
func (m *ListOpenWorkflowExecutionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOpenWorkflowExecutionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetExecutions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListOpenWorkflowExecutionsResponseValidationError{
						field:  fmt.Sprintf("Executions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListOpenWorkflowExecutionsResponseValidationError{
						field:  fmt.Sprintf("Executions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOpenWorkflowExecutionsResponseValidationError{
					field:  fmt.Sprintf("Executions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListOpenWorkflowExecutionsResponseMultiError(errors)
	}

	return nil
}

// ListOpenWorkflowExecutionsResponseMultiError is an error wrapping multiple
// validation errors returned by
// ListOpenWorkflowExecutionsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListOpenWorkflowExecutionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOpenWorkflowExecutionsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOpenWorkflowExecutionsResponseMultiError) AllErrors() []error { return m }

// ListOpenWorkflowExecutionsResponseValidationError is the validation error
// returned by ListOpenWorkflowExecutionsResponse.Validate if the designated
// constraints aren't met.
type ListOpenWorkflowExecutionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOpenWorkflowExecutionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOpenWorkflowExecutionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOpenWorkflowExecutionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOpenWorkflowExecutionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOpenWorkflowExecutionsResponseValidationError) ErrorName() string {
	return "ListOpenWorkflowExecutionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListOpenWorkflowExecutionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOpenWorkflowExecutionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOpenWorkflowExecutionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOpenWorkflowExecutionsResponseValidationError{}

// Validate checks the field values on ListClosedWorkflowExecutionsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListClosedWorkflowExecutionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListClosedWorkflowExecutionsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListClosedWorkflowExecutionsRequestMultiError, or nil if none found.
func (m *ListClosedWorkflowExecutionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListClosedWorkflowExecutionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Namespace

	// no validation rules for MaximumPageSize

	// no validation rules for NextPageToken

	if all {
		switch v := interface{}(m.GetStartTimeFilter()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListClosedWorkflowExecutionsRequestValidationError{
					field:  "StartTimeFilter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListClosedWorkflowExecutionsRequestValidationError{
					field:  "StartTimeFilter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartTimeFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListClosedWorkflowExecutionsRequestValidationError{
				field:  "StartTimeFilter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	switch v := m.Filters.(type) {
	case *ListClosedWorkflowExecutionsRequest_ExecutionFilter:
		if v == nil {
			err := ListClosedWorkflowExecutionsRequestValidationError{
				field:  "Filters",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetExecutionFilter()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListClosedWorkflowExecutionsRequestValidationError{
						field:  "ExecutionFilter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListClosedWorkflowExecutionsRequestValidationError{
						field:  "ExecutionFilter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetExecutionFilter()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListClosedWorkflowExecutionsRequestValidationError{
					field:  "ExecutionFilter",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ListClosedWorkflowExecutionsRequest_TypeFilter:
		if v == nil {
			err := ListClosedWorkflowExecutionsRequestValidationError{
				field:  "Filters",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetTypeFilter()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListClosedWorkflowExecutionsRequestValidationError{
						field:  "TypeFilter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListClosedWorkflowExecutionsRequestValidationError{
						field:  "TypeFilter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTypeFilter()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListClosedWorkflowExecutionsRequestValidationError{
					field:  "TypeFilter",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ListClosedWorkflowExecutionsRequest_StatusFilter:
		if v == nil {
			err := ListClosedWorkflowExecutionsRequestValidationError{
				field:  "Filters",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetStatusFilter()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListClosedWorkflowExecutionsRequestValidationError{
						field:  "StatusFilter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListClosedWorkflowExecutionsRequestValidationError{
						field:  "StatusFilter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetStatusFilter()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListClosedWorkflowExecutionsRequestValidationError{
					field:  "StatusFilter",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return ListClosedWorkflowExecutionsRequestMultiError(errors)
	}

	return nil
}

// ListClosedWorkflowExecutionsRequestMultiError is an error wrapping multiple
// validation errors returned by
// ListClosedWorkflowExecutionsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListClosedWorkflowExecutionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListClosedWorkflowExecutionsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListClosedWorkflowExecutionsRequestMultiError) AllErrors() []error { return m }

// ListClosedWorkflowExecutionsRequestValidationError is the validation error
// returned by ListClosedWorkflowExecutionsRequest.Validate if the designated
// constraints aren't met.
type ListClosedWorkflowExecutionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListClosedWorkflowExecutionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListClosedWorkflowExecutionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListClosedWorkflowExecutionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListClosedWorkflowExecutionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListClosedWorkflowExecutionsRequestValidationError) ErrorName() string {
	return "ListClosedWorkflowExecutionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListClosedWorkflowExecutionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListClosedWorkflowExecutionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListClosedWorkflowExecutionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListClosedWorkflowExecutionsRequestValidationError{}

// Validate checks the field values on ListClosedWorkflowExecutionsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListClosedWorkflowExecutionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListClosedWorkflowExecutionsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListClosedWorkflowExecutionsResponseMultiError, or nil if none found.
func (m *ListClosedWorkflowExecutionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListClosedWorkflowExecutionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetExecutions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListClosedWorkflowExecutionsResponseValidationError{
						field:  fmt.Sprintf("Executions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListClosedWorkflowExecutionsResponseValidationError{
						field:  fmt.Sprintf("Executions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListClosedWorkflowExecutionsResponseValidationError{
					field:  fmt.Sprintf("Executions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListClosedWorkflowExecutionsResponseMultiError(errors)
	}

	return nil
}

// ListClosedWorkflowExecutionsResponseMultiError is an error wrapping multiple
// validation errors returned by
// ListClosedWorkflowExecutionsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListClosedWorkflowExecutionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListClosedWorkflowExecutionsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListClosedWorkflowExecutionsResponseMultiError) AllErrors() []error { return m }

// ListClosedWorkflowExecutionsResponseValidationError is the validation error
// returned by ListClosedWorkflowExecutionsResponse.Validate if the designated
// constraints aren't met.
type ListClosedWorkflowExecutionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListClosedWorkflowExecutionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListClosedWorkflowExecutionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListClosedWorkflowExecutionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListClosedWorkflowExecutionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListClosedWorkflowExecutionsResponseValidationError) ErrorName() string {
	return "ListClosedWorkflowExecutionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListClosedWorkflowExecutionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListClosedWorkflowExecutionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListClosedWorkflowExecutionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListClosedWorkflowExecutionsResponseValidationError{}

// Validate checks the field values on ListWorkflowExecutionsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListWorkflowExecutionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListWorkflowExecutionsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListWorkflowExecutionsRequestMultiError, or nil if none found.
func (m *ListWorkflowExecutionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListWorkflowExecutionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Namespace

	// no validation rules for PageSize

	// no validation rules for NextPageToken

	// no validation rules for Query

	if len(errors) > 0 {
		return ListWorkflowExecutionsRequestMultiError(errors)
	}

	return nil
}

// ListWorkflowExecutionsRequestMultiError is an error wrapping multiple
// validation errors returned by ListWorkflowExecutionsRequest.ValidateAll()
// if the designated constraints aren't met.
type ListWorkflowExecutionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListWorkflowExecutionsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListWorkflowExecutionsRequestMultiError) AllErrors() []error { return m }

// ListWorkflowExecutionsRequestValidationError is the validation error
// returned by ListWorkflowExecutionsRequest.Validate if the designated
// constraints aren't met.
type ListWorkflowExecutionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWorkflowExecutionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWorkflowExecutionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWorkflowExecutionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWorkflowExecutionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWorkflowExecutionsRequestValidationError) ErrorName() string {
	return "ListWorkflowExecutionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListWorkflowExecutionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWorkflowExecutionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWorkflowExecutionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWorkflowExecutionsRequestValidationError{}

// Validate checks the field values on ListWorkflowExecutionsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListWorkflowExecutionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListWorkflowExecutionsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListWorkflowExecutionsResponseMultiError, or nil if none found.
func (m *ListWorkflowExecutionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListWorkflowExecutionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetExecutions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListWorkflowExecutionsResponseValidationError{
						field:  fmt.Sprintf("Executions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListWorkflowExecutionsResponseValidationError{
						field:  fmt.Sprintf("Executions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListWorkflowExecutionsResponseValidationError{
					field:  fmt.Sprintf("Executions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListWorkflowExecutionsResponseMultiError(errors)
	}

	return nil
}

// ListWorkflowExecutionsResponseMultiError is an error wrapping multiple
// validation errors returned by ListWorkflowExecutionsResponse.ValidateAll()
// if the designated constraints aren't met.
type ListWorkflowExecutionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListWorkflowExecutionsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListWorkflowExecutionsResponseMultiError) AllErrors() []error { return m }

// ListWorkflowExecutionsResponseValidationError is the validation error
// returned by ListWorkflowExecutionsResponse.Validate if the designated
// constraints aren't met.
type ListWorkflowExecutionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWorkflowExecutionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWorkflowExecutionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWorkflowExecutionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWorkflowExecutionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWorkflowExecutionsResponseValidationError) ErrorName() string {
	return "ListWorkflowExecutionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListWorkflowExecutionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWorkflowExecutionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWorkflowExecutionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWorkflowExecutionsResponseValidationError{}

// Validate checks the field values on ListArchivedWorkflowExecutionsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListArchivedWorkflowExecutionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListArchivedWorkflowExecutionsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListArchivedWorkflowExecutionsRequestMultiError, or nil if none found.
func (m *ListArchivedWorkflowExecutionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListArchivedWorkflowExecutionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Namespace

	// no validation rules for PageSize

	// no validation rules for NextPageToken

	// no validation rules for Query

	if len(errors) > 0 {
		return ListArchivedWorkflowExecutionsRequestMultiError(errors)
	}

	return nil
}

// ListArchivedWorkflowExecutionsRequestMultiError is an error wrapping
// multiple validation errors returned by
// ListArchivedWorkflowExecutionsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListArchivedWorkflowExecutionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListArchivedWorkflowExecutionsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListArchivedWorkflowExecutionsRequestMultiError) AllErrors() []error { return m }

// ListArchivedWorkflowExecutionsRequestValidationError is the validation error
// returned by ListArchivedWorkflowExecutionsRequest.Validate if the
// designated constraints aren't met.
type ListArchivedWorkflowExecutionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListArchivedWorkflowExecutionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListArchivedWorkflowExecutionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListArchivedWorkflowExecutionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListArchivedWorkflowExecutionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListArchivedWorkflowExecutionsRequestValidationError) ErrorName() string {
	return "ListArchivedWorkflowExecutionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListArchivedWorkflowExecutionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListArchivedWorkflowExecutionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListArchivedWorkflowExecutionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListArchivedWorkflowExecutionsRequestValidationError{}

// Validate checks the field values on ListArchivedWorkflowExecutionsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListArchivedWorkflowExecutionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListArchivedWorkflowExecutionsResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// ListArchivedWorkflowExecutionsResponseMultiError, or nil if none found.
func (m *ListArchivedWorkflowExecutionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListArchivedWorkflowExecutionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetExecutions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListArchivedWorkflowExecutionsResponseValidationError{
						field:  fmt.Sprintf("Executions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListArchivedWorkflowExecutionsResponseValidationError{
						field:  fmt.Sprintf("Executions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListArchivedWorkflowExecutionsResponseValidationError{
					field:  fmt.Sprintf("Executions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListArchivedWorkflowExecutionsResponseMultiError(errors)
	}

	return nil
}

// ListArchivedWorkflowExecutionsResponseMultiError is an error wrapping
// multiple validation errors returned by
// ListArchivedWorkflowExecutionsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListArchivedWorkflowExecutionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListArchivedWorkflowExecutionsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListArchivedWorkflowExecutionsResponseMultiError) AllErrors() []error { return m }

// ListArchivedWorkflowExecutionsResponseValidationError is the validation
// error returned by ListArchivedWorkflowExecutionsResponse.Validate if the
// designated constraints aren't met.
type ListArchivedWorkflowExecutionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListArchivedWorkflowExecutionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListArchivedWorkflowExecutionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListArchivedWorkflowExecutionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListArchivedWorkflowExecutionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListArchivedWorkflowExecutionsResponseValidationError) ErrorName() string {
	return "ListArchivedWorkflowExecutionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListArchivedWorkflowExecutionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListArchivedWorkflowExecutionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListArchivedWorkflowExecutionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListArchivedWorkflowExecutionsResponseValidationError{}

// Validate checks the field values on ScanWorkflowExecutionsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ScanWorkflowExecutionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ScanWorkflowExecutionsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ScanWorkflowExecutionsRequestMultiError, or nil if none found.
func (m *ScanWorkflowExecutionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ScanWorkflowExecutionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Namespace

	// no validation rules for PageSize

	// no validation rules for NextPageToken

	// no validation rules for Query

	if len(errors) > 0 {
		return ScanWorkflowExecutionsRequestMultiError(errors)
	}

	return nil
}

// ScanWorkflowExecutionsRequestMultiError is an error wrapping multiple
// validation errors returned by ScanWorkflowExecutionsRequest.ValidateAll()
// if the designated constraints aren't met.
type ScanWorkflowExecutionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ScanWorkflowExecutionsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ScanWorkflowExecutionsRequestMultiError) AllErrors() []error { return m }

// ScanWorkflowExecutionsRequestValidationError is the validation error
// returned by ScanWorkflowExecutionsRequest.Validate if the designated
// constraints aren't met.
type ScanWorkflowExecutionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScanWorkflowExecutionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScanWorkflowExecutionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScanWorkflowExecutionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScanWorkflowExecutionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScanWorkflowExecutionsRequestValidationError) ErrorName() string {
	return "ScanWorkflowExecutionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ScanWorkflowExecutionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScanWorkflowExecutionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScanWorkflowExecutionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScanWorkflowExecutionsRequestValidationError{}

// Validate checks the field values on ScanWorkflowExecutionsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ScanWorkflowExecutionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ScanWorkflowExecutionsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ScanWorkflowExecutionsResponseMultiError, or nil if none found.
func (m *ScanWorkflowExecutionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ScanWorkflowExecutionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetExecutions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ScanWorkflowExecutionsResponseValidationError{
						field:  fmt.Sprintf("Executions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ScanWorkflowExecutionsResponseValidationError{
						field:  fmt.Sprintf("Executions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ScanWorkflowExecutionsResponseValidationError{
					field:  fmt.Sprintf("Executions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ScanWorkflowExecutionsResponseMultiError(errors)
	}

	return nil
}

// ScanWorkflowExecutionsResponseMultiError is an error wrapping multiple
// validation errors returned by ScanWorkflowExecutionsResponse.ValidateAll()
// if the designated constraints aren't met.
type ScanWorkflowExecutionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ScanWorkflowExecutionsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ScanWorkflowExecutionsResponseMultiError) AllErrors() []error { return m }

// ScanWorkflowExecutionsResponseValidationError is the validation error
// returned by ScanWorkflowExecutionsResponse.Validate if the designated
// constraints aren't met.
type ScanWorkflowExecutionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScanWorkflowExecutionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScanWorkflowExecutionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScanWorkflowExecutionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScanWorkflowExecutionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScanWorkflowExecutionsResponseValidationError) ErrorName() string {
	return "ScanWorkflowExecutionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ScanWorkflowExecutionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScanWorkflowExecutionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScanWorkflowExecutionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScanWorkflowExecutionsResponseValidationError{}

// Validate checks the field values on CountWorkflowExecutionsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CountWorkflowExecutionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CountWorkflowExecutionsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CountWorkflowExecutionsRequestMultiError, or nil if none found.
func (m *CountWorkflowExecutionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CountWorkflowExecutionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Namespace

	// no validation rules for Query

	if len(errors) > 0 {
		return CountWorkflowExecutionsRequestMultiError(errors)
	}

	return nil
}

// CountWorkflowExecutionsRequestMultiError is an error wrapping multiple
// validation errors returned by CountWorkflowExecutionsRequest.ValidateAll()
// if the designated constraints aren't met.
type CountWorkflowExecutionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CountWorkflowExecutionsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CountWorkflowExecutionsRequestMultiError) AllErrors() []error { return m }

// CountWorkflowExecutionsRequestValidationError is the validation error
// returned by CountWorkflowExecutionsRequest.Validate if the designated
// constraints aren't met.
type CountWorkflowExecutionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CountWorkflowExecutionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CountWorkflowExecutionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CountWorkflowExecutionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CountWorkflowExecutionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CountWorkflowExecutionsRequestValidationError) ErrorName() string {
	return "CountWorkflowExecutionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CountWorkflowExecutionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCountWorkflowExecutionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CountWorkflowExecutionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CountWorkflowExecutionsRequestValidationError{}

// Validate checks the field values on CountWorkflowExecutionsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CountWorkflowExecutionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CountWorkflowExecutionsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CountWorkflowExecutionsResponseMultiError, or nil if none found.
func (m *CountWorkflowExecutionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CountWorkflowExecutionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Count

	if len(errors) > 0 {
		return CountWorkflowExecutionsResponseMultiError(errors)
	}

	return nil
}

// CountWorkflowExecutionsResponseMultiError is an error wrapping multiple
// validation errors returned by CountWorkflowExecutionsResponse.ValidateAll()
// if the designated constraints aren't met.
type CountWorkflowExecutionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CountWorkflowExecutionsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CountWorkflowExecutionsResponseMultiError) AllErrors() []error { return m }

// CountWorkflowExecutionsResponseValidationError is the validation error
// returned by CountWorkflowExecutionsResponse.Validate if the designated
// constraints aren't met.
type CountWorkflowExecutionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CountWorkflowExecutionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CountWorkflowExecutionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CountWorkflowExecutionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CountWorkflowExecutionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CountWorkflowExecutionsResponseValidationError) ErrorName() string {
	return "CountWorkflowExecutionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CountWorkflowExecutionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCountWorkflowExecutionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CountWorkflowExecutionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CountWorkflowExecutionsResponseValidationError{}

// Validate checks the field values on GetSearchAttributesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSearchAttributesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSearchAttributesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSearchAttributesRequestMultiError, or nil if none found.
func (m *GetSearchAttributesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSearchAttributesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetSearchAttributesRequestMultiError(errors)
	}

	return nil
}

// GetSearchAttributesRequestMultiError is an error wrapping multiple
// validation errors returned by GetSearchAttributesRequest.ValidateAll() if
// the designated constraints aren't met.
type GetSearchAttributesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSearchAttributesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSearchAttributesRequestMultiError) AllErrors() []error { return m }

// GetSearchAttributesRequestValidationError is the validation error returned
// by GetSearchAttributesRequest.Validate if the designated constraints aren't met.
type GetSearchAttributesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSearchAttributesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSearchAttributesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSearchAttributesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSearchAttributesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSearchAttributesRequestValidationError) ErrorName() string {
	return "GetSearchAttributesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSearchAttributesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSearchAttributesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSearchAttributesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSearchAttributesRequestValidationError{}

// Validate checks the field values on GetSearchAttributesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSearchAttributesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSearchAttributesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSearchAttributesResponseMultiError, or nil if none found.
func (m *GetSearchAttributesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSearchAttributesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Keys

	if len(errors) > 0 {
		return GetSearchAttributesResponseMultiError(errors)
	}

	return nil
}

// GetSearchAttributesResponseMultiError is an error wrapping multiple
// validation errors returned by GetSearchAttributesResponse.ValidateAll() if
// the designated constraints aren't met.
type GetSearchAttributesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSearchAttributesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSearchAttributesResponseMultiError) AllErrors() []error { return m }

// GetSearchAttributesResponseValidationError is the validation error returned
// by GetSearchAttributesResponse.Validate if the designated constraints
// aren't met.
type GetSearchAttributesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSearchAttributesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSearchAttributesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSearchAttributesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSearchAttributesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSearchAttributesResponseValidationError) ErrorName() string {
	return "GetSearchAttributesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetSearchAttributesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSearchAttributesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSearchAttributesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSearchAttributesResponseValidationError{}

// Validate checks the field values on RespondQueryTaskCompletedRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *RespondQueryTaskCompletedRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RespondQueryTaskCompletedRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RespondQueryTaskCompletedRequestMultiError, or nil if none found.
func (m *RespondQueryTaskCompletedRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RespondQueryTaskCompletedRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TaskToken

	// no validation rules for CompletedType

	if all {
		switch v := interface{}(m.GetQueryResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RespondQueryTaskCompletedRequestValidationError{
					field:  "QueryResult",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RespondQueryTaskCompletedRequestValidationError{
					field:  "QueryResult",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetQueryResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RespondQueryTaskCompletedRequestValidationError{
				field:  "QueryResult",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ErrorMessage

	// no validation rules for Namespace

	if len(errors) > 0 {
		return RespondQueryTaskCompletedRequestMultiError(errors)
	}

	return nil
}

// RespondQueryTaskCompletedRequestMultiError is an error wrapping multiple
// validation errors returned by
// RespondQueryTaskCompletedRequest.ValidateAll() if the designated
// constraints aren't met.
type RespondQueryTaskCompletedRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RespondQueryTaskCompletedRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RespondQueryTaskCompletedRequestMultiError) AllErrors() []error { return m }

// RespondQueryTaskCompletedRequestValidationError is the validation error
// returned by RespondQueryTaskCompletedRequest.Validate if the designated
// constraints aren't met.
type RespondQueryTaskCompletedRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RespondQueryTaskCompletedRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RespondQueryTaskCompletedRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RespondQueryTaskCompletedRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RespondQueryTaskCompletedRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RespondQueryTaskCompletedRequestValidationError) ErrorName() string {
	return "RespondQueryTaskCompletedRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RespondQueryTaskCompletedRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRespondQueryTaskCompletedRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RespondQueryTaskCompletedRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RespondQueryTaskCompletedRequestValidationError{}

// Validate checks the field values on RespondQueryTaskCompletedResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *RespondQueryTaskCompletedResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RespondQueryTaskCompletedResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// RespondQueryTaskCompletedResponseMultiError, or nil if none found.
func (m *RespondQueryTaskCompletedResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RespondQueryTaskCompletedResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RespondQueryTaskCompletedResponseMultiError(errors)
	}

	return nil
}

// RespondQueryTaskCompletedResponseMultiError is an error wrapping multiple
// validation errors returned by
// RespondQueryTaskCompletedResponse.ValidateAll() if the designated
// constraints aren't met.
type RespondQueryTaskCompletedResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RespondQueryTaskCompletedResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RespondQueryTaskCompletedResponseMultiError) AllErrors() []error { return m }

// RespondQueryTaskCompletedResponseValidationError is the validation error
// returned by RespondQueryTaskCompletedResponse.Validate if the designated
// constraints aren't met.
type RespondQueryTaskCompletedResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RespondQueryTaskCompletedResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RespondQueryTaskCompletedResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RespondQueryTaskCompletedResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RespondQueryTaskCompletedResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RespondQueryTaskCompletedResponseValidationError) ErrorName() string {
	return "RespondQueryTaskCompletedResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RespondQueryTaskCompletedResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRespondQueryTaskCompletedResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RespondQueryTaskCompletedResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RespondQueryTaskCompletedResponseValidationError{}

// Validate checks the field values on ResetStickyTaskQueueRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResetStickyTaskQueueRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResetStickyTaskQueueRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResetStickyTaskQueueRequestMultiError, or nil if none found.
func (m *ResetStickyTaskQueueRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ResetStickyTaskQueueRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Namespace

	if all {
		switch v := interface{}(m.GetExecution()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ResetStickyTaskQueueRequestValidationError{
					field:  "Execution",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ResetStickyTaskQueueRequestValidationError{
					field:  "Execution",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExecution()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResetStickyTaskQueueRequestValidationError{
				field:  "Execution",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ResetStickyTaskQueueRequestMultiError(errors)
	}

	return nil
}

// ResetStickyTaskQueueRequestMultiError is an error wrapping multiple
// validation errors returned by ResetStickyTaskQueueRequest.ValidateAll() if
// the designated constraints aren't met.
type ResetStickyTaskQueueRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResetStickyTaskQueueRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResetStickyTaskQueueRequestMultiError) AllErrors() []error { return m }

// ResetStickyTaskQueueRequestValidationError is the validation error returned
// by ResetStickyTaskQueueRequest.Validate if the designated constraints
// aren't met.
type ResetStickyTaskQueueRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetStickyTaskQueueRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResetStickyTaskQueueRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResetStickyTaskQueueRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResetStickyTaskQueueRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResetStickyTaskQueueRequestValidationError) ErrorName() string {
	return "ResetStickyTaskQueueRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ResetStickyTaskQueueRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetStickyTaskQueueRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetStickyTaskQueueRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetStickyTaskQueueRequestValidationError{}

// Validate checks the field values on ResetStickyTaskQueueResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResetStickyTaskQueueResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResetStickyTaskQueueResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResetStickyTaskQueueResponseMultiError, or nil if none found.
func (m *ResetStickyTaskQueueResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ResetStickyTaskQueueResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ResetStickyTaskQueueResponseMultiError(errors)
	}

	return nil
}

// ResetStickyTaskQueueResponseMultiError is an error wrapping multiple
// validation errors returned by ResetStickyTaskQueueResponse.ValidateAll() if
// the designated constraints aren't met.
type ResetStickyTaskQueueResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResetStickyTaskQueueResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResetStickyTaskQueueResponseMultiError) AllErrors() []error { return m }

// ResetStickyTaskQueueResponseValidationError is the validation error returned
// by ResetStickyTaskQueueResponse.Validate if the designated constraints
// aren't met.
type ResetStickyTaskQueueResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetStickyTaskQueueResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResetStickyTaskQueueResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResetStickyTaskQueueResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResetStickyTaskQueueResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResetStickyTaskQueueResponseValidationError) ErrorName() string {
	return "ResetStickyTaskQueueResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ResetStickyTaskQueueResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetStickyTaskQueueResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetStickyTaskQueueResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetStickyTaskQueueResponseValidationError{}

// Validate checks the field values on QueryWorkflowRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryWorkflowRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryWorkflowRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryWorkflowRequestMultiError, or nil if none found.
func (m *QueryWorkflowRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryWorkflowRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Namespace

	if all {
		switch v := interface{}(m.GetExecution()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QueryWorkflowRequestValidationError{
					field:  "Execution",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QueryWorkflowRequestValidationError{
					field:  "Execution",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExecution()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QueryWorkflowRequestValidationError{
				field:  "Execution",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetQuery()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QueryWorkflowRequestValidationError{
					field:  "Query",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QueryWorkflowRequestValidationError{
					field:  "Query",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetQuery()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QueryWorkflowRequestValidationError{
				field:  "Query",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for QueryRejectCondition

	if len(errors) > 0 {
		return QueryWorkflowRequestMultiError(errors)
	}

	return nil
}

// QueryWorkflowRequestMultiError is an error wrapping multiple validation
// errors returned by QueryWorkflowRequest.ValidateAll() if the designated
// constraints aren't met.
type QueryWorkflowRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryWorkflowRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryWorkflowRequestMultiError) AllErrors() []error { return m }

// QueryWorkflowRequestValidationError is the validation error returned by
// QueryWorkflowRequest.Validate if the designated constraints aren't met.
type QueryWorkflowRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryWorkflowRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryWorkflowRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryWorkflowRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryWorkflowRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryWorkflowRequestValidationError) ErrorName() string {
	return "QueryWorkflowRequestValidationError"
}

// Error satisfies the builtin error interface
func (e QueryWorkflowRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryWorkflowRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryWorkflowRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryWorkflowRequestValidationError{}

// Validate checks the field values on QueryWorkflowResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryWorkflowResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryWorkflowResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryWorkflowResponseMultiError, or nil if none found.
func (m *QueryWorkflowResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryWorkflowResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetQueryResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QueryWorkflowResponseValidationError{
					field:  "QueryResult",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QueryWorkflowResponseValidationError{
					field:  "QueryResult",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetQueryResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QueryWorkflowResponseValidationError{
				field:  "QueryResult",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetQueryRejected()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QueryWorkflowResponseValidationError{
					field:  "QueryRejected",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QueryWorkflowResponseValidationError{
					field:  "QueryRejected",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetQueryRejected()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QueryWorkflowResponseValidationError{
				field:  "QueryRejected",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return QueryWorkflowResponseMultiError(errors)
	}

	return nil
}

// QueryWorkflowResponseMultiError is an error wrapping multiple validation
// errors returned by QueryWorkflowResponse.ValidateAll() if the designated
// constraints aren't met.
type QueryWorkflowResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryWorkflowResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryWorkflowResponseMultiError) AllErrors() []error { return m }

// QueryWorkflowResponseValidationError is the validation error returned by
// QueryWorkflowResponse.Validate if the designated constraints aren't met.
type QueryWorkflowResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryWorkflowResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryWorkflowResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryWorkflowResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryWorkflowResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryWorkflowResponseValidationError) ErrorName() string {
	return "QueryWorkflowResponseValidationError"
}

// Error satisfies the builtin error interface
func (e QueryWorkflowResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryWorkflowResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryWorkflowResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryWorkflowResponseValidationError{}

// Validate checks the field values on DescribeWorkflowExecutionRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DescribeWorkflowExecutionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeWorkflowExecutionRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DescribeWorkflowExecutionRequestMultiError, or nil if none found.
func (m *DescribeWorkflowExecutionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeWorkflowExecutionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Namespace

	if all {
		switch v := interface{}(m.GetExecution()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DescribeWorkflowExecutionRequestValidationError{
					field:  "Execution",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DescribeWorkflowExecutionRequestValidationError{
					field:  "Execution",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExecution()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DescribeWorkflowExecutionRequestValidationError{
				field:  "Execution",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DescribeWorkflowExecutionRequestMultiError(errors)
	}

	return nil
}

// DescribeWorkflowExecutionRequestMultiError is an error wrapping multiple
// validation errors returned by
// DescribeWorkflowExecutionRequest.ValidateAll() if the designated
// constraints aren't met.
type DescribeWorkflowExecutionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeWorkflowExecutionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeWorkflowExecutionRequestMultiError) AllErrors() []error { return m }

// DescribeWorkflowExecutionRequestValidationError is the validation error
// returned by DescribeWorkflowExecutionRequest.Validate if the designated
// constraints aren't met.
type DescribeWorkflowExecutionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeWorkflowExecutionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeWorkflowExecutionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeWorkflowExecutionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeWorkflowExecutionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeWorkflowExecutionRequestValidationError) ErrorName() string {
	return "DescribeWorkflowExecutionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeWorkflowExecutionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeWorkflowExecutionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeWorkflowExecutionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeWorkflowExecutionRequestValidationError{}

// Validate checks the field values on DescribeWorkflowExecutionResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DescribeWorkflowExecutionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeWorkflowExecutionResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// DescribeWorkflowExecutionResponseMultiError, or nil if none found.
func (m *DescribeWorkflowExecutionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeWorkflowExecutionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetExecutionConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DescribeWorkflowExecutionResponseValidationError{
					field:  "ExecutionConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DescribeWorkflowExecutionResponseValidationError{
					field:  "ExecutionConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExecutionConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DescribeWorkflowExecutionResponseValidationError{
				field:  "ExecutionConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetWorkflowExecutionInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DescribeWorkflowExecutionResponseValidationError{
					field:  "WorkflowExecutionInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DescribeWorkflowExecutionResponseValidationError{
					field:  "WorkflowExecutionInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkflowExecutionInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DescribeWorkflowExecutionResponseValidationError{
				field:  "WorkflowExecutionInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetPendingActivities() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DescribeWorkflowExecutionResponseValidationError{
						field:  fmt.Sprintf("PendingActivities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DescribeWorkflowExecutionResponseValidationError{
						field:  fmt.Sprintf("PendingActivities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DescribeWorkflowExecutionResponseValidationError{
					field:  fmt.Sprintf("PendingActivities[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetPendingChildren() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DescribeWorkflowExecutionResponseValidationError{
						field:  fmt.Sprintf("PendingChildren[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DescribeWorkflowExecutionResponseValidationError{
						field:  fmt.Sprintf("PendingChildren[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DescribeWorkflowExecutionResponseValidationError{
					field:  fmt.Sprintf("PendingChildren[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetPendingWorkflowTask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DescribeWorkflowExecutionResponseValidationError{
					field:  "PendingWorkflowTask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DescribeWorkflowExecutionResponseValidationError{
					field:  "PendingWorkflowTask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPendingWorkflowTask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DescribeWorkflowExecutionResponseValidationError{
				field:  "PendingWorkflowTask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DescribeWorkflowExecutionResponseMultiError(errors)
	}

	return nil
}

// DescribeWorkflowExecutionResponseMultiError is an error wrapping multiple
// validation errors returned by
// DescribeWorkflowExecutionResponse.ValidateAll() if the designated
// constraints aren't met.
type DescribeWorkflowExecutionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeWorkflowExecutionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeWorkflowExecutionResponseMultiError) AllErrors() []error { return m }

// DescribeWorkflowExecutionResponseValidationError is the validation error
// returned by DescribeWorkflowExecutionResponse.Validate if the designated
// constraints aren't met.
type DescribeWorkflowExecutionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeWorkflowExecutionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeWorkflowExecutionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeWorkflowExecutionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeWorkflowExecutionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeWorkflowExecutionResponseValidationError) ErrorName() string {
	return "DescribeWorkflowExecutionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeWorkflowExecutionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeWorkflowExecutionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeWorkflowExecutionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeWorkflowExecutionResponseValidationError{}

// Validate checks the field values on DescribeTaskQueueRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeTaskQueueRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeTaskQueueRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribeTaskQueueRequestMultiError, or nil if none found.
func (m *DescribeTaskQueueRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeTaskQueueRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Namespace

	if all {
		switch v := interface{}(m.GetTaskQueue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DescribeTaskQueueRequestValidationError{
					field:  "TaskQueue",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DescribeTaskQueueRequestValidationError{
					field:  "TaskQueue",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTaskQueue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DescribeTaskQueueRequestValidationError{
				field:  "TaskQueue",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for TaskQueueType

	// no validation rules for IncludeTaskQueueStatus

	if len(errors) > 0 {
		return DescribeTaskQueueRequestMultiError(errors)
	}

	return nil
}

// DescribeTaskQueueRequestMultiError is an error wrapping multiple validation
// errors returned by DescribeTaskQueueRequest.ValidateAll() if the designated
// constraints aren't met.
type DescribeTaskQueueRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeTaskQueueRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeTaskQueueRequestMultiError) AllErrors() []error { return m }

// DescribeTaskQueueRequestValidationError is the validation error returned by
// DescribeTaskQueueRequest.Validate if the designated constraints aren't met.
type DescribeTaskQueueRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeTaskQueueRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeTaskQueueRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeTaskQueueRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeTaskQueueRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeTaskQueueRequestValidationError) ErrorName() string {
	return "DescribeTaskQueueRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeTaskQueueRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeTaskQueueRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeTaskQueueRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeTaskQueueRequestValidationError{}

// Validate checks the field values on DescribeTaskQueueResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeTaskQueueResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeTaskQueueResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribeTaskQueueResponseMultiError, or nil if none found.
func (m *DescribeTaskQueueResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeTaskQueueResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPollers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DescribeTaskQueueResponseValidationError{
						field:  fmt.Sprintf("Pollers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DescribeTaskQueueResponseValidationError{
						field:  fmt.Sprintf("Pollers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DescribeTaskQueueResponseValidationError{
					field:  fmt.Sprintf("Pollers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetTaskQueueStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DescribeTaskQueueResponseValidationError{
					field:  "TaskQueueStatus",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DescribeTaskQueueResponseValidationError{
					field:  "TaskQueueStatus",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTaskQueueStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DescribeTaskQueueResponseValidationError{
				field:  "TaskQueueStatus",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DescribeTaskQueueResponseMultiError(errors)
	}

	return nil
}

// DescribeTaskQueueResponseMultiError is an error wrapping multiple validation
// errors returned by DescribeTaskQueueResponse.ValidateAll() if the
// designated constraints aren't met.
type DescribeTaskQueueResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeTaskQueueResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeTaskQueueResponseMultiError) AllErrors() []error { return m }

// DescribeTaskQueueResponseValidationError is the validation error returned by
// DescribeTaskQueueResponse.Validate if the designated constraints aren't met.
type DescribeTaskQueueResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeTaskQueueResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeTaskQueueResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeTaskQueueResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeTaskQueueResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeTaskQueueResponseValidationError) ErrorName() string {
	return "DescribeTaskQueueResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeTaskQueueResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeTaskQueueResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeTaskQueueResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeTaskQueueResponseValidationError{}

// Validate checks the field values on GetClusterInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetClusterInfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetClusterInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetClusterInfoRequestMultiError, or nil if none found.
func (m *GetClusterInfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetClusterInfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetClusterInfoRequestMultiError(errors)
	}

	return nil
}

// GetClusterInfoRequestMultiError is an error wrapping multiple validation
// errors returned by GetClusterInfoRequest.ValidateAll() if the designated
// constraints aren't met.
type GetClusterInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetClusterInfoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetClusterInfoRequestMultiError) AllErrors() []error { return m }

// GetClusterInfoRequestValidationError is the validation error returned by
// GetClusterInfoRequest.Validate if the designated constraints aren't met.
type GetClusterInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetClusterInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetClusterInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetClusterInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetClusterInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetClusterInfoRequestValidationError) ErrorName() string {
	return "GetClusterInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetClusterInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetClusterInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetClusterInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetClusterInfoRequestValidationError{}

// Validate checks the field values on GetClusterInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetClusterInfoResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetClusterInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetClusterInfoResponseMultiError, or nil if none found.
func (m *GetClusterInfoResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetClusterInfoResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SupportedClients

	// no validation rules for ServerVersion

	// no validation rules for ClusterId

	if all {
		switch v := interface{}(m.GetVersionInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetClusterInfoResponseValidationError{
					field:  "VersionInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetClusterInfoResponseValidationError{
					field:  "VersionInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetVersionInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetClusterInfoResponseValidationError{
				field:  "VersionInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ClusterName

	// no validation rules for HistoryShardCount

	// no validation rules for PersistenceStore

	// no validation rules for VisibilityStore

	if len(errors) > 0 {
		return GetClusterInfoResponseMultiError(errors)
	}

	return nil
}

// GetClusterInfoResponseMultiError is an error wrapping multiple validation
// errors returned by GetClusterInfoResponse.ValidateAll() if the designated
// constraints aren't met.
type GetClusterInfoResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetClusterInfoResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetClusterInfoResponseMultiError) AllErrors() []error { return m }

// GetClusterInfoResponseValidationError is the validation error returned by
// GetClusterInfoResponse.Validate if the designated constraints aren't met.
type GetClusterInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetClusterInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetClusterInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetClusterInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetClusterInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetClusterInfoResponseValidationError) ErrorName() string {
	return "GetClusterInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetClusterInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetClusterInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetClusterInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetClusterInfoResponseValidationError{}

// Validate checks the field values on GetSystemInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSystemInfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSystemInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSystemInfoRequestMultiError, or nil if none found.
func (m *GetSystemInfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSystemInfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetSystemInfoRequestMultiError(errors)
	}

	return nil
}

// GetSystemInfoRequestMultiError is an error wrapping multiple validation
// errors returned by GetSystemInfoRequest.ValidateAll() if the designated
// constraints aren't met.
type GetSystemInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSystemInfoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSystemInfoRequestMultiError) AllErrors() []error { return m }

// GetSystemInfoRequestValidationError is the validation error returned by
// GetSystemInfoRequest.Validate if the designated constraints aren't met.
type GetSystemInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSystemInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSystemInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSystemInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSystemInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSystemInfoRequestValidationError) ErrorName() string {
	return "GetSystemInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSystemInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSystemInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSystemInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSystemInfoRequestValidationError{}

// Validate checks the field values on GetSystemInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSystemInfoResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSystemInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSystemInfoResponseMultiError, or nil if none found.
func (m *GetSystemInfoResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSystemInfoResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServerVersion

	if all {
		switch v := interface{}(m.GetCapabilities()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetSystemInfoResponseValidationError{
					field:  "Capabilities",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetSystemInfoResponseValidationError{
					field:  "Capabilities",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCapabilities()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSystemInfoResponseValidationError{
				field:  "Capabilities",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetSystemInfoResponseMultiError(errors)
	}

	return nil
}

// GetSystemInfoResponseMultiError is an error wrapping multiple validation
// errors returned by GetSystemInfoResponse.ValidateAll() if the designated
// constraints aren't met.
type GetSystemInfoResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSystemInfoResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSystemInfoResponseMultiError) AllErrors() []error { return m }

// GetSystemInfoResponseValidationError is the validation error returned by
// GetSystemInfoResponse.Validate if the designated constraints aren't met.
type GetSystemInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSystemInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSystemInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSystemInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSystemInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSystemInfoResponseValidationError) ErrorName() string {
	return "GetSystemInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetSystemInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSystemInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSystemInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSystemInfoResponseValidationError{}

// Validate checks the field values on ListTaskQueuePartitionsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTaskQueuePartitionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTaskQueuePartitionsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListTaskQueuePartitionsRequestMultiError, or nil if none found.
func (m *ListTaskQueuePartitionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTaskQueuePartitionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Namespace

	if all {
		switch v := interface{}(m.GetTaskQueue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListTaskQueuePartitionsRequestValidationError{
					field:  "TaskQueue",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListTaskQueuePartitionsRequestValidationError{
					field:  "TaskQueue",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTaskQueue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListTaskQueuePartitionsRequestValidationError{
				field:  "TaskQueue",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListTaskQueuePartitionsRequestMultiError(errors)
	}

	return nil
}

// ListTaskQueuePartitionsRequestMultiError is an error wrapping multiple
// validation errors returned by ListTaskQueuePartitionsRequest.ValidateAll()
// if the designated constraints aren't met.
type ListTaskQueuePartitionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTaskQueuePartitionsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTaskQueuePartitionsRequestMultiError) AllErrors() []error { return m }

// ListTaskQueuePartitionsRequestValidationError is the validation error
// returned by ListTaskQueuePartitionsRequest.Validate if the designated
// constraints aren't met.
type ListTaskQueuePartitionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTaskQueuePartitionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTaskQueuePartitionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTaskQueuePartitionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTaskQueuePartitionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTaskQueuePartitionsRequestValidationError) ErrorName() string {
	return "ListTaskQueuePartitionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListTaskQueuePartitionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTaskQueuePartitionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTaskQueuePartitionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTaskQueuePartitionsRequestValidationError{}

// Validate checks the field values on ListTaskQueuePartitionsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTaskQueuePartitionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTaskQueuePartitionsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListTaskQueuePartitionsResponseMultiError, or nil if none found.
func (m *ListTaskQueuePartitionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTaskQueuePartitionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetActivityTaskQueuePartitions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListTaskQueuePartitionsResponseValidationError{
						field:  fmt.Sprintf("ActivityTaskQueuePartitions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListTaskQueuePartitionsResponseValidationError{
						field:  fmt.Sprintf("ActivityTaskQueuePartitions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTaskQueuePartitionsResponseValidationError{
					field:  fmt.Sprintf("ActivityTaskQueuePartitions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetWorkflowTaskQueuePartitions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListTaskQueuePartitionsResponseValidationError{
						field:  fmt.Sprintf("WorkflowTaskQueuePartitions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListTaskQueuePartitionsResponseValidationError{
						field:  fmt.Sprintf("WorkflowTaskQueuePartitions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTaskQueuePartitionsResponseValidationError{
					field:  fmt.Sprintf("WorkflowTaskQueuePartitions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListTaskQueuePartitionsResponseMultiError(errors)
	}

	return nil
}

// ListTaskQueuePartitionsResponseMultiError is an error wrapping multiple
// validation errors returned by ListTaskQueuePartitionsResponse.ValidateAll()
// if the designated constraints aren't met.
type ListTaskQueuePartitionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTaskQueuePartitionsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTaskQueuePartitionsResponseMultiError) AllErrors() []error { return m }

// ListTaskQueuePartitionsResponseValidationError is the validation error
// returned by ListTaskQueuePartitionsResponse.Validate if the designated
// constraints aren't met.
type ListTaskQueuePartitionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTaskQueuePartitionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTaskQueuePartitionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTaskQueuePartitionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTaskQueuePartitionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTaskQueuePartitionsResponseValidationError) ErrorName() string {
	return "ListTaskQueuePartitionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListTaskQueuePartitionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTaskQueuePartitionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTaskQueuePartitionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTaskQueuePartitionsResponseValidationError{}

// Validate checks the field values on CreateScheduleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateScheduleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateScheduleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateScheduleRequestMultiError, or nil if none found.
func (m *CreateScheduleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateScheduleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Namespace

	// no validation rules for ScheduleId

	if all {
		switch v := interface{}(m.GetSchedule()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateScheduleRequestValidationError{
					field:  "Schedule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateScheduleRequestValidationError{
					field:  "Schedule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSchedule()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateScheduleRequestValidationError{
				field:  "Schedule",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetInitialPatch()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateScheduleRequestValidationError{
					field:  "InitialPatch",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateScheduleRequestValidationError{
					field:  "InitialPatch",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInitialPatch()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateScheduleRequestValidationError{
				field:  "InitialPatch",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Identity

	// no validation rules for RequestId

	if all {
		switch v := interface{}(m.GetMemo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateScheduleRequestValidationError{
					field:  "Memo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateScheduleRequestValidationError{
					field:  "Memo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMemo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateScheduleRequestValidationError{
				field:  "Memo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSearchAttributes()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateScheduleRequestValidationError{
					field:  "SearchAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateScheduleRequestValidationError{
					field:  "SearchAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSearchAttributes()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateScheduleRequestValidationError{
				field:  "SearchAttributes",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateScheduleRequestMultiError(errors)
	}

	return nil
}

// CreateScheduleRequestMultiError is an error wrapping multiple validation
// errors returned by CreateScheduleRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateScheduleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateScheduleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateScheduleRequestMultiError) AllErrors() []error { return m }

// CreateScheduleRequestValidationError is the validation error returned by
// CreateScheduleRequest.Validate if the designated constraints aren't met.
type CreateScheduleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateScheduleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateScheduleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateScheduleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateScheduleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateScheduleRequestValidationError) ErrorName() string {
	return "CreateScheduleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateScheduleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateScheduleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateScheduleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateScheduleRequestValidationError{}

// Validate checks the field values on CreateScheduleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateScheduleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateScheduleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateScheduleResponseMultiError, or nil if none found.
func (m *CreateScheduleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateScheduleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ConflictToken

	if len(errors) > 0 {
		return CreateScheduleResponseMultiError(errors)
	}

	return nil
}

// CreateScheduleResponseMultiError is an error wrapping multiple validation
// errors returned by CreateScheduleResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateScheduleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateScheduleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateScheduleResponseMultiError) AllErrors() []error { return m }

// CreateScheduleResponseValidationError is the validation error returned by
// CreateScheduleResponse.Validate if the designated constraints aren't met.
type CreateScheduleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateScheduleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateScheduleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateScheduleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateScheduleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateScheduleResponseValidationError) ErrorName() string {
	return "CreateScheduleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateScheduleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateScheduleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateScheduleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateScheduleResponseValidationError{}

// Validate checks the field values on DescribeScheduleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeScheduleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeScheduleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribeScheduleRequestMultiError, or nil if none found.
func (m *DescribeScheduleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeScheduleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Namespace

	// no validation rules for ScheduleId

	if len(errors) > 0 {
		return DescribeScheduleRequestMultiError(errors)
	}

	return nil
}

// DescribeScheduleRequestMultiError is an error wrapping multiple validation
// errors returned by DescribeScheduleRequest.ValidateAll() if the designated
// constraints aren't met.
type DescribeScheduleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeScheduleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeScheduleRequestMultiError) AllErrors() []error { return m }

// DescribeScheduleRequestValidationError is the validation error returned by
// DescribeScheduleRequest.Validate if the designated constraints aren't met.
type DescribeScheduleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeScheduleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeScheduleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeScheduleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeScheduleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeScheduleRequestValidationError) ErrorName() string {
	return "DescribeScheduleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeScheduleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeScheduleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeScheduleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeScheduleRequestValidationError{}

// Validate checks the field values on DescribeScheduleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeScheduleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeScheduleResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribeScheduleResponseMultiError, or nil if none found.
func (m *DescribeScheduleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeScheduleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSchedule()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DescribeScheduleResponseValidationError{
					field:  "Schedule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DescribeScheduleResponseValidationError{
					field:  "Schedule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSchedule()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DescribeScheduleResponseValidationError{
				field:  "Schedule",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DescribeScheduleResponseValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DescribeScheduleResponseValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DescribeScheduleResponseValidationError{
				field:  "Info",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMemo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DescribeScheduleResponseValidationError{
					field:  "Memo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DescribeScheduleResponseValidationError{
					field:  "Memo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMemo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DescribeScheduleResponseValidationError{
				field:  "Memo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSearchAttributes()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DescribeScheduleResponseValidationError{
					field:  "SearchAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DescribeScheduleResponseValidationError{
					field:  "SearchAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSearchAttributes()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DescribeScheduleResponseValidationError{
				field:  "SearchAttributes",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ConflictToken

	if len(errors) > 0 {
		return DescribeScheduleResponseMultiError(errors)
	}

	return nil
}

// DescribeScheduleResponseMultiError is an error wrapping multiple validation
// errors returned by DescribeScheduleResponse.ValidateAll() if the designated
// constraints aren't met.
type DescribeScheduleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeScheduleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeScheduleResponseMultiError) AllErrors() []error { return m }

// DescribeScheduleResponseValidationError is the validation error returned by
// DescribeScheduleResponse.Validate if the designated constraints aren't met.
type DescribeScheduleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeScheduleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeScheduleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeScheduleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeScheduleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeScheduleResponseValidationError) ErrorName() string {
	return "DescribeScheduleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeScheduleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeScheduleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeScheduleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeScheduleResponseValidationError{}

// Validate checks the field values on UpdateScheduleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateScheduleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateScheduleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateScheduleRequestMultiError, or nil if none found.
func (m *UpdateScheduleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateScheduleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Namespace

	// no validation rules for ScheduleId

	if all {
		switch v := interface{}(m.GetSchedule()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateScheduleRequestValidationError{
					field:  "Schedule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateScheduleRequestValidationError{
					field:  "Schedule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSchedule()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateScheduleRequestValidationError{
				field:  "Schedule",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ConflictToken

	// no validation rules for Identity

	// no validation rules for RequestId

	if len(errors) > 0 {
		return UpdateScheduleRequestMultiError(errors)
	}

	return nil
}

// UpdateScheduleRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateScheduleRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateScheduleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateScheduleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateScheduleRequestMultiError) AllErrors() []error { return m }

// UpdateScheduleRequestValidationError is the validation error returned by
// UpdateScheduleRequest.Validate if the designated constraints aren't met.
type UpdateScheduleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateScheduleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateScheduleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateScheduleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateScheduleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateScheduleRequestValidationError) ErrorName() string {
	return "UpdateScheduleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateScheduleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateScheduleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateScheduleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateScheduleRequestValidationError{}

// Validate checks the field values on UpdateScheduleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateScheduleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateScheduleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateScheduleResponseMultiError, or nil if none found.
func (m *UpdateScheduleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateScheduleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateScheduleResponseMultiError(errors)
	}

	return nil
}

// UpdateScheduleResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateScheduleResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateScheduleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateScheduleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateScheduleResponseMultiError) AllErrors() []error { return m }

// UpdateScheduleResponseValidationError is the validation error returned by
// UpdateScheduleResponse.Validate if the designated constraints aren't met.
type UpdateScheduleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateScheduleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateScheduleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateScheduleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateScheduleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateScheduleResponseValidationError) ErrorName() string {
	return "UpdateScheduleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateScheduleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateScheduleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateScheduleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateScheduleResponseValidationError{}

// Validate checks the field values on PatchScheduleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PatchScheduleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PatchScheduleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PatchScheduleRequestMultiError, or nil if none found.
func (m *PatchScheduleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PatchScheduleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Namespace

	// no validation rules for ScheduleId

	if all {
		switch v := interface{}(m.GetPatch()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PatchScheduleRequestValidationError{
					field:  "Patch",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PatchScheduleRequestValidationError{
					field:  "Patch",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPatch()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PatchScheduleRequestValidationError{
				field:  "Patch",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Identity

	// no validation rules for RequestId

	if len(errors) > 0 {
		return PatchScheduleRequestMultiError(errors)
	}

	return nil
}

// PatchScheduleRequestMultiError is an error wrapping multiple validation
// errors returned by PatchScheduleRequest.ValidateAll() if the designated
// constraints aren't met.
type PatchScheduleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PatchScheduleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PatchScheduleRequestMultiError) AllErrors() []error { return m }

// PatchScheduleRequestValidationError is the validation error returned by
// PatchScheduleRequest.Validate if the designated constraints aren't met.
type PatchScheduleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PatchScheduleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PatchScheduleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PatchScheduleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PatchScheduleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PatchScheduleRequestValidationError) ErrorName() string {
	return "PatchScheduleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PatchScheduleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPatchScheduleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PatchScheduleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PatchScheduleRequestValidationError{}

// Validate checks the field values on PatchScheduleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PatchScheduleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PatchScheduleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PatchScheduleResponseMultiError, or nil if none found.
func (m *PatchScheduleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PatchScheduleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PatchScheduleResponseMultiError(errors)
	}

	return nil
}

// PatchScheduleResponseMultiError is an error wrapping multiple validation
// errors returned by PatchScheduleResponse.ValidateAll() if the designated
// constraints aren't met.
type PatchScheduleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PatchScheduleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PatchScheduleResponseMultiError) AllErrors() []error { return m }

// PatchScheduleResponseValidationError is the validation error returned by
// PatchScheduleResponse.Validate if the designated constraints aren't met.
type PatchScheduleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PatchScheduleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PatchScheduleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PatchScheduleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PatchScheduleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PatchScheduleResponseValidationError) ErrorName() string {
	return "PatchScheduleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PatchScheduleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPatchScheduleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PatchScheduleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PatchScheduleResponseValidationError{}

// Validate checks the field values on ListScheduleMatchingTimesRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListScheduleMatchingTimesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListScheduleMatchingTimesRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListScheduleMatchingTimesRequestMultiError, or nil if none found.
func (m *ListScheduleMatchingTimesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListScheduleMatchingTimesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Namespace

	// no validation rules for ScheduleId

	if all {
		switch v := interface{}(m.GetStartTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListScheduleMatchingTimesRequestValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListScheduleMatchingTimesRequestValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListScheduleMatchingTimesRequestValidationError{
				field:  "StartTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEndTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListScheduleMatchingTimesRequestValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListScheduleMatchingTimesRequestValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListScheduleMatchingTimesRequestValidationError{
				field:  "EndTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListScheduleMatchingTimesRequestMultiError(errors)
	}

	return nil
}

// ListScheduleMatchingTimesRequestMultiError is an error wrapping multiple
// validation errors returned by
// ListScheduleMatchingTimesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListScheduleMatchingTimesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListScheduleMatchingTimesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListScheduleMatchingTimesRequestMultiError) AllErrors() []error { return m }

// ListScheduleMatchingTimesRequestValidationError is the validation error
// returned by ListScheduleMatchingTimesRequest.Validate if the designated
// constraints aren't met.
type ListScheduleMatchingTimesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListScheduleMatchingTimesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListScheduleMatchingTimesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListScheduleMatchingTimesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListScheduleMatchingTimesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListScheduleMatchingTimesRequestValidationError) ErrorName() string {
	return "ListScheduleMatchingTimesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListScheduleMatchingTimesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListScheduleMatchingTimesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListScheduleMatchingTimesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListScheduleMatchingTimesRequestValidationError{}

// Validate checks the field values on ListScheduleMatchingTimesResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListScheduleMatchingTimesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListScheduleMatchingTimesResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListScheduleMatchingTimesResponseMultiError, or nil if none found.
func (m *ListScheduleMatchingTimesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListScheduleMatchingTimesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetStartTime() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListScheduleMatchingTimesResponseValidationError{
						field:  fmt.Sprintf("StartTime[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListScheduleMatchingTimesResponseValidationError{
						field:  fmt.Sprintf("StartTime[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListScheduleMatchingTimesResponseValidationError{
					field:  fmt.Sprintf("StartTime[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListScheduleMatchingTimesResponseMultiError(errors)
	}

	return nil
}

// ListScheduleMatchingTimesResponseMultiError is an error wrapping multiple
// validation errors returned by
// ListScheduleMatchingTimesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListScheduleMatchingTimesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListScheduleMatchingTimesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListScheduleMatchingTimesResponseMultiError) AllErrors() []error { return m }

// ListScheduleMatchingTimesResponseValidationError is the validation error
// returned by ListScheduleMatchingTimesResponse.Validate if the designated
// constraints aren't met.
type ListScheduleMatchingTimesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListScheduleMatchingTimesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListScheduleMatchingTimesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListScheduleMatchingTimesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListScheduleMatchingTimesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListScheduleMatchingTimesResponseValidationError) ErrorName() string {
	return "ListScheduleMatchingTimesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListScheduleMatchingTimesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListScheduleMatchingTimesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListScheduleMatchingTimesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListScheduleMatchingTimesResponseValidationError{}

// Validate checks the field values on DeleteScheduleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteScheduleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteScheduleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteScheduleRequestMultiError, or nil if none found.
func (m *DeleteScheduleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteScheduleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Namespace

	// no validation rules for ScheduleId

	// no validation rules for Identity

	if len(errors) > 0 {
		return DeleteScheduleRequestMultiError(errors)
	}

	return nil
}

// DeleteScheduleRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteScheduleRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteScheduleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteScheduleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteScheduleRequestMultiError) AllErrors() []error { return m }

// DeleteScheduleRequestValidationError is the validation error returned by
// DeleteScheduleRequest.Validate if the designated constraints aren't met.
type DeleteScheduleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteScheduleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteScheduleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteScheduleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteScheduleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteScheduleRequestValidationError) ErrorName() string {
	return "DeleteScheduleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteScheduleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteScheduleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteScheduleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteScheduleRequestValidationError{}

// Validate checks the field values on DeleteScheduleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteScheduleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteScheduleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteScheduleResponseMultiError, or nil if none found.
func (m *DeleteScheduleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteScheduleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteScheduleResponseMultiError(errors)
	}

	return nil
}

// DeleteScheduleResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteScheduleResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteScheduleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteScheduleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteScheduleResponseMultiError) AllErrors() []error { return m }

// DeleteScheduleResponseValidationError is the validation error returned by
// DeleteScheduleResponse.Validate if the designated constraints aren't met.
type DeleteScheduleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteScheduleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteScheduleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteScheduleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteScheduleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteScheduleResponseValidationError) ErrorName() string {
	return "DeleteScheduleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteScheduleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteScheduleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteScheduleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteScheduleResponseValidationError{}

// Validate checks the field values on ListSchedulesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSchedulesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSchedulesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSchedulesRequestMultiError, or nil if none found.
func (m *ListSchedulesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSchedulesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Namespace

	// no validation rules for MaximumPageSize

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListSchedulesRequestMultiError(errors)
	}

	return nil
}

// ListSchedulesRequestMultiError is an error wrapping multiple validation
// errors returned by ListSchedulesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListSchedulesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSchedulesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSchedulesRequestMultiError) AllErrors() []error { return m }

// ListSchedulesRequestValidationError is the validation error returned by
// ListSchedulesRequest.Validate if the designated constraints aren't met.
type ListSchedulesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSchedulesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSchedulesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSchedulesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSchedulesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSchedulesRequestValidationError) ErrorName() string {
	return "ListSchedulesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListSchedulesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSchedulesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSchedulesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSchedulesRequestValidationError{}

// Validate checks the field values on ListSchedulesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSchedulesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSchedulesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSchedulesResponseMultiError, or nil if none found.
func (m *ListSchedulesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSchedulesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSchedules() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListSchedulesResponseValidationError{
						field:  fmt.Sprintf("Schedules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListSchedulesResponseValidationError{
						field:  fmt.Sprintf("Schedules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListSchedulesResponseValidationError{
					field:  fmt.Sprintf("Schedules[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListSchedulesResponseMultiError(errors)
	}

	return nil
}

// ListSchedulesResponseMultiError is an error wrapping multiple validation
// errors returned by ListSchedulesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListSchedulesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSchedulesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSchedulesResponseMultiError) AllErrors() []error { return m }

// ListSchedulesResponseValidationError is the validation error returned by
// ListSchedulesResponse.Validate if the designated constraints aren't met.
type ListSchedulesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSchedulesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSchedulesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSchedulesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSchedulesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSchedulesResponseValidationError) ErrorName() string {
	return "ListSchedulesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListSchedulesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSchedulesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSchedulesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSchedulesResponseValidationError{}

// Validate checks the field values on UpdateWorkerBuildIdCompatibilityRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *UpdateWorkerBuildIdCompatibilityRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// UpdateWorkerBuildIdCompatibilityRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// UpdateWorkerBuildIdCompatibilityRequestMultiError, or nil if none found.
func (m *UpdateWorkerBuildIdCompatibilityRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateWorkerBuildIdCompatibilityRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Namespace

	// no validation rules for TaskQueue

	switch v := m.Operation.(type) {
	case *UpdateWorkerBuildIdCompatibilityRequest_AddNewBuildIdInNewDefaultSet:
		if v == nil {
			err := UpdateWorkerBuildIdCompatibilityRequestValidationError{
				field:  "Operation",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for AddNewBuildIdInNewDefaultSet
	case *UpdateWorkerBuildIdCompatibilityRequest_AddNewCompatibleBuildId:
		if v == nil {
			err := UpdateWorkerBuildIdCompatibilityRequestValidationError{
				field:  "Operation",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetAddNewCompatibleBuildId()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateWorkerBuildIdCompatibilityRequestValidationError{
						field:  "AddNewCompatibleBuildId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateWorkerBuildIdCompatibilityRequestValidationError{
						field:  "AddNewCompatibleBuildId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAddNewCompatibleBuildId()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateWorkerBuildIdCompatibilityRequestValidationError{
					field:  "AddNewCompatibleBuildId",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *UpdateWorkerBuildIdCompatibilityRequest_PromoteSetByBuildId:
		if v == nil {
			err := UpdateWorkerBuildIdCompatibilityRequestValidationError{
				field:  "Operation",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for PromoteSetByBuildId
	case *UpdateWorkerBuildIdCompatibilityRequest_PromoteBuildIdWithinSet:
		if v == nil {
			err := UpdateWorkerBuildIdCompatibilityRequestValidationError{
				field:  "Operation",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for PromoteBuildIdWithinSet
	case *UpdateWorkerBuildIdCompatibilityRequest_MergeSets_:
		if v == nil {
			err := UpdateWorkerBuildIdCompatibilityRequestValidationError{
				field:  "Operation",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetMergeSets()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateWorkerBuildIdCompatibilityRequestValidationError{
						field:  "MergeSets",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateWorkerBuildIdCompatibilityRequestValidationError{
						field:  "MergeSets",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMergeSets()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateWorkerBuildIdCompatibilityRequestValidationError{
					field:  "MergeSets",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return UpdateWorkerBuildIdCompatibilityRequestMultiError(errors)
	}

	return nil
}

// UpdateWorkerBuildIdCompatibilityRequestMultiError is an error wrapping
// multiple validation errors returned by
// UpdateWorkerBuildIdCompatibilityRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateWorkerBuildIdCompatibilityRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateWorkerBuildIdCompatibilityRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateWorkerBuildIdCompatibilityRequestMultiError) AllErrors() []error { return m }

// UpdateWorkerBuildIdCompatibilityRequestValidationError is the validation
// error returned by UpdateWorkerBuildIdCompatibilityRequest.Validate if the
// designated constraints aren't met.
type UpdateWorkerBuildIdCompatibilityRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateWorkerBuildIdCompatibilityRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateWorkerBuildIdCompatibilityRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateWorkerBuildIdCompatibilityRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateWorkerBuildIdCompatibilityRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateWorkerBuildIdCompatibilityRequestValidationError) ErrorName() string {
	return "UpdateWorkerBuildIdCompatibilityRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateWorkerBuildIdCompatibilityRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateWorkerBuildIdCompatibilityRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateWorkerBuildIdCompatibilityRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateWorkerBuildIdCompatibilityRequestValidationError{}

// Validate checks the field values on UpdateWorkerBuildIdCompatibilityResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *UpdateWorkerBuildIdCompatibilityResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// UpdateWorkerBuildIdCompatibilityResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// UpdateWorkerBuildIdCompatibilityResponseMultiError, or nil if none found.
func (m *UpdateWorkerBuildIdCompatibilityResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateWorkerBuildIdCompatibilityResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateWorkerBuildIdCompatibilityResponseMultiError(errors)
	}

	return nil
}

// UpdateWorkerBuildIdCompatibilityResponseMultiError is an error wrapping
// multiple validation errors returned by
// UpdateWorkerBuildIdCompatibilityResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateWorkerBuildIdCompatibilityResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateWorkerBuildIdCompatibilityResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateWorkerBuildIdCompatibilityResponseMultiError) AllErrors() []error { return m }

// UpdateWorkerBuildIdCompatibilityResponseValidationError is the validation
// error returned by UpdateWorkerBuildIdCompatibilityResponse.Validate if the
// designated constraints aren't met.
type UpdateWorkerBuildIdCompatibilityResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateWorkerBuildIdCompatibilityResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateWorkerBuildIdCompatibilityResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateWorkerBuildIdCompatibilityResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateWorkerBuildIdCompatibilityResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateWorkerBuildIdCompatibilityResponseValidationError) ErrorName() string {
	return "UpdateWorkerBuildIdCompatibilityResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateWorkerBuildIdCompatibilityResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateWorkerBuildIdCompatibilityResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateWorkerBuildIdCompatibilityResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateWorkerBuildIdCompatibilityResponseValidationError{}

// Validate checks the field values on GetWorkerBuildIdCompatibilityRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetWorkerBuildIdCompatibilityRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetWorkerBuildIdCompatibilityRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetWorkerBuildIdCompatibilityRequestMultiError, or nil if none found.
func (m *GetWorkerBuildIdCompatibilityRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWorkerBuildIdCompatibilityRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Namespace

	// no validation rules for TaskQueue

	// no validation rules for MaxSets

	if len(errors) > 0 {
		return GetWorkerBuildIdCompatibilityRequestMultiError(errors)
	}

	return nil
}

// GetWorkerBuildIdCompatibilityRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetWorkerBuildIdCompatibilityRequest.ValidateAll() if the designated
// constraints aren't met.
type GetWorkerBuildIdCompatibilityRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWorkerBuildIdCompatibilityRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWorkerBuildIdCompatibilityRequestMultiError) AllErrors() []error { return m }

// GetWorkerBuildIdCompatibilityRequestValidationError is the validation error
// returned by GetWorkerBuildIdCompatibilityRequest.Validate if the designated
// constraints aren't met.
type GetWorkerBuildIdCompatibilityRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWorkerBuildIdCompatibilityRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWorkerBuildIdCompatibilityRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWorkerBuildIdCompatibilityRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWorkerBuildIdCompatibilityRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWorkerBuildIdCompatibilityRequestValidationError) ErrorName() string {
	return "GetWorkerBuildIdCompatibilityRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetWorkerBuildIdCompatibilityRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWorkerBuildIdCompatibilityRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWorkerBuildIdCompatibilityRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWorkerBuildIdCompatibilityRequestValidationError{}

// Validate checks the field values on GetWorkerBuildIdCompatibilityResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetWorkerBuildIdCompatibilityResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetWorkerBuildIdCompatibilityResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetWorkerBuildIdCompatibilityResponseMultiError, or nil if none found.
func (m *GetWorkerBuildIdCompatibilityResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWorkerBuildIdCompatibilityResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMajorVersionSets() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetWorkerBuildIdCompatibilityResponseValidationError{
						field:  fmt.Sprintf("MajorVersionSets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetWorkerBuildIdCompatibilityResponseValidationError{
						field:  fmt.Sprintf("MajorVersionSets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetWorkerBuildIdCompatibilityResponseValidationError{
					field:  fmt.Sprintf("MajorVersionSets[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetWorkerBuildIdCompatibilityResponseMultiError(errors)
	}

	return nil
}

// GetWorkerBuildIdCompatibilityResponseMultiError is an error wrapping
// multiple validation errors returned by
// GetWorkerBuildIdCompatibilityResponse.ValidateAll() if the designated
// constraints aren't met.
type GetWorkerBuildIdCompatibilityResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWorkerBuildIdCompatibilityResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWorkerBuildIdCompatibilityResponseMultiError) AllErrors() []error { return m }

// GetWorkerBuildIdCompatibilityResponseValidationError is the validation error
// returned by GetWorkerBuildIdCompatibilityResponse.Validate if the
// designated constraints aren't met.
type GetWorkerBuildIdCompatibilityResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWorkerBuildIdCompatibilityResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWorkerBuildIdCompatibilityResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWorkerBuildIdCompatibilityResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWorkerBuildIdCompatibilityResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWorkerBuildIdCompatibilityResponseValidationError) ErrorName() string {
	return "GetWorkerBuildIdCompatibilityResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetWorkerBuildIdCompatibilityResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWorkerBuildIdCompatibilityResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWorkerBuildIdCompatibilityResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWorkerBuildIdCompatibilityResponseValidationError{}

// Validate checks the field values on GetWorkerTaskReachabilityRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetWorkerTaskReachabilityRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetWorkerTaskReachabilityRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetWorkerTaskReachabilityRequestMultiError, or nil if none found.
func (m *GetWorkerTaskReachabilityRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWorkerTaskReachabilityRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Namespace

	// no validation rules for Reachability

	if len(errors) > 0 {
		return GetWorkerTaskReachabilityRequestMultiError(errors)
	}

	return nil
}

// GetWorkerTaskReachabilityRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetWorkerTaskReachabilityRequest.ValidateAll() if the designated
// constraints aren't met.
type GetWorkerTaskReachabilityRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWorkerTaskReachabilityRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWorkerTaskReachabilityRequestMultiError) AllErrors() []error { return m }

// GetWorkerTaskReachabilityRequestValidationError is the validation error
// returned by GetWorkerTaskReachabilityRequest.Validate if the designated
// constraints aren't met.
type GetWorkerTaskReachabilityRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWorkerTaskReachabilityRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWorkerTaskReachabilityRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWorkerTaskReachabilityRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWorkerTaskReachabilityRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWorkerTaskReachabilityRequestValidationError) ErrorName() string {
	return "GetWorkerTaskReachabilityRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetWorkerTaskReachabilityRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWorkerTaskReachabilityRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWorkerTaskReachabilityRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWorkerTaskReachabilityRequestValidationError{}

// Validate checks the field values on GetWorkerTaskReachabilityResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetWorkerTaskReachabilityResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetWorkerTaskReachabilityResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetWorkerTaskReachabilityResponseMultiError, or nil if none found.
func (m *GetWorkerTaskReachabilityResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWorkerTaskReachabilityResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetBuildIdReachability() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetWorkerTaskReachabilityResponseValidationError{
						field:  fmt.Sprintf("BuildIdReachability[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetWorkerTaskReachabilityResponseValidationError{
						field:  fmt.Sprintf("BuildIdReachability[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetWorkerTaskReachabilityResponseValidationError{
					field:  fmt.Sprintf("BuildIdReachability[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetWorkerTaskReachabilityResponseMultiError(errors)
	}

	return nil
}

// GetWorkerTaskReachabilityResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetWorkerTaskReachabilityResponse.ValidateAll() if the designated
// constraints aren't met.
type GetWorkerTaskReachabilityResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWorkerTaskReachabilityResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWorkerTaskReachabilityResponseMultiError) AllErrors() []error { return m }

// GetWorkerTaskReachabilityResponseValidationError is the validation error
// returned by GetWorkerTaskReachabilityResponse.Validate if the designated
// constraints aren't met.
type GetWorkerTaskReachabilityResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWorkerTaskReachabilityResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWorkerTaskReachabilityResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWorkerTaskReachabilityResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWorkerTaskReachabilityResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWorkerTaskReachabilityResponseValidationError) ErrorName() string {
	return "GetWorkerTaskReachabilityResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetWorkerTaskReachabilityResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWorkerTaskReachabilityResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWorkerTaskReachabilityResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWorkerTaskReachabilityResponseValidationError{}

// Validate checks the field values on UpdateWorkflowExecutionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateWorkflowExecutionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateWorkflowExecutionRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateWorkflowExecutionRequestMultiError, or nil if none found.
func (m *UpdateWorkflowExecutionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateWorkflowExecutionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Namespace

	if all {
		switch v := interface{}(m.GetWorkflowExecution()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateWorkflowExecutionRequestValidationError{
					field:  "WorkflowExecution",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateWorkflowExecutionRequestValidationError{
					field:  "WorkflowExecution",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkflowExecution()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateWorkflowExecutionRequestValidationError{
				field:  "WorkflowExecution",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for FirstExecutionRunId

	if all {
		switch v := interface{}(m.GetWaitPolicy()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateWorkflowExecutionRequestValidationError{
					field:  "WaitPolicy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateWorkflowExecutionRequestValidationError{
					field:  "WaitPolicy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWaitPolicy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateWorkflowExecutionRequestValidationError{
				field:  "WaitPolicy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateWorkflowExecutionRequestValidationError{
					field:  "Request",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateWorkflowExecutionRequestValidationError{
					field:  "Request",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateWorkflowExecutionRequestValidationError{
				field:  "Request",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateWorkflowExecutionRequestMultiError(errors)
	}

	return nil
}

// UpdateWorkflowExecutionRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateWorkflowExecutionRequest.ValidateAll()
// if the designated constraints aren't met.
type UpdateWorkflowExecutionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateWorkflowExecutionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateWorkflowExecutionRequestMultiError) AllErrors() []error { return m }

// UpdateWorkflowExecutionRequestValidationError is the validation error
// returned by UpdateWorkflowExecutionRequest.Validate if the designated
// constraints aren't met.
type UpdateWorkflowExecutionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateWorkflowExecutionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateWorkflowExecutionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateWorkflowExecutionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateWorkflowExecutionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateWorkflowExecutionRequestValidationError) ErrorName() string {
	return "UpdateWorkflowExecutionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateWorkflowExecutionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateWorkflowExecutionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateWorkflowExecutionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateWorkflowExecutionRequestValidationError{}

// Validate checks the field values on UpdateWorkflowExecutionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateWorkflowExecutionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateWorkflowExecutionResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateWorkflowExecutionResponseMultiError, or nil if none found.
func (m *UpdateWorkflowExecutionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateWorkflowExecutionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUpdateRef()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateWorkflowExecutionResponseValidationError{
					field:  "UpdateRef",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateWorkflowExecutionResponseValidationError{
					field:  "UpdateRef",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateRef()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateWorkflowExecutionResponseValidationError{
				field:  "UpdateRef",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOutcome()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateWorkflowExecutionResponseValidationError{
					field:  "Outcome",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateWorkflowExecutionResponseValidationError{
					field:  "Outcome",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOutcome()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateWorkflowExecutionResponseValidationError{
				field:  "Outcome",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateWorkflowExecutionResponseMultiError(errors)
	}

	return nil
}

// UpdateWorkflowExecutionResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateWorkflowExecutionResponse.ValidateAll()
// if the designated constraints aren't met.
type UpdateWorkflowExecutionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateWorkflowExecutionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateWorkflowExecutionResponseMultiError) AllErrors() []error { return m }

// UpdateWorkflowExecutionResponseValidationError is the validation error
// returned by UpdateWorkflowExecutionResponse.Validate if the designated
// constraints aren't met.
type UpdateWorkflowExecutionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateWorkflowExecutionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateWorkflowExecutionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateWorkflowExecutionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateWorkflowExecutionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateWorkflowExecutionResponseValidationError) ErrorName() string {
	return "UpdateWorkflowExecutionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateWorkflowExecutionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateWorkflowExecutionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateWorkflowExecutionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateWorkflowExecutionResponseValidationError{}

// Validate checks the field values on StartBatchOperationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StartBatchOperationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartBatchOperationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StartBatchOperationRequestMultiError, or nil if none found.
func (m *StartBatchOperationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StartBatchOperationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Namespace

	// no validation rules for VisibilityQuery

	// no validation rules for JobId

	// no validation rules for Reason

	for idx, item := range m.GetExecutions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StartBatchOperationRequestValidationError{
						field:  fmt.Sprintf("Executions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StartBatchOperationRequestValidationError{
						field:  fmt.Sprintf("Executions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StartBatchOperationRequestValidationError{
					field:  fmt.Sprintf("Executions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	switch v := m.Operation.(type) {
	case *StartBatchOperationRequest_TerminationOperation:
		if v == nil {
			err := StartBatchOperationRequestValidationError{
				field:  "Operation",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetTerminationOperation()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StartBatchOperationRequestValidationError{
						field:  "TerminationOperation",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StartBatchOperationRequestValidationError{
						field:  "TerminationOperation",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTerminationOperation()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StartBatchOperationRequestValidationError{
					field:  "TerminationOperation",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *StartBatchOperationRequest_SignalOperation:
		if v == nil {
			err := StartBatchOperationRequestValidationError{
				field:  "Operation",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetSignalOperation()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StartBatchOperationRequestValidationError{
						field:  "SignalOperation",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StartBatchOperationRequestValidationError{
						field:  "SignalOperation",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSignalOperation()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StartBatchOperationRequestValidationError{
					field:  "SignalOperation",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *StartBatchOperationRequest_CancellationOperation:
		if v == nil {
			err := StartBatchOperationRequestValidationError{
				field:  "Operation",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetCancellationOperation()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StartBatchOperationRequestValidationError{
						field:  "CancellationOperation",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StartBatchOperationRequestValidationError{
						field:  "CancellationOperation",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCancellationOperation()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StartBatchOperationRequestValidationError{
					field:  "CancellationOperation",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *StartBatchOperationRequest_DeletionOperation:
		if v == nil {
			err := StartBatchOperationRequestValidationError{
				field:  "Operation",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetDeletionOperation()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StartBatchOperationRequestValidationError{
						field:  "DeletionOperation",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StartBatchOperationRequestValidationError{
						field:  "DeletionOperation",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDeletionOperation()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StartBatchOperationRequestValidationError{
					field:  "DeletionOperation",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *StartBatchOperationRequest_ResetOperation:
		if v == nil {
			err := StartBatchOperationRequestValidationError{
				field:  "Operation",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetResetOperation()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StartBatchOperationRequestValidationError{
						field:  "ResetOperation",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StartBatchOperationRequestValidationError{
						field:  "ResetOperation",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetResetOperation()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StartBatchOperationRequestValidationError{
					field:  "ResetOperation",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return StartBatchOperationRequestMultiError(errors)
	}

	return nil
}

// StartBatchOperationRequestMultiError is an error wrapping multiple
// validation errors returned by StartBatchOperationRequest.ValidateAll() if
// the designated constraints aren't met.
type StartBatchOperationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartBatchOperationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartBatchOperationRequestMultiError) AllErrors() []error { return m }

// StartBatchOperationRequestValidationError is the validation error returned
// by StartBatchOperationRequest.Validate if the designated constraints aren't met.
type StartBatchOperationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartBatchOperationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartBatchOperationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartBatchOperationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartBatchOperationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartBatchOperationRequestValidationError) ErrorName() string {
	return "StartBatchOperationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StartBatchOperationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartBatchOperationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartBatchOperationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartBatchOperationRequestValidationError{}

// Validate checks the field values on StartBatchOperationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StartBatchOperationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartBatchOperationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StartBatchOperationResponseMultiError, or nil if none found.
func (m *StartBatchOperationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StartBatchOperationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return StartBatchOperationResponseMultiError(errors)
	}

	return nil
}

// StartBatchOperationResponseMultiError is an error wrapping multiple
// validation errors returned by StartBatchOperationResponse.ValidateAll() if
// the designated constraints aren't met.
type StartBatchOperationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartBatchOperationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartBatchOperationResponseMultiError) AllErrors() []error { return m }

// StartBatchOperationResponseValidationError is the validation error returned
// by StartBatchOperationResponse.Validate if the designated constraints
// aren't met.
type StartBatchOperationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartBatchOperationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartBatchOperationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartBatchOperationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartBatchOperationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartBatchOperationResponseValidationError) ErrorName() string {
	return "StartBatchOperationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e StartBatchOperationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartBatchOperationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartBatchOperationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartBatchOperationResponseValidationError{}

// Validate checks the field values on StopBatchOperationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StopBatchOperationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StopBatchOperationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StopBatchOperationRequestMultiError, or nil if none found.
func (m *StopBatchOperationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StopBatchOperationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Namespace

	// no validation rules for JobId

	// no validation rules for Reason

	// no validation rules for Identity

	if len(errors) > 0 {
		return StopBatchOperationRequestMultiError(errors)
	}

	return nil
}

// StopBatchOperationRequestMultiError is an error wrapping multiple validation
// errors returned by StopBatchOperationRequest.ValidateAll() if the
// designated constraints aren't met.
type StopBatchOperationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StopBatchOperationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StopBatchOperationRequestMultiError) AllErrors() []error { return m }

// StopBatchOperationRequestValidationError is the validation error returned by
// StopBatchOperationRequest.Validate if the designated constraints aren't met.
type StopBatchOperationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StopBatchOperationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StopBatchOperationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StopBatchOperationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StopBatchOperationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StopBatchOperationRequestValidationError) ErrorName() string {
	return "StopBatchOperationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StopBatchOperationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStopBatchOperationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StopBatchOperationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StopBatchOperationRequestValidationError{}

// Validate checks the field values on StopBatchOperationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StopBatchOperationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StopBatchOperationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StopBatchOperationResponseMultiError, or nil if none found.
func (m *StopBatchOperationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StopBatchOperationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return StopBatchOperationResponseMultiError(errors)
	}

	return nil
}

// StopBatchOperationResponseMultiError is an error wrapping multiple
// validation errors returned by StopBatchOperationResponse.ValidateAll() if
// the designated constraints aren't met.
type StopBatchOperationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StopBatchOperationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StopBatchOperationResponseMultiError) AllErrors() []error { return m }

// StopBatchOperationResponseValidationError is the validation error returned
// by StopBatchOperationResponse.Validate if the designated constraints aren't met.
type StopBatchOperationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StopBatchOperationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StopBatchOperationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StopBatchOperationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StopBatchOperationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StopBatchOperationResponseValidationError) ErrorName() string {
	return "StopBatchOperationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e StopBatchOperationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStopBatchOperationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StopBatchOperationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StopBatchOperationResponseValidationError{}

// Validate checks the field values on DescribeBatchOperationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeBatchOperationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeBatchOperationRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DescribeBatchOperationRequestMultiError, or nil if none found.
func (m *DescribeBatchOperationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeBatchOperationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Namespace

	// no validation rules for JobId

	if len(errors) > 0 {
		return DescribeBatchOperationRequestMultiError(errors)
	}

	return nil
}

// DescribeBatchOperationRequestMultiError is an error wrapping multiple
// validation errors returned by DescribeBatchOperationRequest.ValidateAll()
// if the designated constraints aren't met.
type DescribeBatchOperationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeBatchOperationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeBatchOperationRequestMultiError) AllErrors() []error { return m }

// DescribeBatchOperationRequestValidationError is the validation error
// returned by DescribeBatchOperationRequest.Validate if the designated
// constraints aren't met.
type DescribeBatchOperationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeBatchOperationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeBatchOperationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeBatchOperationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeBatchOperationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeBatchOperationRequestValidationError) ErrorName() string {
	return "DescribeBatchOperationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeBatchOperationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeBatchOperationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeBatchOperationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeBatchOperationRequestValidationError{}

// Validate checks the field values on DescribeBatchOperationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeBatchOperationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeBatchOperationResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DescribeBatchOperationResponseMultiError, or nil if none found.
func (m *DescribeBatchOperationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeBatchOperationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OperationType

	// no validation rules for JobId

	// no validation rules for State

	if all {
		switch v := interface{}(m.GetStartTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DescribeBatchOperationResponseValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DescribeBatchOperationResponseValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DescribeBatchOperationResponseValidationError{
				field:  "StartTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCloseTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DescribeBatchOperationResponseValidationError{
					field:  "CloseTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DescribeBatchOperationResponseValidationError{
					field:  "CloseTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCloseTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DescribeBatchOperationResponseValidationError{
				field:  "CloseTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for TotalOperationCount

	// no validation rules for CompleteOperationCount

	// no validation rules for FailureOperationCount

	// no validation rules for Identity

	// no validation rules for Reason

	if len(errors) > 0 {
		return DescribeBatchOperationResponseMultiError(errors)
	}

	return nil
}

// DescribeBatchOperationResponseMultiError is an error wrapping multiple
// validation errors returned by DescribeBatchOperationResponse.ValidateAll()
// if the designated constraints aren't met.
type DescribeBatchOperationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeBatchOperationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeBatchOperationResponseMultiError) AllErrors() []error { return m }

// DescribeBatchOperationResponseValidationError is the validation error
// returned by DescribeBatchOperationResponse.Validate if the designated
// constraints aren't met.
type DescribeBatchOperationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeBatchOperationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeBatchOperationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeBatchOperationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeBatchOperationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeBatchOperationResponseValidationError) ErrorName() string {
	return "DescribeBatchOperationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeBatchOperationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeBatchOperationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeBatchOperationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeBatchOperationResponseValidationError{}

// Validate checks the field values on ListBatchOperationsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListBatchOperationsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBatchOperationsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListBatchOperationsRequestMultiError, or nil if none found.
func (m *ListBatchOperationsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBatchOperationsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Namespace

	// no validation rules for PageSize

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListBatchOperationsRequestMultiError(errors)
	}

	return nil
}

// ListBatchOperationsRequestMultiError is an error wrapping multiple
// validation errors returned by ListBatchOperationsRequest.ValidateAll() if
// the designated constraints aren't met.
type ListBatchOperationsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBatchOperationsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBatchOperationsRequestMultiError) AllErrors() []error { return m }

// ListBatchOperationsRequestValidationError is the validation error returned
// by ListBatchOperationsRequest.Validate if the designated constraints aren't met.
type ListBatchOperationsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBatchOperationsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBatchOperationsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBatchOperationsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBatchOperationsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBatchOperationsRequestValidationError) ErrorName() string {
	return "ListBatchOperationsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListBatchOperationsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBatchOperationsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBatchOperationsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBatchOperationsRequestValidationError{}

// Validate checks the field values on ListBatchOperationsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListBatchOperationsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBatchOperationsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListBatchOperationsResponseMultiError, or nil if none found.
func (m *ListBatchOperationsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBatchOperationsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetOperationInfo() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListBatchOperationsResponseValidationError{
						field:  fmt.Sprintf("OperationInfo[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListBatchOperationsResponseValidationError{
						field:  fmt.Sprintf("OperationInfo[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListBatchOperationsResponseValidationError{
					field:  fmt.Sprintf("OperationInfo[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListBatchOperationsResponseMultiError(errors)
	}

	return nil
}

// ListBatchOperationsResponseMultiError is an error wrapping multiple
// validation errors returned by ListBatchOperationsResponse.ValidateAll() if
// the designated constraints aren't met.
type ListBatchOperationsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBatchOperationsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBatchOperationsResponseMultiError) AllErrors() []error { return m }

// ListBatchOperationsResponseValidationError is the validation error returned
// by ListBatchOperationsResponse.Validate if the designated constraints
// aren't met.
type ListBatchOperationsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBatchOperationsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBatchOperationsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBatchOperationsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBatchOperationsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBatchOperationsResponseValidationError) ErrorName() string {
	return "ListBatchOperationsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListBatchOperationsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBatchOperationsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBatchOperationsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBatchOperationsResponseValidationError{}

// Validate checks the field values on PollWorkflowExecutionUpdateRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *PollWorkflowExecutionUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PollWorkflowExecutionUpdateRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// PollWorkflowExecutionUpdateRequestMultiError, or nil if none found.
func (m *PollWorkflowExecutionUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PollWorkflowExecutionUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Namespace

	if all {
		switch v := interface{}(m.GetUpdateRef()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PollWorkflowExecutionUpdateRequestValidationError{
					field:  "UpdateRef",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PollWorkflowExecutionUpdateRequestValidationError{
					field:  "UpdateRef",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateRef()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PollWorkflowExecutionUpdateRequestValidationError{
				field:  "UpdateRef",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Identity

	if all {
		switch v := interface{}(m.GetWaitPolicy()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PollWorkflowExecutionUpdateRequestValidationError{
					field:  "WaitPolicy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PollWorkflowExecutionUpdateRequestValidationError{
					field:  "WaitPolicy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWaitPolicy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PollWorkflowExecutionUpdateRequestValidationError{
				field:  "WaitPolicy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PollWorkflowExecutionUpdateRequestMultiError(errors)
	}

	return nil
}

// PollWorkflowExecutionUpdateRequestMultiError is an error wrapping multiple
// validation errors returned by
// PollWorkflowExecutionUpdateRequest.ValidateAll() if the designated
// constraints aren't met.
type PollWorkflowExecutionUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PollWorkflowExecutionUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PollWorkflowExecutionUpdateRequestMultiError) AllErrors() []error { return m }

// PollWorkflowExecutionUpdateRequestValidationError is the validation error
// returned by PollWorkflowExecutionUpdateRequest.Validate if the designated
// constraints aren't met.
type PollWorkflowExecutionUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PollWorkflowExecutionUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PollWorkflowExecutionUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PollWorkflowExecutionUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PollWorkflowExecutionUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PollWorkflowExecutionUpdateRequestValidationError) ErrorName() string {
	return "PollWorkflowExecutionUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PollWorkflowExecutionUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPollWorkflowExecutionUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PollWorkflowExecutionUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PollWorkflowExecutionUpdateRequestValidationError{}

// Validate checks the field values on PollWorkflowExecutionUpdateResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *PollWorkflowExecutionUpdateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PollWorkflowExecutionUpdateResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// PollWorkflowExecutionUpdateResponseMultiError, or nil if none found.
func (m *PollWorkflowExecutionUpdateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PollWorkflowExecutionUpdateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOutcome()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PollWorkflowExecutionUpdateResponseValidationError{
					field:  "Outcome",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PollWorkflowExecutionUpdateResponseValidationError{
					field:  "Outcome",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOutcome()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PollWorkflowExecutionUpdateResponseValidationError{
				field:  "Outcome",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PollWorkflowExecutionUpdateResponseMultiError(errors)
	}

	return nil
}

// PollWorkflowExecutionUpdateResponseMultiError is an error wrapping multiple
// validation errors returned by
// PollWorkflowExecutionUpdateResponse.ValidateAll() if the designated
// constraints aren't met.
type PollWorkflowExecutionUpdateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PollWorkflowExecutionUpdateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PollWorkflowExecutionUpdateResponseMultiError) AllErrors() []error { return m }

// PollWorkflowExecutionUpdateResponseValidationError is the validation error
// returned by PollWorkflowExecutionUpdateResponse.Validate if the designated
// constraints aren't met.
type PollWorkflowExecutionUpdateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PollWorkflowExecutionUpdateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PollWorkflowExecutionUpdateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PollWorkflowExecutionUpdateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PollWorkflowExecutionUpdateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PollWorkflowExecutionUpdateResponseValidationError) ErrorName() string {
	return "PollWorkflowExecutionUpdateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PollWorkflowExecutionUpdateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPollWorkflowExecutionUpdateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PollWorkflowExecutionUpdateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PollWorkflowExecutionUpdateResponseValidationError{}

// Validate checks the field values on GetSystemInfoResponse_Capabilities with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetSystemInfoResponse_Capabilities) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSystemInfoResponse_Capabilities
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetSystemInfoResponse_CapabilitiesMultiError, or nil if none found.
func (m *GetSystemInfoResponse_Capabilities) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSystemInfoResponse_Capabilities) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SignalAndQueryHeader

	// no validation rules for InternalErrorDifferentiation

	// no validation rules for ActivityFailureIncludeHeartbeat

	// no validation rules for SupportsSchedules

	// no validation rules for EncodedFailureAttributes

	// no validation rules for BuildIdBasedVersioning

	// no validation rules for UpsertMemo

	// no validation rules for EagerWorkflowStart

	// no validation rules for SdkMetadata

	if len(errors) > 0 {
		return GetSystemInfoResponse_CapabilitiesMultiError(errors)
	}

	return nil
}

// GetSystemInfoResponse_CapabilitiesMultiError is an error wrapping multiple
// validation errors returned by
// GetSystemInfoResponse_Capabilities.ValidateAll() if the designated
// constraints aren't met.
type GetSystemInfoResponse_CapabilitiesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSystemInfoResponse_CapabilitiesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSystemInfoResponse_CapabilitiesMultiError) AllErrors() []error { return m }

// GetSystemInfoResponse_CapabilitiesValidationError is the validation error
// returned by GetSystemInfoResponse_Capabilities.Validate if the designated
// constraints aren't met.
type GetSystemInfoResponse_CapabilitiesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSystemInfoResponse_CapabilitiesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSystemInfoResponse_CapabilitiesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSystemInfoResponse_CapabilitiesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSystemInfoResponse_CapabilitiesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSystemInfoResponse_CapabilitiesValidationError) ErrorName() string {
	return "GetSystemInfoResponse_CapabilitiesValidationError"
}

// Error satisfies the builtin error interface
func (e GetSystemInfoResponse_CapabilitiesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSystemInfoResponse_Capabilities.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSystemInfoResponse_CapabilitiesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSystemInfoResponse_CapabilitiesValidationError{}

// Validate checks the field values on
// UpdateWorkerBuildIdCompatibilityRequest_AddNewCompatibleVersion with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateWorkerBuildIdCompatibilityRequest_AddNewCompatibleVersion) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// UpdateWorkerBuildIdCompatibilityRequest_AddNewCompatibleVersion with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateWorkerBuildIdCompatibilityRequest_AddNewCompatibleVersionMultiError,
// or nil if none found.
func (m *UpdateWorkerBuildIdCompatibilityRequest_AddNewCompatibleVersion) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateWorkerBuildIdCompatibilityRequest_AddNewCompatibleVersion) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NewBuildId

	// no validation rules for ExistingCompatibleBuildId

	// no validation rules for MakeSetDefault

	if len(errors) > 0 {
		return UpdateWorkerBuildIdCompatibilityRequest_AddNewCompatibleVersionMultiError(errors)
	}

	return nil
}

// UpdateWorkerBuildIdCompatibilityRequest_AddNewCompatibleVersionMultiError is
// an error wrapping multiple validation errors returned by
// UpdateWorkerBuildIdCompatibilityRequest_AddNewCompatibleVersion.ValidateAll()
// if the designated constraints aren't met.
type UpdateWorkerBuildIdCompatibilityRequest_AddNewCompatibleVersionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateWorkerBuildIdCompatibilityRequest_AddNewCompatibleVersionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateWorkerBuildIdCompatibilityRequest_AddNewCompatibleVersionMultiError) AllErrors() []error {
	return m
}

// UpdateWorkerBuildIdCompatibilityRequest_AddNewCompatibleVersionValidationError
// is the validation error returned by
// UpdateWorkerBuildIdCompatibilityRequest_AddNewCompatibleVersion.Validate if
// the designated constraints aren't met.
type UpdateWorkerBuildIdCompatibilityRequest_AddNewCompatibleVersionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateWorkerBuildIdCompatibilityRequest_AddNewCompatibleVersionValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e UpdateWorkerBuildIdCompatibilityRequest_AddNewCompatibleVersionValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e UpdateWorkerBuildIdCompatibilityRequest_AddNewCompatibleVersionValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e UpdateWorkerBuildIdCompatibilityRequest_AddNewCompatibleVersionValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e UpdateWorkerBuildIdCompatibilityRequest_AddNewCompatibleVersionValidationError) ErrorName() string {
	return "UpdateWorkerBuildIdCompatibilityRequest_AddNewCompatibleVersionValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateWorkerBuildIdCompatibilityRequest_AddNewCompatibleVersionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateWorkerBuildIdCompatibilityRequest_AddNewCompatibleVersion.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateWorkerBuildIdCompatibilityRequest_AddNewCompatibleVersionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateWorkerBuildIdCompatibilityRequest_AddNewCompatibleVersionValidationError{}

// Validate checks the field values on
// UpdateWorkerBuildIdCompatibilityRequest_MergeSets with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateWorkerBuildIdCompatibilityRequest_MergeSets) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// UpdateWorkerBuildIdCompatibilityRequest_MergeSets with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// UpdateWorkerBuildIdCompatibilityRequest_MergeSetsMultiError, or nil if none found.
func (m *UpdateWorkerBuildIdCompatibilityRequest_MergeSets) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateWorkerBuildIdCompatibilityRequest_MergeSets) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PrimarySetBuildId

	// no validation rules for SecondarySetBuildId

	if len(errors) > 0 {
		return UpdateWorkerBuildIdCompatibilityRequest_MergeSetsMultiError(errors)
	}

	return nil
}

// UpdateWorkerBuildIdCompatibilityRequest_MergeSetsMultiError is an error
// wrapping multiple validation errors returned by
// UpdateWorkerBuildIdCompatibilityRequest_MergeSets.ValidateAll() if the
// designated constraints aren't met.
type UpdateWorkerBuildIdCompatibilityRequest_MergeSetsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateWorkerBuildIdCompatibilityRequest_MergeSetsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateWorkerBuildIdCompatibilityRequest_MergeSetsMultiError) AllErrors() []error { return m }

// UpdateWorkerBuildIdCompatibilityRequest_MergeSetsValidationError is the
// validation error returned by
// UpdateWorkerBuildIdCompatibilityRequest_MergeSets.Validate if the
// designated constraints aren't met.
type UpdateWorkerBuildIdCompatibilityRequest_MergeSetsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateWorkerBuildIdCompatibilityRequest_MergeSetsValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e UpdateWorkerBuildIdCompatibilityRequest_MergeSetsValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e UpdateWorkerBuildIdCompatibilityRequest_MergeSetsValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e UpdateWorkerBuildIdCompatibilityRequest_MergeSetsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateWorkerBuildIdCompatibilityRequest_MergeSetsValidationError) ErrorName() string {
	return "UpdateWorkerBuildIdCompatibilityRequest_MergeSetsValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateWorkerBuildIdCompatibilityRequest_MergeSetsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateWorkerBuildIdCompatibilityRequest_MergeSets.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateWorkerBuildIdCompatibilityRequest_MergeSetsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateWorkerBuildIdCompatibilityRequest_MergeSetsValidationError{}
