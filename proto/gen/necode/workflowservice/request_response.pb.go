// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: necode/workflowservice/request_response.proto

package workflowservice

import (
	batch "github.com/rskvp/necode/proto/gen/necode/batch"
	command "github.com/rskvp/necode/proto/gen/necode/command"
	common "github.com/rskvp/necode/proto/gen/necode/common"
	enums "github.com/rskvp/necode/proto/gen/necode/enums"
	failure "github.com/rskvp/necode/proto/gen/necode/failure"
	filter "github.com/rskvp/necode/proto/gen/necode/filter"
	_ "github.com/rskvp/necode/proto/gen/necode/gogoproto"
	history "github.com/rskvp/necode/proto/gen/necode/history"
	namespace "github.com/rskvp/necode/proto/gen/necode/namespace"
	protocol "github.com/rskvp/necode/proto/gen/necode/protocol"
	query "github.com/rskvp/necode/proto/gen/necode/query"
	replication "github.com/rskvp/necode/proto/gen/necode/replication"
	schedule "github.com/rskvp/necode/proto/gen/necode/schedule"
	sdk "github.com/rskvp/necode/proto/gen/necode/sdk"
	taskqueue "github.com/rskvp/necode/proto/gen/necode/taskqueue"
	update "github.com/rskvp/necode/proto/gen/necode/update"
	version "github.com/rskvp/necode/proto/gen/necode/version"
	workflow "github.com/rskvp/necode/proto/gen/necode/workflow"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RegisterNamespaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace                        string                                  `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Description                      string                                  `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	OwnerEmail                       string                                  `protobuf:"bytes,3,opt,name=owner_email,json=ownerEmail,proto3" json:"owner_email,omitempty"`
	WorkflowExecutionRetentionPeriod *durationpb.Duration                    `protobuf:"bytes,4,opt,name=workflow_execution_retention_period,json=workflowExecutionRetentionPeriod,proto3" json:"workflow_execution_retention_period,omitempty"`
	Clusters                         []*replication.ClusterReplicationConfig `protobuf:"bytes,5,rep,name=clusters,proto3" json:"clusters,omitempty"`
	ActiveClusterName                string                                  `protobuf:"bytes,6,opt,name=active_cluster_name,json=activeClusterName,proto3" json:"active_cluster_name,omitempty"`
	// A key-value map for any customized purpose.
	Data              map[string]string `protobuf:"bytes,7,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SecurityToken     string            `protobuf:"bytes,8,opt,name=security_token,json=securityToken,proto3" json:"security_token,omitempty"`
	IsGlobalNamespace bool              `protobuf:"varint,9,opt,name=is_global_namespace,json=isGlobalNamespace,proto3" json:"is_global_namespace,omitempty"`
	// If unspecified (ARCHIVAL_STATE_UNSPECIFIED) then default server configuration is used.
	HistoryArchivalState enums.ArchivalState `protobuf:"varint,10,opt,name=history_archival_state,json=historyArchivalState,proto3,enum=necode.enums.ArchivalState" json:"history_archival_state,omitempty"`
	HistoryArchivalUri   string              `protobuf:"bytes,11,opt,name=history_archival_uri,json=historyArchivalUri,proto3" json:"history_archival_uri,omitempty"`
	// If unspecified (ARCHIVAL_STATE_UNSPECIFIED) then default server configuration is used.
	VisibilityArchivalState enums.ArchivalState `protobuf:"varint,12,opt,name=visibility_archival_state,json=visibilityArchivalState,proto3,enum=necode.enums.ArchivalState" json:"visibility_archival_state,omitempty"`
	VisibilityArchivalUri   string              `protobuf:"bytes,13,opt,name=visibility_archival_uri,json=visibilityArchivalUri,proto3" json:"visibility_archival_uri,omitempty"`
}

func (x *RegisterNamespaceRequest) Reset() {
	*x = RegisterNamespaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_workflowservice_request_response_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterNamespaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterNamespaceRequest) ProtoMessage() {}

func (x *RegisterNamespaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_necode_workflowservice_request_response_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterNamespaceRequest.ProtoReflect.Descriptor instead.
func (*RegisterNamespaceRequest) Descriptor() ([]byte, []int) {
	return file_necode_workflowservice_request_response_proto_rawDescGZIP(), []int{0}
}

func (x *RegisterNamespaceRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *RegisterNamespaceRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *RegisterNamespaceRequest) GetOwnerEmail() string {
	if x != nil {
		return x.OwnerEmail
	}
	return ""
}

func (x *RegisterNamespaceRequest) GetWorkflowExecutionRetentionPeriod() *durationpb.Duration {
	if x != nil {
		return x.WorkflowExecutionRetentionPeriod
	}
	return nil
}

func (x *RegisterNamespaceRequest) GetClusters() []*replication.ClusterReplicationConfig {
	if x != nil {
		return x.Clusters
	}
	return nil
}

func (x *RegisterNamespaceRequest) GetActiveClusterName() string {
	if x != nil {
		return x.ActiveClusterName
	}
	return ""
}

func (x *RegisterNamespaceRequest) GetData() map[string]string {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *RegisterNamespaceRequest) GetSecurityToken() string {
	if x != nil {
		return x.SecurityToken
	}
	return ""
}

func (x *RegisterNamespaceRequest) GetIsGlobalNamespace() bool {
	if x != nil {
		return x.IsGlobalNamespace
	}
	return false
}

func (x *RegisterNamespaceRequest) GetHistoryArchivalState() enums.ArchivalState {
	if x != nil {
		return x.HistoryArchivalState
	}
	return enums.ArchivalState(0)
}

func (x *RegisterNamespaceRequest) GetHistoryArchivalUri() string {
	if x != nil {
		return x.HistoryArchivalUri
	}
	return ""
}

func (x *RegisterNamespaceRequest) GetVisibilityArchivalState() enums.ArchivalState {
	if x != nil {
		return x.VisibilityArchivalState
	}
	return enums.ArchivalState(0)
}

func (x *RegisterNamespaceRequest) GetVisibilityArchivalUri() string {
	if x != nil {
		return x.VisibilityArchivalUri
	}
	return ""
}

type RegisterNamespaceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RegisterNamespaceResponse) Reset() {
	*x = RegisterNamespaceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_workflowservice_request_response_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterNamespaceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterNamespaceResponse) ProtoMessage() {}

func (x *RegisterNamespaceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_necode_workflowservice_request_response_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterNamespaceResponse.ProtoReflect.Descriptor instead.
func (*RegisterNamespaceResponse) Descriptor() ([]byte, []int) {
	return file_necode_workflowservice_request_response_proto_rawDescGZIP(), []int{1}
}

type ListNamespacesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageSize        int32                      `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	NextPageToken   []byte                     `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	NamespaceFilter *namespace.NamespaceFilter `protobuf:"bytes,3,opt,name=namespace_filter,json=namespaceFilter,proto3" json:"namespace_filter,omitempty"`
}

func (x *ListNamespacesRequest) Reset() {
	*x = ListNamespacesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_workflowservice_request_response_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNamespacesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNamespacesRequest) ProtoMessage() {}

func (x *ListNamespacesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_necode_workflowservice_request_response_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNamespacesRequest.ProtoReflect.Descriptor instead.
func (*ListNamespacesRequest) Descriptor() ([]byte, []int) {
	return file_necode_workflowservice_request_response_proto_rawDescGZIP(), []int{2}
}

func (x *ListNamespacesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListNamespacesRequest) GetNextPageToken() []byte {
	if x != nil {
		return x.NextPageToken
	}
	return nil
}

func (x *ListNamespacesRequest) GetNamespaceFilter() *namespace.NamespaceFilter {
	if x != nil {
		return x.NamespaceFilter
	}
	return nil
}

type ListNamespacesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespaces    []*DescribeNamespaceResponse `protobuf:"bytes,1,rep,name=namespaces,proto3" json:"namespaces,omitempty"`
	NextPageToken []byte                       `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListNamespacesResponse) Reset() {
	*x = ListNamespacesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_workflowservice_request_response_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNamespacesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNamespacesResponse) ProtoMessage() {}

func (x *ListNamespacesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_necode_workflowservice_request_response_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNamespacesResponse.ProtoReflect.Descriptor instead.
func (*ListNamespacesResponse) Descriptor() ([]byte, []int) {
	return file_necode_workflowservice_request_response_proto_rawDescGZIP(), []int{3}
}

func (x *ListNamespacesResponse) GetNamespaces() []*DescribeNamespaceResponse {
	if x != nil {
		return x.Namespaces
	}
	return nil
}

func (x *ListNamespacesResponse) GetNextPageToken() []byte {
	if x != nil {
		return x.NextPageToken
	}
	return nil
}

type DescribeNamespaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Id        string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DescribeNamespaceRequest) Reset() {
	*x = DescribeNamespaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_workflowservice_request_response_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeNamespaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeNamespaceRequest) ProtoMessage() {}

func (x *DescribeNamespaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_necode_workflowservice_request_response_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeNamespaceRequest.ProtoReflect.Descriptor instead.
func (*DescribeNamespaceRequest) Descriptor() ([]byte, []int) {
	return file_necode_workflowservice_request_response_proto_rawDescGZIP(), []int{4}
}

func (x *DescribeNamespaceRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *DescribeNamespaceRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DescribeNamespaceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NamespaceInfo     *namespace.NamespaceInfo                `protobuf:"bytes,1,opt,name=namespace_info,json=namespaceInfo,proto3" json:"namespace_info,omitempty"`
	Config            *namespace.NamespaceConfig              `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
	ReplicationConfig *replication.NamespaceReplicationConfig `protobuf:"bytes,3,opt,name=replication_config,json=replicationConfig,proto3" json:"replication_config,omitempty"`
	FailoverVersion   int64                                   `protobuf:"varint,4,opt,name=failover_version,json=failoverVersion,proto3" json:"failover_version,omitempty"`
	IsGlobalNamespace bool                                    `protobuf:"varint,5,opt,name=is_global_namespace,json=isGlobalNamespace,proto3" json:"is_global_namespace,omitempty"`
	// Contains the historical state of failover_versions for the cluster, truncated to contain only the last N
	// states to ensure that the list does not grow unbounded.
	FailoverHistory []*replication.FailoverStatus `protobuf:"bytes,6,rep,name=failover_history,json=failoverHistory,proto3" json:"failover_history,omitempty"`
}

func (x *DescribeNamespaceResponse) Reset() {
	*x = DescribeNamespaceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_workflowservice_request_response_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeNamespaceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeNamespaceResponse) ProtoMessage() {}

func (x *DescribeNamespaceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_necode_workflowservice_request_response_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeNamespaceResponse.ProtoReflect.Descriptor instead.
func (*DescribeNamespaceResponse) Descriptor() ([]byte, []int) {
	return file_necode_workflowservice_request_response_proto_rawDescGZIP(), []int{5}
}

func (x *DescribeNamespaceResponse) GetNamespaceInfo() *namespace.NamespaceInfo {
	if x != nil {
		return x.NamespaceInfo
	}
	return nil
}

func (x *DescribeNamespaceResponse) GetConfig() *namespace.NamespaceConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *DescribeNamespaceResponse) GetReplicationConfig() *replication.NamespaceReplicationConfig {
	if x != nil {
		return x.ReplicationConfig
	}
	return nil
}

func (x *DescribeNamespaceResponse) GetFailoverVersion() int64 {
	if x != nil {
		return x.FailoverVersion
	}
	return 0
}

func (x *DescribeNamespaceResponse) GetIsGlobalNamespace() bool {
	if x != nil {
		return x.IsGlobalNamespace
	}
	return false
}

func (x *DescribeNamespaceResponse) GetFailoverHistory() []*replication.FailoverStatus {
	if x != nil {
		return x.FailoverHistory
	}
	return nil
}

// (-- api-linter: core::0134::request-mask-required=disabled
//
//	aip.dev/not-precedent: UpdateNamespace RPC doesn't follow Google API format. --)
//
// (-- api-linter: core::0134::request-resource-required=disabled
//
//	aip.dev/not-precedent: UpdateNamespace RPC doesn't follow Google API format. --)
type UpdateNamespaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace         string                                  `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	UpdateInfo        *namespace.UpdateNamespaceInfo          `protobuf:"bytes,2,opt,name=update_info,json=updateInfo,proto3" json:"update_info,omitempty"`
	Config            *namespace.NamespaceConfig              `protobuf:"bytes,3,opt,name=config,proto3" json:"config,omitempty"`
	ReplicationConfig *replication.NamespaceReplicationConfig `protobuf:"bytes,4,opt,name=replication_config,json=replicationConfig,proto3" json:"replication_config,omitempty"`
	SecurityToken     string                                  `protobuf:"bytes,5,opt,name=security_token,json=securityToken,proto3" json:"security_token,omitempty"`
	DeleteBadBinary   string                                  `protobuf:"bytes,6,opt,name=delete_bad_binary,json=deleteBadBinary,proto3" json:"delete_bad_binary,omitempty"`
	// promote local namespace to global namespace. Ignored if namespace is already global namespace.
	PromoteNamespace bool `protobuf:"varint,7,opt,name=promote_namespace,json=promoteNamespace,proto3" json:"promote_namespace,omitempty"`
}

func (x *UpdateNamespaceRequest) Reset() {
	*x = UpdateNamespaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_workflowservice_request_response_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNamespaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNamespaceRequest) ProtoMessage() {}

func (x *UpdateNamespaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_necode_workflowservice_request_response_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNamespaceRequest.ProtoReflect.Descriptor instead.
func (*UpdateNamespaceRequest) Descriptor() ([]byte, []int) {
	return file_necode_workflowservice_request_response_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateNamespaceRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *UpdateNamespaceRequest) GetUpdateInfo() *namespace.UpdateNamespaceInfo {
	if x != nil {
		return x.UpdateInfo
	}
	return nil
}

func (x *UpdateNamespaceRequest) GetConfig() *namespace.NamespaceConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *UpdateNamespaceRequest) GetReplicationConfig() *replication.NamespaceReplicationConfig {
	if x != nil {
		return x.ReplicationConfig
	}
	return nil
}

func (x *UpdateNamespaceRequest) GetSecurityToken() string {
	if x != nil {
		return x.SecurityToken
	}
	return ""
}

func (x *UpdateNamespaceRequest) GetDeleteBadBinary() string {
	if x != nil {
		return x.DeleteBadBinary
	}
	return ""
}

func (x *UpdateNamespaceRequest) GetPromoteNamespace() bool {
	if x != nil {
		return x.PromoteNamespace
	}
	return false
}

type UpdateNamespaceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NamespaceInfo     *namespace.NamespaceInfo                `protobuf:"bytes,1,opt,name=namespace_info,json=namespaceInfo,proto3" json:"namespace_info,omitempty"`
	Config            *namespace.NamespaceConfig              `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
	ReplicationConfig *replication.NamespaceReplicationConfig `protobuf:"bytes,3,opt,name=replication_config,json=replicationConfig,proto3" json:"replication_config,omitempty"`
	FailoverVersion   int64                                   `protobuf:"varint,4,opt,name=failover_version,json=failoverVersion,proto3" json:"failover_version,omitempty"`
	IsGlobalNamespace bool                                    `protobuf:"varint,5,opt,name=is_global_namespace,json=isGlobalNamespace,proto3" json:"is_global_namespace,omitempty"`
}

func (x *UpdateNamespaceResponse) Reset() {
	*x = UpdateNamespaceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_workflowservice_request_response_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNamespaceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNamespaceResponse) ProtoMessage() {}

func (x *UpdateNamespaceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_necode_workflowservice_request_response_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNamespaceResponse.ProtoReflect.Descriptor instead.
func (*UpdateNamespaceResponse) Descriptor() ([]byte, []int) {
	return file_necode_workflowservice_request_response_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateNamespaceResponse) GetNamespaceInfo() *namespace.NamespaceInfo {
	if x != nil {
		return x.NamespaceInfo
	}
	return nil
}

func (x *UpdateNamespaceResponse) GetConfig() *namespace.NamespaceConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *UpdateNamespaceResponse) GetReplicationConfig() *replication.NamespaceReplicationConfig {
	if x != nil {
		return x.ReplicationConfig
	}
	return nil
}

func (x *UpdateNamespaceResponse) GetFailoverVersion() int64 {
	if x != nil {
		return x.FailoverVersion
	}
	return 0
}

func (x *UpdateNamespaceResponse) GetIsGlobalNamespace() bool {
	if x != nil {
		return x.IsGlobalNamespace
	}
	return false
}

// Deprecated.
type DeprecateNamespaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace     string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	SecurityToken string `protobuf:"bytes,2,opt,name=security_token,json=securityToken,proto3" json:"security_token,omitempty"`
}

func (x *DeprecateNamespaceRequest) Reset() {
	*x = DeprecateNamespaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_workflowservice_request_response_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeprecateNamespaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeprecateNamespaceRequest) ProtoMessage() {}

func (x *DeprecateNamespaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_necode_workflowservice_request_response_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeprecateNamespaceRequest.ProtoReflect.Descriptor instead.
func (*DeprecateNamespaceRequest) Descriptor() ([]byte, []int) {
	return file_necode_workflowservice_request_response_proto_rawDescGZIP(), []int{8}
}

func (x *DeprecateNamespaceRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *DeprecateNamespaceRequest) GetSecurityToken() string {
	if x != nil {
		return x.SecurityToken
	}
	return ""
}

// Deprecated.
type DeprecateNamespaceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeprecateNamespaceResponse) Reset() {
	*x = DeprecateNamespaceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_workflowservice_request_response_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeprecateNamespaceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeprecateNamespaceResponse) ProtoMessage() {}

func (x *DeprecateNamespaceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_necode_workflowservice_request_response_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeprecateNamespaceResponse.ProtoReflect.Descriptor instead.
func (*DeprecateNamespaceResponse) Descriptor() ([]byte, []int) {
	return file_necode_workflowservice_request_response_proto_rawDescGZIP(), []int{9}
}

type StartWorkflowExecutionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace    string               `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	WorkflowId   string               `protobuf:"bytes,2,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	WorkflowType *common.WorkflowType `protobuf:"bytes,3,opt,name=workflow_type,json=workflowType,proto3" json:"workflow_type,omitempty"`
	TaskQueue    *taskqueue.TaskQueue `protobuf:"bytes,4,opt,name=task_queue,json=taskQueue,proto3" json:"task_queue,omitempty"`
	// Serialized arguments to the workflow. These are passed as arguments to the workflow function.
	Input *common.Payloads `protobuf:"bytes,5,opt,name=input,proto3" json:"input,omitempty"`
	// Total workflow execution timeout including retries and continue as new.
	WorkflowExecutionTimeout *durationpb.Duration `protobuf:"bytes,6,opt,name=workflow_execution_timeout,json=workflowExecutionTimeout,proto3" json:"workflow_execution_timeout,omitempty"`
	// Timeout of a single workflow run.
	WorkflowRunTimeout *durationpb.Duration `protobuf:"bytes,7,opt,name=workflow_run_timeout,json=workflowRunTimeout,proto3" json:"workflow_run_timeout,omitempty"`
	// Timeout of a single workflow task.
	WorkflowTaskTimeout *durationpb.Duration `protobuf:"bytes,8,opt,name=workflow_task_timeout,json=workflowTaskTimeout,proto3" json:"workflow_task_timeout,omitempty"`
	// The identity of the client who initiated this request
	Identity string `protobuf:"bytes,9,opt,name=identity,proto3" json:"identity,omitempty"`
	// A unique identifier for this start request. Typically UUIDv4.
	RequestId string `protobuf:"bytes,10,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// Default: WORKFLOW_ID_REUSE_POLICY_ALLOW_DUPLICATE.
	WorkflowIdReusePolicy enums.WorkflowIdReusePolicy `protobuf:"varint,11,opt,name=workflow_id_reuse_policy,json=workflowIdReusePolicy,proto3,enum=necode.enums.WorkflowIdReusePolicy" json:"workflow_id_reuse_policy,omitempty"`
	// The retry policy for the workflow. Will never exceed `workflow_execution_timeout`.
	RetryPolicy *common.RetryPolicy `protobuf:"bytes,12,opt,name=retry_policy,json=retryPolicy,proto3" json:"retry_policy,omitempty"`
	// See https://docs.temporal.io/docs/content/what-is-a-temporal-cron-job/
	CronSchedule     string                   `protobuf:"bytes,13,opt,name=cron_schedule,json=cronSchedule,proto3" json:"cron_schedule,omitempty"`
	Memo             *common.Memo             `protobuf:"bytes,14,opt,name=memo,proto3" json:"memo,omitempty"`
	SearchAttributes *common.SearchAttributes `protobuf:"bytes,15,opt,name=search_attributes,json=searchAttributes,proto3" json:"search_attributes,omitempty"`
	Header           *common.Header           `protobuf:"bytes,16,opt,name=header,proto3" json:"header,omitempty"`
	// Request to get the first workflow task inline in the response bypassing matching service and worker polling.
	// If set to `true` the caller is expected to have a worker available and capable of processing the task.
	// The returned task will be marked as started and is expected to be completed by the specified
	// `workflow_task_timeout`.
	RequestEagerExecution bool `protobuf:"varint,17,opt,name=request_eager_execution,json=requestEagerExecution,proto3" json:"request_eager_execution,omitempty"`
	// These values will be available as ContinuedFailure and LastCompletionResult in the
	// WorkflowExecutionStarted event and through SDKs. The are currently only used by the
	// server itself (for the schedules feature) and are not intended to be exposed in
	// StartWorkflowExecution.
	ContinuedFailure     *failure.Failure `protobuf:"bytes,18,opt,name=continued_failure,json=continuedFailure,proto3" json:"continued_failure,omitempty"`
	LastCompletionResult *common.Payloads `protobuf:"bytes,19,opt,name=last_completion_result,json=lastCompletionResult,proto3" json:"last_completion_result,omitempty"`
	// Time to wait before dispatching the first workflow task. Cannot be used with `cron_schedule`.
	// If the workflow gets a signal before the delay, a workflow task will be dispatched and the rest
	// of the delay will be ignored.
	WorkflowStartDelay *durationpb.Duration `protobuf:"bytes,20,opt,name=workflow_start_delay,json=workflowStartDelay,proto3" json:"workflow_start_delay,omitempty"`
}

func (x *StartWorkflowExecutionRequest) Reset() {
	*x = StartWorkflowExecutionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_workflowservice_request_response_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartWorkflowExecutionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartWorkflowExecutionRequest) ProtoMessage() {}

func (x *StartWorkflowExecutionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_necode_workflowservice_request_response_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartWorkflowExecutionRequest.ProtoReflect.Descriptor instead.
func (*StartWorkflowExecutionRequest) Descriptor() ([]byte, []int) {
	return file_necode_workflowservice_request_response_proto_rawDescGZIP(), []int{10}
}

func (x *StartWorkflowExecutionRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *StartWorkflowExecutionRequest) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *StartWorkflowExecutionRequest) GetWorkflowType() *common.WorkflowType {
	if x != nil {
		return x.WorkflowType
	}
	return nil
}

func (x *StartWorkflowExecutionRequest) GetTaskQueue() *taskqueue.TaskQueue {
	if x != nil {
		return x.TaskQueue
	}
	return nil
}

func (x *StartWorkflowExecutionRequest) GetInput() *common.Payloads {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *StartWorkflowExecutionRequest) GetWorkflowExecutionTimeout() *durationpb.Duration {
	if x != nil {
		return x.WorkflowExecutionTimeout
	}
	return nil
}

func (x *StartWorkflowExecutionRequest) GetWorkflowRunTimeout() *durationpb.Duration {
	if x != nil {
		return x.WorkflowRunTimeout
	}
	return nil
}

func (x *StartWorkflowExecutionRequest) GetWorkflowTaskTimeout() *durationpb.Duration {
	if x != nil {
		return x.WorkflowTaskTimeout
	}
	return nil
}

func (x *StartWorkflowExecutionRequest) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

func (x *StartWorkflowExecutionRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *StartWorkflowExecutionRequest) GetWorkflowIdReusePolicy() enums.WorkflowIdReusePolicy {
	if x != nil {
		return x.WorkflowIdReusePolicy
	}
	return enums.WorkflowIdReusePolicy(0)
}

func (x *StartWorkflowExecutionRequest) GetRetryPolicy() *common.RetryPolicy {
	if x != nil {
		return x.RetryPolicy
	}
	return nil
}

func (x *StartWorkflowExecutionRequest) GetCronSchedule() string {
	if x != nil {
		return x.CronSchedule
	}
	return ""
}

func (x *StartWorkflowExecutionRequest) GetMemo() *common.Memo {
	if x != nil {
		return x.Memo
	}
	return nil
}

func (x *StartWorkflowExecutionRequest) GetSearchAttributes() *common.SearchAttributes {
	if x != nil {
		return x.SearchAttributes
	}
	return nil
}

func (x *StartWorkflowExecutionRequest) GetHeader() *common.Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *StartWorkflowExecutionRequest) GetRequestEagerExecution() bool {
	if x != nil {
		return x.RequestEagerExecution
	}
	return false
}

func (x *StartWorkflowExecutionRequest) GetContinuedFailure() *failure.Failure {
	if x != nil {
		return x.ContinuedFailure
	}
	return nil
}

func (x *StartWorkflowExecutionRequest) GetLastCompletionResult() *common.Payloads {
	if x != nil {
		return x.LastCompletionResult
	}
	return nil
}

func (x *StartWorkflowExecutionRequest) GetWorkflowStartDelay() *durationpb.Duration {
	if x != nil {
		return x.WorkflowStartDelay
	}
	return nil
}

type StartWorkflowExecutionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RunId string `protobuf:"bytes,1,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	// When `request_eager_execution` is set on the `StartWorkflowExecutionRequest`, the server - if supported - will
	// return the first workflow task to be eagerly executed.
	// The caller is expected to have a worker available to process the task.
	EagerWorkflowTask *PollWorkflowTaskQueueResponse `protobuf:"bytes,2,opt,name=eager_workflow_task,json=eagerWorkflowTask,proto3" json:"eager_workflow_task,omitempty"`
}

func (x *StartWorkflowExecutionResponse) Reset() {
	*x = StartWorkflowExecutionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_workflowservice_request_response_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartWorkflowExecutionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartWorkflowExecutionResponse) ProtoMessage() {}

func (x *StartWorkflowExecutionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_necode_workflowservice_request_response_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartWorkflowExecutionResponse.ProtoReflect.Descriptor instead.
func (*StartWorkflowExecutionResponse) Descriptor() ([]byte, []int) {
	return file_necode_workflowservice_request_response_proto_rawDescGZIP(), []int{11}
}

func (x *StartWorkflowExecutionResponse) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *StartWorkflowExecutionResponse) GetEagerWorkflowTask() *PollWorkflowTaskQueueResponse {
	if x != nil {
		return x.EagerWorkflowTask
	}
	return nil
}

type GetWorkflowExecutionHistoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace       string                    `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Execution       *common.WorkflowExecution `protobuf:"bytes,2,opt,name=execution,proto3" json:"execution,omitempty"`
	MaximumPageSize int32                     `protobuf:"varint,3,opt,name=maximum_page_size,json=maximumPageSize,proto3" json:"maximum_page_size,omitempty"`
	// If a `GetWorkflowExecutionHistoryResponse` or a `PollWorkflowTaskQueueResponse` had one of
	// these, it should be passed here to fetch the next page.
	NextPageToken []byte `protobuf:"bytes,4,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// If set to true, the RPC call will not resolve until there is a new event which matches
	// the `history_event_filter_type`, or a timeout is hit.
	WaitNewEvent bool `protobuf:"varint,5,opt,name=wait_new_event,json=waitNewEvent,proto3" json:"wait_new_event,omitempty"`
	// Filter returned events such that they match the specified filter type.
	// Default: HISTORY_EVENT_FILTER_TYPE_ALL_EVENT.
	HistoryEventFilterType enums.HistoryEventFilterType `protobuf:"varint,6,opt,name=history_event_filter_type,json=historyEventFilterType,proto3,enum=necode.enums.HistoryEventFilterType" json:"history_event_filter_type,omitempty"`
	SkipArchival           bool                         `protobuf:"varint,7,opt,name=skip_archival,json=skipArchival,proto3" json:"skip_archival,omitempty"`
}

func (x *GetWorkflowExecutionHistoryRequest) Reset() {
	*x = GetWorkflowExecutionHistoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_workflowservice_request_response_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWorkflowExecutionHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWorkflowExecutionHistoryRequest) ProtoMessage() {}

func (x *GetWorkflowExecutionHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_necode_workflowservice_request_response_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWorkflowExecutionHistoryRequest.ProtoReflect.Descriptor instead.
func (*GetWorkflowExecutionHistoryRequest) Descriptor() ([]byte, []int) {
	return file_necode_workflowservice_request_response_proto_rawDescGZIP(), []int{12}
}

func (x *GetWorkflowExecutionHistoryRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *GetWorkflowExecutionHistoryRequest) GetExecution() *common.WorkflowExecution {
	if x != nil {
		return x.Execution
	}
	return nil
}

func (x *GetWorkflowExecutionHistoryRequest) GetMaximumPageSize() int32 {
	if x != nil {
		return x.MaximumPageSize
	}
	return 0
}

func (x *GetWorkflowExecutionHistoryRequest) GetNextPageToken() []byte {
	if x != nil {
		return x.NextPageToken
	}
	return nil
}

func (x *GetWorkflowExecutionHistoryRequest) GetWaitNewEvent() bool {
	if x != nil {
		return x.WaitNewEvent
	}
	return false
}

func (x *GetWorkflowExecutionHistoryRequest) GetHistoryEventFilterType() enums.HistoryEventFilterType {
	if x != nil {
		return x.HistoryEventFilterType
	}
	return enums.HistoryEventFilterType(0)
}

func (x *GetWorkflowExecutionHistoryRequest) GetSkipArchival() bool {
	if x != nil {
		return x.SkipArchival
	}
	return false
}

type GetWorkflowExecutionHistoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	History *history.History `protobuf:"bytes,1,opt,name=history,proto3" json:"history,omitempty"`
	// Raw history is an alternate representation of history that may be returned if configured on
	// the frontend. This is not supported by all SDKs. Either this or `history` will be set.
	RawHistory []*common.DataBlob `protobuf:"bytes,2,rep,name=raw_history,json=rawHistory,proto3" json:"raw_history,omitempty"`
	// Will be set if there are more history events than were included in this response
	NextPageToken []byte `protobuf:"bytes,3,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	Archived      bool   `protobuf:"varint,4,opt,name=archived,proto3" json:"archived,omitempty"`
}

func (x *GetWorkflowExecutionHistoryResponse) Reset() {
	*x = GetWorkflowExecutionHistoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_workflowservice_request_response_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWorkflowExecutionHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWorkflowExecutionHistoryResponse) ProtoMessage() {}

func (x *GetWorkflowExecutionHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_necode_workflowservice_request_response_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWorkflowExecutionHistoryResponse.ProtoReflect.Descriptor instead.
func (*GetWorkflowExecutionHistoryResponse) Descriptor() ([]byte, []int) {
	return file_necode_workflowservice_request_response_proto_rawDescGZIP(), []int{13}
}

func (x *GetWorkflowExecutionHistoryResponse) GetHistory() *history.History {
	if x != nil {
		return x.History
	}
	return nil
}

func (x *GetWorkflowExecutionHistoryResponse) GetRawHistory() []*common.DataBlob {
	if x != nil {
		return x.RawHistory
	}
	return nil
}

func (x *GetWorkflowExecutionHistoryResponse) GetNextPageToken() []byte {
	if x != nil {
		return x.NextPageToken
	}
	return nil
}

func (x *GetWorkflowExecutionHistoryResponse) GetArchived() bool {
	if x != nil {
		return x.Archived
	}
	return false
}

type GetWorkflowExecutionHistoryReverseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace       string                    `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Execution       *common.WorkflowExecution `protobuf:"bytes,2,opt,name=execution,proto3" json:"execution,omitempty"`
	MaximumPageSize int32                     `protobuf:"varint,3,opt,name=maximum_page_size,json=maximumPageSize,proto3" json:"maximum_page_size,omitempty"`
	NextPageToken   []byte                    `protobuf:"bytes,4,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *GetWorkflowExecutionHistoryReverseRequest) Reset() {
	*x = GetWorkflowExecutionHistoryReverseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_workflowservice_request_response_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWorkflowExecutionHistoryReverseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWorkflowExecutionHistoryReverseRequest) ProtoMessage() {}

func (x *GetWorkflowExecutionHistoryReverseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_necode_workflowservice_request_response_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWorkflowExecutionHistoryReverseRequest.ProtoReflect.Descriptor instead.
func (*GetWorkflowExecutionHistoryReverseRequest) Descriptor() ([]byte, []int) {
	return file_necode_workflowservice_request_response_proto_rawDescGZIP(), []int{14}
}

func (x *GetWorkflowExecutionHistoryReverseRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *GetWorkflowExecutionHistoryReverseRequest) GetExecution() *common.WorkflowExecution {
	if x != nil {
		return x.Execution
	}
	return nil
}

func (x *GetWorkflowExecutionHistoryReverseRequest) GetMaximumPageSize() int32 {
	if x != nil {
		return x.MaximumPageSize
	}
	return 0
}

func (x *GetWorkflowExecutionHistoryReverseRequest) GetNextPageToken() []byte {
	if x != nil {
		return x.NextPageToken
	}
	return nil
}

type GetWorkflowExecutionHistoryReverseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	History *history.History `protobuf:"bytes,1,opt,name=history,proto3" json:"history,omitempty"`
	// Will be set if there are more history events than were included in this response
	NextPageToken []byte `protobuf:"bytes,3,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *GetWorkflowExecutionHistoryReverseResponse) Reset() {
	*x = GetWorkflowExecutionHistoryReverseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_workflowservice_request_response_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWorkflowExecutionHistoryReverseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWorkflowExecutionHistoryReverseResponse) ProtoMessage() {}

func (x *GetWorkflowExecutionHistoryReverseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_necode_workflowservice_request_response_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWorkflowExecutionHistoryReverseResponse.ProtoReflect.Descriptor instead.
func (*GetWorkflowExecutionHistoryReverseResponse) Descriptor() ([]byte, []int) {
	return file_necode_workflowservice_request_response_proto_rawDescGZIP(), []int{15}
}

func (x *GetWorkflowExecutionHistoryReverseResponse) GetHistory() *history.History {
	if x != nil {
		return x.History
	}
	return nil
}

func (x *GetWorkflowExecutionHistoryReverseResponse) GetNextPageToken() []byte {
	if x != nil {
		return x.NextPageToken
	}
	return nil
}

type PollWorkflowTaskQueueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace string               `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	TaskQueue *taskqueue.TaskQueue `protobuf:"bytes,2,opt,name=task_queue,json=taskQueue,proto3" json:"task_queue,omitempty"`
	// The identity of the worker/client who is polling this task queue
	Identity string `protobuf:"bytes,3,opt,name=identity,proto3" json:"identity,omitempty"`
	// DEPRECATED since 1.21 - use `worker_version_capabilities` instead.
	// Each worker process should provide an ID unique to the specific set of code it is running
	// "checksum" in this field name isn't very accurate, it should be though of as an id.
	BinaryChecksum string `protobuf:"bytes,4,opt,name=binary_checksum,json=binaryChecksum,proto3" json:"binary_checksum,omitempty"`
	// Information about this worker's build identifier and if it is choosing to use the versioning
	// feature. See the `WorkerVersionCapabilities` docstring for more.
	WorkerVersionCapabilities *common.WorkerVersionCapabilities `protobuf:"bytes,5,opt,name=worker_version_capabilities,json=workerVersionCapabilities,proto3" json:"worker_version_capabilities,omitempty"`
}

func (x *PollWorkflowTaskQueueRequest) Reset() {
	*x = PollWorkflowTaskQueueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_workflowservice_request_response_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PollWorkflowTaskQueueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PollWorkflowTaskQueueRequest) ProtoMessage() {}

func (x *PollWorkflowTaskQueueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_necode_workflowservice_request_response_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PollWorkflowTaskQueueRequest.ProtoReflect.Descriptor instead.
func (*PollWorkflowTaskQueueRequest) Descriptor() ([]byte, []int) {
	return file_necode_workflowservice_request_response_proto_rawDescGZIP(), []int{16}
}

func (x *PollWorkflowTaskQueueRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *PollWorkflowTaskQueueRequest) GetTaskQueue() *taskqueue.TaskQueue {
	if x != nil {
		return x.TaskQueue
	}
	return nil
}

func (x *PollWorkflowTaskQueueRequest) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

func (x *PollWorkflowTaskQueueRequest) GetBinaryChecksum() string {
	if x != nil {
		return x.BinaryChecksum
	}
	return ""
}

func (x *PollWorkflowTaskQueueRequest) GetWorkerVersionCapabilities() *common.WorkerVersionCapabilities {
	if x != nil {
		return x.WorkerVersionCapabilities
	}
	return nil
}

type PollWorkflowTaskQueueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A unique identifier for this task
	TaskToken         []byte                    `protobuf:"bytes,1,opt,name=task_token,json=taskToken,proto3" json:"task_token,omitempty"`
	WorkflowExecution *common.WorkflowExecution `protobuf:"bytes,2,opt,name=workflow_execution,json=workflowExecution,proto3" json:"workflow_execution,omitempty"`
	WorkflowType      *common.WorkflowType      `protobuf:"bytes,3,opt,name=workflow_type,json=workflowType,proto3" json:"workflow_type,omitempty"`
	// The last workflow task started event which was processed by some worker for this execution.
	// Will be zero if no task has ever started.
	PreviousStartedEventId int64 `protobuf:"varint,4,opt,name=previous_started_event_id,json=previousStartedEventId,proto3" json:"previous_started_event_id,omitempty"`
	// The id of the most recent workflow task started event, which will have been generated as a
	// result of this poll request being served.
	StartedEventId int64 `protobuf:"varint,5,opt,name=started_event_id,json=startedEventId,proto3" json:"started_event_id,omitempty"`
	// Starting at 1, the number of attempts to complete this task by any worker.
	Attempt int32 `protobuf:"varint,6,opt,name=attempt,proto3" json:"attempt,omitempty"`
	// A hint that there are more tasks already present in this task queue. Can be used to
	// prioritize draining a sticky queue before polling from a normal queue.
	BacklogCountHint int64 `protobuf:"varint,7,opt,name=backlog_count_hint,json=backlogCountHint,proto3" json:"backlog_count_hint,omitempty"`
	// The history for this workflow, which will either be complete or partial. Partial histories
	// are sent to workers who have signaled that they are using a sticky queue when completing
	// a workflow task.
	History *history.History `protobuf:"bytes,8,opt,name=history,proto3" json:"history,omitempty"`
	// Will be set if there are more history events than were included in this response. Such events
	// should be fetched via `GetWorkflowExecutionHistory`.
	NextPageToken []byte `protobuf:"bytes,9,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// Legacy queries appear in this field. The query must be responded to via
	// `RespondQueryTaskCompleted`. If the workflow is already closed (queries are permitted on
	// closed workflows) then the `history` field will be populated with the entire history. It
	// may also be populated if this task originates on a non-sticky queue.
	Query *query.WorkflowQuery `protobuf:"bytes,10,opt,name=query,proto3" json:"query,omitempty"`
	// The task queue this task originated from, which will always be the original non-sticky name
	// for the queue, even if this response came from polling a sticky queue.
	WorkflowExecutionTaskQueue *taskqueue.TaskQueue `protobuf:"bytes,11,opt,name=workflow_execution_task_queue,json=workflowExecutionTaskQueue,proto3" json:"workflow_execution_task_queue,omitempty"`
	// When this task was scheduled by the server
	ScheduledTime *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=scheduled_time,json=scheduledTime,proto3" json:"scheduled_time,omitempty"`
	// When the current workflow task started event was generated, meaning the current attempt.
	StartedTime *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=started_time,json=startedTime,proto3" json:"started_time,omitempty"`
	// Queries that should be executed after applying the history in this task. Responses should be
	// attached to `RespondWorkflowTaskCompletedRequest::query_results`
	Queries map[string]*query.WorkflowQuery `protobuf:"bytes,14,rep,name=queries,proto3" json:"queries,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Protocol messages piggybacking on a WFT as a transport
	Messages []*protocol.Message `protobuf:"bytes,15,rep,name=messages,proto3" json:"messages,omitempty"`
}

func (x *PollWorkflowTaskQueueResponse) Reset() {
	*x = PollWorkflowTaskQueueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_workflowservice_request_response_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PollWorkflowTaskQueueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PollWorkflowTaskQueueResponse) ProtoMessage() {}

func (x *PollWorkflowTaskQueueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_necode_workflowservice_request_response_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PollWorkflowTaskQueueResponse.ProtoReflect.Descriptor instead.
func (*PollWorkflowTaskQueueResponse) Descriptor() ([]byte, []int) {
	return file_necode_workflowservice_request_response_proto_rawDescGZIP(), []int{17}
}

func (x *PollWorkflowTaskQueueResponse) GetTaskToken() []byte {
	if x != nil {
		return x.TaskToken
	}
	return nil
}

func (x *PollWorkflowTaskQueueResponse) GetWorkflowExecution() *common.WorkflowExecution {
	if x != nil {
		return x.WorkflowExecution
	}
	return nil
}

func (x *PollWorkflowTaskQueueResponse) GetWorkflowType() *common.WorkflowType {
	if x != nil {
		return x.WorkflowType
	}
	return nil
}

func (x *PollWorkflowTaskQueueResponse) GetPreviousStartedEventId() int64 {
	if x != nil {
		return x.PreviousStartedEventId
	}
	return 0
}

func (x *PollWorkflowTaskQueueResponse) GetStartedEventId() int64 {
	if x != nil {
		return x.StartedEventId
	}
	return 0
}

func (x *PollWorkflowTaskQueueResponse) GetAttempt() int32 {
	if x != nil {
		return x.Attempt
	}
	return 0
}

func (x *PollWorkflowTaskQueueResponse) GetBacklogCountHint() int64 {
	if x != nil {
		return x.BacklogCountHint
	}
	return 0
}

func (x *PollWorkflowTaskQueueResponse) GetHistory() *history.History {
	if x != nil {
		return x.History
	}
	return nil
}

func (x *PollWorkflowTaskQueueResponse) GetNextPageToken() []byte {
	if x != nil {
		return x.NextPageToken
	}
	return nil
}

func (x *PollWorkflowTaskQueueResponse) GetQuery() *query.WorkflowQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *PollWorkflowTaskQueueResponse) GetWorkflowExecutionTaskQueue() *taskqueue.TaskQueue {
	if x != nil {
		return x.WorkflowExecutionTaskQueue
	}
	return nil
}

func (x *PollWorkflowTaskQueueResponse) GetScheduledTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ScheduledTime
	}
	return nil
}

func (x *PollWorkflowTaskQueueResponse) GetStartedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartedTime
	}
	return nil
}

func (x *PollWorkflowTaskQueueResponse) GetQueries() map[string]*query.WorkflowQuery {
	if x != nil {
		return x.Queries
	}
	return nil
}

func (x *PollWorkflowTaskQueueResponse) GetMessages() []*protocol.Message {
	if x != nil {
		return x.Messages
	}
	return nil
}

type RespondWorkflowTaskCompletedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The task token as received in `PollWorkflowTaskQueueResponse`
	TaskToken []byte `protobuf:"bytes,1,opt,name=task_token,json=taskToken,proto3" json:"task_token,omitempty"`
	// A list of commands generated when driving the workflow code in response to the new task
	Commands []*command.Command `protobuf:"bytes,2,rep,name=commands,proto3" json:"commands,omitempty"`
	// The identity of the worker/client
	Identity string `protobuf:"bytes,3,opt,name=identity,proto3" json:"identity,omitempty"`
	// May be set by workers to indicate that the worker desires future tasks to be provided with
	// incremental history on a sticky queue.
	StickyAttributes *taskqueue.StickyExecutionAttributes `protobuf:"bytes,4,opt,name=sticky_attributes,json=stickyAttributes,proto3" json:"sticky_attributes,omitempty"`
	// If set, the worker wishes to immediately receive the next workflow task as a response to
	// this completion. This can save on polling round-trips.
	ReturnNewWorkflowTask bool `protobuf:"varint,5,opt,name=return_new_workflow_task,json=returnNewWorkflowTask,proto3" json:"return_new_workflow_task,omitempty"`
	// Can be used to *force* creation of a new workflow task, even if no commands have resolved or
	// one would not otherwise have been generated. This is used when the worker knows it is doing
	// something useful, but cannot complete it within the workflow task timeout. Local activities
	// which run for longer than the task timeout being the prime example.
	ForceCreateNewWorkflowTask bool `protobuf:"varint,6,opt,name=force_create_new_workflow_task,json=forceCreateNewWorkflowTask,proto3" json:"force_create_new_workflow_task,omitempty"`
	// DEPRECATED since 1.21 - use `worker_version_stamp` instead.
	// Worker process' unique binary id
	BinaryChecksum string `protobuf:"bytes,7,opt,name=binary_checksum,json=binaryChecksum,proto3" json:"binary_checksum,omitempty"`
	// Responses to the `queries` field in the task being responded to
	QueryResults map[string]*query.WorkflowQueryResult `protobuf:"bytes,8,rep,name=query_results,json=queryResults,proto3" json:"query_results,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Namespace    string                                `protobuf:"bytes,9,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Version info of the worker who processed this task. This message's `build_id` field should
	// always be set by SDKs. Workers opting into versioning will also set the `use_versioning`
	// field to true. See message docstrings for more.
	WorkerVersionStamp *common.WorkerVersionStamp `protobuf:"bytes,10,opt,name=worker_version_stamp,json=workerVersionStamp,proto3" json:"worker_version_stamp,omitempty"`
	// Protocol messages piggybacking on a WFT as a transport
	Messages []*protocol.Message `protobuf:"bytes,11,rep,name=messages,proto3" json:"messages,omitempty"`
	// Data the SDK wishes to record for itself, but server need not interpret, and does not
	// directly impact workflow state.
	SdkMetadata *sdk.WorkflowTaskCompletedMetadata `protobuf:"bytes,12,opt,name=sdk_metadata,json=sdkMetadata,proto3" json:"sdk_metadata,omitempty"`
	// Local usage data collected for metering
	MeteringMetadata *common.MeteringMetadata `protobuf:"bytes,13,opt,name=metering_metadata,json=meteringMetadata,proto3" json:"metering_metadata,omitempty"`
}

func (x *RespondWorkflowTaskCompletedRequest) Reset() {
	*x = RespondWorkflowTaskCompletedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_workflowservice_request_response_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespondWorkflowTaskCompletedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespondWorkflowTaskCompletedRequest) ProtoMessage() {}

func (x *RespondWorkflowTaskCompletedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_necode_workflowservice_request_response_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespondWorkflowTaskCompletedRequest.ProtoReflect.Descriptor instead.
func (*RespondWorkflowTaskCompletedRequest) Descriptor() ([]byte, []int) {
	return file_necode_workflowservice_request_response_proto_rawDescGZIP(), []int{18}
}

func (x *RespondWorkflowTaskCompletedRequest) GetTaskToken() []byte {
	if x != nil {
		return x.TaskToken
	}
	return nil
}

func (x *RespondWorkflowTaskCompletedRequest) GetCommands() []*command.Command {
	if x != nil {
		return x.Commands
	}
	return nil
}

func (x *RespondWorkflowTaskCompletedRequest) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

func (x *RespondWorkflowTaskCompletedRequest) GetStickyAttributes() *taskqueue.StickyExecutionAttributes {
	if x != nil {
		return x.StickyAttributes
	}
	return nil
}

func (x *RespondWorkflowTaskCompletedRequest) GetReturnNewWorkflowTask() bool {
	if x != nil {
		return x.ReturnNewWorkflowTask
	}
	return false
}

func (x *RespondWorkflowTaskCompletedRequest) GetForceCreateNewWorkflowTask() bool {
	if x != nil {
		return x.ForceCreateNewWorkflowTask
	}
	return false
}

func (x *RespondWorkflowTaskCompletedRequest) GetBinaryChecksum() string {
	if x != nil {
		return x.BinaryChecksum
	}
	return ""
}

func (x *RespondWorkflowTaskCompletedRequest) GetQueryResults() map[string]*query.WorkflowQueryResult {
	if x != nil {
		return x.QueryResults
	}
	return nil
}

func (x *RespondWorkflowTaskCompletedRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *RespondWorkflowTaskCompletedRequest) GetWorkerVersionStamp() *common.WorkerVersionStamp {
	if x != nil {
		return x.WorkerVersionStamp
	}
	return nil
}

func (x *RespondWorkflowTaskCompletedRequest) GetMessages() []*protocol.Message {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *RespondWorkflowTaskCompletedRequest) GetSdkMetadata() *sdk.WorkflowTaskCompletedMetadata {
	if x != nil {
		return x.SdkMetadata
	}
	return nil
}

func (x *RespondWorkflowTaskCompletedRequest) GetMeteringMetadata() *common.MeteringMetadata {
	if x != nil {
		return x.MeteringMetadata
	}
	return nil
}

type RespondWorkflowTaskCompletedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// See `RespondWorkflowTaskCompletedResponse::return_new_workflow_task`
	WorkflowTask *PollWorkflowTaskQueueResponse `protobuf:"bytes,1,opt,name=workflow_task,json=workflowTask,proto3" json:"workflow_task,omitempty"`
	// See `ScheduleActivityTaskCommandAttributes::request_start`
	ActivityTasks       []*PollActivityTaskQueueResponse `protobuf:"bytes,2,rep,name=activity_tasks,json=activityTasks,proto3" json:"activity_tasks,omitempty"`
	ResetHistoryEventId int64                            `protobuf:"varint,3,opt,name=reset_history_event_id,json=resetHistoryEventId,proto3" json:"reset_history_event_id,omitempty"`
}

func (x *RespondWorkflowTaskCompletedResponse) Reset() {
	*x = RespondWorkflowTaskCompletedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_workflowservice_request_response_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespondWorkflowTaskCompletedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespondWorkflowTaskCompletedResponse) ProtoMessage() {}

func (x *RespondWorkflowTaskCompletedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_necode_workflowservice_request_response_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespondWorkflowTaskCompletedResponse.ProtoReflect.Descriptor instead.
func (*RespondWorkflowTaskCompletedResponse) Descriptor() ([]byte, []int) {
	return file_necode_workflowservice_request_response_proto_rawDescGZIP(), []int{19}
}

func (x *RespondWorkflowTaskCompletedResponse) GetWorkflowTask() *PollWorkflowTaskQueueResponse {
	if x != nil {
		return x.WorkflowTask
	}
	return nil
}

func (x *RespondWorkflowTaskCompletedResponse) GetActivityTasks() []*PollActivityTaskQueueResponse {
	if x != nil {
		return x.ActivityTasks
	}
	return nil
}

func (x *RespondWorkflowTaskCompletedResponse) GetResetHistoryEventId() int64 {
	if x != nil {
		return x.ResetHistoryEventId
	}
	return 0
}

type RespondWorkflowTaskFailedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The task token as received in `PollWorkflowTaskQueueResponse`
	TaskToken []byte `protobuf:"bytes,1,opt,name=task_token,json=taskToken,proto3" json:"task_token,omitempty"`
	// Why did the task fail? It's important to note that many of the variants in this enum cannot
	// apply to worker responses. See the type's doc for more.
	Cause enums.WorkflowTaskFailedCause `protobuf:"varint,2,opt,name=cause,proto3,enum=necode.enums.WorkflowTaskFailedCause" json:"cause,omitempty"`
	// Failure details
	Failure *failure.Failure `protobuf:"bytes,3,opt,name=failure,proto3" json:"failure,omitempty"`
	// The identity of the worker/client
	Identity string `protobuf:"bytes,4,opt,name=identity,proto3" json:"identity,omitempty"`
	// DEPRECATED since 1.21 - use `worker_version_stamp` instead.
	// Worker process' unique binary id
	BinaryChecksum string `protobuf:"bytes,5,opt,name=binary_checksum,json=binaryChecksum,proto3" json:"binary_checksum,omitempty"`
	Namespace      string `protobuf:"bytes,6,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Protocol messages piggybacking on a WFT as a transport
	Messages []*protocol.Message `protobuf:"bytes,7,rep,name=messages,proto3" json:"messages,omitempty"`
	// Version info of the worker who processed this task. This message's `build_id` field should
	// always be set by SDKs. Workers opting into versioning will also set the `use_versioning`
	// field to true. See message docstrings for more.
	WorkerVersion *common.WorkerVersionStamp `protobuf:"bytes,8,opt,name=worker_version,json=workerVersion,proto3" json:"worker_version,omitempty"`
}

func (x *RespondWorkflowTaskFailedRequest) Reset() {
	*x = RespondWorkflowTaskFailedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_workflowservice_request_response_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespondWorkflowTaskFailedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespondWorkflowTaskFailedRequest) ProtoMessage() {}

func (x *RespondWorkflowTaskFailedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_necode_workflowservice_request_response_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespondWorkflowTaskFailedRequest.ProtoReflect.Descriptor instead.
func (*RespondWorkflowTaskFailedRequest) Descriptor() ([]byte, []int) {
	return file_necode_workflowservice_request_response_proto_rawDescGZIP(), []int{20}
}

func (x *RespondWorkflowTaskFailedRequest) GetTaskToken() []byte {
	if x != nil {
		return x.TaskToken
	}
	return nil
}

func (x *RespondWorkflowTaskFailedRequest) GetCause() enums.WorkflowTaskFailedCause {
	if x != nil {
		return x.Cause
	}
	return enums.WorkflowTaskFailedCause(0)
}

func (x *RespondWorkflowTaskFailedRequest) GetFailure() *failure.Failure {
	if x != nil {
		return x.Failure
	}
	return nil
}

func (x *RespondWorkflowTaskFailedRequest) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

func (x *RespondWorkflowTaskFailedRequest) GetBinaryChecksum() string {
	if x != nil {
		return x.BinaryChecksum
	}
	return ""
}

func (x *RespondWorkflowTaskFailedRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *RespondWorkflowTaskFailedRequest) GetMessages() []*protocol.Message {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *RespondWorkflowTaskFailedRequest) GetWorkerVersion() *common.WorkerVersionStamp {
	if x != nil {
		return x.WorkerVersion
	}
	return nil
}

type RespondWorkflowTaskFailedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RespondWorkflowTaskFailedResponse) Reset() {
	*x = RespondWorkflowTaskFailedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_workflowservice_request_response_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespondWorkflowTaskFailedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespondWorkflowTaskFailedResponse) ProtoMessage() {}

func (x *RespondWorkflowTaskFailedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_necode_workflowservice_request_response_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespondWorkflowTaskFailedResponse.ProtoReflect.Descriptor instead.
func (*RespondWorkflowTaskFailedResponse) Descriptor() ([]byte, []int) {
	return file_necode_workflowservice_request_response_proto_rawDescGZIP(), []int{21}
}

type PollActivityTaskQueueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace string               `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	TaskQueue *taskqueue.TaskQueue `protobuf:"bytes,2,opt,name=task_queue,json=taskQueue,proto3" json:"task_queue,omitempty"`
	// The identity of the worker/client
	Identity          string                       `protobuf:"bytes,3,opt,name=identity,proto3" json:"identity,omitempty"`
	TaskQueueMetadata *taskqueue.TaskQueueMetadata `protobuf:"bytes,4,opt,name=task_queue_metadata,json=taskQueueMetadata,proto3" json:"task_queue_metadata,omitempty"`
	// Information about this worker's build identifier and if it is choosing to use the versioning
	// feature. See the `WorkerVersionCapabilities` docstring for more.
	WorkerVersionCapabilities *common.WorkerVersionCapabilities `protobuf:"bytes,5,opt,name=worker_version_capabilities,json=workerVersionCapabilities,proto3" json:"worker_version_capabilities,omitempty"`
}

func (x *PollActivityTaskQueueRequest) Reset() {
	*x = PollActivityTaskQueueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_workflowservice_request_response_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PollActivityTaskQueueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PollActivityTaskQueueRequest) ProtoMessage() {}

func (x *PollActivityTaskQueueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_necode_workflowservice_request_response_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PollActivityTaskQueueRequest.ProtoReflect.Descriptor instead.
func (*PollActivityTaskQueueRequest) Descriptor() ([]byte, []int) {
	return file_necode_workflowservice_request_response_proto_rawDescGZIP(), []int{22}
}

func (x *PollActivityTaskQueueRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *PollActivityTaskQueueRequest) GetTaskQueue() *taskqueue.TaskQueue {
	if x != nil {
		return x.TaskQueue
	}
	return nil
}

func (x *PollActivityTaskQueueRequest) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

func (x *PollActivityTaskQueueRequest) GetTaskQueueMetadata() *taskqueue.TaskQueueMetadata {
	if x != nil {
		return x.TaskQueueMetadata
	}
	return nil
}

func (x *PollActivityTaskQueueRequest) GetWorkerVersionCapabilities() *common.WorkerVersionCapabilities {
	if x != nil {
		return x.WorkerVersionCapabilities
	}
	return nil
}

type PollActivityTaskQueueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A unique identifier for this task
	TaskToken []byte `protobuf:"bytes,1,opt,name=task_token,json=taskToken,proto3" json:"task_token,omitempty"`
	// The namespace the workflow which requested this activity lives in
	WorkflowNamespace string `protobuf:"bytes,2,opt,name=workflow_namespace,json=workflowNamespace,proto3" json:"workflow_namespace,omitempty"`
	// Type of the requesting workflow
	WorkflowType *common.WorkflowType `protobuf:"bytes,3,opt,name=workflow_type,json=workflowType,proto3" json:"workflow_type,omitempty"`
	// Execution info of the requesting workflow
	WorkflowExecution *common.WorkflowExecution `protobuf:"bytes,4,opt,name=workflow_execution,json=workflowExecution,proto3" json:"workflow_execution,omitempty"`
	ActivityType      *common.ActivityType      `protobuf:"bytes,5,opt,name=activity_type,json=activityType,proto3" json:"activity_type,omitempty"`
	// The autogenerated or user specified identifier of this activity. Can be used to complete the
	// activity via `RespondActivityTaskCompletedById`. May be re-used as long as the last usage
	// has resolved, but unique IDs for every activity invocation is a good idea.
	ActivityId string `protobuf:"bytes,6,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
	// Headers specified by the scheduling workflow. Commonly used to propagate contextual info
	// from the workflow to its activities. For example, tracing contexts.
	Header *common.Header `protobuf:"bytes,7,opt,name=header,proto3" json:"header,omitempty"`
	// Arguments to the activity invocation
	Input *common.Payloads `protobuf:"bytes,8,opt,name=input,proto3" json:"input,omitempty"`
	// Details of the last heartbeat that was recorded for this activity as of the time this task
	// was delivered.
	HeartbeatDetails *common.Payloads `protobuf:"bytes,9,opt,name=heartbeat_details,json=heartbeatDetails,proto3" json:"heartbeat_details,omitempty"`
	// When was this task first scheduled
	ScheduledTime *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=scheduled_time,json=scheduledTime,proto3" json:"scheduled_time,omitempty"`
	// When was this task attempt scheduled
	CurrentAttemptScheduledTime *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=current_attempt_scheduled_time,json=currentAttemptScheduledTime,proto3" json:"current_attempt_scheduled_time,omitempty"`
	// When was this task started (this attempt)
	StartedTime *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=started_time,json=startedTime,proto3" json:"started_time,omitempty"`
	// Starting at 1, the number of attempts to perform this activity
	Attempt int32 `protobuf:"varint,13,opt,name=attempt,proto3" json:"attempt,omitempty"`
	// First scheduled -> final result reported timeout
	//
	// (-- api-linter: core::0140::prepositions=disabled
	//
	//	aip.dev/not-precedent: "to" is used to indicate interval. --)
	ScheduleToCloseTimeout *durationpb.Duration `protobuf:"bytes,14,opt,name=schedule_to_close_timeout,json=scheduleToCloseTimeout,proto3" json:"schedule_to_close_timeout,omitempty"`
	// Current attempt start -> final result reported timeout
	//
	// (-- api-linter: core::0140::prepositions=disabled
	//
	//	aip.dev/not-precedent: "to" is used to indicate interval. --)
	StartToCloseTimeout *durationpb.Duration `protobuf:"bytes,15,opt,name=start_to_close_timeout,json=startToCloseTimeout,proto3" json:"start_to_close_timeout,omitempty"`
	// Window within which the activity must report a heartbeat, or be timed out.
	HeartbeatTimeout *durationpb.Duration `protobuf:"bytes,16,opt,name=heartbeat_timeout,json=heartbeatTimeout,proto3" json:"heartbeat_timeout,omitempty"`
	// This is the retry policy the service uses which may be different from the one provided
	// (or not) during activity scheduling. The service can override the provided one if some
	// values are not specified or exceed configured system limits.
	RetryPolicy *common.RetryPolicy `protobuf:"bytes,17,opt,name=retry_policy,json=retryPolicy,proto3" json:"retry_policy,omitempty"`
}

func (x *PollActivityTaskQueueResponse) Reset() {
	*x = PollActivityTaskQueueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_workflowservice_request_response_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PollActivityTaskQueueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PollActivityTaskQueueResponse) ProtoMessage() {}

func (x *PollActivityTaskQueueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_necode_workflowservice_request_response_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PollActivityTaskQueueResponse.ProtoReflect.Descriptor instead.
func (*PollActivityTaskQueueResponse) Descriptor() ([]byte, []int) {
	return file_necode_workflowservice_request_response_proto_rawDescGZIP(), []int{23}
}

func (x *PollActivityTaskQueueResponse) GetTaskToken() []byte {
	if x != nil {
		return x.TaskToken
	}
	return nil
}

func (x *PollActivityTaskQueueResponse) GetWorkflowNamespace() string {
	if x != nil {
		return x.WorkflowNamespace
	}
	return ""
}

func (x *PollActivityTaskQueueResponse) GetWorkflowType() *common.WorkflowType {
	if x != nil {
		return x.WorkflowType
	}
	return nil
}

func (x *PollActivityTaskQueueResponse) GetWorkflowExecution() *common.WorkflowExecution {
	if x != nil {
		return x.WorkflowExecution
	}
	return nil
}

func (x *PollActivityTaskQueueResponse) GetActivityType() *common.ActivityType {
	if x != nil {
		return x.ActivityType
	}
	return nil
}

func (x *PollActivityTaskQueueResponse) GetActivityId() string {
	if x != nil {
		return x.ActivityId
	}
	return ""
}

func (x *PollActivityTaskQueueResponse) GetHeader() *common.Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *PollActivityTaskQueueResponse) GetInput() *common.Payloads {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *PollActivityTaskQueueResponse) GetHeartbeatDetails() *common.Payloads {
	if x != nil {
		return x.HeartbeatDetails
	}
	return nil
}

func (x *PollActivityTaskQueueResponse) GetScheduledTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ScheduledTime
	}
	return nil
}

func (x *PollActivityTaskQueueResponse) GetCurrentAttemptScheduledTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CurrentAttemptScheduledTime
	}
	return nil
}

func (x *PollActivityTaskQueueResponse) GetStartedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartedTime
	}
	return nil
}

func (x *PollActivityTaskQueueResponse) GetAttempt() int32 {
	if x != nil {
		return x.Attempt
	}
	return 0
}

func (x *PollActivityTaskQueueResponse) GetScheduleToCloseTimeout() *durationpb.Duration {
	if x != nil {
		return x.ScheduleToCloseTimeout
	}
	return nil
}

func (x *PollActivityTaskQueueResponse) GetStartToCloseTimeout() *durationpb.Duration {
	if x != nil {
		return x.StartToCloseTimeout
	}
	return nil
}

func (x *PollActivityTaskQueueResponse) GetHeartbeatTimeout() *durationpb.Duration {
	if x != nil {
		return x.HeartbeatTimeout
	}
	return nil
}

func (x *PollActivityTaskQueueResponse) GetRetryPolicy() *common.RetryPolicy {
	if x != nil {
		return x.RetryPolicy
	}
	return nil
}

type RecordActivityTaskHeartbeatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The task token as received in `PollActivityTaskQueueResponse`
	TaskToken []byte `protobuf:"bytes,1,opt,name=task_token,json=taskToken,proto3" json:"task_token,omitempty"`
	// Arbitrary data, of which the most recent call is kept, to store for this activity
	Details *common.Payloads `protobuf:"bytes,2,opt,name=details,proto3" json:"details,omitempty"`
	// The identity of the worker/client
	Identity  string `protobuf:"bytes,3,opt,name=identity,proto3" json:"identity,omitempty"`
	Namespace string `protobuf:"bytes,4,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (x *RecordActivityTaskHeartbeatRequest) Reset() {
	*x = RecordActivityTaskHeartbeatRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_workflowservice_request_response_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordActivityTaskHeartbeatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordActivityTaskHeartbeatRequest) ProtoMessage() {}

func (x *RecordActivityTaskHeartbeatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_necode_workflowservice_request_response_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordActivityTaskHeartbeatRequest.ProtoReflect.Descriptor instead.
func (*RecordActivityTaskHeartbeatRequest) Descriptor() ([]byte, []int) {
	return file_necode_workflowservice_request_response_proto_rawDescGZIP(), []int{24}
}

func (x *RecordActivityTaskHeartbeatRequest) GetTaskToken() []byte {
	if x != nil {
		return x.TaskToken
	}
	return nil
}

func (x *RecordActivityTaskHeartbeatRequest) GetDetails() *common.Payloads {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *RecordActivityTaskHeartbeatRequest) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

func (x *RecordActivityTaskHeartbeatRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

type RecordActivityTaskHeartbeatResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Will be set to true if the activity has been asked to cancel itself. The SDK should then
	// notify the activity of cancellation if it is still running.
	CancelRequested bool `protobuf:"varint,1,opt,name=cancel_requested,json=cancelRequested,proto3" json:"cancel_requested,omitempty"`
}

func (x *RecordActivityTaskHeartbeatResponse) Reset() {
	*x = RecordActivityTaskHeartbeatResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_workflowservice_request_response_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordActivityTaskHeartbeatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordActivityTaskHeartbeatResponse) ProtoMessage() {}

func (x *RecordActivityTaskHeartbeatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_necode_workflowservice_request_response_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordActivityTaskHeartbeatResponse.ProtoReflect.Descriptor instead.
func (*RecordActivityTaskHeartbeatResponse) Descriptor() ([]byte, []int) {
	return file_necode_workflowservice_request_response_proto_rawDescGZIP(), []int{25}
}

func (x *RecordActivityTaskHeartbeatResponse) GetCancelRequested() bool {
	if x != nil {
		return x.CancelRequested
	}
	return false
}

type RecordActivityTaskHeartbeatByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Namespace of the workflow which scheduled this activity
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Id of the workflow which scheduled this activity
	WorkflowId string `protobuf:"bytes,2,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	// Run Id of the workflow which scheduled this activity
	RunId string `protobuf:"bytes,3,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	// Id of the activity we're heartbeating
	ActivityId string `protobuf:"bytes,4,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
	// Arbitrary data, of which the most recent call is kept, to store for this activity
	Details *common.Payloads `protobuf:"bytes,5,opt,name=details,proto3" json:"details,omitempty"`
	// The identity of the worker/client
	Identity string `protobuf:"bytes,6,opt,name=identity,proto3" json:"identity,omitempty"`
}

func (x *RecordActivityTaskHeartbeatByIdRequest) Reset() {
	*x = RecordActivityTaskHeartbeatByIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_workflowservice_request_response_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordActivityTaskHeartbeatByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordActivityTaskHeartbeatByIdRequest) ProtoMessage() {}

func (x *RecordActivityTaskHeartbeatByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_necode_workflowservice_request_response_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordActivityTaskHeartbeatByIdRequest.ProtoReflect.Descriptor instead.
func (*RecordActivityTaskHeartbeatByIdRequest) Descriptor() ([]byte, []int) {
	return file_necode_workflowservice_request_response_proto_rawDescGZIP(), []int{26}
}

func (x *RecordActivityTaskHeartbeatByIdRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *RecordActivityTaskHeartbeatByIdRequest) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *RecordActivityTaskHeartbeatByIdRequest) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *RecordActivityTaskHeartbeatByIdRequest) GetActivityId() string {
	if x != nil {
		return x.ActivityId
	}
	return ""
}

func (x *RecordActivityTaskHeartbeatByIdRequest) GetDetails() *common.Payloads {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *RecordActivityTaskHeartbeatByIdRequest) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

type RecordActivityTaskHeartbeatByIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Will be set to true if the activity has been asked to cancel itself. The SDK should then
	// notify the activity of cancellation if it is still running.
	CancelRequested bool `protobuf:"varint,1,opt,name=cancel_requested,json=cancelRequested,proto3" json:"cancel_requested,omitempty"`
}

func (x *RecordActivityTaskHeartbeatByIdResponse) Reset() {
	*x = RecordActivityTaskHeartbeatByIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_workflowservice_request_response_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordActivityTaskHeartbeatByIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordActivityTaskHeartbeatByIdResponse) ProtoMessage() {}

func (x *RecordActivityTaskHeartbeatByIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_necode_workflowservice_request_response_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordActivityTaskHeartbeatByIdResponse.ProtoReflect.Descriptor instead.
func (*RecordActivityTaskHeartbeatByIdResponse) Descriptor() ([]byte, []int) {
	return file_necode_workflowservice_request_response_proto_rawDescGZIP(), []int{27}
}

func (x *RecordActivityTaskHeartbeatByIdResponse) GetCancelRequested() bool {
	if x != nil {
		return x.CancelRequested
	}
	return false
}

type RespondActivityTaskCompletedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The task token as received in `PollActivityTaskQueueResponse`
	TaskToken []byte `protobuf:"bytes,1,opt,name=task_token,json=taskToken,proto3" json:"task_token,omitempty"`
	// The result of successfully executing the activity
	Result *common.Payloads `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
	// The identity of the worker/client
	Identity  string `protobuf:"bytes,3,opt,name=identity,proto3" json:"identity,omitempty"`
	Namespace string `protobuf:"bytes,4,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Version info of the worker who processed this task. This message's `build_id` field should
	// always be set by SDKs. Workers opting into versioning will also set the `use_versioning`
	// field to true. See message docstrings for more.
	WorkerVersion *common.WorkerVersionStamp `protobuf:"bytes,5,opt,name=worker_version,json=workerVersion,proto3" json:"worker_version,omitempty"`
}

func (x *RespondActivityTaskCompletedRequest) Reset() {
	*x = RespondActivityTaskCompletedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_workflowservice_request_response_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespondActivityTaskCompletedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespondActivityTaskCompletedRequest) ProtoMessage() {}

func (x *RespondActivityTaskCompletedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_necode_workflowservice_request_response_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespondActivityTaskCompletedRequest.ProtoReflect.Descriptor instead.
func (*RespondActivityTaskCompletedRequest) Descriptor() ([]byte, []int) {
	return file_necode_workflowservice_request_response_proto_rawDescGZIP(), []int{28}
}

func (x *RespondActivityTaskCompletedRequest) GetTaskToken() []byte {
	if x != nil {
		return x.TaskToken
	}
	return nil
}

func (x *RespondActivityTaskCompletedRequest) GetResult() *common.Payloads {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *RespondActivityTaskCompletedRequest) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

func (x *RespondActivityTaskCompletedRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *RespondActivityTaskCompletedRequest) GetWorkerVersion() *common.WorkerVersionStamp {
	if x != nil {
		return x.WorkerVersion
	}
	return nil
}

type RespondActivityTaskCompletedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RespondActivityTaskCompletedResponse) Reset() {
	*x = RespondActivityTaskCompletedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_workflowservice_request_response_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespondActivityTaskCompletedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespondActivityTaskCompletedResponse) ProtoMessage() {}

func (x *RespondActivityTaskCompletedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_necode_workflowservice_request_response_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespondActivityTaskCompletedResponse.ProtoReflect.Descriptor instead.
func (*RespondActivityTaskCompletedResponse) Descriptor() ([]byte, []int) {
	return file_necode_workflowservice_request_response_proto_rawDescGZIP(), []int{29}
}

type RespondActivityTaskCompletedByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Namespace of the workflow which scheduled this activity
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Id of the workflow which scheduled this activity
	WorkflowId string `protobuf:"bytes,2,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	// Run Id of the workflow which scheduled this activity
	RunId string `protobuf:"bytes,3,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	// Id of the activity to complete
	ActivityId string `protobuf:"bytes,4,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
	// The serialized result of activity execution
	Result *common.Payloads `protobuf:"bytes,5,opt,name=result,proto3" json:"result,omitempty"`
	// The identity of the worker/client
	Identity string `protobuf:"bytes,6,opt,name=identity,proto3" json:"identity,omitempty"`
}

func (x *RespondActivityTaskCompletedByIdRequest) Reset() {
	*x = RespondActivityTaskCompletedByIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_workflowservice_request_response_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespondActivityTaskCompletedByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespondActivityTaskCompletedByIdRequest) ProtoMessage() {}

func (x *RespondActivityTaskCompletedByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_necode_workflowservice_request_response_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespondActivityTaskCompletedByIdRequest.ProtoReflect.Descriptor instead.
func (*RespondActivityTaskCompletedByIdRequest) Descriptor() ([]byte, []int) {
	return file_necode_workflowservice_request_response_proto_rawDescGZIP(), []int{30}
}

func (x *RespondActivityTaskCompletedByIdRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *RespondActivityTaskCompletedByIdRequest) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *RespondActivityTaskCompletedByIdRequest) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *RespondActivityTaskCompletedByIdRequest) GetActivityId() string {
	if x != nil {
		return x.ActivityId
	}
	return ""
}

func (x *RespondActivityTaskCompletedByIdRequest) GetResult() *common.Payloads {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *RespondActivityTaskCompletedByIdRequest) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

type RespondActivityTaskCompletedByIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RespondActivityTaskCompletedByIdResponse) Reset() {
	*x = RespondActivityTaskCompletedByIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_workflowservice_request_response_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespondActivityTaskCompletedByIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespondActivityTaskCompletedByIdResponse) ProtoMessage() {}

func (x *RespondActivityTaskCompletedByIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_necode_workflowservice_request_response_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespondActivityTaskCompletedByIdResponse.ProtoReflect.Descriptor instead.
func (*RespondActivityTaskCompletedByIdResponse) Descriptor() ([]byte, []int) {
	return file_necode_workflowservice_request_response_proto_rawDescGZIP(), []int{31}
}

type RespondActivityTaskFailedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The task token as received in `PollActivityTaskQueueResponse`
	TaskToken []byte `protobuf:"bytes,1,opt,name=task_token,json=taskToken,proto3" json:"task_token,omitempty"`
	// Detailed failure information
	Failure *failure.Failure `protobuf:"bytes,2,opt,name=failure,proto3" json:"failure,omitempty"`
	// The identity of the worker/client
	Identity  string `protobuf:"bytes,3,opt,name=identity,proto3" json:"identity,omitempty"`
	Namespace string `protobuf:"bytes,4,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Additional details to be stored as last activity heartbeat
	LastHeartbeatDetails *common.Payloads `protobuf:"bytes,5,opt,name=last_heartbeat_details,json=lastHeartbeatDetails,proto3" json:"last_heartbeat_details,omitempty"`
	// Version info of the worker who processed this task. This message's `build_id` field should
	// always be set by SDKs. Workers opting into versioning will also set the `use_versioning`
	// field to true. See message docstrings for more.
	WorkerVersion *common.WorkerVersionStamp `protobuf:"bytes,6,opt,name=worker_version,json=workerVersion,proto3" json:"worker_version,omitempty"`
}

func (x *RespondActivityTaskFailedRequest) Reset() {
	*x = RespondActivityTaskFailedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_workflowservice_request_response_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespondActivityTaskFailedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespondActivityTaskFailedRequest) ProtoMessage() {}

func (x *RespondActivityTaskFailedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_necode_workflowservice_request_response_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespondActivityTaskFailedRequest.ProtoReflect.Descriptor instead.
func (*RespondActivityTaskFailedRequest) Descriptor() ([]byte, []int) {
	return file_necode_workflowservice_request_response_proto_rawDescGZIP(), []int{32}
}

func (x *RespondActivityTaskFailedRequest) GetTaskToken() []byte {
	if x != nil {
		return x.TaskToken
	}
	return nil
}

func (x *RespondActivityTaskFailedRequest) GetFailure() *failure.Failure {
	if x != nil {
		return x.Failure
	}
	return nil
}

func (x *RespondActivityTaskFailedRequest) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

func (x *RespondActivityTaskFailedRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *RespondActivityTaskFailedRequest) GetLastHeartbeatDetails() *common.Payloads {
	if x != nil {
		return x.LastHeartbeatDetails
	}
	return nil
}

func (x *RespondActivityTaskFailedRequest) GetWorkerVersion() *common.WorkerVersionStamp {
	if x != nil {
		return x.WorkerVersion
	}
	return nil
}

type RespondActivityTaskFailedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Server validation failures could include
	// last_heartbeat_details payload is too large, request failure is too large
	Failures []*failure.Failure `protobuf:"bytes,1,rep,name=failures,proto3" json:"failures,omitempty"`
}

func (x *RespondActivityTaskFailedResponse) Reset() {
	*x = RespondActivityTaskFailedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_workflowservice_request_response_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespondActivityTaskFailedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespondActivityTaskFailedResponse) ProtoMessage() {}

func (x *RespondActivityTaskFailedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_necode_workflowservice_request_response_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespondActivityTaskFailedResponse.ProtoReflect.Descriptor instead.
func (*RespondActivityTaskFailedResponse) Descriptor() ([]byte, []int) {
	return file_necode_workflowservice_request_response_proto_rawDescGZIP(), []int{33}
}

func (x *RespondActivityTaskFailedResponse) GetFailures() []*failure.Failure {
	if x != nil {
		return x.Failures
	}
	return nil
}

type RespondActivityTaskFailedByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Namespace of the workflow which scheduled this activity
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Id of the workflow which scheduled this activity
	WorkflowId string `protobuf:"bytes,2,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	// Run Id of the workflow which scheduled this activity
	RunId string `protobuf:"bytes,3,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	// Id of the activity to fail
	ActivityId string `protobuf:"bytes,4,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
	// Detailed failure information
	Failure *failure.Failure `protobuf:"bytes,5,opt,name=failure,proto3" json:"failure,omitempty"`
	// The identity of the worker/client
	Identity string `protobuf:"bytes,6,opt,name=identity,proto3" json:"identity,omitempty"`
	// Additional details to be stored as last activity heartbeat
	LastHeartbeatDetails *common.Payloads `protobuf:"bytes,7,opt,name=last_heartbeat_details,json=lastHeartbeatDetails,proto3" json:"last_heartbeat_details,omitempty"`
}

func (x *RespondActivityTaskFailedByIdRequest) Reset() {
	*x = RespondActivityTaskFailedByIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_workflowservice_request_response_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespondActivityTaskFailedByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespondActivityTaskFailedByIdRequest) ProtoMessage() {}

func (x *RespondActivityTaskFailedByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_necode_workflowservice_request_response_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespondActivityTaskFailedByIdRequest.ProtoReflect.Descriptor instead.
func (*RespondActivityTaskFailedByIdRequest) Descriptor() ([]byte, []int) {
	return file_necode_workflowservice_request_response_proto_rawDescGZIP(), []int{34}
}

func (x *RespondActivityTaskFailedByIdRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *RespondActivityTaskFailedByIdRequest) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *RespondActivityTaskFailedByIdRequest) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *RespondActivityTaskFailedByIdRequest) GetActivityId() string {
	if x != nil {
		return x.ActivityId
	}
	return ""
}

func (x *RespondActivityTaskFailedByIdRequest) GetFailure() *failure.Failure {
	if x != nil {
		return x.Failure
	}
	return nil
}

func (x *RespondActivityTaskFailedByIdRequest) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

func (x *RespondActivityTaskFailedByIdRequest) GetLastHeartbeatDetails() *common.Payloads {
	if x != nil {
		return x.LastHeartbeatDetails
	}
	return nil
}

type RespondActivityTaskFailedByIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Server validation failures could include
	// last_heartbeat_details payload is too large, request failure is too large
	Failures []*failure.Failure `protobuf:"bytes,1,rep,name=failures,proto3" json:"failures,omitempty"`
}

func (x *RespondActivityTaskFailedByIdResponse) Reset() {
	*x = RespondActivityTaskFailedByIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_workflowservice_request_response_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespondActivityTaskFailedByIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespondActivityTaskFailedByIdResponse) ProtoMessage() {}

func (x *RespondActivityTaskFailedByIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_necode_workflowservice_request_response_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespondActivityTaskFailedByIdResponse.ProtoReflect.Descriptor instead.
func (*RespondActivityTaskFailedByIdResponse) Descriptor() ([]byte, []int) {
	return file_necode_workflowservice_request_response_proto_rawDescGZIP(), []int{35}
}

func (x *RespondActivityTaskFailedByIdResponse) GetFailures() []*failure.Failure {
	if x != nil {
		return x.Failures
	}
	return nil
}

type RespondActivityTaskCanceledRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The task token as received in `PollActivityTaskQueueResponse`
	TaskToken []byte `protobuf:"bytes,1,opt,name=task_token,json=taskToken,proto3" json:"task_token,omitempty"`
	// Serialized additional information to attach to the cancellation
	Details *common.Payloads `protobuf:"bytes,2,opt,name=details,proto3" json:"details,omitempty"`
	// The identity of the worker/client
	Identity  string `protobuf:"bytes,3,opt,name=identity,proto3" json:"identity,omitempty"`
	Namespace string `protobuf:"bytes,4,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Version info of the worker who processed this task. This message's `build_id` field should
	// always be set by SDKs. Workers opting into versioning will also set the `use_versioning`
	// field to true. See message docstrings for more.
	WorkerVersion *common.WorkerVersionStamp `protobuf:"bytes,5,opt,name=worker_version,json=workerVersion,proto3" json:"worker_version,omitempty"`
}

func (x *RespondActivityTaskCanceledRequest) Reset() {
	*x = RespondActivityTaskCanceledRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_workflowservice_request_response_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespondActivityTaskCanceledRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespondActivityTaskCanceledRequest) ProtoMessage() {}

func (x *RespondActivityTaskCanceledRequest) ProtoReflect() protoreflect.Message {
	mi := &file_necode_workflowservice_request_response_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespondActivityTaskCanceledRequest.ProtoReflect.Descriptor instead.
func (*RespondActivityTaskCanceledRequest) Descriptor() ([]byte, []int) {
	return file_necode_workflowservice_request_response_proto_rawDescGZIP(), []int{36}
}

func (x *RespondActivityTaskCanceledRequest) GetTaskToken() []byte {
	if x != nil {
		return x.TaskToken
	}
	return nil
}

func (x *RespondActivityTaskCanceledRequest) GetDetails() *common.Payloads {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *RespondActivityTaskCanceledRequest) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

func (x *RespondActivityTaskCanceledRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *RespondActivityTaskCanceledRequest) GetWorkerVersion() *common.WorkerVersionStamp {
	if x != nil {
		return x.WorkerVersion
	}
	return nil
}

type RespondActivityTaskCanceledResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RespondActivityTaskCanceledResponse) Reset() {
	*x = RespondActivityTaskCanceledResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_workflowservice_request_response_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespondActivityTaskCanceledResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespondActivityTaskCanceledResponse) ProtoMessage() {}

func (x *RespondActivityTaskCanceledResponse) ProtoReflect() protoreflect.Message {
	mi := &file_necode_workflowservice_request_response_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespondActivityTaskCanceledResponse.ProtoReflect.Descriptor instead.
func (*RespondActivityTaskCanceledResponse) Descriptor() ([]byte, []int) {
	return file_necode_workflowservice_request_response_proto_rawDescGZIP(), []int{37}
}

type RespondActivityTaskCanceledByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Namespace of the workflow which scheduled this activity
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Id of the workflow which scheduled this activity
	WorkflowId string `protobuf:"bytes,2,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	// Run Id of the workflow which scheduled this activity
	RunId string `protobuf:"bytes,3,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	// Id of the activity to confirm is cancelled
	ActivityId string `protobuf:"bytes,4,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
	// Serialized additional information to attach to the cancellation
	Details *common.Payloads `protobuf:"bytes,5,opt,name=details,proto3" json:"details,omitempty"`
	// The identity of the worker/client
	Identity string `protobuf:"bytes,6,opt,name=identity,proto3" json:"identity,omitempty"`
}

func (x *RespondActivityTaskCanceledByIdRequest) Reset() {
	*x = RespondActivityTaskCanceledByIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_workflowservice_request_response_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespondActivityTaskCanceledByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespondActivityTaskCanceledByIdRequest) ProtoMessage() {}

func (x *RespondActivityTaskCanceledByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_necode_workflowservice_request_response_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespondActivityTaskCanceledByIdRequest.ProtoReflect.Descriptor instead.
func (*RespondActivityTaskCanceledByIdRequest) Descriptor() ([]byte, []int) {
	return file_necode_workflowservice_request_response_proto_rawDescGZIP(), []int{38}
}

func (x *RespondActivityTaskCanceledByIdRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *RespondActivityTaskCanceledByIdRequest) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *RespondActivityTaskCanceledByIdRequest) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *RespondActivityTaskCanceledByIdRequest) GetActivityId() string {
	if x != nil {
		return x.ActivityId
	}
	return ""
}

func (x *RespondActivityTaskCanceledByIdRequest) GetDetails() *common.Payloads {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *RespondActivityTaskCanceledByIdRequest) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

type RespondActivityTaskCanceledByIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RespondActivityTaskCanceledByIdResponse) Reset() {
	*x = RespondActivityTaskCanceledByIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_workflowservice_request_response_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespondActivityTaskCanceledByIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespondActivityTaskCanceledByIdResponse) ProtoMessage() {}

func (x *RespondActivityTaskCanceledByIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_necode_workflowservice_request_response_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespondActivityTaskCanceledByIdResponse.ProtoReflect.Descriptor instead.
func (*RespondActivityTaskCanceledByIdResponse) Descriptor() ([]byte, []int) {
	return file_necode_workflowservice_request_response_proto_rawDescGZIP(), []int{39}
}

type RequestCancelWorkflowExecutionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace         string                    `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	WorkflowExecution *common.WorkflowExecution `protobuf:"bytes,2,opt,name=workflow_execution,json=workflowExecution,proto3" json:"workflow_execution,omitempty"`
	// The identity of the worker/client
	Identity string `protobuf:"bytes,3,opt,name=identity,proto3" json:"identity,omitempty"`
	// Used to de-dupe cancellation requests
	RequestId string `protobuf:"bytes,4,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// If set, this call will error if the most recent (if no run id is set on
	// `workflow_execution`), or specified (if it is) workflow execution is not part of the same
	// execution chain as this id.
	FirstExecutionRunId string `protobuf:"bytes,5,opt,name=first_execution_run_id,json=firstExecutionRunId,proto3" json:"first_execution_run_id,omitempty"`
	// Reason for requesting the cancellation
	Reason string `protobuf:"bytes,6,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *RequestCancelWorkflowExecutionRequest) Reset() {
	*x = RequestCancelWorkflowExecutionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_workflowservice_request_response_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestCancelWorkflowExecutionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestCancelWorkflowExecutionRequest) ProtoMessage() {}

func (x *RequestCancelWorkflowExecutionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_necode_workflowservice_request_response_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestCancelWorkflowExecutionRequest.ProtoReflect.Descriptor instead.
func (*RequestCancelWorkflowExecutionRequest) Descriptor() ([]byte, []int) {
	return file_necode_workflowservice_request_response_proto_rawDescGZIP(), []int{40}
}

func (x *RequestCancelWorkflowExecutionRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *RequestCancelWorkflowExecutionRequest) GetWorkflowExecution() *common.WorkflowExecution {
	if x != nil {
		return x.WorkflowExecution
	}
	return nil
}

func (x *RequestCancelWorkflowExecutionRequest) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

func (x *RequestCancelWorkflowExecutionRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *RequestCancelWorkflowExecutionRequest) GetFirstExecutionRunId() string {
	if x != nil {
		return x.FirstExecutionRunId
	}
	return ""
}

func (x *RequestCancelWorkflowExecutionRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type RequestCancelWorkflowExecutionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RequestCancelWorkflowExecutionResponse) Reset() {
	*x = RequestCancelWorkflowExecutionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_workflowservice_request_response_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestCancelWorkflowExecutionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestCancelWorkflowExecutionResponse) ProtoMessage() {}

func (x *RequestCancelWorkflowExecutionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_necode_workflowservice_request_response_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestCancelWorkflowExecutionResponse.ProtoReflect.Descriptor instead.
func (*RequestCancelWorkflowExecutionResponse) Descriptor() ([]byte, []int) {
	return file_necode_workflowservice_request_response_proto_rawDescGZIP(), []int{41}
}

type SignalWorkflowExecutionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace         string                    `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	WorkflowExecution *common.WorkflowExecution `protobuf:"bytes,2,opt,name=workflow_execution,json=workflowExecution,proto3" json:"workflow_execution,omitempty"`
	// The workflow author-defined name of the signal to send to the workflow
	SignalName string `protobuf:"bytes,3,opt,name=signal_name,json=signalName,proto3" json:"signal_name,omitempty"`
	// Serialized value(s) to provide with the signal
	Input *common.Payloads `protobuf:"bytes,4,opt,name=input,proto3" json:"input,omitempty"`
	// The identity of the worker/client
	Identity string `protobuf:"bytes,5,opt,name=identity,proto3" json:"identity,omitempty"`
	// Used to de-dupe sent signals
	RequestId string `protobuf:"bytes,6,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// Deprecated
	Control string `protobuf:"bytes,7,opt,name=control,proto3" json:"control,omitempty"`
	// Headers that are passed with the signal to the processing workflow.
	// These can include things like auth or tracing tokens.
	Header *common.Header `protobuf:"bytes,8,opt,name=header,proto3" json:"header,omitempty"`
	// Indicates that a new workflow task should not be generated when this signal is received.
	SkipGenerateWorkflowTask bool `protobuf:"varint,9,opt,name=skip_generate_workflow_task,json=skipGenerateWorkflowTask,proto3" json:"skip_generate_workflow_task,omitempty"`
}

func (x *SignalWorkflowExecutionRequest) Reset() {
	*x = SignalWorkflowExecutionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_workflowservice_request_response_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignalWorkflowExecutionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalWorkflowExecutionRequest) ProtoMessage() {}

func (x *SignalWorkflowExecutionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_necode_workflowservice_request_response_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalWorkflowExecutionRequest.ProtoReflect.Descriptor instead.
func (*SignalWorkflowExecutionRequest) Descriptor() ([]byte, []int) {
	return file_necode_workflowservice_request_response_proto_rawDescGZIP(), []int{42}
}

func (x *SignalWorkflowExecutionRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *SignalWorkflowExecutionRequest) GetWorkflowExecution() *common.WorkflowExecution {
	if x != nil {
		return x.WorkflowExecution
	}
	return nil
}

func (x *SignalWorkflowExecutionRequest) GetSignalName() string {
	if x != nil {
		return x.SignalName
	}
	return ""
}

func (x *SignalWorkflowExecutionRequest) GetInput() *common.Payloads {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *SignalWorkflowExecutionRequest) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

func (x *SignalWorkflowExecutionRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *SignalWorkflowExecutionRequest) GetControl() string {
	if x != nil {
		return x.Control
	}
	return ""
}

func (x *SignalWorkflowExecutionRequest) GetHeader() *common.Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *SignalWorkflowExecutionRequest) GetSkipGenerateWorkflowTask() bool {
	if x != nil {
		return x.SkipGenerateWorkflowTask
	}
	return false
}

type SignalWorkflowExecutionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SignalWorkflowExecutionResponse) Reset() {
	*x = SignalWorkflowExecutionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_workflowservice_request_response_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignalWorkflowExecutionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalWorkflowExecutionResponse) ProtoMessage() {}

func (x *SignalWorkflowExecutionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_necode_workflowservice_request_response_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalWorkflowExecutionResponse.ProtoReflect.Descriptor instead.
func (*SignalWorkflowExecutionResponse) Descriptor() ([]byte, []int) {
	return file_necode_workflowservice_request_response_proto_rawDescGZIP(), []int{43}
}

type SignalWithStartWorkflowExecutionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace    string               `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	WorkflowId   string               `protobuf:"bytes,2,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	WorkflowType *common.WorkflowType `protobuf:"bytes,3,opt,name=workflow_type,json=workflowType,proto3" json:"workflow_type,omitempty"`
	// The task queue to start this workflow on, if it will be started
	TaskQueue *taskqueue.TaskQueue `protobuf:"bytes,4,opt,name=task_queue,json=taskQueue,proto3" json:"task_queue,omitempty"`
	// Serialized arguments to the workflow. These are passed as arguments to the workflow function.
	Input *common.Payloads `protobuf:"bytes,5,opt,name=input,proto3" json:"input,omitempty"`
	// Total workflow execution timeout including retries and continue as new
	WorkflowExecutionTimeout *durationpb.Duration `protobuf:"bytes,6,opt,name=workflow_execution_timeout,json=workflowExecutionTimeout,proto3" json:"workflow_execution_timeout,omitempty"`
	// Timeout of a single workflow run
	WorkflowRunTimeout *durationpb.Duration `protobuf:"bytes,7,opt,name=workflow_run_timeout,json=workflowRunTimeout,proto3" json:"workflow_run_timeout,omitempty"`
	// Timeout of a single workflow task
	WorkflowTaskTimeout *durationpb.Duration `protobuf:"bytes,8,opt,name=workflow_task_timeout,json=workflowTaskTimeout,proto3" json:"workflow_task_timeout,omitempty"`
	// The identity of the worker/client
	Identity string `protobuf:"bytes,9,opt,name=identity,proto3" json:"identity,omitempty"`
	// Used to de-dupe signal w/ start requests
	RequestId             string                      `protobuf:"bytes,10,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	WorkflowIdReusePolicy enums.WorkflowIdReusePolicy `protobuf:"varint,11,opt,name=workflow_id_reuse_policy,json=workflowIdReusePolicy,proto3,enum=necode.enums.WorkflowIdReusePolicy" json:"workflow_id_reuse_policy,omitempty"`
	// The workflow author-defined name of the signal to send to the workflow
	SignalName string `protobuf:"bytes,12,opt,name=signal_name,json=signalName,proto3" json:"signal_name,omitempty"`
	// Serialized value(s) to provide with the signal
	SignalInput *common.Payloads `protobuf:"bytes,13,opt,name=signal_input,json=signalInput,proto3" json:"signal_input,omitempty"`
	// Deprecated
	Control string `protobuf:"bytes,14,opt,name=control,proto3" json:"control,omitempty"`
	// Retry policy for the workflow Default: WORKFLOW_ID_REUSE_POLICY_ALLOW_DUPLICATE.
	RetryPolicy *common.RetryPolicy `protobuf:"bytes,15,opt,name=retry_policy,json=retryPolicy,proto3" json:"retry_policy,omitempty"`
	// See https://docs.temporal.io/docs/content/what-is-a-temporal-cron-job/
	CronSchedule     string                   `protobuf:"bytes,16,opt,name=cron_schedule,json=cronSchedule,proto3" json:"cron_schedule,omitempty"`
	Memo             *common.Memo             `protobuf:"bytes,17,opt,name=memo,proto3" json:"memo,omitempty"`
	SearchAttributes *common.SearchAttributes `protobuf:"bytes,18,opt,name=search_attributes,json=searchAttributes,proto3" json:"search_attributes,omitempty"`
	Header           *common.Header           `protobuf:"bytes,19,opt,name=header,proto3" json:"header,omitempty"`
	// Time to wait before dispatching the first workflow task. Cannot be used with `cron_schedule`.
	// Note that the signal will be delivered with the first workflow task. If the workflow gets
	// another SignalWithStartWorkflow before the delay and `skip_generate_workflow_task` is false
	// or not set, a workflow task will be dispatched immediately and the rest of the delay period
	// will be ignored, even if that request also had a delay. Signal via SignalWorkflowExecution
	// will not unblock the workflow.
	WorkflowStartDelay *durationpb.Duration `protobuf:"bytes,20,opt,name=workflow_start_delay,json=workflowStartDelay,proto3" json:"workflow_start_delay,omitempty"`
	// Indicates that a new workflow task should not be generated when this signal is received.
	SkipGenerateWorkflowTask bool `protobuf:"varint,21,opt,name=skip_generate_workflow_task,json=skipGenerateWorkflowTask,proto3" json:"skip_generate_workflow_task,omitempty"`
}

func (x *SignalWithStartWorkflowExecutionRequest) Reset() {
	*x = SignalWithStartWorkflowExecutionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_workflowservice_request_response_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignalWithStartWorkflowExecutionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalWithStartWorkflowExecutionRequest) ProtoMessage() {}

func (x *SignalWithStartWorkflowExecutionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_necode_workflowservice_request_response_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalWithStartWorkflowExecutionRequest.ProtoReflect.Descriptor instead.
func (*SignalWithStartWorkflowExecutionRequest) Descriptor() ([]byte, []int) {
	return file_necode_workflowservice_request_response_proto_rawDescGZIP(), []int{44}
}

func (x *SignalWithStartWorkflowExecutionRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *SignalWithStartWorkflowExecutionRequest) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *SignalWithStartWorkflowExecutionRequest) GetWorkflowType() *common.WorkflowType {
	if x != nil {
		return x.WorkflowType
	}
	return nil
}

func (x *SignalWithStartWorkflowExecutionRequest) GetTaskQueue() *taskqueue.TaskQueue {
	if x != nil {
		return x.TaskQueue
	}
	return nil
}

func (x *SignalWithStartWorkflowExecutionRequest) GetInput() *common.Payloads {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *SignalWithStartWorkflowExecutionRequest) GetWorkflowExecutionTimeout() *durationpb.Duration {
	if x != nil {
		return x.WorkflowExecutionTimeout
	}
	return nil
}

func (x *SignalWithStartWorkflowExecutionRequest) GetWorkflowRunTimeout() *durationpb.Duration {
	if x != nil {
		return x.WorkflowRunTimeout
	}
	return nil
}

func (x *SignalWithStartWorkflowExecutionRequest) GetWorkflowTaskTimeout() *durationpb.Duration {
	if x != nil {
		return x.WorkflowTaskTimeout
	}
	return nil
}

func (x *SignalWithStartWorkflowExecutionRequest) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

func (x *SignalWithStartWorkflowExecutionRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *SignalWithStartWorkflowExecutionRequest) GetWorkflowIdReusePolicy() enums.WorkflowIdReusePolicy {
	if x != nil {
		return x.WorkflowIdReusePolicy
	}
	return enums.WorkflowIdReusePolicy(0)
}

func (x *SignalWithStartWorkflowExecutionRequest) GetSignalName() string {
	if x != nil {
		return x.SignalName
	}
	return ""
}

func (x *SignalWithStartWorkflowExecutionRequest) GetSignalInput() *common.Payloads {
	if x != nil {
		return x.SignalInput
	}
	return nil
}

func (x *SignalWithStartWorkflowExecutionRequest) GetControl() string {
	if x != nil {
		return x.Control
	}
	return ""
}

func (x *SignalWithStartWorkflowExecutionRequest) GetRetryPolicy() *common.RetryPolicy {
	if x != nil {
		return x.RetryPolicy
	}
	return nil
}

func (x *SignalWithStartWorkflowExecutionRequest) GetCronSchedule() string {
	if x != nil {
		return x.CronSchedule
	}
	return ""
}

func (x *SignalWithStartWorkflowExecutionRequest) GetMemo() *common.Memo {
	if x != nil {
		return x.Memo
	}
	return nil
}

func (x *SignalWithStartWorkflowExecutionRequest) GetSearchAttributes() *common.SearchAttributes {
	if x != nil {
		return x.SearchAttributes
	}
	return nil
}

func (x *SignalWithStartWorkflowExecutionRequest) GetHeader() *common.Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *SignalWithStartWorkflowExecutionRequest) GetWorkflowStartDelay() *durationpb.Duration {
	if x != nil {
		return x.WorkflowStartDelay
	}
	return nil
}

func (x *SignalWithStartWorkflowExecutionRequest) GetSkipGenerateWorkflowTask() bool {
	if x != nil {
		return x.SkipGenerateWorkflowTask
	}
	return false
}

type SignalWithStartWorkflowExecutionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RunId string `protobuf:"bytes,1,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
}

func (x *SignalWithStartWorkflowExecutionResponse) Reset() {
	*x = SignalWithStartWorkflowExecutionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_workflowservice_request_response_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignalWithStartWorkflowExecutionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalWithStartWorkflowExecutionResponse) ProtoMessage() {}

func (x *SignalWithStartWorkflowExecutionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_necode_workflowservice_request_response_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalWithStartWorkflowExecutionResponse.ProtoReflect.Descriptor instead.
func (*SignalWithStartWorkflowExecutionResponse) Descriptor() ([]byte, []int) {
	return file_necode_workflowservice_request_response_proto_rawDescGZIP(), []int{45}
}

func (x *SignalWithStartWorkflowExecutionResponse) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

type ResetWorkflowExecutionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace         string                    `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	WorkflowExecution *common.WorkflowExecution `protobuf:"bytes,2,opt,name=workflow_execution,json=workflowExecution,proto3" json:"workflow_execution,omitempty"`
	Reason            string                    `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
	// The id of a `WORKFLOW_TASK_COMPLETED`,`WORKFLOW_TASK_TIMED_OUT`, `WORKFLOW_TASK_FAILED`, or
	// `WORKFLOW_TASK_STARTED` event to reset to.
	WorkflowTaskFinishEventId int64 `protobuf:"varint,4,opt,name=workflow_task_finish_event_id,json=workflowTaskFinishEventId,proto3" json:"workflow_task_finish_event_id,omitempty"`
	// Used to de-dupe reset requests
	RequestId string `protobuf:"bytes,5,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// Reset reapplay(replay) options.
	ResetReapplyType enums.ResetReapplyType `protobuf:"varint,6,opt,name=reset_reapply_type,json=resetReapplyType,proto3,enum=necode.enums.ResetReapplyType" json:"reset_reapply_type,omitempty"`
}

func (x *ResetWorkflowExecutionRequest) Reset() {
	*x = ResetWorkflowExecutionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_workflowservice_request_response_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetWorkflowExecutionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetWorkflowExecutionRequest) ProtoMessage() {}

func (x *ResetWorkflowExecutionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_necode_workflowservice_request_response_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetWorkflowExecutionRequest.ProtoReflect.Descriptor instead.
func (*ResetWorkflowExecutionRequest) Descriptor() ([]byte, []int) {
	return file_necode_workflowservice_request_response_proto_rawDescGZIP(), []int{46}
}

func (x *ResetWorkflowExecutionRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ResetWorkflowExecutionRequest) GetWorkflowExecution() *common.WorkflowExecution {
	if x != nil {
		return x.WorkflowExecution
	}
	return nil
}

func (x *ResetWorkflowExecutionRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *ResetWorkflowExecutionRequest) GetWorkflowTaskFinishEventId() int64 {
	if x != nil {
		return x.WorkflowTaskFinishEventId
	}
	return 0
}

func (x *ResetWorkflowExecutionRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *ResetWorkflowExecutionRequest) GetResetReapplyType() enums.ResetReapplyType {
	if x != nil {
		return x.ResetReapplyType
	}
	return enums.ResetReapplyType(0)
}

type ResetWorkflowExecutionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RunId string `protobuf:"bytes,1,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
}

func (x *ResetWorkflowExecutionResponse) Reset() {
	*x = ResetWorkflowExecutionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_workflowservice_request_response_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetWorkflowExecutionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetWorkflowExecutionResponse) ProtoMessage() {}

func (x *ResetWorkflowExecutionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_necode_workflowservice_request_response_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetWorkflowExecutionResponse.ProtoReflect.Descriptor instead.
func (*ResetWorkflowExecutionResponse) Descriptor() ([]byte, []int) {
	return file_necode_workflowservice_request_response_proto_rawDescGZIP(), []int{47}
}

func (x *ResetWorkflowExecutionResponse) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

type TerminateWorkflowExecutionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace         string                    `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	WorkflowExecution *common.WorkflowExecution `protobuf:"bytes,2,opt,name=workflow_execution,json=workflowExecution,proto3" json:"workflow_execution,omitempty"`
	Reason            string                    `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
	// Serialized additional information to attach to the termination event
	Details *common.Payloads `protobuf:"bytes,4,opt,name=details,proto3" json:"details,omitempty"`
	// The identity of the worker/client
	Identity string `protobuf:"bytes,5,opt,name=identity,proto3" json:"identity,omitempty"`
	// If set, this call will error if the most recent (if no run id is set on
	// `workflow_execution`), or specified (if it is) workflow execution is not part of the same
	// execution chain as this id.
	FirstExecutionRunId string `protobuf:"bytes,6,opt,name=first_execution_run_id,json=firstExecutionRunId,proto3" json:"first_execution_run_id,omitempty"`
}

func (x *TerminateWorkflowExecutionRequest) Reset() {
	*x = TerminateWorkflowExecutionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_workflowservice_request_response_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TerminateWorkflowExecutionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminateWorkflowExecutionRequest) ProtoMessage() {}

func (x *TerminateWorkflowExecutionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_necode_workflowservice_request_response_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminateWorkflowExecutionRequest.ProtoReflect.Descriptor instead.
func (*TerminateWorkflowExecutionRequest) Descriptor() ([]byte, []int) {
	return file_necode_workflowservice_request_response_proto_rawDescGZIP(), []int{48}
}

func (x *TerminateWorkflowExecutionRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *TerminateWorkflowExecutionRequest) GetWorkflowExecution() *common.WorkflowExecution {
	if x != nil {
		return x.WorkflowExecution
	}
	return nil
}

func (x *TerminateWorkflowExecutionRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *TerminateWorkflowExecutionRequest) GetDetails() *common.Payloads {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *TerminateWorkflowExecutionRequest) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

func (x *TerminateWorkflowExecutionRequest) GetFirstExecutionRunId() string {
	if x != nil {
		return x.FirstExecutionRunId
	}
	return ""
}

type TerminateWorkflowExecutionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TerminateWorkflowExecutionResponse) Reset() {
	*x = TerminateWorkflowExecutionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_workflowservice_request_response_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TerminateWorkflowExecutionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminateWorkflowExecutionResponse) ProtoMessage() {}

func (x *TerminateWorkflowExecutionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_necode_workflowservice_request_response_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminateWorkflowExecutionResponse.ProtoReflect.Descriptor instead.
func (*TerminateWorkflowExecutionResponse) Descriptor() ([]byte, []int) {
	return file_necode_workflowservice_request_response_proto_rawDescGZIP(), []int{49}
}

// (-- api-linter: core::0135::request-unknown-fields=disabled
//
//	aip.dev/not-precedent: DeleteNamespace RPC doesn't follow Google API format. --)
//
// (-- api-linter: core::0135::request-name-required=disabled
//
//	aip.dev/not-precedent: DeleteNamespace RPC doesn't follow Google API format. --)
type DeleteWorkflowExecutionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Workflow Execution to delete. If run_id is not specified, the latest one is used.
	WorkflowExecution *common.WorkflowExecution `protobuf:"bytes,2,opt,name=workflow_execution,json=workflowExecution,proto3" json:"workflow_execution,omitempty"`
}

func (x *DeleteWorkflowExecutionRequest) Reset() {
	*x = DeleteWorkflowExecutionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_workflowservice_request_response_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteWorkflowExecutionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteWorkflowExecutionRequest) ProtoMessage() {}

func (x *DeleteWorkflowExecutionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_necode_workflowservice_request_response_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteWorkflowExecutionRequest.ProtoReflect.Descriptor instead.
func (*DeleteWorkflowExecutionRequest) Descriptor() ([]byte, []int) {
	return file_necode_workflowservice_request_response_proto_rawDescGZIP(), []int{50}
}

func (x *DeleteWorkflowExecutionRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *DeleteWorkflowExecutionRequest) GetWorkflowExecution() *common.WorkflowExecution {
	if x != nil {
		return x.WorkflowExecution
	}
	return nil
}

type DeleteWorkflowExecutionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteWorkflowExecutionResponse) Reset() {
	*x = DeleteWorkflowExecutionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_workflowservice_request_response_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteWorkflowExecutionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteWorkflowExecutionResponse) ProtoMessage() {}

func (x *DeleteWorkflowExecutionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_necode_workflowservice_request_response_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteWorkflowExecutionResponse.ProtoReflect.Descriptor instead.
func (*DeleteWorkflowExecutionResponse) Descriptor() ([]byte, []int) {
	return file_necode_workflowservice_request_response_proto_rawDescGZIP(), []int{51}
}

type ListOpenWorkflowExecutionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace       string                  `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	MaximumPageSize int32                   `protobuf:"varint,2,opt,name=maximum_page_size,json=maximumPageSize,proto3" json:"maximum_page_size,omitempty"`
	NextPageToken   []byte                  `protobuf:"bytes,3,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	StartTimeFilter *filter.StartTimeFilter `protobuf:"bytes,4,opt,name=start_time_filter,json=startTimeFilter,proto3" json:"start_time_filter,omitempty"`
	// Types that are assignable to Filters:
	//
	//	*ListOpenWorkflowExecutionsRequest_ExecutionFilter
	//	*ListOpenWorkflowExecutionsRequest_TypeFilter
	Filters isListOpenWorkflowExecutionsRequest_Filters `protobuf_oneof:"filters"`
}

func (x *ListOpenWorkflowExecutionsRequest) Reset() {
	*x = ListOpenWorkflowExecutionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_workflowservice_request_response_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOpenWorkflowExecutionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOpenWorkflowExecutionsRequest) ProtoMessage() {}

func (x *ListOpenWorkflowExecutionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_necode_workflowservice_request_response_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOpenWorkflowExecutionsRequest.ProtoReflect.Descriptor instead.
func (*ListOpenWorkflowExecutionsRequest) Descriptor() ([]byte, []int) {
	return file_necode_workflowservice_request_response_proto_rawDescGZIP(), []int{52}
}

func (x *ListOpenWorkflowExecutionsRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ListOpenWorkflowExecutionsRequest) GetMaximumPageSize() int32 {
	if x != nil {
		return x.MaximumPageSize
	}
	return 0
}

func (x *ListOpenWorkflowExecutionsRequest) GetNextPageToken() []byte {
	if x != nil {
		return x.NextPageToken
	}
	return nil
}

func (x *ListOpenWorkflowExecutionsRequest) GetStartTimeFilter() *filter.StartTimeFilter {
	if x != nil {
		return x.StartTimeFilter
	}
	return nil
}

func (m *ListOpenWorkflowExecutionsRequest) GetFilters() isListOpenWorkflowExecutionsRequest_Filters {
	if m != nil {
		return m.Filters
	}
	return nil
}

func (x *ListOpenWorkflowExecutionsRequest) GetExecutionFilter() *filter.WorkflowExecutionFilter {
	if x, ok := x.GetFilters().(*ListOpenWorkflowExecutionsRequest_ExecutionFilter); ok {
		return x.ExecutionFilter
	}
	return nil
}

func (x *ListOpenWorkflowExecutionsRequest) GetTypeFilter() *filter.WorkflowTypeFilter {
	if x, ok := x.GetFilters().(*ListOpenWorkflowExecutionsRequest_TypeFilter); ok {
		return x.TypeFilter
	}
	return nil
}

type isListOpenWorkflowExecutionsRequest_Filters interface {
	isListOpenWorkflowExecutionsRequest_Filters()
}

type ListOpenWorkflowExecutionsRequest_ExecutionFilter struct {
	ExecutionFilter *filter.WorkflowExecutionFilter `protobuf:"bytes,5,opt,name=execution_filter,json=executionFilter,proto3,oneof"`
}

type ListOpenWorkflowExecutionsRequest_TypeFilter struct {
	TypeFilter *filter.WorkflowTypeFilter `protobuf:"bytes,6,opt,name=type_filter,json=typeFilter,proto3,oneof"`
}

func (*ListOpenWorkflowExecutionsRequest_ExecutionFilter) isListOpenWorkflowExecutionsRequest_Filters() {
}

func (*ListOpenWorkflowExecutionsRequest_TypeFilter) isListOpenWorkflowExecutionsRequest_Filters() {}

type ListOpenWorkflowExecutionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Executions    []*workflow.WorkflowExecutionInfo `protobuf:"bytes,1,rep,name=executions,proto3" json:"executions,omitempty"`
	NextPageToken []byte                            `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListOpenWorkflowExecutionsResponse) Reset() {
	*x = ListOpenWorkflowExecutionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_workflowservice_request_response_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOpenWorkflowExecutionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOpenWorkflowExecutionsResponse) ProtoMessage() {}

func (x *ListOpenWorkflowExecutionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_necode_workflowservice_request_response_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOpenWorkflowExecutionsResponse.ProtoReflect.Descriptor instead.
func (*ListOpenWorkflowExecutionsResponse) Descriptor() ([]byte, []int) {
	return file_necode_workflowservice_request_response_proto_rawDescGZIP(), []int{53}
}

func (x *ListOpenWorkflowExecutionsResponse) GetExecutions() []*workflow.WorkflowExecutionInfo {
	if x != nil {
		return x.Executions
	}
	return nil
}

func (x *ListOpenWorkflowExecutionsResponse) GetNextPageToken() []byte {
	if x != nil {
		return x.NextPageToken
	}
	return nil
}

type ListClosedWorkflowExecutionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace       string                  `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	MaximumPageSize int32                   `protobuf:"varint,2,opt,name=maximum_page_size,json=maximumPageSize,proto3" json:"maximum_page_size,omitempty"`
	NextPageToken   []byte                  `protobuf:"bytes,3,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	StartTimeFilter *filter.StartTimeFilter `protobuf:"bytes,4,opt,name=start_time_filter,json=startTimeFilter,proto3" json:"start_time_filter,omitempty"`
	// Types that are assignable to Filters:
	//
	//	*ListClosedWorkflowExecutionsRequest_ExecutionFilter
	//	*ListClosedWorkflowExecutionsRequest_TypeFilter
	//	*ListClosedWorkflowExecutionsRequest_StatusFilter
	Filters isListClosedWorkflowExecutionsRequest_Filters `protobuf_oneof:"filters"`
}

func (x *ListClosedWorkflowExecutionsRequest) Reset() {
	*x = ListClosedWorkflowExecutionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_workflowservice_request_response_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListClosedWorkflowExecutionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClosedWorkflowExecutionsRequest) ProtoMessage() {}

func (x *ListClosedWorkflowExecutionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_necode_workflowservice_request_response_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClosedWorkflowExecutionsRequest.ProtoReflect.Descriptor instead.
func (*ListClosedWorkflowExecutionsRequest) Descriptor() ([]byte, []int) {
	return file_necode_workflowservice_request_response_proto_rawDescGZIP(), []int{54}
}

func (x *ListClosedWorkflowExecutionsRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ListClosedWorkflowExecutionsRequest) GetMaximumPageSize() int32 {
	if x != nil {
		return x.MaximumPageSize
	}
	return 0
}

func (x *ListClosedWorkflowExecutionsRequest) GetNextPageToken() []byte {
	if x != nil {
		return x.NextPageToken
	}
	return nil
}

func (x *ListClosedWorkflowExecutionsRequest) GetStartTimeFilter() *filter.StartTimeFilter {
	if x != nil {
		return x.StartTimeFilter
	}
	return nil
}

func (m *ListClosedWorkflowExecutionsRequest) GetFilters() isListClosedWorkflowExecutionsRequest_Filters {
	if m != nil {
		return m.Filters
	}
	return nil
}

func (x *ListClosedWorkflowExecutionsRequest) GetExecutionFilter() *filter.WorkflowExecutionFilter {
	if x, ok := x.GetFilters().(*ListClosedWorkflowExecutionsRequest_ExecutionFilter); ok {
		return x.ExecutionFilter
	}
	return nil
}

func (x *ListClosedWorkflowExecutionsRequest) GetTypeFilter() *filter.WorkflowTypeFilter {
	if x, ok := x.GetFilters().(*ListClosedWorkflowExecutionsRequest_TypeFilter); ok {
		return x.TypeFilter
	}
	return nil
}

func (x *ListClosedWorkflowExecutionsRequest) GetStatusFilter() *filter.StatusFilter {
	if x, ok := x.GetFilters().(*ListClosedWorkflowExecutionsRequest_StatusFilter); ok {
		return x.StatusFilter
	}
	return nil
}

type isListClosedWorkflowExecutionsRequest_Filters interface {
	isListClosedWorkflowExecutionsRequest_Filters()
}

type ListClosedWorkflowExecutionsRequest_ExecutionFilter struct {
	ExecutionFilter *filter.WorkflowExecutionFilter `protobuf:"bytes,5,opt,name=execution_filter,json=executionFilter,proto3,oneof"`
}

type ListClosedWorkflowExecutionsRequest_TypeFilter struct {
	TypeFilter *filter.WorkflowTypeFilter `protobuf:"bytes,6,opt,name=type_filter,json=typeFilter,proto3,oneof"`
}

type ListClosedWorkflowExecutionsRequest_StatusFilter struct {
	StatusFilter *filter.StatusFilter `protobuf:"bytes,7,opt,name=status_filter,json=statusFilter,proto3,oneof"`
}

func (*ListClosedWorkflowExecutionsRequest_ExecutionFilter) isListClosedWorkflowExecutionsRequest_Filters() {
}

func (*ListClosedWorkflowExecutionsRequest_TypeFilter) isListClosedWorkflowExecutionsRequest_Filters() {
}

func (*ListClosedWorkflowExecutionsRequest_StatusFilter) isListClosedWorkflowExecutionsRequest_Filters() {
}

type ListClosedWorkflowExecutionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Executions    []*workflow.WorkflowExecutionInfo `protobuf:"bytes,1,rep,name=executions,proto3" json:"executions,omitempty"`
	NextPageToken []byte                            `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListClosedWorkflowExecutionsResponse) Reset() {
	*x = ListClosedWorkflowExecutionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_workflowservice_request_response_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListClosedWorkflowExecutionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClosedWorkflowExecutionsResponse) ProtoMessage() {}

func (x *ListClosedWorkflowExecutionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_necode_workflowservice_request_response_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClosedWorkflowExecutionsResponse.ProtoReflect.Descriptor instead.
func (*ListClosedWorkflowExecutionsResponse) Descriptor() ([]byte, []int) {
	return file_necode_workflowservice_request_response_proto_rawDescGZIP(), []int{55}
}

func (x *ListClosedWorkflowExecutionsResponse) GetExecutions() []*workflow.WorkflowExecutionInfo {
	if x != nil {
		return x.Executions
	}
	return nil
}

func (x *ListClosedWorkflowExecutionsResponse) GetNextPageToken() []byte {
	if x != nil {
		return x.NextPageToken
	}
	return nil
}

type ListWorkflowExecutionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace     string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	PageSize      int32  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	NextPageToken []byte `protobuf:"bytes,3,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	Query         string `protobuf:"bytes,4,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *ListWorkflowExecutionsRequest) Reset() {
	*x = ListWorkflowExecutionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_workflowservice_request_response_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWorkflowExecutionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWorkflowExecutionsRequest) ProtoMessage() {}

func (x *ListWorkflowExecutionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_necode_workflowservice_request_response_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWorkflowExecutionsRequest.ProtoReflect.Descriptor instead.
func (*ListWorkflowExecutionsRequest) Descriptor() ([]byte, []int) {
	return file_necode_workflowservice_request_response_proto_rawDescGZIP(), []int{56}
}

func (x *ListWorkflowExecutionsRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ListWorkflowExecutionsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListWorkflowExecutionsRequest) GetNextPageToken() []byte {
	if x != nil {
		return x.NextPageToken
	}
	return nil
}

func (x *ListWorkflowExecutionsRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

type ListWorkflowExecutionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Executions    []*workflow.WorkflowExecutionInfo `protobuf:"bytes,1,rep,name=executions,proto3" json:"executions,omitempty"`
	NextPageToken []byte                            `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListWorkflowExecutionsResponse) Reset() {
	*x = ListWorkflowExecutionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_workflowservice_request_response_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWorkflowExecutionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWorkflowExecutionsResponse) ProtoMessage() {}

func (x *ListWorkflowExecutionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_necode_workflowservice_request_response_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWorkflowExecutionsResponse.ProtoReflect.Descriptor instead.
func (*ListWorkflowExecutionsResponse) Descriptor() ([]byte, []int) {
	return file_necode_workflowservice_request_response_proto_rawDescGZIP(), []int{57}
}

func (x *ListWorkflowExecutionsResponse) GetExecutions() []*workflow.WorkflowExecutionInfo {
	if x != nil {
		return x.Executions
	}
	return nil
}

func (x *ListWorkflowExecutionsResponse) GetNextPageToken() []byte {
	if x != nil {
		return x.NextPageToken
	}
	return nil
}

type ListArchivedWorkflowExecutionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace     string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	PageSize      int32  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	NextPageToken []byte `protobuf:"bytes,3,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	Query         string `protobuf:"bytes,4,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *ListArchivedWorkflowExecutionsRequest) Reset() {
	*x = ListArchivedWorkflowExecutionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_workflowservice_request_response_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListArchivedWorkflowExecutionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListArchivedWorkflowExecutionsRequest) ProtoMessage() {}

func (x *ListArchivedWorkflowExecutionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_necode_workflowservice_request_response_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListArchivedWorkflowExecutionsRequest.ProtoReflect.Descriptor instead.
func (*ListArchivedWorkflowExecutionsRequest) Descriptor() ([]byte, []int) {
	return file_necode_workflowservice_request_response_proto_rawDescGZIP(), []int{58}
}

func (x *ListArchivedWorkflowExecutionsRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ListArchivedWorkflowExecutionsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListArchivedWorkflowExecutionsRequest) GetNextPageToken() []byte {
	if x != nil {
		return x.NextPageToken
	}
	return nil
}

func (x *ListArchivedWorkflowExecutionsRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

type ListArchivedWorkflowExecutionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Executions    []*workflow.WorkflowExecutionInfo `protobuf:"bytes,1,rep,name=executions,proto3" json:"executions,omitempty"`
	NextPageToken []byte                            `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListArchivedWorkflowExecutionsResponse) Reset() {
	*x = ListArchivedWorkflowExecutionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_workflowservice_request_response_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListArchivedWorkflowExecutionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListArchivedWorkflowExecutionsResponse) ProtoMessage() {}

func (x *ListArchivedWorkflowExecutionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_necode_workflowservice_request_response_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListArchivedWorkflowExecutionsResponse.ProtoReflect.Descriptor instead.
func (*ListArchivedWorkflowExecutionsResponse) Descriptor() ([]byte, []int) {
	return file_necode_workflowservice_request_response_proto_rawDescGZIP(), []int{59}
}

func (x *ListArchivedWorkflowExecutionsResponse) GetExecutions() []*workflow.WorkflowExecutionInfo {
	if x != nil {
		return x.Executions
	}
	return nil
}

func (x *ListArchivedWorkflowExecutionsResponse) GetNextPageToken() []byte {
	if x != nil {
		return x.NextPageToken
	}
	return nil
}

type ScanWorkflowExecutionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace     string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	PageSize      int32  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	NextPageToken []byte `protobuf:"bytes,3,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	Query         string `protobuf:"bytes,4,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *ScanWorkflowExecutionsRequest) Reset() {
	*x = ScanWorkflowExecutionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_workflowservice_request_response_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScanWorkflowExecutionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScanWorkflowExecutionsRequest) ProtoMessage() {}

func (x *ScanWorkflowExecutionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_necode_workflowservice_request_response_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScanWorkflowExecutionsRequest.ProtoReflect.Descriptor instead.
func (*ScanWorkflowExecutionsRequest) Descriptor() ([]byte, []int) {
	return file_necode_workflowservice_request_response_proto_rawDescGZIP(), []int{60}
}

func (x *ScanWorkflowExecutionsRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ScanWorkflowExecutionsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ScanWorkflowExecutionsRequest) GetNextPageToken() []byte {
	if x != nil {
		return x.NextPageToken
	}
	return nil
}

func (x *ScanWorkflowExecutionsRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

type ScanWorkflowExecutionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Executions    []*workflow.WorkflowExecutionInfo `protobuf:"bytes,1,rep,name=executions,proto3" json:"executions,omitempty"`
	NextPageToken []byte                            `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ScanWorkflowExecutionsResponse) Reset() {
	*x = ScanWorkflowExecutionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_workflowservice_request_response_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScanWorkflowExecutionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScanWorkflowExecutionsResponse) ProtoMessage() {}

func (x *ScanWorkflowExecutionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_necode_workflowservice_request_response_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScanWorkflowExecutionsResponse.ProtoReflect.Descriptor instead.
func (*ScanWorkflowExecutionsResponse) Descriptor() ([]byte, []int) {
	return file_necode_workflowservice_request_response_proto_rawDescGZIP(), []int{61}
}

func (x *ScanWorkflowExecutionsResponse) GetExecutions() []*workflow.WorkflowExecutionInfo {
	if x != nil {
		return x.Executions
	}
	return nil
}

func (x *ScanWorkflowExecutionsResponse) GetNextPageToken() []byte {
	if x != nil {
		return x.NextPageToken
	}
	return nil
}

type CountWorkflowExecutionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Query     string `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *CountWorkflowExecutionsRequest) Reset() {
	*x = CountWorkflowExecutionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_workflowservice_request_response_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountWorkflowExecutionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountWorkflowExecutionsRequest) ProtoMessage() {}

func (x *CountWorkflowExecutionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_necode_workflowservice_request_response_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountWorkflowExecutionsRequest.ProtoReflect.Descriptor instead.
func (*CountWorkflowExecutionsRequest) Descriptor() ([]byte, []int) {
	return file_necode_workflowservice_request_response_proto_rawDescGZIP(), []int{62}
}

func (x *CountWorkflowExecutionsRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *CountWorkflowExecutionsRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

type CountWorkflowExecutionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count int64 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *CountWorkflowExecutionsResponse) Reset() {
	*x = CountWorkflowExecutionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_workflowservice_request_response_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountWorkflowExecutionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountWorkflowExecutionsResponse) ProtoMessage() {}

func (x *CountWorkflowExecutionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_necode_workflowservice_request_response_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountWorkflowExecutionsResponse.ProtoReflect.Descriptor instead.
func (*CountWorkflowExecutionsResponse) Descriptor() ([]byte, []int) {
	return file_necode_workflowservice_request_response_proto_rawDescGZIP(), []int{63}
}

func (x *CountWorkflowExecutionsResponse) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type GetSearchAttributesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetSearchAttributesRequest) Reset() {
	*x = GetSearchAttributesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_workflowservice_request_response_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSearchAttributesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSearchAttributesRequest) ProtoMessage() {}

func (x *GetSearchAttributesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_necode_workflowservice_request_response_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSearchAttributesRequest.ProtoReflect.Descriptor instead.
func (*GetSearchAttributesRequest) Descriptor() ([]byte, []int) {
	return file_necode_workflowservice_request_response_proto_rawDescGZIP(), []int{64}
}

type GetSearchAttributesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keys map[string]enums.IndexedValueType `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=necode.enums.IndexedValueType"`
}

func (x *GetSearchAttributesResponse) Reset() {
	*x = GetSearchAttributesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_workflowservice_request_response_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSearchAttributesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSearchAttributesResponse) ProtoMessage() {}

func (x *GetSearchAttributesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_necode_workflowservice_request_response_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSearchAttributesResponse.ProtoReflect.Descriptor instead.
func (*GetSearchAttributesResponse) Descriptor() ([]byte, []int) {
	return file_necode_workflowservice_request_response_proto_rawDescGZIP(), []int{65}
}

func (x *GetSearchAttributesResponse) GetKeys() map[string]enums.IndexedValueType {
	if x != nil {
		return x.Keys
	}
	return nil
}

type RespondQueryTaskCompletedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskToken     []byte                `protobuf:"bytes,1,opt,name=task_token,json=taskToken,proto3" json:"task_token,omitempty"`
	CompletedType enums.QueryResultType `protobuf:"varint,2,opt,name=completed_type,json=completedType,proto3,enum=necode.enums.QueryResultType" json:"completed_type,omitempty"`
	QueryResult   *common.Payloads      `protobuf:"bytes,3,opt,name=query_result,json=queryResult,proto3" json:"query_result,omitempty"`
	ErrorMessage  string                `protobuf:"bytes,4,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	Namespace     string                `protobuf:"bytes,6,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (x *RespondQueryTaskCompletedRequest) Reset() {
	*x = RespondQueryTaskCompletedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_workflowservice_request_response_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespondQueryTaskCompletedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespondQueryTaskCompletedRequest) ProtoMessage() {}

func (x *RespondQueryTaskCompletedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_necode_workflowservice_request_response_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespondQueryTaskCompletedRequest.ProtoReflect.Descriptor instead.
func (*RespondQueryTaskCompletedRequest) Descriptor() ([]byte, []int) {
	return file_necode_workflowservice_request_response_proto_rawDescGZIP(), []int{66}
}

func (x *RespondQueryTaskCompletedRequest) GetTaskToken() []byte {
	if x != nil {
		return x.TaskToken
	}
	return nil
}

func (x *RespondQueryTaskCompletedRequest) GetCompletedType() enums.QueryResultType {
	if x != nil {
		return x.CompletedType
	}
	return enums.QueryResultType(0)
}

func (x *RespondQueryTaskCompletedRequest) GetQueryResult() *common.Payloads {
	if x != nil {
		return x.QueryResult
	}
	return nil
}

func (x *RespondQueryTaskCompletedRequest) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *RespondQueryTaskCompletedRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

type RespondQueryTaskCompletedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RespondQueryTaskCompletedResponse) Reset() {
	*x = RespondQueryTaskCompletedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_workflowservice_request_response_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespondQueryTaskCompletedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespondQueryTaskCompletedResponse) ProtoMessage() {}

func (x *RespondQueryTaskCompletedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_necode_workflowservice_request_response_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespondQueryTaskCompletedResponse.ProtoReflect.Descriptor instead.
func (*RespondQueryTaskCompletedResponse) Descriptor() ([]byte, []int) {
	return file_necode_workflowservice_request_response_proto_rawDescGZIP(), []int{67}
}

type ResetStickyTaskQueueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace string                    `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Execution *common.WorkflowExecution `protobuf:"bytes,2,opt,name=execution,proto3" json:"execution,omitempty"`
}

func (x *ResetStickyTaskQueueRequest) Reset() {
	*x = ResetStickyTaskQueueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_workflowservice_request_response_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetStickyTaskQueueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetStickyTaskQueueRequest) ProtoMessage() {}

func (x *ResetStickyTaskQueueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_necode_workflowservice_request_response_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetStickyTaskQueueRequest.ProtoReflect.Descriptor instead.
func (*ResetStickyTaskQueueRequest) Descriptor() ([]byte, []int) {
	return file_necode_workflowservice_request_response_proto_rawDescGZIP(), []int{68}
}

func (x *ResetStickyTaskQueueRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ResetStickyTaskQueueRequest) GetExecution() *common.WorkflowExecution {
	if x != nil {
		return x.Execution
	}
	return nil
}

type ResetStickyTaskQueueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ResetStickyTaskQueueResponse) Reset() {
	*x = ResetStickyTaskQueueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_workflowservice_request_response_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetStickyTaskQueueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetStickyTaskQueueResponse) ProtoMessage() {}

func (x *ResetStickyTaskQueueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_necode_workflowservice_request_response_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetStickyTaskQueueResponse.ProtoReflect.Descriptor instead.
func (*ResetStickyTaskQueueResponse) Descriptor() ([]byte, []int) {
	return file_necode_workflowservice_request_response_proto_rawDescGZIP(), []int{69}
}

type QueryWorkflowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace string                    `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Execution *common.WorkflowExecution `protobuf:"bytes,2,opt,name=execution,proto3" json:"execution,omitempty"`
	Query     *query.WorkflowQuery      `protobuf:"bytes,3,opt,name=query,proto3" json:"query,omitempty"`
	// QueryRejectCondition can used to reject the query if workflow state does not satisfy condition.
	// Default: QUERY_REJECT_CONDITION_NONE.
	QueryRejectCondition enums.QueryRejectCondition `protobuf:"varint,4,opt,name=query_reject_condition,json=queryRejectCondition,proto3,enum=necode.enums.QueryRejectCondition" json:"query_reject_condition,omitempty"`
}

func (x *QueryWorkflowRequest) Reset() {
	*x = QueryWorkflowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_workflowservice_request_response_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryWorkflowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryWorkflowRequest) ProtoMessage() {}

func (x *QueryWorkflowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_necode_workflowservice_request_response_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryWorkflowRequest.ProtoReflect.Descriptor instead.
func (*QueryWorkflowRequest) Descriptor() ([]byte, []int) {
	return file_necode_workflowservice_request_response_proto_rawDescGZIP(), []int{70}
}

func (x *QueryWorkflowRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *QueryWorkflowRequest) GetExecution() *common.WorkflowExecution {
	if x != nil {
		return x.Execution
	}
	return nil
}

func (x *QueryWorkflowRequest) GetQuery() *query.WorkflowQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *QueryWorkflowRequest) GetQueryRejectCondition() enums.QueryRejectCondition {
	if x != nil {
		return x.QueryRejectCondition
	}
	return enums.QueryRejectCondition(0)
}

type QueryWorkflowResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueryResult   *common.Payloads     `protobuf:"bytes,1,opt,name=query_result,json=queryResult,proto3" json:"query_result,omitempty"`
	QueryRejected *query.QueryRejected `protobuf:"bytes,2,opt,name=query_rejected,json=queryRejected,proto3" json:"query_rejected,omitempty"`
}

func (x *QueryWorkflowResponse) Reset() {
	*x = QueryWorkflowResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_workflowservice_request_response_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryWorkflowResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryWorkflowResponse) ProtoMessage() {}

func (x *QueryWorkflowResponse) ProtoReflect() protoreflect.Message {
	mi := &file_necode_workflowservice_request_response_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryWorkflowResponse.ProtoReflect.Descriptor instead.
func (*QueryWorkflowResponse) Descriptor() ([]byte, []int) {
	return file_necode_workflowservice_request_response_proto_rawDescGZIP(), []int{71}
}

func (x *QueryWorkflowResponse) GetQueryResult() *common.Payloads {
	if x != nil {
		return x.QueryResult
	}
	return nil
}

func (x *QueryWorkflowResponse) GetQueryRejected() *query.QueryRejected {
	if x != nil {
		return x.QueryRejected
	}
	return nil
}

type DescribeWorkflowExecutionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace string                    `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Execution *common.WorkflowExecution `protobuf:"bytes,2,opt,name=execution,proto3" json:"execution,omitempty"`
}

func (x *DescribeWorkflowExecutionRequest) Reset() {
	*x = DescribeWorkflowExecutionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_workflowservice_request_response_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeWorkflowExecutionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeWorkflowExecutionRequest) ProtoMessage() {}

func (x *DescribeWorkflowExecutionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_necode_workflowservice_request_response_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeWorkflowExecutionRequest.ProtoReflect.Descriptor instead.
func (*DescribeWorkflowExecutionRequest) Descriptor() ([]byte, []int) {
	return file_necode_workflowservice_request_response_proto_rawDescGZIP(), []int{72}
}

func (x *DescribeWorkflowExecutionRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *DescribeWorkflowExecutionRequest) GetExecution() *common.WorkflowExecution {
	if x != nil {
		return x.Execution
	}
	return nil
}

type DescribeWorkflowExecutionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExecutionConfig       *workflow.WorkflowExecutionConfig     `protobuf:"bytes,1,opt,name=execution_config,json=executionConfig,proto3" json:"execution_config,omitempty"`
	WorkflowExecutionInfo *workflow.WorkflowExecutionInfo       `protobuf:"bytes,2,opt,name=workflow_execution_info,json=workflowExecutionInfo,proto3" json:"workflow_execution_info,omitempty"`
	PendingActivities     []*workflow.PendingActivityInfo       `protobuf:"bytes,3,rep,name=pending_activities,json=pendingActivities,proto3" json:"pending_activities,omitempty"`
	PendingChildren       []*workflow.PendingChildExecutionInfo `protobuf:"bytes,4,rep,name=pending_children,json=pendingChildren,proto3" json:"pending_children,omitempty"`
	PendingWorkflowTask   *workflow.PendingWorkflowTaskInfo     `protobuf:"bytes,5,opt,name=pending_workflow_task,json=pendingWorkflowTask,proto3" json:"pending_workflow_task,omitempty"`
}

func (x *DescribeWorkflowExecutionResponse) Reset() {
	*x = DescribeWorkflowExecutionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_workflowservice_request_response_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeWorkflowExecutionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeWorkflowExecutionResponse) ProtoMessage() {}

func (x *DescribeWorkflowExecutionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_necode_workflowservice_request_response_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeWorkflowExecutionResponse.ProtoReflect.Descriptor instead.
func (*DescribeWorkflowExecutionResponse) Descriptor() ([]byte, []int) {
	return file_necode_workflowservice_request_response_proto_rawDescGZIP(), []int{73}
}

func (x *DescribeWorkflowExecutionResponse) GetExecutionConfig() *workflow.WorkflowExecutionConfig {
	if x != nil {
		return x.ExecutionConfig
	}
	return nil
}

func (x *DescribeWorkflowExecutionResponse) GetWorkflowExecutionInfo() *workflow.WorkflowExecutionInfo {
	if x != nil {
		return x.WorkflowExecutionInfo
	}
	return nil
}

func (x *DescribeWorkflowExecutionResponse) GetPendingActivities() []*workflow.PendingActivityInfo {
	if x != nil {
		return x.PendingActivities
	}
	return nil
}

func (x *DescribeWorkflowExecutionResponse) GetPendingChildren() []*workflow.PendingChildExecutionInfo {
	if x != nil {
		return x.PendingChildren
	}
	return nil
}

func (x *DescribeWorkflowExecutionResponse) GetPendingWorkflowTask() *workflow.PendingWorkflowTaskInfo {
	if x != nil {
		return x.PendingWorkflowTask
	}
	return nil
}

type DescribeTaskQueueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace              string               `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	TaskQueue              *taskqueue.TaskQueue `protobuf:"bytes,2,opt,name=task_queue,json=taskQueue,proto3" json:"task_queue,omitempty"`
	TaskQueueType          enums.TaskQueueType  `protobuf:"varint,3,opt,name=task_queue_type,json=taskQueueType,proto3,enum=necode.enums.TaskQueueType" json:"task_queue_type,omitempty"`
	IncludeTaskQueueStatus bool                 `protobuf:"varint,4,opt,name=include_task_queue_status,json=includeTaskQueueStatus,proto3" json:"include_task_queue_status,omitempty"`
}

func (x *DescribeTaskQueueRequest) Reset() {
	*x = DescribeTaskQueueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_workflowservice_request_response_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeTaskQueueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeTaskQueueRequest) ProtoMessage() {}

func (x *DescribeTaskQueueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_necode_workflowservice_request_response_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeTaskQueueRequest.ProtoReflect.Descriptor instead.
func (*DescribeTaskQueueRequest) Descriptor() ([]byte, []int) {
	return file_necode_workflowservice_request_response_proto_rawDescGZIP(), []int{74}
}

func (x *DescribeTaskQueueRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *DescribeTaskQueueRequest) GetTaskQueue() *taskqueue.TaskQueue {
	if x != nil {
		return x.TaskQueue
	}
	return nil
}

func (x *DescribeTaskQueueRequest) GetTaskQueueType() enums.TaskQueueType {
	if x != nil {
		return x.TaskQueueType
	}
	return enums.TaskQueueType(0)
}

func (x *DescribeTaskQueueRequest) GetIncludeTaskQueueStatus() bool {
	if x != nil {
		return x.IncludeTaskQueueStatus
	}
	return false
}

type DescribeTaskQueueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pollers         []*taskqueue.PollerInfo    `protobuf:"bytes,1,rep,name=pollers,proto3" json:"pollers,omitempty"`
	TaskQueueStatus *taskqueue.TaskQueueStatus `protobuf:"bytes,2,opt,name=task_queue_status,json=taskQueueStatus,proto3" json:"task_queue_status,omitempty"`
}

func (x *DescribeTaskQueueResponse) Reset() {
	*x = DescribeTaskQueueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_workflowservice_request_response_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeTaskQueueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeTaskQueueResponse) ProtoMessage() {}

func (x *DescribeTaskQueueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_necode_workflowservice_request_response_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeTaskQueueResponse.ProtoReflect.Descriptor instead.
func (*DescribeTaskQueueResponse) Descriptor() ([]byte, []int) {
	return file_necode_workflowservice_request_response_proto_rawDescGZIP(), []int{75}
}

func (x *DescribeTaskQueueResponse) GetPollers() []*taskqueue.PollerInfo {
	if x != nil {
		return x.Pollers
	}
	return nil
}

func (x *DescribeTaskQueueResponse) GetTaskQueueStatus() *taskqueue.TaskQueueStatus {
	if x != nil {
		return x.TaskQueueStatus
	}
	return nil
}

type GetClusterInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetClusterInfoRequest) Reset() {
	*x = GetClusterInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_workflowservice_request_response_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClusterInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClusterInfoRequest) ProtoMessage() {}

func (x *GetClusterInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_necode_workflowservice_request_response_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClusterInfoRequest.ProtoReflect.Descriptor instead.
func (*GetClusterInfoRequest) Descriptor() ([]byte, []int) {
	return file_necode_workflowservice_request_response_proto_rawDescGZIP(), []int{76}
}

// GetClusterInfoResponse contains information about Temporal cluster.
type GetClusterInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key is client name i.e "temporal-go", "temporal-java", or "temporal-cli".
	// Value is ranges of supported versions of this client i.e ">1.1.1 <=1.4.0 || ^5.0.0".
	SupportedClients  map[string]string    `protobuf:"bytes,1,rep,name=supported_clients,json=supportedClients,proto3" json:"supported_clients,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ServerVersion     string               `protobuf:"bytes,2,opt,name=server_version,json=serverVersion,proto3" json:"server_version,omitempty"`
	ClusterId         string               `protobuf:"bytes,3,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	VersionInfo       *version.VersionInfo `protobuf:"bytes,4,opt,name=version_info,json=versionInfo,proto3" json:"version_info,omitempty"`
	ClusterName       string               `protobuf:"bytes,5,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
	HistoryShardCount int32                `protobuf:"varint,6,opt,name=history_shard_count,json=historyShardCount,proto3" json:"history_shard_count,omitempty"`
	PersistenceStore  string               `protobuf:"bytes,7,opt,name=persistence_store,json=persistenceStore,proto3" json:"persistence_store,omitempty"`
	VisibilityStore   string               `protobuf:"bytes,8,opt,name=visibility_store,json=visibilityStore,proto3" json:"visibility_store,omitempty"`
}

func (x *GetClusterInfoResponse) Reset() {
	*x = GetClusterInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_workflowservice_request_response_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClusterInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClusterInfoResponse) ProtoMessage() {}

func (x *GetClusterInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_necode_workflowservice_request_response_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClusterInfoResponse.ProtoReflect.Descriptor instead.
func (*GetClusterInfoResponse) Descriptor() ([]byte, []int) {
	return file_necode_workflowservice_request_response_proto_rawDescGZIP(), []int{77}
}

func (x *GetClusterInfoResponse) GetSupportedClients() map[string]string {
	if x != nil {
		return x.SupportedClients
	}
	return nil
}

func (x *GetClusterInfoResponse) GetServerVersion() string {
	if x != nil {
		return x.ServerVersion
	}
	return ""
}

func (x *GetClusterInfoResponse) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *GetClusterInfoResponse) GetVersionInfo() *version.VersionInfo {
	if x != nil {
		return x.VersionInfo
	}
	return nil
}

func (x *GetClusterInfoResponse) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *GetClusterInfoResponse) GetHistoryShardCount() int32 {
	if x != nil {
		return x.HistoryShardCount
	}
	return 0
}

func (x *GetClusterInfoResponse) GetPersistenceStore() string {
	if x != nil {
		return x.PersistenceStore
	}
	return ""
}

func (x *GetClusterInfoResponse) GetVisibilityStore() string {
	if x != nil {
		return x.VisibilityStore
	}
	return ""
}

type GetSystemInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetSystemInfoRequest) Reset() {
	*x = GetSystemInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_workflowservice_request_response_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSystemInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSystemInfoRequest) ProtoMessage() {}

func (x *GetSystemInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_necode_workflowservice_request_response_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSystemInfoRequest.ProtoReflect.Descriptor instead.
func (*GetSystemInfoRequest) Descriptor() ([]byte, []int) {
	return file_necode_workflowservice_request_response_proto_rawDescGZIP(), []int{78}
}

type GetSystemInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Version of the server.
	ServerVersion string `protobuf:"bytes,1,opt,name=server_version,json=serverVersion,proto3" json:"server_version,omitempty"`
	// All capabilities the system supports.
	Capabilities *GetSystemInfoResponse_Capabilities `protobuf:"bytes,2,opt,name=capabilities,proto3" json:"capabilities,omitempty"`
}

func (x *GetSystemInfoResponse) Reset() {
	*x = GetSystemInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_workflowservice_request_response_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSystemInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSystemInfoResponse) ProtoMessage() {}

func (x *GetSystemInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_necode_workflowservice_request_response_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSystemInfoResponse.ProtoReflect.Descriptor instead.
func (*GetSystemInfoResponse) Descriptor() ([]byte, []int) {
	return file_necode_workflowservice_request_response_proto_rawDescGZIP(), []int{79}
}

func (x *GetSystemInfoResponse) GetServerVersion() string {
	if x != nil {
		return x.ServerVersion
	}
	return ""
}

func (x *GetSystemInfoResponse) GetCapabilities() *GetSystemInfoResponse_Capabilities {
	if x != nil {
		return x.Capabilities
	}
	return nil
}

type ListTaskQueuePartitionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace string               `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	TaskQueue *taskqueue.TaskQueue `protobuf:"bytes,2,opt,name=task_queue,json=taskQueue,proto3" json:"task_queue,omitempty"`
}

func (x *ListTaskQueuePartitionsRequest) Reset() {
	*x = ListTaskQueuePartitionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_workflowservice_request_response_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTaskQueuePartitionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTaskQueuePartitionsRequest) ProtoMessage() {}

func (x *ListTaskQueuePartitionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_necode_workflowservice_request_response_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTaskQueuePartitionsRequest.ProtoReflect.Descriptor instead.
func (*ListTaskQueuePartitionsRequest) Descriptor() ([]byte, []int) {
	return file_necode_workflowservice_request_response_proto_rawDescGZIP(), []int{80}
}

func (x *ListTaskQueuePartitionsRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ListTaskQueuePartitionsRequest) GetTaskQueue() *taskqueue.TaskQueue {
	if x != nil {
		return x.TaskQueue
	}
	return nil
}

type ListTaskQueuePartitionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityTaskQueuePartitions []*taskqueue.TaskQueuePartitionMetadata `protobuf:"bytes,1,rep,name=activity_task_queue_partitions,json=activityTaskQueuePartitions,proto3" json:"activity_task_queue_partitions,omitempty"`
	WorkflowTaskQueuePartitions []*taskqueue.TaskQueuePartitionMetadata `protobuf:"bytes,2,rep,name=workflow_task_queue_partitions,json=workflowTaskQueuePartitions,proto3" json:"workflow_task_queue_partitions,omitempty"`
}

func (x *ListTaskQueuePartitionsResponse) Reset() {
	*x = ListTaskQueuePartitionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_workflowservice_request_response_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTaskQueuePartitionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTaskQueuePartitionsResponse) ProtoMessage() {}

func (x *ListTaskQueuePartitionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_necode_workflowservice_request_response_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTaskQueuePartitionsResponse.ProtoReflect.Descriptor instead.
func (*ListTaskQueuePartitionsResponse) Descriptor() ([]byte, []int) {
	return file_necode_workflowservice_request_response_proto_rawDescGZIP(), []int{81}
}

func (x *ListTaskQueuePartitionsResponse) GetActivityTaskQueuePartitions() []*taskqueue.TaskQueuePartitionMetadata {
	if x != nil {
		return x.ActivityTaskQueuePartitions
	}
	return nil
}

func (x *ListTaskQueuePartitionsResponse) GetWorkflowTaskQueuePartitions() []*taskqueue.TaskQueuePartitionMetadata {
	if x != nil {
		return x.WorkflowTaskQueuePartitions
	}
	return nil
}

// (-- api-linter: core::0133::request-parent-required=disabled
//
//	aip.dev/not-precedent: CreateSchedule doesn't follow Google API format --)
//
// (-- api-linter: core::0133::request-unknown-fields=disabled
//
//	aip.dev/not-precedent: CreateSchedule doesn't follow Google API format --)
//
// (-- api-linter: core::0133::request-resource-behavior=disabled
//
//	aip.dev/not-precedent: field_behavior annotation not available in our gogo fork --)
//
// (-- api-linter: core::0203::optional=disabled
//
//	aip.dev/not-precedent: field_behavior annotation not available in our gogo fork --)
type CreateScheduleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The namespace the schedule should be created in.
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// The id of the new schedule.
	ScheduleId string `protobuf:"bytes,2,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
	// The schedule spec, policies, action, and initial state.
	Schedule *schedule.Schedule `protobuf:"bytes,3,opt,name=schedule,proto3" json:"schedule,omitempty"`
	// Optional initial patch (e.g. to run the action once immediately).
	InitialPatch *schedule.SchedulePatch `protobuf:"bytes,4,opt,name=initial_patch,json=initialPatch,proto3" json:"initial_patch,omitempty"`
	// The identity of the client who initiated this request.
	Identity string `protobuf:"bytes,5,opt,name=identity,proto3" json:"identity,omitempty"`
	// A unique identifier for this create request for idempotence. Typically UUIDv4.
	RequestId string `protobuf:"bytes,6,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// Memo and search attributes to attach to the schedule itself.
	Memo             *common.Memo             `protobuf:"bytes,7,opt,name=memo,proto3" json:"memo,omitempty"`
	SearchAttributes *common.SearchAttributes `protobuf:"bytes,8,opt,name=search_attributes,json=searchAttributes,proto3" json:"search_attributes,omitempty"`
}

func (x *CreateScheduleRequest) Reset() {
	*x = CreateScheduleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_workflowservice_request_response_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateScheduleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateScheduleRequest) ProtoMessage() {}

func (x *CreateScheduleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_necode_workflowservice_request_response_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateScheduleRequest.ProtoReflect.Descriptor instead.
func (*CreateScheduleRequest) Descriptor() ([]byte, []int) {
	return file_necode_workflowservice_request_response_proto_rawDescGZIP(), []int{82}
}

func (x *CreateScheduleRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *CreateScheduleRequest) GetScheduleId() string {
	if x != nil {
		return x.ScheduleId
	}
	return ""
}

func (x *CreateScheduleRequest) GetSchedule() *schedule.Schedule {
	if x != nil {
		return x.Schedule
	}
	return nil
}

func (x *CreateScheduleRequest) GetInitialPatch() *schedule.SchedulePatch {
	if x != nil {
		return x.InitialPatch
	}
	return nil
}

func (x *CreateScheduleRequest) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

func (x *CreateScheduleRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *CreateScheduleRequest) GetMemo() *common.Memo {
	if x != nil {
		return x.Memo
	}
	return nil
}

func (x *CreateScheduleRequest) GetSearchAttributes() *common.SearchAttributes {
	if x != nil {
		return x.SearchAttributes
	}
	return nil
}

type CreateScheduleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConflictToken []byte `protobuf:"bytes,1,opt,name=conflict_token,json=conflictToken,proto3" json:"conflict_token,omitempty"`
}

func (x *CreateScheduleResponse) Reset() {
	*x = CreateScheduleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_workflowservice_request_response_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateScheduleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateScheduleResponse) ProtoMessage() {}

func (x *CreateScheduleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_necode_workflowservice_request_response_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateScheduleResponse.ProtoReflect.Descriptor instead.
func (*CreateScheduleResponse) Descriptor() ([]byte, []int) {
	return file_necode_workflowservice_request_response_proto_rawDescGZIP(), []int{83}
}

func (x *CreateScheduleResponse) GetConflictToken() []byte {
	if x != nil {
		return x.ConflictToken
	}
	return nil
}

type DescribeScheduleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The namespace of the schedule to describe.
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// The id of the schedule to describe.
	ScheduleId string `protobuf:"bytes,2,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
}

func (x *DescribeScheduleRequest) Reset() {
	*x = DescribeScheduleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_workflowservice_request_response_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeScheduleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeScheduleRequest) ProtoMessage() {}

func (x *DescribeScheduleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_necode_workflowservice_request_response_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeScheduleRequest.ProtoReflect.Descriptor instead.
func (*DescribeScheduleRequest) Descriptor() ([]byte, []int) {
	return file_necode_workflowservice_request_response_proto_rawDescGZIP(), []int{84}
}

func (x *DescribeScheduleRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *DescribeScheduleRequest) GetScheduleId() string {
	if x != nil {
		return x.ScheduleId
	}
	return ""
}

type DescribeScheduleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The complete current schedule details. This may not match the schedule as
	// created because:
	//   - some types of schedule specs may get compiled into others (e.g.
	//     CronString into StructuredCalendarSpec)
	//   - some unspecified fields may be replaced by defaults
	//   - some fields in the state are modified automatically
	//   - the schedule may have been modified by UpdateSchedule or PatchSchedule
	Schedule *schedule.Schedule `protobuf:"bytes,1,opt,name=schedule,proto3" json:"schedule,omitempty"`
	// Extra schedule state info.
	Info *schedule.ScheduleInfo `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
	// The memo and search attributes that the schedule was created with.
	Memo             *common.Memo             `protobuf:"bytes,3,opt,name=memo,proto3" json:"memo,omitempty"`
	SearchAttributes *common.SearchAttributes `protobuf:"bytes,4,opt,name=search_attributes,json=searchAttributes,proto3" json:"search_attributes,omitempty"`
	// This value can be passed back to UpdateSchedule to ensure that the
	// schedule was not modified between a Describe and an Update, which could
	// lead to lost updates and other confusion.
	ConflictToken []byte `protobuf:"bytes,5,opt,name=conflict_token,json=conflictToken,proto3" json:"conflict_token,omitempty"`
}

func (x *DescribeScheduleResponse) Reset() {
	*x = DescribeScheduleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_workflowservice_request_response_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeScheduleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeScheduleResponse) ProtoMessage() {}

func (x *DescribeScheduleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_necode_workflowservice_request_response_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeScheduleResponse.ProtoReflect.Descriptor instead.
func (*DescribeScheduleResponse) Descriptor() ([]byte, []int) {
	return file_necode_workflowservice_request_response_proto_rawDescGZIP(), []int{85}
}

func (x *DescribeScheduleResponse) GetSchedule() *schedule.Schedule {
	if x != nil {
		return x.Schedule
	}
	return nil
}

func (x *DescribeScheduleResponse) GetInfo() *schedule.ScheduleInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *DescribeScheduleResponse) GetMemo() *common.Memo {
	if x != nil {
		return x.Memo
	}
	return nil
}

func (x *DescribeScheduleResponse) GetSearchAttributes() *common.SearchAttributes {
	if x != nil {
		return x.SearchAttributes
	}
	return nil
}

func (x *DescribeScheduleResponse) GetConflictToken() []byte {
	if x != nil {
		return x.ConflictToken
	}
	return nil
}

// (-- api-linter: core::0134::request-mask-required=disabled
//
//	aip.dev/not-precedent: UpdateSchedule doesn't follow Google API format --)
type UpdateScheduleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The namespace of the schedule to update.
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// The id of the schedule to update.
	ScheduleId string `protobuf:"bytes,2,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
	// The new schedule. The four main fields of the schedule (spec, action,
	// policies, state) are replaced completely by the values in this message.
	Schedule *schedule.Schedule `protobuf:"bytes,3,opt,name=schedule,proto3" json:"schedule,omitempty"`
	// This can be the value of conflict_token from a DescribeScheduleResponse,
	// which will cause this request to fail if the schedule has been modified
	// between the Describe and this Update.
	// If missing, the schedule will be updated unconditionally.
	ConflictToken []byte `protobuf:"bytes,4,opt,name=conflict_token,json=conflictToken,proto3" json:"conflict_token,omitempty"`
	// The identity of the client who initiated this request.
	Identity string `protobuf:"bytes,5,opt,name=identity,proto3" json:"identity,omitempty"`
	// A unique identifier for this update request for idempotence. Typically UUIDv4.
	RequestId string `protobuf:"bytes,6,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *UpdateScheduleRequest) Reset() {
	*x = UpdateScheduleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_workflowservice_request_response_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateScheduleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateScheduleRequest) ProtoMessage() {}

func (x *UpdateScheduleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_necode_workflowservice_request_response_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateScheduleRequest.ProtoReflect.Descriptor instead.
func (*UpdateScheduleRequest) Descriptor() ([]byte, []int) {
	return file_necode_workflowservice_request_response_proto_rawDescGZIP(), []int{86}
}

func (x *UpdateScheduleRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *UpdateScheduleRequest) GetScheduleId() string {
	if x != nil {
		return x.ScheduleId
	}
	return ""
}

func (x *UpdateScheduleRequest) GetSchedule() *schedule.Schedule {
	if x != nil {
		return x.Schedule
	}
	return nil
}

func (x *UpdateScheduleRequest) GetConflictToken() []byte {
	if x != nil {
		return x.ConflictToken
	}
	return nil
}

func (x *UpdateScheduleRequest) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

func (x *UpdateScheduleRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type UpdateScheduleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateScheduleResponse) Reset() {
	*x = UpdateScheduleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_workflowservice_request_response_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateScheduleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateScheduleResponse) ProtoMessage() {}

func (x *UpdateScheduleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_necode_workflowservice_request_response_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateScheduleResponse.ProtoReflect.Descriptor instead.
func (*UpdateScheduleResponse) Descriptor() ([]byte, []int) {
	return file_necode_workflowservice_request_response_proto_rawDescGZIP(), []int{87}
}

type PatchScheduleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The namespace of the schedule to patch.
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// The id of the schedule to patch.
	ScheduleId string                  `protobuf:"bytes,2,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
	Patch      *schedule.SchedulePatch `protobuf:"bytes,3,opt,name=patch,proto3" json:"patch,omitempty"`
	// The identity of the client who initiated this request.
	Identity string `protobuf:"bytes,4,opt,name=identity,proto3" json:"identity,omitempty"`
	// A unique identifier for this update request for idempotence. Typically UUIDv4.
	RequestId string `protobuf:"bytes,5,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *PatchScheduleRequest) Reset() {
	*x = PatchScheduleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_workflowservice_request_response_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchScheduleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchScheduleRequest) ProtoMessage() {}

func (x *PatchScheduleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_necode_workflowservice_request_response_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchScheduleRequest.ProtoReflect.Descriptor instead.
func (*PatchScheduleRequest) Descriptor() ([]byte, []int) {
	return file_necode_workflowservice_request_response_proto_rawDescGZIP(), []int{88}
}

func (x *PatchScheduleRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *PatchScheduleRequest) GetScheduleId() string {
	if x != nil {
		return x.ScheduleId
	}
	return ""
}

func (x *PatchScheduleRequest) GetPatch() *schedule.SchedulePatch {
	if x != nil {
		return x.Patch
	}
	return nil
}

func (x *PatchScheduleRequest) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

func (x *PatchScheduleRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type PatchScheduleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatchScheduleResponse) Reset() {
	*x = PatchScheduleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_workflowservice_request_response_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchScheduleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchScheduleResponse) ProtoMessage() {}

func (x *PatchScheduleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_necode_workflowservice_request_response_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchScheduleResponse.ProtoReflect.Descriptor instead.
func (*PatchScheduleResponse) Descriptor() ([]byte, []int) {
	return file_necode_workflowservice_request_response_proto_rawDescGZIP(), []int{89}
}

type ListScheduleMatchingTimesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The namespace of the schedule to query.
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// The id of the schedule to query.
	ScheduleId string `protobuf:"bytes,2,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
	// Time range to query.
	StartTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime   *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (x *ListScheduleMatchingTimesRequest) Reset() {
	*x = ListScheduleMatchingTimesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_workflowservice_request_response_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListScheduleMatchingTimesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListScheduleMatchingTimesRequest) ProtoMessage() {}

func (x *ListScheduleMatchingTimesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_necode_workflowservice_request_response_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListScheduleMatchingTimesRequest.ProtoReflect.Descriptor instead.
func (*ListScheduleMatchingTimesRequest) Descriptor() ([]byte, []int) {
	return file_necode_workflowservice_request_response_proto_rawDescGZIP(), []int{90}
}

func (x *ListScheduleMatchingTimesRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ListScheduleMatchingTimesRequest) GetScheduleId() string {
	if x != nil {
		return x.ScheduleId
	}
	return ""
}

func (x *ListScheduleMatchingTimesRequest) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *ListScheduleMatchingTimesRequest) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

type ListScheduleMatchingTimesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime []*timestamppb.Timestamp `protobuf:"bytes,1,rep,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
}

func (x *ListScheduleMatchingTimesResponse) Reset() {
	*x = ListScheduleMatchingTimesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_workflowservice_request_response_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListScheduleMatchingTimesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListScheduleMatchingTimesResponse) ProtoMessage() {}

func (x *ListScheduleMatchingTimesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_necode_workflowservice_request_response_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListScheduleMatchingTimesResponse.ProtoReflect.Descriptor instead.
func (*ListScheduleMatchingTimesResponse) Descriptor() ([]byte, []int) {
	return file_necode_workflowservice_request_response_proto_rawDescGZIP(), []int{91}
}

func (x *ListScheduleMatchingTimesResponse) GetStartTime() []*timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

// (-- api-linter: core::0135::request-name-required=disabled
//
//	aip.dev/not-precedent: DeleteSchedule doesn't follow Google API format --)
//
// (-- api-linter: core::0135::request-unknown-fields=disabled
//
//	aip.dev/not-precedent: DeleteSchedule doesn't follow Google API format --)
type DeleteScheduleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The namespace of the schedule to delete.
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// The id of the schedule to delete.
	ScheduleId string `protobuf:"bytes,2,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
	// The identity of the client who initiated this request.
	Identity string `protobuf:"bytes,3,opt,name=identity,proto3" json:"identity,omitempty"`
}

func (x *DeleteScheduleRequest) Reset() {
	*x = DeleteScheduleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_workflowservice_request_response_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteScheduleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteScheduleRequest) ProtoMessage() {}

func (x *DeleteScheduleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_necode_workflowservice_request_response_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteScheduleRequest.ProtoReflect.Descriptor instead.
func (*DeleteScheduleRequest) Descriptor() ([]byte, []int) {
	return file_necode_workflowservice_request_response_proto_rawDescGZIP(), []int{92}
}

func (x *DeleteScheduleRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *DeleteScheduleRequest) GetScheduleId() string {
	if x != nil {
		return x.ScheduleId
	}
	return ""
}

func (x *DeleteScheduleRequest) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

type DeleteScheduleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteScheduleResponse) Reset() {
	*x = DeleteScheduleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_workflowservice_request_response_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteScheduleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteScheduleResponse) ProtoMessage() {}

func (x *DeleteScheduleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_necode_workflowservice_request_response_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteScheduleResponse.ProtoReflect.Descriptor instead.
func (*DeleteScheduleResponse) Descriptor() ([]byte, []int) {
	return file_necode_workflowservice_request_response_proto_rawDescGZIP(), []int{93}
}

type ListSchedulesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The namespace to list schedules in.
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// How many to return at once.
	MaximumPageSize int32 `protobuf:"varint,2,opt,name=maximum_page_size,json=maximumPageSize,proto3" json:"maximum_page_size,omitempty"`
	// Token to get the next page of results.
	NextPageToken []byte `protobuf:"bytes,3,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListSchedulesRequest) Reset() {
	*x = ListSchedulesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_workflowservice_request_response_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSchedulesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSchedulesRequest) ProtoMessage() {}

func (x *ListSchedulesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_necode_workflowservice_request_response_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSchedulesRequest.ProtoReflect.Descriptor instead.
func (*ListSchedulesRequest) Descriptor() ([]byte, []int) {
	return file_necode_workflowservice_request_response_proto_rawDescGZIP(), []int{94}
}

func (x *ListSchedulesRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ListSchedulesRequest) GetMaximumPageSize() int32 {
	if x != nil {
		return x.MaximumPageSize
	}
	return 0
}

func (x *ListSchedulesRequest) GetNextPageToken() []byte {
	if x != nil {
		return x.NextPageToken
	}
	return nil
}

type ListSchedulesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Schedules     []*schedule.ScheduleListEntry `protobuf:"bytes,1,rep,name=schedules,proto3" json:"schedules,omitempty"`
	NextPageToken []byte                        `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListSchedulesResponse) Reset() {
	*x = ListSchedulesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_workflowservice_request_response_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSchedulesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSchedulesResponse) ProtoMessage() {}

func (x *ListSchedulesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_necode_workflowservice_request_response_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSchedulesResponse.ProtoReflect.Descriptor instead.
func (*ListSchedulesResponse) Descriptor() ([]byte, []int) {
	return file_necode_workflowservice_request_response_proto_rawDescGZIP(), []int{95}
}

func (x *ListSchedulesResponse) GetSchedules() []*schedule.ScheduleListEntry {
	if x != nil {
		return x.Schedules
	}
	return nil
}

func (x *ListSchedulesResponse) GetNextPageToken() []byte {
	if x != nil {
		return x.NextPageToken
	}
	return nil
}

// (-- api-linter: core::0134::request-mask-required=disabled
//
//	aip.dev/not-precedent: UpdateWorkerBuildIdCompatibilityRequest doesn't follow Google API format --)
//
// (-- api-linter: core::0134::request-resource-required=disabled
//
//	aip.dev/not-precedent: UpdateWorkerBuildIdCompatibilityRequest RPC doesn't follow Google API format. --)
type UpdateWorkerBuildIdCompatibilityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Must be set, the task queue to apply changes to. Because all workers on a given task queue
	// must have the same set of workflow & activity implementations, there is no reason to specify
	// a task queue type here.
	TaskQueue string `protobuf:"bytes,2,opt,name=task_queue,json=taskQueue,proto3" json:"task_queue,omitempty"`
	// Types that are assignable to Operation:
	//
	//	*UpdateWorkerBuildIdCompatibilityRequest_AddNewBuildIdInNewDefaultSet
	//	*UpdateWorkerBuildIdCompatibilityRequest_AddNewCompatibleBuildId
	//	*UpdateWorkerBuildIdCompatibilityRequest_PromoteSetByBuildId
	//	*UpdateWorkerBuildIdCompatibilityRequest_PromoteBuildIdWithinSet
	//	*UpdateWorkerBuildIdCompatibilityRequest_MergeSets_
	Operation isUpdateWorkerBuildIdCompatibilityRequest_Operation `protobuf_oneof:"operation"`
}

func (x *UpdateWorkerBuildIdCompatibilityRequest) Reset() {
	*x = UpdateWorkerBuildIdCompatibilityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_workflowservice_request_response_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateWorkerBuildIdCompatibilityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateWorkerBuildIdCompatibilityRequest) ProtoMessage() {}

func (x *UpdateWorkerBuildIdCompatibilityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_necode_workflowservice_request_response_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateWorkerBuildIdCompatibilityRequest.ProtoReflect.Descriptor instead.
func (*UpdateWorkerBuildIdCompatibilityRequest) Descriptor() ([]byte, []int) {
	return file_necode_workflowservice_request_response_proto_rawDescGZIP(), []int{96}
}

func (x *UpdateWorkerBuildIdCompatibilityRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *UpdateWorkerBuildIdCompatibilityRequest) GetTaskQueue() string {
	if x != nil {
		return x.TaskQueue
	}
	return ""
}

func (m *UpdateWorkerBuildIdCompatibilityRequest) GetOperation() isUpdateWorkerBuildIdCompatibilityRequest_Operation {
	if m != nil {
		return m.Operation
	}
	return nil
}

func (x *UpdateWorkerBuildIdCompatibilityRequest) GetAddNewBuildIdInNewDefaultSet() string {
	if x, ok := x.GetOperation().(*UpdateWorkerBuildIdCompatibilityRequest_AddNewBuildIdInNewDefaultSet); ok {
		return x.AddNewBuildIdInNewDefaultSet
	}
	return ""
}

func (x *UpdateWorkerBuildIdCompatibilityRequest) GetAddNewCompatibleBuildId() *UpdateWorkerBuildIdCompatibilityRequest_AddNewCompatibleVersion {
	if x, ok := x.GetOperation().(*UpdateWorkerBuildIdCompatibilityRequest_AddNewCompatibleBuildId); ok {
		return x.AddNewCompatibleBuildId
	}
	return nil
}

func (x *UpdateWorkerBuildIdCompatibilityRequest) GetPromoteSetByBuildId() string {
	if x, ok := x.GetOperation().(*UpdateWorkerBuildIdCompatibilityRequest_PromoteSetByBuildId); ok {
		return x.PromoteSetByBuildId
	}
	return ""
}

func (x *UpdateWorkerBuildIdCompatibilityRequest) GetPromoteBuildIdWithinSet() string {
	if x, ok := x.GetOperation().(*UpdateWorkerBuildIdCompatibilityRequest_PromoteBuildIdWithinSet); ok {
		return x.PromoteBuildIdWithinSet
	}
	return ""
}

func (x *UpdateWorkerBuildIdCompatibilityRequest) GetMergeSets() *UpdateWorkerBuildIdCompatibilityRequest_MergeSets {
	if x, ok := x.GetOperation().(*UpdateWorkerBuildIdCompatibilityRequest_MergeSets_); ok {
		return x.MergeSets
	}
	return nil
}

type isUpdateWorkerBuildIdCompatibilityRequest_Operation interface {
	isUpdateWorkerBuildIdCompatibilityRequest_Operation()
}

type UpdateWorkerBuildIdCompatibilityRequest_AddNewBuildIdInNewDefaultSet struct {
	// A new build id. This operation will create a new set which will be the new overall
	// default version for the queue, with this id as its only member. This new set is
	// incompatible with all previous sets/versions.
	//
	// (-- api-linter: core::0140::prepositions=disabled
	//
	//	aip.dev/not-precedent: In makes perfect sense here. --)
	AddNewBuildIdInNewDefaultSet string `protobuf:"bytes,3,opt,name=add_new_build_id_in_new_default_set,json=addNewBuildIdInNewDefaultSet,proto3,oneof"`
}

type UpdateWorkerBuildIdCompatibilityRequest_AddNewCompatibleBuildId struct {
	// Adds a new id to an existing compatible set, see sub-message definition for more.
	AddNewCompatibleBuildId *UpdateWorkerBuildIdCompatibilityRequest_AddNewCompatibleVersion `protobuf:"bytes,4,opt,name=add_new_compatible_build_id,json=addNewCompatibleBuildId,proto3,oneof"`
}

type UpdateWorkerBuildIdCompatibilityRequest_PromoteSetByBuildId struct {
	// Promote an existing set to be the current default (if it isn't already) by targeting
	// an existing build id within it. This field's value is the extant build id.
	//
	// (-- api-linter: core::0140::prepositions=disabled
	//
	//	aip.dev/not-precedent: Names are hard. --)
	PromoteSetByBuildId string `protobuf:"bytes,5,opt,name=promote_set_by_build_id,json=promoteSetByBuildId,proto3,oneof"`
}

type UpdateWorkerBuildIdCompatibilityRequest_PromoteBuildIdWithinSet struct {
	// Promote an existing build id within some set to be the current default for that set.
	//
	// (-- api-linter: core::0140::prepositions=disabled
	//
	//	aip.dev/not-precedent: Within makes perfect sense here. --)
	PromoteBuildIdWithinSet string `protobuf:"bytes,6,opt,name=promote_build_id_within_set,json=promoteBuildIdWithinSet,proto3,oneof"`
}

type UpdateWorkerBuildIdCompatibilityRequest_MergeSets_ struct {
	// Merge two existing sets together, thus declaring all build IDs in both sets compatible
	// with one another. The primary set's default will become the default for the merged set.
	// This is useful if you've accidentally declared a new ID as incompatible you meant to
	// declare as compatible. The unusual case of incomplete replication during failover could
	// also result in a split set, which this operation can repair.
	MergeSets *UpdateWorkerBuildIdCompatibilityRequest_MergeSets `protobuf:"bytes,7,opt,name=merge_sets,json=mergeSets,proto3,oneof"`
}

func (*UpdateWorkerBuildIdCompatibilityRequest_AddNewBuildIdInNewDefaultSet) isUpdateWorkerBuildIdCompatibilityRequest_Operation() {
}

func (*UpdateWorkerBuildIdCompatibilityRequest_AddNewCompatibleBuildId) isUpdateWorkerBuildIdCompatibilityRequest_Operation() {
}

func (*UpdateWorkerBuildIdCompatibilityRequest_PromoteSetByBuildId) isUpdateWorkerBuildIdCompatibilityRequest_Operation() {
}

func (*UpdateWorkerBuildIdCompatibilityRequest_PromoteBuildIdWithinSet) isUpdateWorkerBuildIdCompatibilityRequest_Operation() {
}

func (*UpdateWorkerBuildIdCompatibilityRequest_MergeSets_) isUpdateWorkerBuildIdCompatibilityRequest_Operation() {
}

type UpdateWorkerBuildIdCompatibilityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateWorkerBuildIdCompatibilityResponse) Reset() {
	*x = UpdateWorkerBuildIdCompatibilityResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_workflowservice_request_response_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateWorkerBuildIdCompatibilityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateWorkerBuildIdCompatibilityResponse) ProtoMessage() {}

func (x *UpdateWorkerBuildIdCompatibilityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_necode_workflowservice_request_response_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateWorkerBuildIdCompatibilityResponse.ProtoReflect.Descriptor instead.
func (*UpdateWorkerBuildIdCompatibilityResponse) Descriptor() ([]byte, []int) {
	return file_necode_workflowservice_request_response_proto_rawDescGZIP(), []int{97}
}

// (-- api-linter: core::0134::request-resource-required=disabled
//
//	aip.dev/not-precedent: GetWorkerBuildIdCompatibilityRequest RPC doesn't follow Google API format. --)
type GetWorkerBuildIdCompatibilityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Must be set, the task queue to interrogate about worker id compatibility.
	TaskQueue string `protobuf:"bytes,2,opt,name=task_queue,json=taskQueue,proto3" json:"task_queue,omitempty"`
	// Limits how many compatible sets will be returned. Specify 1 to only return the current
	// default major version set. 0 returns all sets.
	MaxSets int32 `protobuf:"varint,3,opt,name=max_sets,json=maxSets,proto3" json:"max_sets,omitempty"`
}

func (x *GetWorkerBuildIdCompatibilityRequest) Reset() {
	*x = GetWorkerBuildIdCompatibilityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_workflowservice_request_response_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWorkerBuildIdCompatibilityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWorkerBuildIdCompatibilityRequest) ProtoMessage() {}

func (x *GetWorkerBuildIdCompatibilityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_necode_workflowservice_request_response_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWorkerBuildIdCompatibilityRequest.ProtoReflect.Descriptor instead.
func (*GetWorkerBuildIdCompatibilityRequest) Descriptor() ([]byte, []int) {
	return file_necode_workflowservice_request_response_proto_rawDescGZIP(), []int{98}
}

func (x *GetWorkerBuildIdCompatibilityRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *GetWorkerBuildIdCompatibilityRequest) GetTaskQueue() string {
	if x != nil {
		return x.TaskQueue
	}
	return ""
}

func (x *GetWorkerBuildIdCompatibilityRequest) GetMaxSets() int32 {
	if x != nil {
		return x.MaxSets
	}
	return 0
}

type GetWorkerBuildIdCompatibilityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Major version sets, in order from oldest to newest. The last element of the list will always
	// be the current default major version. IE: New workflows will target the most recent version
	// in that version set.
	//
	// There may be fewer sets returned than exist, if the request chose to limit this response.
	MajorVersionSets []*taskqueue.CompatibleVersionSet `protobuf:"bytes,1,rep,name=major_version_sets,json=majorVersionSets,proto3" json:"major_version_sets,omitempty"`
}

func (x *GetWorkerBuildIdCompatibilityResponse) Reset() {
	*x = GetWorkerBuildIdCompatibilityResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_workflowservice_request_response_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWorkerBuildIdCompatibilityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWorkerBuildIdCompatibilityResponse) ProtoMessage() {}

func (x *GetWorkerBuildIdCompatibilityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_necode_workflowservice_request_response_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWorkerBuildIdCompatibilityResponse.ProtoReflect.Descriptor instead.
func (*GetWorkerBuildIdCompatibilityResponse) Descriptor() ([]byte, []int) {
	return file_necode_workflowservice_request_response_proto_rawDescGZIP(), []int{99}
}

func (x *GetWorkerBuildIdCompatibilityResponse) GetMajorVersionSets() []*taskqueue.CompatibleVersionSet {
	if x != nil {
		return x.MajorVersionSets
	}
	return nil
}

type GetWorkerTaskReachabilityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Build ids to retrieve reachability for. An empty string will be interpreted as an unversioned worker.
	// The number of build ids that can be queried in a single API call is limited.
	// Open source users can adjust this limit by setting the server's dynamic config value for
	// `limit.reachabilityQueryBuildIds` with the caveat that this call can strain the visibility store.
	BuildIds []string `protobuf:"bytes,2,rep,name=build_ids,json=buildIds,proto3" json:"build_ids,omitempty"`
	// Task queues to retrieve reachability for. Leave this empty to query for all task queues associated with given
	// build ids in the namespace.
	// Must specify at least one task queue if querying for an unversioned worker.
	// The number of task queues that the server will fetch reachability information for is limited.
	// See the `GetWorkerTaskReachabilityResponse` documentation for more information.
	TaskQueues []string `protobuf:"bytes,3,rep,name=task_queues,json=taskQueues,proto3" json:"task_queues,omitempty"`
	// Type of reachability to query for.
	// `TASK_REACHABILITY_NEW_WORKFLOWS` is always returned in the response.
	// Use `TASK_REACHABILITY_EXISTING_WORKFLOWS` if your application needs to respond to queries on closed workflows.
	// Otherwise, use `TASK_REACHABILITY_OPEN_WORKFLOWS`. Default is `TASK_REACHABILITY_EXISTING_WORKFLOWS` if left
	// unspecified.
	// See the TaskReachability docstring for information about each enum variant.
	Reachability enums.TaskReachability `protobuf:"varint,4,opt,name=reachability,proto3,enum=necode.enums.TaskReachability" json:"reachability,omitempty"`
}

func (x *GetWorkerTaskReachabilityRequest) Reset() {
	*x = GetWorkerTaskReachabilityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_workflowservice_request_response_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWorkerTaskReachabilityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWorkerTaskReachabilityRequest) ProtoMessage() {}

func (x *GetWorkerTaskReachabilityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_necode_workflowservice_request_response_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWorkerTaskReachabilityRequest.ProtoReflect.Descriptor instead.
func (*GetWorkerTaskReachabilityRequest) Descriptor() ([]byte, []int) {
	return file_necode_workflowservice_request_response_proto_rawDescGZIP(), []int{100}
}

func (x *GetWorkerTaskReachabilityRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *GetWorkerTaskReachabilityRequest) GetBuildIds() []string {
	if x != nil {
		return x.BuildIds
	}
	return nil
}

func (x *GetWorkerTaskReachabilityRequest) GetTaskQueues() []string {
	if x != nil {
		return x.TaskQueues
	}
	return nil
}

func (x *GetWorkerTaskReachabilityRequest) GetReachability() enums.TaskReachability {
	if x != nil {
		return x.Reachability
	}
	return enums.TaskReachability(0)
}

type GetWorkerTaskReachabilityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Task reachability, broken down by build id and then task queue.
	// When requesting a large number of task queues or all task queues associated with the given build ids in a
	// namespace, all task queues will be listed in the response but some of them may not contain reachability
	// information due to a server enforced limit. When reaching the limit, task queues that reachability information
	// could not be retrieved for will be marked with a single TASK_REACHABILITY_UNSPECIFIED entry. The caller may issue
	// another call to get the reachability for those task queues.
	//
	// Open source users can adjust this limit by setting the server's dynamic config value for
	// `limit.reachabilityTaskQueueScan` with the caveat that this call can strain the visibility store.
	BuildIdReachability []*taskqueue.BuildIdReachability `protobuf:"bytes,1,rep,name=build_id_reachability,json=buildIdReachability,proto3" json:"build_id_reachability,omitempty"`
}

func (x *GetWorkerTaskReachabilityResponse) Reset() {
	*x = GetWorkerTaskReachabilityResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_workflowservice_request_response_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWorkerTaskReachabilityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWorkerTaskReachabilityResponse) ProtoMessage() {}

func (x *GetWorkerTaskReachabilityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_necode_workflowservice_request_response_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWorkerTaskReachabilityResponse.ProtoReflect.Descriptor instead.
func (*GetWorkerTaskReachabilityResponse) Descriptor() ([]byte, []int) {
	return file_necode_workflowservice_request_response_proto_rawDescGZIP(), []int{101}
}

func (x *GetWorkerTaskReachabilityResponse) GetBuildIdReachability() []*taskqueue.BuildIdReachability {
	if x != nil {
		return x.BuildIdReachability
	}
	return nil
}

// (-- api-linter: core::0134=disabled
//
//	aip.dev/not-precedent: Update RPCs don't follow Google API format. --)
type UpdateWorkflowExecutionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The namespace name of the target workflow
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// The target workflow id and (optionally) a specific run thereof
	// (-- api-linter: core::0203::optional=disabled
	//
	//	aip.dev/not-precedent: false positive triggered by the word "optional" --)
	WorkflowExecution *common.WorkflowExecution `protobuf:"bytes,2,opt,name=workflow_execution,json=workflowExecution,proto3" json:"workflow_execution,omitempty"`
	// If set, this call will error if the most recent (if no run id is set on
	// `workflow_execution`), or specified (if it is) workflow execution is not
	// part of the same execution chain as this id.
	FirstExecutionRunId string `protobuf:"bytes,3,opt,name=first_execution_run_id,json=firstExecutionRunId,proto3" json:"first_execution_run_id,omitempty"`
	// Describes when this request should return - basically whether the
	// update is synchronous, asynchronous, or somewhere in between.
	WaitPolicy *update.WaitPolicy `protobuf:"bytes,4,opt,name=wait_policy,json=waitPolicy,proto3" json:"wait_policy,omitempty"`
	// The request information that will be delivered all the way down to the
	// workflow execution.
	Request *update.Request `protobuf:"bytes,5,opt,name=request,proto3" json:"request,omitempty"`
}

func (x *UpdateWorkflowExecutionRequest) Reset() {
	*x = UpdateWorkflowExecutionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_workflowservice_request_response_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateWorkflowExecutionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateWorkflowExecutionRequest) ProtoMessage() {}

func (x *UpdateWorkflowExecutionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_necode_workflowservice_request_response_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateWorkflowExecutionRequest.ProtoReflect.Descriptor instead.
func (*UpdateWorkflowExecutionRequest) Descriptor() ([]byte, []int) {
	return file_necode_workflowservice_request_response_proto_rawDescGZIP(), []int{102}
}

func (x *UpdateWorkflowExecutionRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *UpdateWorkflowExecutionRequest) GetWorkflowExecution() *common.WorkflowExecution {
	if x != nil {
		return x.WorkflowExecution
	}
	return nil
}

func (x *UpdateWorkflowExecutionRequest) GetFirstExecutionRunId() string {
	if x != nil {
		return x.FirstExecutionRunId
	}
	return ""
}

func (x *UpdateWorkflowExecutionRequest) GetWaitPolicy() *update.WaitPolicy {
	if x != nil {
		return x.WaitPolicy
	}
	return nil
}

func (x *UpdateWorkflowExecutionRequest) GetRequest() *update.Request {
	if x != nil {
		return x.Request
	}
	return nil
}

type UpdateWorkflowExecutionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Enough information for subsequent poll calls if needed. Never null.
	UpdateRef *update.UpdateRef `protobuf:"bytes,1,opt,name=update_ref,json=updateRef,proto3" json:"update_ref,omitempty"`
	// The outcome of the update if and only if the workflow execution update
	// has completed. If this response is being returned before the update has
	// completed then this field will not be set.
	Outcome *update.Outcome `protobuf:"bytes,2,opt,name=outcome,proto3" json:"outcome,omitempty"`
}

func (x *UpdateWorkflowExecutionResponse) Reset() {
	*x = UpdateWorkflowExecutionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_workflowservice_request_response_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateWorkflowExecutionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateWorkflowExecutionResponse) ProtoMessage() {}

func (x *UpdateWorkflowExecutionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_necode_workflowservice_request_response_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateWorkflowExecutionResponse.ProtoReflect.Descriptor instead.
func (*UpdateWorkflowExecutionResponse) Descriptor() ([]byte, []int) {
	return file_necode_workflowservice_request_response_proto_rawDescGZIP(), []int{103}
}

func (x *UpdateWorkflowExecutionResponse) GetUpdateRef() *update.UpdateRef {
	if x != nil {
		return x.UpdateRef
	}
	return nil
}

func (x *UpdateWorkflowExecutionResponse) GetOutcome() *update.Outcome {
	if x != nil {
		return x.Outcome
	}
	return nil
}

type StartBatchOperationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Namespace that contains the batch operation
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Visibility query defines the the group of workflow to apply the batch operation
	// This field and Executions are mutually exclusive
	VisibilityQuery string `protobuf:"bytes,2,opt,name=visibility_query,json=visibilityQuery,proto3" json:"visibility_query,omitempty"`
	// Job ID defines the unique ID for the batch job
	JobId string `protobuf:"bytes,3,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	// Reason to perform the batch operation
	Reason string `protobuf:"bytes,4,opt,name=reason,proto3" json:"reason,omitempty"`
	// Executions to apply the batch operation
	// This field and VisibilityQuery are mutually exclusive
	Executions []*common.WorkflowExecution `protobuf:"bytes,5,rep,name=executions,proto3" json:"executions,omitempty"`
	// Operation input
	//
	// Types that are assignable to Operation:
	//
	//	*StartBatchOperationRequest_TerminationOperation
	//	*StartBatchOperationRequest_SignalOperation
	//	*StartBatchOperationRequest_CancellationOperation
	//	*StartBatchOperationRequest_DeletionOperation
	//	*StartBatchOperationRequest_ResetOperation
	Operation isStartBatchOperationRequest_Operation `protobuf_oneof:"operation"`
}

func (x *StartBatchOperationRequest) Reset() {
	*x = StartBatchOperationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_workflowservice_request_response_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartBatchOperationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartBatchOperationRequest) ProtoMessage() {}

func (x *StartBatchOperationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_necode_workflowservice_request_response_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartBatchOperationRequest.ProtoReflect.Descriptor instead.
func (*StartBatchOperationRequest) Descriptor() ([]byte, []int) {
	return file_necode_workflowservice_request_response_proto_rawDescGZIP(), []int{104}
}

func (x *StartBatchOperationRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *StartBatchOperationRequest) GetVisibilityQuery() string {
	if x != nil {
		return x.VisibilityQuery
	}
	return ""
}

func (x *StartBatchOperationRequest) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *StartBatchOperationRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *StartBatchOperationRequest) GetExecutions() []*common.WorkflowExecution {
	if x != nil {
		return x.Executions
	}
	return nil
}

func (m *StartBatchOperationRequest) GetOperation() isStartBatchOperationRequest_Operation {
	if m != nil {
		return m.Operation
	}
	return nil
}

func (x *StartBatchOperationRequest) GetTerminationOperation() *batch.BatchOperationTermination {
	if x, ok := x.GetOperation().(*StartBatchOperationRequest_TerminationOperation); ok {
		return x.TerminationOperation
	}
	return nil
}

func (x *StartBatchOperationRequest) GetSignalOperation() *batch.BatchOperationSignal {
	if x, ok := x.GetOperation().(*StartBatchOperationRequest_SignalOperation); ok {
		return x.SignalOperation
	}
	return nil
}

func (x *StartBatchOperationRequest) GetCancellationOperation() *batch.BatchOperationCancellation {
	if x, ok := x.GetOperation().(*StartBatchOperationRequest_CancellationOperation); ok {
		return x.CancellationOperation
	}
	return nil
}

func (x *StartBatchOperationRequest) GetDeletionOperation() *batch.BatchOperationDeletion {
	if x, ok := x.GetOperation().(*StartBatchOperationRequest_DeletionOperation); ok {
		return x.DeletionOperation
	}
	return nil
}

func (x *StartBatchOperationRequest) GetResetOperation() *batch.BatchOperationReset {
	if x, ok := x.GetOperation().(*StartBatchOperationRequest_ResetOperation); ok {
		return x.ResetOperation
	}
	return nil
}

type isStartBatchOperationRequest_Operation interface {
	isStartBatchOperationRequest_Operation()
}

type StartBatchOperationRequest_TerminationOperation struct {
	TerminationOperation *batch.BatchOperationTermination `protobuf:"bytes,10,opt,name=termination_operation,json=terminationOperation,proto3,oneof"`
}

type StartBatchOperationRequest_SignalOperation struct {
	SignalOperation *batch.BatchOperationSignal `protobuf:"bytes,11,opt,name=signal_operation,json=signalOperation,proto3,oneof"`
}

type StartBatchOperationRequest_CancellationOperation struct {
	CancellationOperation *batch.BatchOperationCancellation `protobuf:"bytes,12,opt,name=cancellation_operation,json=cancellationOperation,proto3,oneof"`
}

type StartBatchOperationRequest_DeletionOperation struct {
	DeletionOperation *batch.BatchOperationDeletion `protobuf:"bytes,13,opt,name=deletion_operation,json=deletionOperation,proto3,oneof"`
}

type StartBatchOperationRequest_ResetOperation struct {
	ResetOperation *batch.BatchOperationReset `protobuf:"bytes,14,opt,name=reset_operation,json=resetOperation,proto3,oneof"`
}

func (*StartBatchOperationRequest_TerminationOperation) isStartBatchOperationRequest_Operation() {}

func (*StartBatchOperationRequest_SignalOperation) isStartBatchOperationRequest_Operation() {}

func (*StartBatchOperationRequest_CancellationOperation) isStartBatchOperationRequest_Operation() {}

func (*StartBatchOperationRequest_DeletionOperation) isStartBatchOperationRequest_Operation() {}

func (*StartBatchOperationRequest_ResetOperation) isStartBatchOperationRequest_Operation() {}

type StartBatchOperationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StartBatchOperationResponse) Reset() {
	*x = StartBatchOperationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_workflowservice_request_response_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartBatchOperationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartBatchOperationResponse) ProtoMessage() {}

func (x *StartBatchOperationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_necode_workflowservice_request_response_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartBatchOperationResponse.ProtoReflect.Descriptor instead.
func (*StartBatchOperationResponse) Descriptor() ([]byte, []int) {
	return file_necode_workflowservice_request_response_proto_rawDescGZIP(), []int{105}
}

type StopBatchOperationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Namespace that contains the batch operation
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Batch job id
	JobId string `protobuf:"bytes,2,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	// Reason to stop a batch operation
	Reason string `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
	// Identity of the operator
	Identity string `protobuf:"bytes,4,opt,name=identity,proto3" json:"identity,omitempty"`
}

func (x *StopBatchOperationRequest) Reset() {
	*x = StopBatchOperationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_workflowservice_request_response_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopBatchOperationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopBatchOperationRequest) ProtoMessage() {}

func (x *StopBatchOperationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_necode_workflowservice_request_response_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopBatchOperationRequest.ProtoReflect.Descriptor instead.
func (*StopBatchOperationRequest) Descriptor() ([]byte, []int) {
	return file_necode_workflowservice_request_response_proto_rawDescGZIP(), []int{106}
}

func (x *StopBatchOperationRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *StopBatchOperationRequest) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *StopBatchOperationRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *StopBatchOperationRequest) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

type StopBatchOperationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StopBatchOperationResponse) Reset() {
	*x = StopBatchOperationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_workflowservice_request_response_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopBatchOperationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopBatchOperationResponse) ProtoMessage() {}

func (x *StopBatchOperationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_necode_workflowservice_request_response_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopBatchOperationResponse.ProtoReflect.Descriptor instead.
func (*StopBatchOperationResponse) Descriptor() ([]byte, []int) {
	return file_necode_workflowservice_request_response_proto_rawDescGZIP(), []int{107}
}

type DescribeBatchOperationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Namespace that contains the batch operation
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Batch job id
	JobId string `protobuf:"bytes,2,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
}

func (x *DescribeBatchOperationRequest) Reset() {
	*x = DescribeBatchOperationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_workflowservice_request_response_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeBatchOperationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeBatchOperationRequest) ProtoMessage() {}

func (x *DescribeBatchOperationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_necode_workflowservice_request_response_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeBatchOperationRequest.ProtoReflect.Descriptor instead.
func (*DescribeBatchOperationRequest) Descriptor() ([]byte, []int) {
	return file_necode_workflowservice_request_response_proto_rawDescGZIP(), []int{108}
}

func (x *DescribeBatchOperationRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *DescribeBatchOperationRequest) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

type DescribeBatchOperationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Batch operation type
	OperationType enums.BatchOperationType `protobuf:"varint,1,opt,name=operation_type,json=operationType,proto3,enum=necode.enums.BatchOperationType" json:"operation_type,omitempty"`
	// Batch job ID
	JobId string `protobuf:"bytes,2,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	// Batch operation state
	State enums.BatchOperationState `protobuf:"varint,3,opt,name=state,proto3,enum=necode.enums.BatchOperationState" json:"state,omitempty"`
	// Batch operation start time
	StartTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// Batch operation close time
	CloseTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=close_time,json=closeTime,proto3" json:"close_time,omitempty"`
	// Total operation count
	TotalOperationCount int64 `protobuf:"varint,6,opt,name=total_operation_count,json=totalOperationCount,proto3" json:"total_operation_count,omitempty"`
	// Complete operation count
	CompleteOperationCount int64 `protobuf:"varint,7,opt,name=complete_operation_count,json=completeOperationCount,proto3" json:"complete_operation_count,omitempty"`
	// Failure operation count
	FailureOperationCount int64 `protobuf:"varint,8,opt,name=failure_operation_count,json=failureOperationCount,proto3" json:"failure_operation_count,omitempty"`
	// Identity indicates the operator identity
	Identity string `protobuf:"bytes,9,opt,name=identity,proto3" json:"identity,omitempty"`
	// Reason indicates the reason to stop a operation
	Reason string `protobuf:"bytes,10,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *DescribeBatchOperationResponse) Reset() {
	*x = DescribeBatchOperationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_workflowservice_request_response_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeBatchOperationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeBatchOperationResponse) ProtoMessage() {}

func (x *DescribeBatchOperationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_necode_workflowservice_request_response_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeBatchOperationResponse.ProtoReflect.Descriptor instead.
func (*DescribeBatchOperationResponse) Descriptor() ([]byte, []int) {
	return file_necode_workflowservice_request_response_proto_rawDescGZIP(), []int{109}
}

func (x *DescribeBatchOperationResponse) GetOperationType() enums.BatchOperationType {
	if x != nil {
		return x.OperationType
	}
	return enums.BatchOperationType(0)
}

func (x *DescribeBatchOperationResponse) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *DescribeBatchOperationResponse) GetState() enums.BatchOperationState {
	if x != nil {
		return x.State
	}
	return enums.BatchOperationState(0)
}

func (x *DescribeBatchOperationResponse) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *DescribeBatchOperationResponse) GetCloseTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CloseTime
	}
	return nil
}

func (x *DescribeBatchOperationResponse) GetTotalOperationCount() int64 {
	if x != nil {
		return x.TotalOperationCount
	}
	return 0
}

func (x *DescribeBatchOperationResponse) GetCompleteOperationCount() int64 {
	if x != nil {
		return x.CompleteOperationCount
	}
	return 0
}

func (x *DescribeBatchOperationResponse) GetFailureOperationCount() int64 {
	if x != nil {
		return x.FailureOperationCount
	}
	return 0
}

func (x *DescribeBatchOperationResponse) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

func (x *DescribeBatchOperationResponse) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type ListBatchOperationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Namespace that contains the batch operation
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// List page size
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Next page token
	NextPageToken []byte `protobuf:"bytes,3,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListBatchOperationsRequest) Reset() {
	*x = ListBatchOperationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_workflowservice_request_response_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBatchOperationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBatchOperationsRequest) ProtoMessage() {}

func (x *ListBatchOperationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_necode_workflowservice_request_response_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBatchOperationsRequest.ProtoReflect.Descriptor instead.
func (*ListBatchOperationsRequest) Descriptor() ([]byte, []int) {
	return file_necode_workflowservice_request_response_proto_rawDescGZIP(), []int{110}
}

func (x *ListBatchOperationsRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ListBatchOperationsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListBatchOperationsRequest) GetNextPageToken() []byte {
	if x != nil {
		return x.NextPageToken
	}
	return nil
}

type ListBatchOperationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// BatchOperationInfo contains the basic info about batch operation
	OperationInfo []*batch.BatchOperationInfo `protobuf:"bytes,1,rep,name=operation_info,json=operationInfo,proto3" json:"operation_info,omitempty"`
	NextPageToken []byte                      `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListBatchOperationsResponse) Reset() {
	*x = ListBatchOperationsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_workflowservice_request_response_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBatchOperationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBatchOperationsResponse) ProtoMessage() {}

func (x *ListBatchOperationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_necode_workflowservice_request_response_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBatchOperationsResponse.ProtoReflect.Descriptor instead.
func (*ListBatchOperationsResponse) Descriptor() ([]byte, []int) {
	return file_necode_workflowservice_request_response_proto_rawDescGZIP(), []int{111}
}

func (x *ListBatchOperationsResponse) GetOperationInfo() []*batch.BatchOperationInfo {
	if x != nil {
		return x.OperationInfo
	}
	return nil
}

func (x *ListBatchOperationsResponse) GetNextPageToken() []byte {
	if x != nil {
		return x.NextPageToken
	}
	return nil
}

type PollWorkflowExecutionUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The namespace of the workflow execution to which the update was
	// originally issued.
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// The update reference returned in the initial
	// UpdateWorkflowExecutionResponse
	UpdateRef *update.UpdateRef `protobuf:"bytes,2,opt,name=update_ref,json=updateRef,proto3" json:"update_ref,omitempty"`
	// The identity of the worker/client who is polling this update outcome
	Identity string `protobuf:"bytes,3,opt,name=identity,proto3" json:"identity,omitempty"`
	// Describes when this poll request should return a response
	WaitPolicy *update.WaitPolicy `protobuf:"bytes,4,opt,name=wait_policy,json=waitPolicy,proto3" json:"wait_policy,omitempty"`
}

func (x *PollWorkflowExecutionUpdateRequest) Reset() {
	*x = PollWorkflowExecutionUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_workflowservice_request_response_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PollWorkflowExecutionUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PollWorkflowExecutionUpdateRequest) ProtoMessage() {}

func (x *PollWorkflowExecutionUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_necode_workflowservice_request_response_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PollWorkflowExecutionUpdateRequest.ProtoReflect.Descriptor instead.
func (*PollWorkflowExecutionUpdateRequest) Descriptor() ([]byte, []int) {
	return file_necode_workflowservice_request_response_proto_rawDescGZIP(), []int{112}
}

func (x *PollWorkflowExecutionUpdateRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *PollWorkflowExecutionUpdateRequest) GetUpdateRef() *update.UpdateRef {
	if x != nil {
		return x.UpdateRef
	}
	return nil
}

func (x *PollWorkflowExecutionUpdateRequest) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

func (x *PollWorkflowExecutionUpdateRequest) GetWaitPolicy() *update.WaitPolicy {
	if x != nil {
		return x.WaitPolicy
	}
	return nil
}

type PollWorkflowExecutionUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The outcome of the update if and only if the update has completed. If
	// this response is being returned before the update has completed (e.g. due
	// to the specification of a wait policy that only waits on
	// UPDATE_WORKFLOW_EXECUTION_LIFECYCLE_STAGE_ACCEPTED) then this field will
	// not be set.
	Outcome *update.Outcome `protobuf:"bytes,1,opt,name=outcome,proto3" json:"outcome,omitempty"`
}

func (x *PollWorkflowExecutionUpdateResponse) Reset() {
	*x = PollWorkflowExecutionUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_workflowservice_request_response_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PollWorkflowExecutionUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PollWorkflowExecutionUpdateResponse) ProtoMessage() {}

func (x *PollWorkflowExecutionUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_necode_workflowservice_request_response_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PollWorkflowExecutionUpdateResponse.ProtoReflect.Descriptor instead.
func (*PollWorkflowExecutionUpdateResponse) Descriptor() ([]byte, []int) {
	return file_necode_workflowservice_request_response_proto_rawDescGZIP(), []int{113}
}

func (x *PollWorkflowExecutionUpdateResponse) GetOutcome() *update.Outcome {
	if x != nil {
		return x.Outcome
	}
	return nil
}

// System capability details.
type GetSystemInfoResponse_Capabilities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// True if signal and query headers are supported.
	SignalAndQueryHeader bool `protobuf:"varint,1,opt,name=signal_and_query_header,json=signalAndQueryHeader,proto3" json:"signal_and_query_header,omitempty"`
	// True if internal errors are differentiated from other types of errors for purposes of
	// retrying non-internal errors.
	//
	// When unset/false, clients retry all failures. When true, clients should only retry
	// non-internal errors.
	InternalErrorDifferentiation bool `protobuf:"varint,2,opt,name=internal_error_differentiation,json=internalErrorDifferentiation,proto3" json:"internal_error_differentiation,omitempty"`
	// True if RespondActivityTaskFailed API supports including heartbeat details
	ActivityFailureIncludeHeartbeat bool `protobuf:"varint,3,opt,name=activity_failure_include_heartbeat,json=activityFailureIncludeHeartbeat,proto3" json:"activity_failure_include_heartbeat,omitempty"`
	// Supports scheduled workflow features.
	SupportsSchedules bool `protobuf:"varint,4,opt,name=supports_schedules,json=supportsSchedules,proto3" json:"supports_schedules,omitempty"`
	// True if server uses protos that include necode.failure.Failure.encoded_attributes
	EncodedFailureAttributes bool `protobuf:"varint,5,opt,name=encoded_failure_attributes,json=encodedFailureAttributes,proto3" json:"encoded_failure_attributes,omitempty"`
	// True if server supports dispatching Workflow and Activity tasks based on a worker's build_id
	// (see:
	// https://github.com/temporalio/proposals/blob/a123af3b559f43db16ea6dd31870bfb754c4dc5e/versioning/worker-versions.md)
	BuildIdBasedVersioning bool `protobuf:"varint,6,opt,name=build_id_based_versioning,json=buildIdBasedVersioning,proto3" json:"build_id_based_versioning,omitempty"`
	// True if server supports upserting workflow memo
	UpsertMemo bool `protobuf:"varint,7,opt,name=upsert_memo,json=upsertMemo,proto3" json:"upsert_memo,omitempty"`
	// True if server supports eager workflow task dispatching for the StartWorkflowExecution API
	EagerWorkflowStart bool `protobuf:"varint,8,opt,name=eager_workflow_start,json=eagerWorkflowStart,proto3" json:"eager_workflow_start,omitempty"`
	// True if the server knows about the sdk metadata field on WFT completions and will record
	// it in history
	SdkMetadata bool `protobuf:"varint,9,opt,name=sdk_metadata,json=sdkMetadata,proto3" json:"sdk_metadata,omitempty"`
}

func (x *GetSystemInfoResponse_Capabilities) Reset() {
	*x = GetSystemInfoResponse_Capabilities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_workflowservice_request_response_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSystemInfoResponse_Capabilities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSystemInfoResponse_Capabilities) ProtoMessage() {}

func (x *GetSystemInfoResponse_Capabilities) ProtoReflect() protoreflect.Message {
	mi := &file_necode_workflowservice_request_response_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSystemInfoResponse_Capabilities.ProtoReflect.Descriptor instead.
func (*GetSystemInfoResponse_Capabilities) Descriptor() ([]byte, []int) {
	return file_necode_workflowservice_request_response_proto_rawDescGZIP(), []int{79, 0}
}

func (x *GetSystemInfoResponse_Capabilities) GetSignalAndQueryHeader() bool {
	if x != nil {
		return x.SignalAndQueryHeader
	}
	return false
}

func (x *GetSystemInfoResponse_Capabilities) GetInternalErrorDifferentiation() bool {
	if x != nil {
		return x.InternalErrorDifferentiation
	}
	return false
}

func (x *GetSystemInfoResponse_Capabilities) GetActivityFailureIncludeHeartbeat() bool {
	if x != nil {
		return x.ActivityFailureIncludeHeartbeat
	}
	return false
}

func (x *GetSystemInfoResponse_Capabilities) GetSupportsSchedules() bool {
	if x != nil {
		return x.SupportsSchedules
	}
	return false
}

func (x *GetSystemInfoResponse_Capabilities) GetEncodedFailureAttributes() bool {
	if x != nil {
		return x.EncodedFailureAttributes
	}
	return false
}

func (x *GetSystemInfoResponse_Capabilities) GetBuildIdBasedVersioning() bool {
	if x != nil {
		return x.BuildIdBasedVersioning
	}
	return false
}

func (x *GetSystemInfoResponse_Capabilities) GetUpsertMemo() bool {
	if x != nil {
		return x.UpsertMemo
	}
	return false
}

func (x *GetSystemInfoResponse_Capabilities) GetEagerWorkflowStart() bool {
	if x != nil {
		return x.EagerWorkflowStart
	}
	return false
}

func (x *GetSystemInfoResponse_Capabilities) GetSdkMetadata() bool {
	if x != nil {
		return x.SdkMetadata
	}
	return false
}

type UpdateWorkerBuildIdCompatibilityRequest_AddNewCompatibleVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A new id to be added to an existing compatible set.
	NewBuildId string `protobuf:"bytes,1,opt,name=new_build_id,json=newBuildId,proto3" json:"new_build_id,omitempty"`
	// A build id which must already exist in the version sets known by the task queue. The new
	// id will be stored in the set containing this id, marking it as compatible with
	// the versions within.
	ExistingCompatibleBuildId string `protobuf:"bytes,2,opt,name=existing_compatible_build_id,json=existingCompatibleBuildId,proto3" json:"existing_compatible_build_id,omitempty"`
	// When set, establishes the compatible set being targeted as the overall default for the
	// queue. If a different set was the current default, the targeted set will replace it as
	// the new default.
	MakeSetDefault bool `protobuf:"varint,3,opt,name=make_set_default,json=makeSetDefault,proto3" json:"make_set_default,omitempty"`
}

func (x *UpdateWorkerBuildIdCompatibilityRequest_AddNewCompatibleVersion) Reset() {
	*x = UpdateWorkerBuildIdCompatibilityRequest_AddNewCompatibleVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_workflowservice_request_response_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateWorkerBuildIdCompatibilityRequest_AddNewCompatibleVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateWorkerBuildIdCompatibilityRequest_AddNewCompatibleVersion) ProtoMessage() {}

func (x *UpdateWorkerBuildIdCompatibilityRequest_AddNewCompatibleVersion) ProtoReflect() protoreflect.Message {
	mi := &file_necode_workflowservice_request_response_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateWorkerBuildIdCompatibilityRequest_AddNewCompatibleVersion.ProtoReflect.Descriptor instead.
func (*UpdateWorkerBuildIdCompatibilityRequest_AddNewCompatibleVersion) Descriptor() ([]byte, []int) {
	return file_necode_workflowservice_request_response_proto_rawDescGZIP(), []int{96, 0}
}

func (x *UpdateWorkerBuildIdCompatibilityRequest_AddNewCompatibleVersion) GetNewBuildId() string {
	if x != nil {
		return x.NewBuildId
	}
	return ""
}

func (x *UpdateWorkerBuildIdCompatibilityRequest_AddNewCompatibleVersion) GetExistingCompatibleBuildId() string {
	if x != nil {
		return x.ExistingCompatibleBuildId
	}
	return ""
}

func (x *UpdateWorkerBuildIdCompatibilityRequest_AddNewCompatibleVersion) GetMakeSetDefault() bool {
	if x != nil {
		return x.MakeSetDefault
	}
	return false
}

type UpdateWorkerBuildIdCompatibilityRequest_MergeSets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A build ID in the set whose default will become the merged set default
	PrimarySetBuildId string `protobuf:"bytes,1,opt,name=primary_set_build_id,json=primarySetBuildId,proto3" json:"primary_set_build_id,omitempty"`
	// A build ID in the set which will be merged into the primary set
	SecondarySetBuildId string `protobuf:"bytes,2,opt,name=secondary_set_build_id,json=secondarySetBuildId,proto3" json:"secondary_set_build_id,omitempty"`
}

func (x *UpdateWorkerBuildIdCompatibilityRequest_MergeSets) Reset() {
	*x = UpdateWorkerBuildIdCompatibilityRequest_MergeSets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_workflowservice_request_response_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateWorkerBuildIdCompatibilityRequest_MergeSets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateWorkerBuildIdCompatibilityRequest_MergeSets) ProtoMessage() {}

func (x *UpdateWorkerBuildIdCompatibilityRequest_MergeSets) ProtoReflect() protoreflect.Message {
	mi := &file_necode_workflowservice_request_response_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateWorkerBuildIdCompatibilityRequest_MergeSets.ProtoReflect.Descriptor instead.
func (*UpdateWorkerBuildIdCompatibilityRequest_MergeSets) Descriptor() ([]byte, []int) {
	return file_necode_workflowservice_request_response_proto_rawDescGZIP(), []int{96, 1}
}

func (x *UpdateWorkerBuildIdCompatibilityRequest_MergeSets) GetPrimarySetBuildId() string {
	if x != nil {
		return x.PrimarySetBuildId
	}
	return ""
}

func (x *UpdateWorkerBuildIdCompatibilityRequest_MergeSets) GetSecondarySetBuildId() string {
	if x != nil {
		return x.SecondarySetBuildId
	}
	return ""
}

var File_necode_workflowservice_request_response_proto protoreflect.FileDescriptor

var file_necode_workflowservice_request_response_proto_rawDesc = []byte{
	0x0a, 0x2d, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x16, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x22, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2f,
	0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x6e, 0x65, 0x63,
	0x6f, 0x64, 0x65, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65,
	0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2f, 0x65,
	0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x75, 0x73,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2f,
	0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x18, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73,
	0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x6e, 0x65,
	0x63, 0x6f, 0x64, 0x65, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x72, 0x65, 0x73, 0x65, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2f, 0x65,
	0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1c, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2f, 0x68, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1d, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1c, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x6e,
	0x65, 0x63, 0x6f, 0x64, 0x65, 0x2f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x2f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x6e, 0x65, 0x63,
	0x6f, 0x64, 0x65, 0x2f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2f,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2f, 0x72, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2f, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2f, 0x74, 0x61, 0x73,
	0x6b, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1c, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1a, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x6e, 0x65, 0x63,
	0x6f, 0x64, 0x65, 0x2f, 0x73, 0x64, 0x6b, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2f, 0x67, 0x6f,
	0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xdb, 0x06, 0x0a, 0x18, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1f, 0x0a, 0x0b, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x12, 0x6e, 0x0a, 0x23, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x04, 0x98, 0xdf, 0x1f, 0x01, 0x52, 0x20,
	0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x12, 0x48, 0x0a, 0x08, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x72, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x08, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4e, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64,
	0x65, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x73, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11,
	0x69, 0x73, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x12, 0x51, 0x0a, 0x16, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x61, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1b, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73,
	0x2e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x14,
	0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x61, 0x6c, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f,
	0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x61, 0x6c, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x61, 0x6c, 0x55, 0x72, 0x69, 0x12, 0x57, 0x0a, 0x19, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x5f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x61, 0x6c, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6e, 0x65, 0x63, 0x6f,
	0x64, 0x65, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x61,
	0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x17, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x36, 0x0a, 0x17, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x61, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x61, 0x6c, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x15, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x61, 0x6c, 0x55, 0x72, 0x69, 0x1a, 0x37, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x1b, 0x0a, 0x19, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xaa, 0x01,
	0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x6e,
	0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x4c, 0x0a, 0x10,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0f, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x93, 0x01, 0x0a, 0x16, 0x4c,
	0x69, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6e, 0x65, 0x63, 0x6f,
	0x64, 0x65, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74,
	0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x22, 0x48, 0x0a, 0x18, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xa7, 0x03, 0x0a, 0x19, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x0e, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0d, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x39, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x5d, 0x0a, 0x12, 0x72,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65,
	0x2e, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x11, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x29, 0x0a, 0x10, 0x66, 0x61,
	0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x66, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x73, 0x5f, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x11, 0x69, 0x73, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x4d, 0x0a, 0x10, 0x66, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65,
	0x72, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x0f, 0x66, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x22, 0x98, 0x03, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x46, 0x0a,
	0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x39, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x5d, 0x0a, 0x12, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6e,
	0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x11, 0x72, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x25, 0x0a, 0x0e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x5f, 0x62, 0x61, 0x64, 0x5f, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x61, 0x64, 0x42, 0x69, 0x6e, 0x61,
	0x72, 0x79, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x70,
	0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22,
	0xd6, 0x02, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x0e, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x39, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x5d,
	0x0a, 0x12, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6e, 0x65, 0x63,
	0x6f, 0x64, 0x65, 0x2e, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x11, 0x72, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x29, 0x0a,
	0x10, 0x66, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x66, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65,
	0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x73, 0x5f, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x73, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x60, 0x0a, 0x19, 0x44, 0x65, 0x70, 0x72,
	0x65, 0x63, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x1c, 0x0a, 0x1a, 0x44, 0x65,
	0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xd5, 0x09, 0x0a, 0x1d, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x0d, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x77,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x09, 0x74, 0x61,
	0x73, 0x6b, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x2d, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x52,
	0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x5d, 0x0a, 0x1a, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x04, 0x98, 0xdf, 0x1f, 0x01, 0x52, 0x18, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x51, 0x0a, 0x14, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x04,
	0x98, 0xdf, 0x1f, 0x01, 0x52, 0x12, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x75,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x53, 0x0a, 0x15, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x04, 0x98, 0xdf, 0x1f, 0x01, 0x52, 0x13, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x5c, 0x0a, 0x18, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x75, 0x73, 0x65, 0x5f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6e, 0x65, 0x63,
	0x6f, 0x64, 0x65, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x49, 0x64, 0x52, 0x65, 0x75, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x15, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x52, 0x65, 0x75, 0x73, 0x65,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x3d, 0x0a, 0x0c, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6e,
	0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x74,
	0x72, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0b, 0x72, 0x65, 0x74, 0x72, 0x79, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x72, 0x6f, 0x6e, 0x5f, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x72,
	0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x27, 0x0a, 0x04, 0x6d, 0x65,
	0x6d, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64,
	0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x52, 0x04, 0x6d,
	0x65, 0x6d, 0x6f, 0x12, 0x4c, 0x0a, 0x11, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52,
	0x10, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x12, 0x2d, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x65, 0x61, 0x67, 0x65,
	0x72, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x15, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x61, 0x67, 0x65, 0x72, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x74,
	0x69, 0x6e, 0x75, 0x65, 0x64, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x66, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x10, 0x63, 0x6f,
	0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x64, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x4d,
	0x0a, 0x16, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x52, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x51, 0x0a,
	0x14, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x04, 0x98, 0xdf, 0x1f, 0x01, 0x52, 0x12, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x65, 0x6c, 0x61, 0x79,
	0x22, 0x9e, 0x01, 0x0a, 0x1e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x65, 0x0a, 0x13, 0x65, 0x61,
	0x67, 0x65, 0x72, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x61, 0x73,
	0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65,
	0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x50, 0x6f, 0x6c, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x61, 0x73,
	0x6b, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x11,
	0x65, 0x61, 0x67, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x61, 0x73,
	0x6b, 0x22, 0x82, 0x03, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x3e, 0x0a, 0x09, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6e, 0x65, 0x63, 0x6f,
	0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75,
	0x6d, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0f, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x6e, 0x65, 0x78,
	0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x77, 0x61,
	0x69, 0x74, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x77, 0x61, 0x69, 0x74, 0x4e, 0x65, 0x77, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x5f, 0x0a, 0x19, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x65, 0x6e, 0x75,
	0x6d, 0x73, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x16, 0x68, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x73, 0x6b, 0x69, 0x70, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x61, 0x6c, 0x22, 0xd6, 0x01, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x57, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31,
	0x0a, 0x07, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x07, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x12, 0x38, 0x0a, 0x0b, 0x72, 0x61, 0x77, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x42, 0x6c, 0x6f, 0x62, 0x52,
	0x0a, 0x72, 0x61, 0x77, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x26, 0x0a, 0x0f, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x22,
	0xdd, 0x01, 0x0a, 0x29, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x3e, 0x0a, 0x09, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x57,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x6d,
	0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x50,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22,
	0x87, 0x01, 0x0a, 0x2a, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31,
	0x0a, 0x07, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x07, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74,
	0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xa7, 0x02, 0x0a, 0x1c, 0x50, 0x6f,
	0x6c, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x61, 0x73, 0x6b, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x74, 0x61, 0x73, 0x6b,
	0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6e,
	0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x12, 0x27, 0x0a, 0x0f, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x73, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x69, 0x6e, 0x61, 0x72,
	0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x12, 0x68, 0x0a, 0x1b, 0x77, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x70, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x57,
	0x6f, 0x72, 0x6b, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x70, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x19, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x22, 0xe7, 0x07, 0x0a, 0x1d, 0x50, 0x6f, 0x6c, 0x6c, 0x57, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x54, 0x61, 0x73, 0x6b, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x4f, 0x0a, 0x12, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x11, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6e,
	0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x57, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x70, 0x72, 0x65, 0x76, 0x69,
	0x6f, 0x75, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x70, 0x72, 0x65, 0x76,
	0x69, 0x6f, 0x75, 0x73, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x61,
	0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x62, 0x61, 0x63, 0x6b, 0x6c, 0x6f,
	0x67, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x68, 0x69, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x10, 0x62, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x48, 0x69, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x07, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x68,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x07,
	0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x31, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x57, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x12, 0x5e, 0x0a, 0x1d, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6e, 0x65, 0x63, 0x6f,
	0x64, 0x65, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x1a, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x12, 0x47, 0x0a, 0x0e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x04, 0x90, 0xdf, 0x1f, 0x01, 0x52, 0x0d, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0c, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x04, 0x90,
	0xdf, 0x1f, 0x01, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x5c, 0x0a, 0x07, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x42, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x6f, 0x6c, 0x6c, 0x57,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x61, 0x73, 0x6b, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x34,
	0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x1a, 0x57, 0x0a, 0x0c, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb2, 0x07,
	0x0a, 0x23, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x33, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52,
	0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x58, 0x0a, 0x11, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x79, 0x5f,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x2e, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x79, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x10, 0x73,
	0x74, 0x69, 0x63, 0x6b, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12,
	0x37, 0x0a, 0x18, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x15, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x4e, 0x65, 0x77, 0x57, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x42, 0x0a, 0x1e, 0x66, 0x6f, 0x72, 0x63,
	0x65, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x1a, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x77,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x27, 0x0a, 0x0f,
	0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x73, 0x75, 0x6d, 0x12, 0x72, 0x0a, 0x0d, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x6e,
	0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x57, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x53, 0x0a, 0x14, 0x77, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x12, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x34, 0x0a, 0x08,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x12, 0x4c, 0x0a, 0x0c, 0x73, 0x64, 0x6b, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64,
	0x65, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x61,
	0x73, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x0b, 0x73, 0x64, 0x6b, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x4c, 0x0a, 0x11, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6e, 0x65,
	0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x74, 0x65,
	0x72, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x10, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x62,
	0x0a, 0x11, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x37, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x95, 0x02, 0x0a, 0x24, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x57, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x0d, 0x77,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x6f, 0x6c, 0x6c,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x61, 0x73, 0x6b, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x5c, 0x0a, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x35, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x6f, 0x6c, 0x6c, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x68,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x72, 0x65, 0x73, 0x65, 0x74, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x94, 0x03, 0x0a, 0x20, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x61,
	0x73, 0x6b, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x3b,
	0x0a, 0x05, 0x63, 0x61, 0x75, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e,
	0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x57, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x61, 0x73, 0x6b, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x43,
	0x61, 0x75, 0x73, 0x65, 0x52, 0x05, 0x63, 0x61, 0x75, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x07, 0x66,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e,
	0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x2e, 0x46, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x62, 0x69,
	0x6e, 0x61, 0x72, 0x79, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x73, 0x75, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x12, 0x34, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x08, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x48, 0x0a, 0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0x23, 0x0a, 0x21, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x57, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x54, 0x61, 0x73, 0x6b, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xd3, 0x02, 0x0a, 0x1c, 0x50, 0x6f, 0x6c, 0x6c, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6e, 0x65, 0x63, 0x6f,
	0x64, 0x65, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x53, 0x0a,
	0x13, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6e, 0x65, 0x63,
	0x6f, 0x64, 0x65, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x11, 0x74, 0x61, 0x73, 0x6b, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x68, 0x0a, 0x1b, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x52, 0x19, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x22, 0xd5, 0x08, 0x0a,
	0x1d, 0x50, 0x6f, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x61, 0x73,
	0x6b, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2d, 0x0a,
	0x12, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x40, 0x0a, 0x0d,
	0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4f,
	0x0a, 0x12, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6e, 0x65, 0x63,
	0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x40, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x49, 0x64, 0x12, 0x2d, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x12, 0x2d, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x12, 0x44, 0x0a, 0x11, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x5f, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65,
	0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x73, 0x52, 0x10, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x47, 0x0a, 0x0e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x04, 0x90, 0xdf, 0x1f, 0x01,
	0x52, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x65, 0x0a, 0x1e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d,
	0x70, 0x74, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x42, 0x04, 0x90, 0xdf, 0x1f, 0x01, 0x52, 0x1b, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x04, 0x90, 0xdf, 0x1f, 0x01, 0x52, 0x0b,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x61, 0x74,
	0x74, 0x65, 0x6d, 0x70, 0x74, 0x12, 0x5a, 0x0a, 0x19, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x04, 0x98, 0xdf, 0x1f, 0x01, 0x52, 0x16, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x54, 0x6f, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x12, 0x54, 0x0a, 0x16, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x6c,
	0x6f, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x04, 0x98, 0xdf,
	0x1f, 0x01, 0x52, 0x13, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x6f, 0x43, 0x6c, 0x6f, 0x73, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x4c, 0x0a, 0x11, 0x68, 0x65, 0x61, 0x72, 0x74,
	0x62, 0x65, 0x61, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x04, 0x98,
	0xdf, 0x1f, 0x01, 0x52, 0x10, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x3d, 0x0a, 0x0c, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6e, 0x65,
	0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x74, 0x72,
	0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0b, 0x72, 0x65, 0x74, 0x72, 0x79, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x22, 0xb0, 0x01, 0x0a, 0x22, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x48, 0x65, 0x61, 0x72, 0x74,
	0x62, 0x65, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x09, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x31, 0x0a, 0x07, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65,
	0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x50, 0x0a, 0x23, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x48, 0x65, 0x61,
	0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29,
	0x0a, 0x10, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x22, 0xee, 0x01, 0x0a, 0x26, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x61, 0x73, 0x6b,
	0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x07, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e,
	0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x54, 0x0a, 0x27, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x61, 0x73, 0x6b,
	0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x22, 0xf9, 0x01, 0x0a, 0x23, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x73, 0x6b,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x74, 0x61,
	0x73, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2f, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x12, 0x48, 0x0a, 0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6e, 0x65, 0x63,
	0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x77,
	0x6f, 0x72, 0x6b, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x26, 0x0a, 0x24,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54,
	0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0xed, 0x01, 0x0a, 0x27, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12,
	0x15, 0x0a, 0x06, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x22, 0x2a, 0x0a, 0x28, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xc7, 0x02, 0x0a, 0x20, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x31, 0x0a, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x66,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x07,
	0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x12, 0x4d, 0x0a, 0x16, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62,
	0x65, 0x61, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x52, 0x14, 0x6c, 0x61, 0x73, 0x74,
	0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x12, 0x48, 0x0a, 0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64,
	0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x77, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x58, 0x0a, 0x21, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x61, 0x73,
	0x6b, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x33, 0x0a, 0x08, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x66, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x08, 0x66, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x73, 0x22, 0xbb, 0x02, 0x0a, 0x24, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x46, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x77,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06,
	0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x75,
	0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x66,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x07,
	0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x12, 0x4d, 0x0a, 0x16, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x72,
	0x74, 0x62, 0x65, 0x61, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x52, 0x14, 0x6c, 0x61,
	0x73, 0x74, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x22, 0x5c, 0x0a, 0x25, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x42,
	0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x08, 0x66,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x2e, 0x46,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x08, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73,
	0x22, 0xfa, 0x01, 0x0a, 0x22, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x74, 0x61, 0x73,
	0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x31, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73,
	0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x12, 0x48, 0x0a, 0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6e, 0x65,
	0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x57, 0x6f, 0x72, 0x6b,
	0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d,
	0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x25, 0x0a,
	0x23, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x54, 0x61, 0x73, 0x6b, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0xee, 0x01, 0x0a, 0x26, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x65, 0x64, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x15,
	0x0a, 0x06, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x72, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73,
	0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x29, 0x0a, 0x27, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x65, 0x64, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x9e, 0x02, 0x0a, 0x25, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x4f, 0x0a, 0x12, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x66, 0x69, 0x72, 0x73, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x22, 0x28, 0x0a, 0x26, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa2, 0x03, 0x0a, 0x1e,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x4f, 0x0a, 0x12,
	0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64,
	0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2d,
	0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x12, 0x2d, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x12, 0x3d, 0x0a, 0x1b, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x61, 0x73, 0x6b,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x73, 0x6b, 0x69, 0x70, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x61, 0x73, 0x6b,
	0x22, 0x21, 0x0a, 0x1f, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0xc8, 0x09, 0x0a, 0x27, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x57, 0x69,
	0x74, 0x68, 0x53, 0x74, 0x61, 0x72, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x40,
	0x0a, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x3a, 0x0a, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x61,
	0x73, 0x6b, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x52, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x2d, 0x0a, 0x05,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65,
	0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x73, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x5d, 0x0a, 0x1a, 0x77,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x04, 0x98, 0xdf, 0x1f, 0x01,
	0x52, 0x18, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x51, 0x0a, 0x14, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x04, 0x98, 0xdf, 0x1f, 0x01, 0x52, 0x12, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x53, 0x0a,
	0x15, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x04, 0x98, 0xdf, 0x1f, 0x01, 0x52, 0x13, 0x77,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1d,
	0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x5c, 0x0a,
	0x18, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x75,
	0x73, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x23, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x57,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x52, 0x65, 0x75, 0x73, 0x65, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x52, 0x15, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64,
	0x52, 0x65, 0x75, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x0c,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x52, 0x0b, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x12, 0x3d, 0x0a, 0x0c, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64,
	0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x79, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x52, 0x0b, 0x72, 0x65, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x72, 0x6f, 0x6e, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x72, 0x6f, 0x6e, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x27, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12,
	0x4c, 0x0a, 0x11, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6e, 0x65, 0x63,
	0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x10, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x2d, 0x0a,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x51, 0x0a, 0x14,
	0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64,
	0x65, 0x6c, 0x61, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x04, 0x98, 0xdf, 0x1f, 0x01, 0x52, 0x12, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12,
	0x3d, 0x0a, 0x1b, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x73, 0x6b, 0x69, 0x70, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x61, 0x73, 0x6b, 0x22, 0x41,
	0x0a, 0x28, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x75,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x75, 0x6e, 0x49,
	0x64, 0x22, 0xd5, 0x02, 0x0a, 0x1d, 0x52, 0x65, 0x73, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x12, 0x4f, 0x0a, 0x12, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x57, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x11, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x1d, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x66, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x19, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x61, 0x73, 0x6b, 0x46,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x12, 0x72,
	0x65, 0x73, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65,
	0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x61, 0x70,
	0x70, 0x6c, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x10, 0x72, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65,
	0x61, 0x70, 0x70, 0x6c, 0x79, 0x54, 0x79, 0x70, 0x65, 0x22, 0x37, 0x0a, 0x1e, 0x52, 0x65, 0x73,
	0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x72,
	0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x75, 0x6e,
	0x49, 0x64, 0x22, 0xae, 0x02, 0x0a, 0x21, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x4f, 0x0a, 0x12, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12,
	0x31, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x33,
	0x0a, 0x16, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75,
	0x6e, 0x49, 0x64, 0x22, 0x24, 0x0a, 0x22, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8f, 0x01, 0x0a, 0x1e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x4f, 0x0a, 0x12, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x21, 0x0a, 0x1f, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x87,
	0x03, 0x0a, 0x21, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6d,
	0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x26,
	0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x4a, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x53, 0x0a, 0x10, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6e,
	0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x57, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6e,
	0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x57, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x48,
	0x00, 0x52, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x09, 0x0a,
	0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x22, 0x94, 0x01, 0x0a, 0x22, 0x4c, 0x69, 0x73,
	0x74, 0x4f, 0x70, 0x65, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x46, 0x0a, 0x0a, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22,
	0xcd, 0x03, 0x0a, 0x23, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x57, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d,
	0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0f, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74,
	0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x4a, 0x0a, 0x11, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x53, 0x0a, 0x10, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0f, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x0b, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x12, 0x42, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65,
	0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x42, 0x09, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x22,
	0x96, 0x01, 0x0a, 0x24, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x57, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x0a, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6e,
	0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x57,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50,
	0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x98, 0x01, 0x0a, 0x1d, 0x4c, 0x69, 0x73,
	0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d,
	0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x22, 0x90, 0x01, 0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x0a, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6e, 0x65, 0x63,
	0x6f, 0x64, 0x65, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x57, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0a, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x26,
	0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xa0, 0x01, 0x0a, 0x25, 0x4c, 0x69, 0x73, 0x74, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0x98, 0x01, 0x0a, 0x26, 0x4c, 0x69,
	0x73, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x0a, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64,
	0x65, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0a, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x26, 0x0a, 0x0f,
	0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x98, 0x01, 0x0a, 0x1d, 0x53, 0x63, 0x61, 0x6e, 0x57, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74,
	0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22,
	0x90, 0x01, 0x0a, 0x1e, 0x53, 0x63, 0x61, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x46, 0x0a, 0x0a, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e,
	0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65,
	0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x22, 0x54, 0x0a, 0x1e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0x37, 0x0a, 0x1f, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0x1c, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0xc9, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x51, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e,
	0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x4b, 0x65, 0x79, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x6b, 0x65,
	0x79, 0x73, 0x1a, 0x57, 0x0a, 0x09, 0x4b, 0x65, 0x79, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1e, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x8c, 0x02, 0x0a, 0x20,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x61, 0x73, 0x6b,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x44, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65,
	0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x0c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65,
	0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x73, 0x52, 0x0b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x22, 0x23, 0x0a, 0x21, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x7b, 0x0a, 0x1b, 0x52, 0x65, 0x73, 0x65, 0x74, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x79, 0x54, 0x61,
	0x73, 0x6b, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x3e, 0x0a, 0x09,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x1e, 0x0a, 0x1c,
	0x52, 0x65, 0x73, 0x65, 0x74, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x81, 0x02, 0x0a,
	0x14, 0x51, 0x75, 0x65, 0x72, 0x79, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x12, 0x3e, 0x0a, 0x09, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x58, 0x0a, 0x16, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f,
	0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e,
	0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x6a, 0x65, 0x63,
	0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x97, 0x01, 0x0a, 0x15, 0x51, 0x75, 0x65, 0x72, 0x79, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x0c, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x52, 0x0b, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x42, 0x0a, 0x0e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f,
	0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x52, 0x0d, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x22, 0x80, 0x01, 0x0a, 0x20, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x3e, 0x0a,
	0x09, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xe2, 0x03,
	0x0a, 0x21, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x10, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x5e, 0x0a, 0x17, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6e, 0x65, 0x63, 0x6f,
	0x64, 0x65, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x57, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x15, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x53, 0x0a, 0x12, 0x70, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x11, 0x70, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x55, 0x0a,
	0x10, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65,
	0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65,
	0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x68, 0x69, 0x6c,
	0x64, 0x72, 0x65, 0x6e, 0x12, 0x5c, 0x0a, 0x15, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x57, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x13, 0x70,
	0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x61,
	0x73, 0x6b, 0x22, 0xf4, 0x01, 0x0a, 0x18, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54,
	0x61, 0x73, 0x6b, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x3a, 0x0a,
	0x0a, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x09,
	0x74, 0x61, 0x73, 0x6b, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x43, 0x0a, 0x0f, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x65, 0x6e, 0x75, 0x6d,
	0x73, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x51, 0x75, 0x65, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0d, 0x74, 0x61, 0x73, 0x6b, 0x51, 0x75, 0x65, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x39,
	0x0a, 0x19, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x16, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xa2, 0x01, 0x0a, 0x19, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x70, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64,
	0x65, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x50, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x70, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x12,
	0x4d, 0x0a, 0x11, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6e, 0x65, 0x63,
	0x6f, 0x64, 0x65, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0f, 0x74,
	0x61, 0x73, 0x6b, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x17,
	0x0a, 0x15, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x81, 0x04, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x71, 0x0a, 0x11, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e,
	0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x10, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x0c, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e,
	0x0a, 0x13, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x68, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x53, 0x68, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2b,
	0x0a, 0x11, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x65, 0x72, 0x73, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x76,
	0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x1a, 0x43, 0x0a, 0x15, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x16, 0x0a, 0x14, 0x47,
	0x65, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x97, 0x05, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x5e, 0x0a, 0x0c, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6e, 0x65, 0x63,
	0x6f, 0x64, 0x65, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x0c, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x1a, 0xf6, 0x03, 0x0a, 0x0c, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x17, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x5f,
	0x61, 0x6e, 0x64, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x41, 0x6e,
	0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x1e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x64,
	0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x44, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x22, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x66,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x68,
	0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1f,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x49,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x12,
	0x2d, 0x0a, 0x12, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x5f, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x73, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x3c,
	0x0a, 0x1a, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x18, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x46, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x19,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x16, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x42, 0x61, 0x73, 0x65, 0x64, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x73, 0x65, 0x72,
	0x74, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x75, 0x70,
	0x73, 0x65, 0x72, 0x74, 0x4d, 0x65, 0x6d, 0x6f, 0x12, 0x30, 0x0a, 0x14, 0x65, 0x61, 0x67, 0x65,
	0x72, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x65, 0x61, 0x67, 0x65, 0x72, 0x57, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x64,
	0x6b, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x73, 0x64, 0x6b, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x7a, 0x0a,
	0x1e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x51, 0x75, 0x65, 0x75, 0x65, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x3a, 0x0a,
	0x0a, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x09,
	0x74, 0x61, 0x73, 0x6b, 0x51, 0x75, 0x65, 0x75, 0x65, 0x22, 0x87, 0x02, 0x0a, 0x1f, 0x4c, 0x69,
	0x73, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x51, 0x75, 0x65, 0x75, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x71, 0x0a,
	0x1e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74,
	0x61, 0x73, 0x6b, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x1b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x61, 0x73,
	0x6b, 0x51, 0x75, 0x65, 0x75, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x71, 0x0a, 0x1e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64,
	0x65, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x54, 0x61, 0x73, 0x6b,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x1b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x54, 0x61, 0x73, 0x6b, 0x51, 0x75, 0x65, 0x75, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x22, 0x84, 0x03, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x08,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x12, 0x43, 0x0a, 0x0d, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x70,
	0x61, 0x74, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6e, 0x65, 0x63,
	0x6f, 0x64, 0x65, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x63, 0x68, 0x52, 0x0c, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x6c, 0x50, 0x61, 0x74, 0x63, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x4c, 0x0a, 0x11,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x10, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x22, 0x3f, 0x0a, 0x16, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x63, 0x6f,
	0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x58, 0x0a, 0x17, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x49, 0x64, 0x22, 0xa2, 0x02, 0x0a, 0x18, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52,
	0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65,
	0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x27, 0x0a, 0x04,
	0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x65, 0x63,
	0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x52,
	0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x4c, 0x0a, 0x11, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x52, 0x10, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x63, 0x6f, 0x6e,
	0x66, 0x6c, 0x69, 0x63, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xef, 0x01, 0x0a, 0x15, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x52, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f,
	0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1d, 0x0a,
	0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x18, 0x0a, 0x16,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc6, 0x01, 0x0a, 0x14, 0x50, 0x61, 0x74, 0x63, 0x68,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x34,
	0x0a, 0x05, 0x70, 0x61, 0x74, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x2e,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x63, 0x68, 0x52, 0x05, 0x70,
	0x61, 0x74, 0x63, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22,
	0x17, 0x0a, 0x15, 0x50, 0x61, 0x74, 0x63, 0x68, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xdf, 0x01, 0x0a, 0x20, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e,
	0x67, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x04, 0x90, 0xdf,
	0x1f, 0x01, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a,
	0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x04, 0x90, 0xdf, 0x1f,
	0x01, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x64, 0x0a, 0x21, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x69,
	0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3f, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42,
	0x04, 0x90, 0xdf, 0x1f, 0x01, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0x72, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x22, 0x18, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x88,
	0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d,
	0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0f, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74,
	0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x81, 0x01, 0x0a, 0x15, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d,
	0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xda, 0x06,
	0x0a, 0x27, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x49, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x73,
	0x6b, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x4b, 0x0a, 0x23, 0x61, 0x64, 0x64, 0x5f, 0x6e, 0x65,
	0x77, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x5f, 0x69, 0x6e, 0x5f, 0x6e, 0x65,
	0x77, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x1c, 0x61, 0x64, 0x64, 0x4e, 0x65, 0x77, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x49, 0x64, 0x49, 0x6e, 0x4e, 0x65, 0x77, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x53, 0x65, 0x74, 0x12, 0x97, 0x01, 0x0a, 0x1b, 0x61, 0x64, 0x64, 0x5f, 0x6e, 0x65, 0x77, 0x5f,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x57, 0x2e, 0x6e, 0x65, 0x63, 0x6f,
	0x64, 0x65, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x4e, 0x65,
	0x77, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x17, 0x61, 0x64, 0x64, 0x4e, 0x65, 0x77, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x36, 0x0a,
	0x17, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x62, 0x79, 0x5f,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x13, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x65, 0x74, 0x42, 0x79, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x1b, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65,
	0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x69, 0x6e,
	0x5f, 0x73, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x17, 0x70, 0x72,
	0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x57, 0x69, 0x74, 0x68,
	0x69, 0x6e, 0x53, 0x65, 0x74, 0x12, 0x6a, 0x0a, 0x0a, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x73,
	0x65, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x6e, 0x65, 0x63, 0x6f,
	0x64, 0x65, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x72, 0x67, 0x65,
	0x53, 0x65, 0x74, 0x73, 0x48, 0x00, 0x52, 0x09, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x53, 0x65, 0x74,
	0x73, 0x1a, 0xa6, 0x01, 0x0a, 0x17, 0x41, 0x64, 0x64, 0x4e, 0x65, 0x77, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a,
	0x0c, 0x6e, 0x65, 0x77, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x77, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12,
	0x3f, 0x0a, 0x1c, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64,
	0x12, 0x28, 0x0a, 0x10, 0x6d, 0x61, 0x6b, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x6d, 0x61, 0x6b, 0x65,
	0x53, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x1a, 0x71, 0x0a, 0x09, 0x4d, 0x65,
	0x72, 0x67, 0x65, 0x53, 0x65, 0x74, 0x73, 0x12, 0x2f, 0x0a, 0x14, 0x70, 0x72, 0x69, 0x6d, 0x61,
	0x72, 0x79, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x53, 0x65,
	0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x61, 0x72, 0x79, 0x53, 0x65, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x42, 0x0b, 0x0a,
	0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x40, 0x0a, 0x28, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x49,
	0x64, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x52, 0x0e, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x22, 0x7e, 0x0a, 0x24,
	0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x53, 0x65, 0x74, 0x73, 0x22, 0x7d, 0x0a, 0x25,
	0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x12, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x52, 0x10, 0x6d, 0x61, 0x6a, 0x6f, 0x72,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x73, 0x22, 0xc2, 0x01, 0x0a, 0x20,
	0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x61,
	0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x08, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x0c,
	0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x65, 0x6e, 0x75, 0x6d,
	0x73, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x52, 0x0c, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x22, 0x7e, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x15, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69,
	0x64, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x61,
	0x73, 0x6b, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x52,
	0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x13, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x49, 0x64, 0x52, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x22, 0xb2, 0x02, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x12, 0x4f, 0x0a, 0x12, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x57, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x11, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x16, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x66, 0x69, 0x72, 0x73, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x0b, 0x77, 0x61, 0x69, 0x74, 0x5f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6e,
	0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x57, 0x61, 0x69,
	0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0a, 0x77, 0x61, 0x69, 0x74, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x12, 0x30, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x8c, 0x01, 0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x66, 0x12, 0x30, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x2e, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x52, 0x07, 0x6f, 0x75, 0x74,
	0x63, 0x6f, 0x6d, 0x65, 0x22, 0x9c, 0x05, 0x0a, 0x1a, 0x53, 0x74, 0x61, 0x72, 0x74, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x12, 0x29, 0x0a, 0x10, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x76, 0x69, 0x73,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x15, 0x0a, 0x06,
	0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f,
	0x62, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x0a, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0a, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5e, 0x0a,
	0x15, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6e,
	0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x14, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4f, 0x0a,
	0x10, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65,
	0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x0f, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x61,
	0x0a, 0x16, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x15, 0x63, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x55, 0x0a, 0x12, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x11, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x65,
	0x74, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x65, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x65, 0x74, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x1d, 0x0a, 0x1b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x84, 0x01, 0x0a, 0x19, 0x53, 0x74, 0x6f, 0x70, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x15,
	0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1a, 0x0a,
	0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x1c, 0x0a, 0x1a, 0x53, 0x74, 0x6f,
	0x70, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x54, 0x0a, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x22, 0x95, 0x04,
	0x0a, 0x1e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x47, 0x0a, 0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64,
	0x65, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64,
	0x12, 0x37, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x21, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3f, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x04, 0x90, 0xdf, 0x1f, 0x01, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x0a, 0x63, 0x6c,
	0x6f, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x04, 0x90, 0xdf, 0x1f, 0x01,
	0x52, 0x09, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x38, 0x0a, 0x18, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x16, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x17, 0x66, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x66, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x7f, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x26,
	0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x8e, 0x01, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61,
	0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xd3, 0x01, 0x0a, 0x22, 0x50, 0x6f, 0x6c, 0x6c,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x37, 0x0a, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x66, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x12, 0x3a, 0x0a, 0x0b, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x57, 0x61, 0x69, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x52, 0x0a, 0x77, 0x61, 0x69, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x57, 0x0a,
	0x23, 0x50, 0x6f, 0x6c, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x52, 0x07, 0x6f,
	0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x42, 0xe5, 0x01, 0x0a, 0x1a, 0x63, 0x6f, 0x6d, 0x2e, 0x6e,
	0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x42, 0x14, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x38, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x73, 0x6b, 0x76, 0x70, 0x2f,
	0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x65, 0x6e,
	0x2f, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0xa2, 0x02, 0x03, 0x4e, 0x57, 0x58, 0xaa, 0x02, 0x16,
	0x4e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0xca, 0x02, 0x16, 0x4e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x5c,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0xe2,
	0x02, 0x22, 0x4e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x5c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x17, 0x4e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x3a, 0x3a, 0x57,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_necode_workflowservice_request_response_proto_rawDescOnce sync.Once
	file_necode_workflowservice_request_response_proto_rawDescData = file_necode_workflowservice_request_response_proto_rawDesc
)

func file_necode_workflowservice_request_response_proto_rawDescGZIP() []byte {
	file_necode_workflowservice_request_response_proto_rawDescOnce.Do(func() {
		file_necode_workflowservice_request_response_proto_rawDescData = protoimpl.X.CompressGZIP(file_necode_workflowservice_request_response_proto_rawDescData)
	})
	return file_necode_workflowservice_request_response_proto_rawDescData
}

var file_necode_workflowservice_request_response_proto_msgTypes = make([]protoimpl.MessageInfo, 122)
var file_necode_workflowservice_request_response_proto_goTypes = []interface{}{
	(*RegisterNamespaceRequest)(nil),                   // 0: necode.workflowservice.RegisterNamespaceRequest
	(*RegisterNamespaceResponse)(nil),                  // 1: necode.workflowservice.RegisterNamespaceResponse
	(*ListNamespacesRequest)(nil),                      // 2: necode.workflowservice.ListNamespacesRequest
	(*ListNamespacesResponse)(nil),                     // 3: necode.workflowservice.ListNamespacesResponse
	(*DescribeNamespaceRequest)(nil),                   // 4: necode.workflowservice.DescribeNamespaceRequest
	(*DescribeNamespaceResponse)(nil),                  // 5: necode.workflowservice.DescribeNamespaceResponse
	(*UpdateNamespaceRequest)(nil),                     // 6: necode.workflowservice.UpdateNamespaceRequest
	(*UpdateNamespaceResponse)(nil),                    // 7: necode.workflowservice.UpdateNamespaceResponse
	(*DeprecateNamespaceRequest)(nil),                  // 8: necode.workflowservice.DeprecateNamespaceRequest
	(*DeprecateNamespaceResponse)(nil),                 // 9: necode.workflowservice.DeprecateNamespaceResponse
	(*StartWorkflowExecutionRequest)(nil),              // 10: necode.workflowservice.StartWorkflowExecutionRequest
	(*StartWorkflowExecutionResponse)(nil),             // 11: necode.workflowservice.StartWorkflowExecutionResponse
	(*GetWorkflowExecutionHistoryRequest)(nil),         // 12: necode.workflowservice.GetWorkflowExecutionHistoryRequest
	(*GetWorkflowExecutionHistoryResponse)(nil),        // 13: necode.workflowservice.GetWorkflowExecutionHistoryResponse
	(*GetWorkflowExecutionHistoryReverseRequest)(nil),  // 14: necode.workflowservice.GetWorkflowExecutionHistoryReverseRequest
	(*GetWorkflowExecutionHistoryReverseResponse)(nil), // 15: necode.workflowservice.GetWorkflowExecutionHistoryReverseResponse
	(*PollWorkflowTaskQueueRequest)(nil),               // 16: necode.workflowservice.PollWorkflowTaskQueueRequest
	(*PollWorkflowTaskQueueResponse)(nil),              // 17: necode.workflowservice.PollWorkflowTaskQueueResponse
	(*RespondWorkflowTaskCompletedRequest)(nil),        // 18: necode.workflowservice.RespondWorkflowTaskCompletedRequest
	(*RespondWorkflowTaskCompletedResponse)(nil),       // 19: necode.workflowservice.RespondWorkflowTaskCompletedResponse
	(*RespondWorkflowTaskFailedRequest)(nil),           // 20: necode.workflowservice.RespondWorkflowTaskFailedRequest
	(*RespondWorkflowTaskFailedResponse)(nil),          // 21: necode.workflowservice.RespondWorkflowTaskFailedResponse
	(*PollActivityTaskQueueRequest)(nil),               // 22: necode.workflowservice.PollActivityTaskQueueRequest
	(*PollActivityTaskQueueResponse)(nil),              // 23: necode.workflowservice.PollActivityTaskQueueResponse
	(*RecordActivityTaskHeartbeatRequest)(nil),         // 24: necode.workflowservice.RecordActivityTaskHeartbeatRequest
	(*RecordActivityTaskHeartbeatResponse)(nil),        // 25: necode.workflowservice.RecordActivityTaskHeartbeatResponse
	(*RecordActivityTaskHeartbeatByIdRequest)(nil),     // 26: necode.workflowservice.RecordActivityTaskHeartbeatByIdRequest
	(*RecordActivityTaskHeartbeatByIdResponse)(nil),    // 27: necode.workflowservice.RecordActivityTaskHeartbeatByIdResponse
	(*RespondActivityTaskCompletedRequest)(nil),        // 28: necode.workflowservice.RespondActivityTaskCompletedRequest
	(*RespondActivityTaskCompletedResponse)(nil),       // 29: necode.workflowservice.RespondActivityTaskCompletedResponse
	(*RespondActivityTaskCompletedByIdRequest)(nil),    // 30: necode.workflowservice.RespondActivityTaskCompletedByIdRequest
	(*RespondActivityTaskCompletedByIdResponse)(nil),   // 31: necode.workflowservice.RespondActivityTaskCompletedByIdResponse
	(*RespondActivityTaskFailedRequest)(nil),           // 32: necode.workflowservice.RespondActivityTaskFailedRequest
	(*RespondActivityTaskFailedResponse)(nil),          // 33: necode.workflowservice.RespondActivityTaskFailedResponse
	(*RespondActivityTaskFailedByIdRequest)(nil),       // 34: necode.workflowservice.RespondActivityTaskFailedByIdRequest
	(*RespondActivityTaskFailedByIdResponse)(nil),      // 35: necode.workflowservice.RespondActivityTaskFailedByIdResponse
	(*RespondActivityTaskCanceledRequest)(nil),         // 36: necode.workflowservice.RespondActivityTaskCanceledRequest
	(*RespondActivityTaskCanceledResponse)(nil),        // 37: necode.workflowservice.RespondActivityTaskCanceledResponse
	(*RespondActivityTaskCanceledByIdRequest)(nil),     // 38: necode.workflowservice.RespondActivityTaskCanceledByIdRequest
	(*RespondActivityTaskCanceledByIdResponse)(nil),    // 39: necode.workflowservice.RespondActivityTaskCanceledByIdResponse
	(*RequestCancelWorkflowExecutionRequest)(nil),      // 40: necode.workflowservice.RequestCancelWorkflowExecutionRequest
	(*RequestCancelWorkflowExecutionResponse)(nil),     // 41: necode.workflowservice.RequestCancelWorkflowExecutionResponse
	(*SignalWorkflowExecutionRequest)(nil),             // 42: necode.workflowservice.SignalWorkflowExecutionRequest
	(*SignalWorkflowExecutionResponse)(nil),            // 43: necode.workflowservice.SignalWorkflowExecutionResponse
	(*SignalWithStartWorkflowExecutionRequest)(nil),    // 44: necode.workflowservice.SignalWithStartWorkflowExecutionRequest
	(*SignalWithStartWorkflowExecutionResponse)(nil),   // 45: necode.workflowservice.SignalWithStartWorkflowExecutionResponse
	(*ResetWorkflowExecutionRequest)(nil),              // 46: necode.workflowservice.ResetWorkflowExecutionRequest
	(*ResetWorkflowExecutionResponse)(nil),             // 47: necode.workflowservice.ResetWorkflowExecutionResponse
	(*TerminateWorkflowExecutionRequest)(nil),          // 48: necode.workflowservice.TerminateWorkflowExecutionRequest
	(*TerminateWorkflowExecutionResponse)(nil),         // 49: necode.workflowservice.TerminateWorkflowExecutionResponse
	(*DeleteWorkflowExecutionRequest)(nil),             // 50: necode.workflowservice.DeleteWorkflowExecutionRequest
	(*DeleteWorkflowExecutionResponse)(nil),            // 51: necode.workflowservice.DeleteWorkflowExecutionResponse
	(*ListOpenWorkflowExecutionsRequest)(nil),          // 52: necode.workflowservice.ListOpenWorkflowExecutionsRequest
	(*ListOpenWorkflowExecutionsResponse)(nil),         // 53: necode.workflowservice.ListOpenWorkflowExecutionsResponse
	(*ListClosedWorkflowExecutionsRequest)(nil),        // 54: necode.workflowservice.ListClosedWorkflowExecutionsRequest
	(*ListClosedWorkflowExecutionsResponse)(nil),       // 55: necode.workflowservice.ListClosedWorkflowExecutionsResponse
	(*ListWorkflowExecutionsRequest)(nil),              // 56: necode.workflowservice.ListWorkflowExecutionsRequest
	(*ListWorkflowExecutionsResponse)(nil),             // 57: necode.workflowservice.ListWorkflowExecutionsResponse
	(*ListArchivedWorkflowExecutionsRequest)(nil),      // 58: necode.workflowservice.ListArchivedWorkflowExecutionsRequest
	(*ListArchivedWorkflowExecutionsResponse)(nil),     // 59: necode.workflowservice.ListArchivedWorkflowExecutionsResponse
	(*ScanWorkflowExecutionsRequest)(nil),              // 60: necode.workflowservice.ScanWorkflowExecutionsRequest
	(*ScanWorkflowExecutionsResponse)(nil),             // 61: necode.workflowservice.ScanWorkflowExecutionsResponse
	(*CountWorkflowExecutionsRequest)(nil),             // 62: necode.workflowservice.CountWorkflowExecutionsRequest
	(*CountWorkflowExecutionsResponse)(nil),            // 63: necode.workflowservice.CountWorkflowExecutionsResponse
	(*GetSearchAttributesRequest)(nil),                 // 64: necode.workflowservice.GetSearchAttributesRequest
	(*GetSearchAttributesResponse)(nil),                // 65: necode.workflowservice.GetSearchAttributesResponse
	(*RespondQueryTaskCompletedRequest)(nil),           // 66: necode.workflowservice.RespondQueryTaskCompletedRequest
	(*RespondQueryTaskCompletedResponse)(nil),          // 67: necode.workflowservice.RespondQueryTaskCompletedResponse
	(*ResetStickyTaskQueueRequest)(nil),                // 68: necode.workflowservice.ResetStickyTaskQueueRequest
	(*ResetStickyTaskQueueResponse)(nil),               // 69: necode.workflowservice.ResetStickyTaskQueueResponse
	(*QueryWorkflowRequest)(nil),                       // 70: necode.workflowservice.QueryWorkflowRequest
	(*QueryWorkflowResponse)(nil),                      // 71: necode.workflowservice.QueryWorkflowResponse
	(*DescribeWorkflowExecutionRequest)(nil),           // 72: necode.workflowservice.DescribeWorkflowExecutionRequest
	(*DescribeWorkflowExecutionResponse)(nil),          // 73: necode.workflowservice.DescribeWorkflowExecutionResponse
	(*DescribeTaskQueueRequest)(nil),                   // 74: necode.workflowservice.DescribeTaskQueueRequest
	(*DescribeTaskQueueResponse)(nil),                  // 75: necode.workflowservice.DescribeTaskQueueResponse
	(*GetClusterInfoRequest)(nil),                      // 76: necode.workflowservice.GetClusterInfoRequest
	(*GetClusterInfoResponse)(nil),                     // 77: necode.workflowservice.GetClusterInfoResponse
	(*GetSystemInfoRequest)(nil),                       // 78: necode.workflowservice.GetSystemInfoRequest
	(*GetSystemInfoResponse)(nil),                      // 79: necode.workflowservice.GetSystemInfoResponse
	(*ListTaskQueuePartitionsRequest)(nil),             // 80: necode.workflowservice.ListTaskQueuePartitionsRequest
	(*ListTaskQueuePartitionsResponse)(nil),            // 81: necode.workflowservice.ListTaskQueuePartitionsResponse
	(*CreateScheduleRequest)(nil),                      // 82: necode.workflowservice.CreateScheduleRequest
	(*CreateScheduleResponse)(nil),                     // 83: necode.workflowservice.CreateScheduleResponse
	(*DescribeScheduleRequest)(nil),                    // 84: necode.workflowservice.DescribeScheduleRequest
	(*DescribeScheduleResponse)(nil),                   // 85: necode.workflowservice.DescribeScheduleResponse
	(*UpdateScheduleRequest)(nil),                      // 86: necode.workflowservice.UpdateScheduleRequest
	(*UpdateScheduleResponse)(nil),                     // 87: necode.workflowservice.UpdateScheduleResponse
	(*PatchScheduleRequest)(nil),                       // 88: necode.workflowservice.PatchScheduleRequest
	(*PatchScheduleResponse)(nil),                      // 89: necode.workflowservice.PatchScheduleResponse
	(*ListScheduleMatchingTimesRequest)(nil),           // 90: necode.workflowservice.ListScheduleMatchingTimesRequest
	(*ListScheduleMatchingTimesResponse)(nil),          // 91: necode.workflowservice.ListScheduleMatchingTimesResponse
	(*DeleteScheduleRequest)(nil),                      // 92: necode.workflowservice.DeleteScheduleRequest
	(*DeleteScheduleResponse)(nil),                     // 93: necode.workflowservice.DeleteScheduleResponse
	(*ListSchedulesRequest)(nil),                       // 94: necode.workflowservice.ListSchedulesRequest
	(*ListSchedulesResponse)(nil),                      // 95: necode.workflowservice.ListSchedulesResponse
	(*UpdateWorkerBuildIdCompatibilityRequest)(nil),    // 96: necode.workflowservice.UpdateWorkerBuildIdCompatibilityRequest
	(*UpdateWorkerBuildIdCompatibilityResponse)(nil),   // 97: necode.workflowservice.UpdateWorkerBuildIdCompatibilityResponse
	(*GetWorkerBuildIdCompatibilityRequest)(nil),       // 98: necode.workflowservice.GetWorkerBuildIdCompatibilityRequest
	(*GetWorkerBuildIdCompatibilityResponse)(nil),      // 99: necode.workflowservice.GetWorkerBuildIdCompatibilityResponse
	(*GetWorkerTaskReachabilityRequest)(nil),           // 100: necode.workflowservice.GetWorkerTaskReachabilityRequest
	(*GetWorkerTaskReachabilityResponse)(nil),          // 101: necode.workflowservice.GetWorkerTaskReachabilityResponse
	(*UpdateWorkflowExecutionRequest)(nil),             // 102: necode.workflowservice.UpdateWorkflowExecutionRequest
	(*UpdateWorkflowExecutionResponse)(nil),            // 103: necode.workflowservice.UpdateWorkflowExecutionResponse
	(*StartBatchOperationRequest)(nil),                 // 104: necode.workflowservice.StartBatchOperationRequest
	(*StartBatchOperationResponse)(nil),                // 105: necode.workflowservice.StartBatchOperationResponse
	(*StopBatchOperationRequest)(nil),                  // 106: necode.workflowservice.StopBatchOperationRequest
	(*StopBatchOperationResponse)(nil),                 // 107: necode.workflowservice.StopBatchOperationResponse
	(*DescribeBatchOperationRequest)(nil),              // 108: necode.workflowservice.DescribeBatchOperationRequest
	(*DescribeBatchOperationResponse)(nil),             // 109: necode.workflowservice.DescribeBatchOperationResponse
	(*ListBatchOperationsRequest)(nil),                 // 110: necode.workflowservice.ListBatchOperationsRequest
	(*ListBatchOperationsResponse)(nil),                // 111: necode.workflowservice.ListBatchOperationsResponse
	(*PollWorkflowExecutionUpdateRequest)(nil),         // 112: necode.workflowservice.PollWorkflowExecutionUpdateRequest
	(*PollWorkflowExecutionUpdateResponse)(nil),        // 113: necode.workflowservice.PollWorkflowExecutionUpdateResponse
	nil, // 114: necode.workflowservice.RegisterNamespaceRequest.DataEntry
	nil, // 115: necode.workflowservice.PollWorkflowTaskQueueResponse.QueriesEntry
	nil, // 116: necode.workflowservice.RespondWorkflowTaskCompletedRequest.QueryResultsEntry
	nil, // 117: necode.workflowservice.GetSearchAttributesResponse.KeysEntry
	nil, // 118: necode.workflowservice.GetClusterInfoResponse.SupportedClientsEntry
	(*GetSystemInfoResponse_Capabilities)(nil),                              // 119: necode.workflowservice.GetSystemInfoResponse.Capabilities
	(*UpdateWorkerBuildIdCompatibilityRequest_AddNewCompatibleVersion)(nil), // 120: necode.workflowservice.UpdateWorkerBuildIdCompatibilityRequest.AddNewCompatibleVersion
	(*UpdateWorkerBuildIdCompatibilityRequest_MergeSets)(nil),               // 121: necode.workflowservice.UpdateWorkerBuildIdCompatibilityRequest.MergeSets
	(*durationpb.Duration)(nil),                                             // 122: google.protobuf.Duration
	(*replication.ClusterReplicationConfig)(nil),                            // 123: necode.replication.ClusterReplicationConfig
	(enums.ArchivalState)(0),                                                // 124: necode.enums.ArchivalState
	(*namespace.NamespaceFilter)(nil),                                       // 125: necode.namespace.NamespaceFilter
	(*namespace.NamespaceInfo)(nil),                                         // 126: necode.namespace.NamespaceInfo
	(*namespace.NamespaceConfig)(nil),                                       // 127: necode.namespace.NamespaceConfig
	(*replication.NamespaceReplicationConfig)(nil),                          // 128: necode.replication.NamespaceReplicationConfig
	(*replication.FailoverStatus)(nil),                                      // 129: necode.replication.FailoverStatus
	(*namespace.UpdateNamespaceInfo)(nil),                                   // 130: necode.namespace.UpdateNamespaceInfo
	(*common.WorkflowType)(nil),                                             // 131: necode.common.WorkflowType
	(*taskqueue.TaskQueue)(nil),                                             // 132: necode.taskqueue.TaskQueue
	(*common.Payloads)(nil),                                                 // 133: necode.common.Payloads
	(enums.WorkflowIdReusePolicy)(0),                                        // 134: necode.enums.WorkflowIdReusePolicy
	(*common.RetryPolicy)(nil),                                              // 135: necode.common.RetryPolicy
	(*common.Memo)(nil),                                                     // 136: necode.common.Memo
	(*common.SearchAttributes)(nil),                                         // 137: necode.common.SearchAttributes
	(*common.Header)(nil),                                                   // 138: necode.common.Header
	(*failure.Failure)(nil),                                                 // 139: necode.failure.Failure
	(*common.WorkflowExecution)(nil),                                        // 140: necode.common.WorkflowExecution
	(enums.HistoryEventFilterType)(0),                                       // 141: necode.enums.HistoryEventFilterType
	(*history.History)(nil),                                                 // 142: necode.history.History
	(*common.DataBlob)(nil),                                                 // 143: necode.common.DataBlob
	(*common.WorkerVersionCapabilities)(nil),                                // 144: necode.common.WorkerVersionCapabilities
	(*query.WorkflowQuery)(nil),                                             // 145: necode.query.WorkflowQuery
	(*timestamppb.Timestamp)(nil),                                           // 146: google.protobuf.Timestamp
	(*protocol.Message)(nil),                                                // 147: necode.protocol.Message
	(*command.Command)(nil),                                                 // 148: necode.command.Command
	(*taskqueue.StickyExecutionAttributes)(nil),                             // 149: necode.taskqueue.StickyExecutionAttributes
	(*common.WorkerVersionStamp)(nil),                                       // 150: necode.common.WorkerVersionStamp
	(*sdk.WorkflowTaskCompletedMetadata)(nil),                               // 151: necode.sdk.WorkflowTaskCompletedMetadata
	(*common.MeteringMetadata)(nil),                                         // 152: necode.common.MeteringMetadata
	(enums.WorkflowTaskFailedCause)(0),                                      // 153: necode.enums.WorkflowTaskFailedCause
	(*taskqueue.TaskQueueMetadata)(nil),                                     // 154: necode.taskqueue.TaskQueueMetadata
	(*common.ActivityType)(nil),                                             // 155: necode.common.ActivityType
	(enums.ResetReapplyType)(0),                                             // 156: necode.enums.ResetReapplyType
	(*filter.StartTimeFilter)(nil),                                          // 157: necode.filter.StartTimeFilter
	(*filter.WorkflowExecutionFilter)(nil),                                  // 158: necode.filter.WorkflowExecutionFilter
	(*filter.WorkflowTypeFilter)(nil),                                       // 159: necode.filter.WorkflowTypeFilter
	(*workflow.WorkflowExecutionInfo)(nil),                                  // 160: necode.workflow.WorkflowExecutionInfo
	(*filter.StatusFilter)(nil),                                             // 161: necode.filter.StatusFilter
	(enums.QueryResultType)(0),                                              // 162: necode.enums.QueryResultType
	(enums.QueryRejectCondition)(0),                                         // 163: necode.enums.QueryRejectCondition
	(*query.QueryRejected)(nil),                                             // 164: necode.query.QueryRejected
	(*workflow.WorkflowExecutionConfig)(nil),                                // 165: necode.workflow.WorkflowExecutionConfig
	(*workflow.PendingActivityInfo)(nil),                                    // 166: necode.workflow.PendingActivityInfo
	(*workflow.PendingChildExecutionInfo)(nil),                              // 167: necode.workflow.PendingChildExecutionInfo
	(*workflow.PendingWorkflowTaskInfo)(nil),                                // 168: necode.workflow.PendingWorkflowTaskInfo
	(enums.TaskQueueType)(0),                                                // 169: necode.enums.TaskQueueType
	(*taskqueue.PollerInfo)(nil),                                            // 170: necode.taskqueue.PollerInfo
	(*taskqueue.TaskQueueStatus)(nil),                                       // 171: necode.taskqueue.TaskQueueStatus
	(*version.VersionInfo)(nil),                                             // 172: necode.version.VersionInfo
	(*taskqueue.TaskQueuePartitionMetadata)(nil),                            // 173: necode.taskqueue.TaskQueuePartitionMetadata
	(*schedule.Schedule)(nil),                                               // 174: necode.schedule.Schedule
	(*schedule.SchedulePatch)(nil),                                          // 175: necode.schedule.SchedulePatch
	(*schedule.ScheduleInfo)(nil),                                           // 176: necode.schedule.ScheduleInfo
	(*schedule.ScheduleListEntry)(nil),                                      // 177: necode.schedule.ScheduleListEntry
	(*taskqueue.CompatibleVersionSet)(nil),                                  // 178: necode.taskqueue.CompatibleVersionSet
	(enums.TaskReachability)(0),                                             // 179: necode.enums.TaskReachability
	(*taskqueue.BuildIdReachability)(nil),                                   // 180: necode.taskqueue.BuildIdReachability
	(*update.WaitPolicy)(nil),                                               // 181: necode.update.WaitPolicy
	(*update.Request)(nil),                                                  // 182: necode.update.Request
	(*update.UpdateRef)(nil),                                                // 183: necode.update.UpdateRef
	(*update.Outcome)(nil),                                                  // 184: necode.update.Outcome
	(*batch.BatchOperationTermination)(nil),                                 // 185: necode.batch.BatchOperationTermination
	(*batch.BatchOperationSignal)(nil),                                      // 186: necode.batch.BatchOperationSignal
	(*batch.BatchOperationCancellation)(nil),                                // 187: necode.batch.BatchOperationCancellation
	(*batch.BatchOperationDeletion)(nil),                                    // 188: necode.batch.BatchOperationDeletion
	(*batch.BatchOperationReset)(nil),                                       // 189: necode.batch.BatchOperationReset
	(enums.BatchOperationType)(0),                                           // 190: necode.enums.BatchOperationType
	(enums.BatchOperationState)(0),                                          // 191: necode.enums.BatchOperationState
	(*batch.BatchOperationInfo)(nil),                                        // 192: necode.batch.BatchOperationInfo
	(*query.WorkflowQueryResult)(nil),                                       // 193: necode.query.WorkflowQueryResult
	(enums.IndexedValueType)(0),                                             // 194: necode.enums.IndexedValueType
}
var file_necode_workflowservice_request_response_proto_depIdxs = []int32{
	122, // 0: necode.workflowservice.RegisterNamespaceRequest.workflow_execution_retention_period:type_name -> google.protobuf.Duration
	123, // 1: necode.workflowservice.RegisterNamespaceRequest.clusters:type_name -> necode.replication.ClusterReplicationConfig
	114, // 2: necode.workflowservice.RegisterNamespaceRequest.data:type_name -> necode.workflowservice.RegisterNamespaceRequest.DataEntry
	124, // 3: necode.workflowservice.RegisterNamespaceRequest.history_archival_state:type_name -> necode.enums.ArchivalState
	124, // 4: necode.workflowservice.RegisterNamespaceRequest.visibility_archival_state:type_name -> necode.enums.ArchivalState
	125, // 5: necode.workflowservice.ListNamespacesRequest.namespace_filter:type_name -> necode.namespace.NamespaceFilter
	5,   // 6: necode.workflowservice.ListNamespacesResponse.namespaces:type_name -> necode.workflowservice.DescribeNamespaceResponse
	126, // 7: necode.workflowservice.DescribeNamespaceResponse.namespace_info:type_name -> necode.namespace.NamespaceInfo
	127, // 8: necode.workflowservice.DescribeNamespaceResponse.config:type_name -> necode.namespace.NamespaceConfig
	128, // 9: necode.workflowservice.DescribeNamespaceResponse.replication_config:type_name -> necode.replication.NamespaceReplicationConfig
	129, // 10: necode.workflowservice.DescribeNamespaceResponse.failover_history:type_name -> necode.replication.FailoverStatus
	130, // 11: necode.workflowservice.UpdateNamespaceRequest.update_info:type_name -> necode.namespace.UpdateNamespaceInfo
	127, // 12: necode.workflowservice.UpdateNamespaceRequest.config:type_name -> necode.namespace.NamespaceConfig
	128, // 13: necode.workflowservice.UpdateNamespaceRequest.replication_config:type_name -> necode.replication.NamespaceReplicationConfig
	126, // 14: necode.workflowservice.UpdateNamespaceResponse.namespace_info:type_name -> necode.namespace.NamespaceInfo
	127, // 15: necode.workflowservice.UpdateNamespaceResponse.config:type_name -> necode.namespace.NamespaceConfig
	128, // 16: necode.workflowservice.UpdateNamespaceResponse.replication_config:type_name -> necode.replication.NamespaceReplicationConfig
	131, // 17: necode.workflowservice.StartWorkflowExecutionRequest.workflow_type:type_name -> necode.common.WorkflowType
	132, // 18: necode.workflowservice.StartWorkflowExecutionRequest.task_queue:type_name -> necode.taskqueue.TaskQueue
	133, // 19: necode.workflowservice.StartWorkflowExecutionRequest.input:type_name -> necode.common.Payloads
	122, // 20: necode.workflowservice.StartWorkflowExecutionRequest.workflow_execution_timeout:type_name -> google.protobuf.Duration
	122, // 21: necode.workflowservice.StartWorkflowExecutionRequest.workflow_run_timeout:type_name -> google.protobuf.Duration
	122, // 22: necode.workflowservice.StartWorkflowExecutionRequest.workflow_task_timeout:type_name -> google.protobuf.Duration
	134, // 23: necode.workflowservice.StartWorkflowExecutionRequest.workflow_id_reuse_policy:type_name -> necode.enums.WorkflowIdReusePolicy
	135, // 24: necode.workflowservice.StartWorkflowExecutionRequest.retry_policy:type_name -> necode.common.RetryPolicy
	136, // 25: necode.workflowservice.StartWorkflowExecutionRequest.memo:type_name -> necode.common.Memo
	137, // 26: necode.workflowservice.StartWorkflowExecutionRequest.search_attributes:type_name -> necode.common.SearchAttributes
	138, // 27: necode.workflowservice.StartWorkflowExecutionRequest.header:type_name -> necode.common.Header
	139, // 28: necode.workflowservice.StartWorkflowExecutionRequest.continued_failure:type_name -> necode.failure.Failure
	133, // 29: necode.workflowservice.StartWorkflowExecutionRequest.last_completion_result:type_name -> necode.common.Payloads
	122, // 30: necode.workflowservice.StartWorkflowExecutionRequest.workflow_start_delay:type_name -> google.protobuf.Duration
	17,  // 31: necode.workflowservice.StartWorkflowExecutionResponse.eager_workflow_task:type_name -> necode.workflowservice.PollWorkflowTaskQueueResponse
	140, // 32: necode.workflowservice.GetWorkflowExecutionHistoryRequest.execution:type_name -> necode.common.WorkflowExecution
	141, // 33: necode.workflowservice.GetWorkflowExecutionHistoryRequest.history_event_filter_type:type_name -> necode.enums.HistoryEventFilterType
	142, // 34: necode.workflowservice.GetWorkflowExecutionHistoryResponse.history:type_name -> necode.history.History
	143, // 35: necode.workflowservice.GetWorkflowExecutionHistoryResponse.raw_history:type_name -> necode.common.DataBlob
	140, // 36: necode.workflowservice.GetWorkflowExecutionHistoryReverseRequest.execution:type_name -> necode.common.WorkflowExecution
	142, // 37: necode.workflowservice.GetWorkflowExecutionHistoryReverseResponse.history:type_name -> necode.history.History
	132, // 38: necode.workflowservice.PollWorkflowTaskQueueRequest.task_queue:type_name -> necode.taskqueue.TaskQueue
	144, // 39: necode.workflowservice.PollWorkflowTaskQueueRequest.worker_version_capabilities:type_name -> necode.common.WorkerVersionCapabilities
	140, // 40: necode.workflowservice.PollWorkflowTaskQueueResponse.workflow_execution:type_name -> necode.common.WorkflowExecution
	131, // 41: necode.workflowservice.PollWorkflowTaskQueueResponse.workflow_type:type_name -> necode.common.WorkflowType
	142, // 42: necode.workflowservice.PollWorkflowTaskQueueResponse.history:type_name -> necode.history.History
	145, // 43: necode.workflowservice.PollWorkflowTaskQueueResponse.query:type_name -> necode.query.WorkflowQuery
	132, // 44: necode.workflowservice.PollWorkflowTaskQueueResponse.workflow_execution_task_queue:type_name -> necode.taskqueue.TaskQueue
	146, // 45: necode.workflowservice.PollWorkflowTaskQueueResponse.scheduled_time:type_name -> google.protobuf.Timestamp
	146, // 46: necode.workflowservice.PollWorkflowTaskQueueResponse.started_time:type_name -> google.protobuf.Timestamp
	115, // 47: necode.workflowservice.PollWorkflowTaskQueueResponse.queries:type_name -> necode.workflowservice.PollWorkflowTaskQueueResponse.QueriesEntry
	147, // 48: necode.workflowservice.PollWorkflowTaskQueueResponse.messages:type_name -> necode.protocol.Message
	148, // 49: necode.workflowservice.RespondWorkflowTaskCompletedRequest.commands:type_name -> necode.command.Command
	149, // 50: necode.workflowservice.RespondWorkflowTaskCompletedRequest.sticky_attributes:type_name -> necode.taskqueue.StickyExecutionAttributes
	116, // 51: necode.workflowservice.RespondWorkflowTaskCompletedRequest.query_results:type_name -> necode.workflowservice.RespondWorkflowTaskCompletedRequest.QueryResultsEntry
	150, // 52: necode.workflowservice.RespondWorkflowTaskCompletedRequest.worker_version_stamp:type_name -> necode.common.WorkerVersionStamp
	147, // 53: necode.workflowservice.RespondWorkflowTaskCompletedRequest.messages:type_name -> necode.protocol.Message
	151, // 54: necode.workflowservice.RespondWorkflowTaskCompletedRequest.sdk_metadata:type_name -> necode.sdk.WorkflowTaskCompletedMetadata
	152, // 55: necode.workflowservice.RespondWorkflowTaskCompletedRequest.metering_metadata:type_name -> necode.common.MeteringMetadata
	17,  // 56: necode.workflowservice.RespondWorkflowTaskCompletedResponse.workflow_task:type_name -> necode.workflowservice.PollWorkflowTaskQueueResponse
	23,  // 57: necode.workflowservice.RespondWorkflowTaskCompletedResponse.activity_tasks:type_name -> necode.workflowservice.PollActivityTaskQueueResponse
	153, // 58: necode.workflowservice.RespondWorkflowTaskFailedRequest.cause:type_name -> necode.enums.WorkflowTaskFailedCause
	139, // 59: necode.workflowservice.RespondWorkflowTaskFailedRequest.failure:type_name -> necode.failure.Failure
	147, // 60: necode.workflowservice.RespondWorkflowTaskFailedRequest.messages:type_name -> necode.protocol.Message
	150, // 61: necode.workflowservice.RespondWorkflowTaskFailedRequest.worker_version:type_name -> necode.common.WorkerVersionStamp
	132, // 62: necode.workflowservice.PollActivityTaskQueueRequest.task_queue:type_name -> necode.taskqueue.TaskQueue
	154, // 63: necode.workflowservice.PollActivityTaskQueueRequest.task_queue_metadata:type_name -> necode.taskqueue.TaskQueueMetadata
	144, // 64: necode.workflowservice.PollActivityTaskQueueRequest.worker_version_capabilities:type_name -> necode.common.WorkerVersionCapabilities
	131, // 65: necode.workflowservice.PollActivityTaskQueueResponse.workflow_type:type_name -> necode.common.WorkflowType
	140, // 66: necode.workflowservice.PollActivityTaskQueueResponse.workflow_execution:type_name -> necode.common.WorkflowExecution
	155, // 67: necode.workflowservice.PollActivityTaskQueueResponse.activity_type:type_name -> necode.common.ActivityType
	138, // 68: necode.workflowservice.PollActivityTaskQueueResponse.header:type_name -> necode.common.Header
	133, // 69: necode.workflowservice.PollActivityTaskQueueResponse.input:type_name -> necode.common.Payloads
	133, // 70: necode.workflowservice.PollActivityTaskQueueResponse.heartbeat_details:type_name -> necode.common.Payloads
	146, // 71: necode.workflowservice.PollActivityTaskQueueResponse.scheduled_time:type_name -> google.protobuf.Timestamp
	146, // 72: necode.workflowservice.PollActivityTaskQueueResponse.current_attempt_scheduled_time:type_name -> google.protobuf.Timestamp
	146, // 73: necode.workflowservice.PollActivityTaskQueueResponse.started_time:type_name -> google.protobuf.Timestamp
	122, // 74: necode.workflowservice.PollActivityTaskQueueResponse.schedule_to_close_timeout:type_name -> google.protobuf.Duration
	122, // 75: necode.workflowservice.PollActivityTaskQueueResponse.start_to_close_timeout:type_name -> google.protobuf.Duration
	122, // 76: necode.workflowservice.PollActivityTaskQueueResponse.heartbeat_timeout:type_name -> google.protobuf.Duration
	135, // 77: necode.workflowservice.PollActivityTaskQueueResponse.retry_policy:type_name -> necode.common.RetryPolicy
	133, // 78: necode.workflowservice.RecordActivityTaskHeartbeatRequest.details:type_name -> necode.common.Payloads
	133, // 79: necode.workflowservice.RecordActivityTaskHeartbeatByIdRequest.details:type_name -> necode.common.Payloads
	133, // 80: necode.workflowservice.RespondActivityTaskCompletedRequest.result:type_name -> necode.common.Payloads
	150, // 81: necode.workflowservice.RespondActivityTaskCompletedRequest.worker_version:type_name -> necode.common.WorkerVersionStamp
	133, // 82: necode.workflowservice.RespondActivityTaskCompletedByIdRequest.result:type_name -> necode.common.Payloads
	139, // 83: necode.workflowservice.RespondActivityTaskFailedRequest.failure:type_name -> necode.failure.Failure
	133, // 84: necode.workflowservice.RespondActivityTaskFailedRequest.last_heartbeat_details:type_name -> necode.common.Payloads
	150, // 85: necode.workflowservice.RespondActivityTaskFailedRequest.worker_version:type_name -> necode.common.WorkerVersionStamp
	139, // 86: necode.workflowservice.RespondActivityTaskFailedResponse.failures:type_name -> necode.failure.Failure
	139, // 87: necode.workflowservice.RespondActivityTaskFailedByIdRequest.failure:type_name -> necode.failure.Failure
	133, // 88: necode.workflowservice.RespondActivityTaskFailedByIdRequest.last_heartbeat_details:type_name -> necode.common.Payloads
	139, // 89: necode.workflowservice.RespondActivityTaskFailedByIdResponse.failures:type_name -> necode.failure.Failure
	133, // 90: necode.workflowservice.RespondActivityTaskCanceledRequest.details:type_name -> necode.common.Payloads
	150, // 91: necode.workflowservice.RespondActivityTaskCanceledRequest.worker_version:type_name -> necode.common.WorkerVersionStamp
	133, // 92: necode.workflowservice.RespondActivityTaskCanceledByIdRequest.details:type_name -> necode.common.Payloads
	140, // 93: necode.workflowservice.RequestCancelWorkflowExecutionRequest.workflow_execution:type_name -> necode.common.WorkflowExecution
	140, // 94: necode.workflowservice.SignalWorkflowExecutionRequest.workflow_execution:type_name -> necode.common.WorkflowExecution
	133, // 95: necode.workflowservice.SignalWorkflowExecutionRequest.input:type_name -> necode.common.Payloads
	138, // 96: necode.workflowservice.SignalWorkflowExecutionRequest.header:type_name -> necode.common.Header
	131, // 97: necode.workflowservice.SignalWithStartWorkflowExecutionRequest.workflow_type:type_name -> necode.common.WorkflowType
	132, // 98: necode.workflowservice.SignalWithStartWorkflowExecutionRequest.task_queue:type_name -> necode.taskqueue.TaskQueue
	133, // 99: necode.workflowservice.SignalWithStartWorkflowExecutionRequest.input:type_name -> necode.common.Payloads
	122, // 100: necode.workflowservice.SignalWithStartWorkflowExecutionRequest.workflow_execution_timeout:type_name -> google.protobuf.Duration
	122, // 101: necode.workflowservice.SignalWithStartWorkflowExecutionRequest.workflow_run_timeout:type_name -> google.protobuf.Duration
	122, // 102: necode.workflowservice.SignalWithStartWorkflowExecutionRequest.workflow_task_timeout:type_name -> google.protobuf.Duration
	134, // 103: necode.workflowservice.SignalWithStartWorkflowExecutionRequest.workflow_id_reuse_policy:type_name -> necode.enums.WorkflowIdReusePolicy
	133, // 104: necode.workflowservice.SignalWithStartWorkflowExecutionRequest.signal_input:type_name -> necode.common.Payloads
	135, // 105: necode.workflowservice.SignalWithStartWorkflowExecutionRequest.retry_policy:type_name -> necode.common.RetryPolicy
	136, // 106: necode.workflowservice.SignalWithStartWorkflowExecutionRequest.memo:type_name -> necode.common.Memo
	137, // 107: necode.workflowservice.SignalWithStartWorkflowExecutionRequest.search_attributes:type_name -> necode.common.SearchAttributes
	138, // 108: necode.workflowservice.SignalWithStartWorkflowExecutionRequest.header:type_name -> necode.common.Header
	122, // 109: necode.workflowservice.SignalWithStartWorkflowExecutionRequest.workflow_start_delay:type_name -> google.protobuf.Duration
	140, // 110: necode.workflowservice.ResetWorkflowExecutionRequest.workflow_execution:type_name -> necode.common.WorkflowExecution
	156, // 111: necode.workflowservice.ResetWorkflowExecutionRequest.reset_reapply_type:type_name -> necode.enums.ResetReapplyType
	140, // 112: necode.workflowservice.TerminateWorkflowExecutionRequest.workflow_execution:type_name -> necode.common.WorkflowExecution
	133, // 113: necode.workflowservice.TerminateWorkflowExecutionRequest.details:type_name -> necode.common.Payloads
	140, // 114: necode.workflowservice.DeleteWorkflowExecutionRequest.workflow_execution:type_name -> necode.common.WorkflowExecution
	157, // 115: necode.workflowservice.ListOpenWorkflowExecutionsRequest.start_time_filter:type_name -> necode.filter.StartTimeFilter
	158, // 116: necode.workflowservice.ListOpenWorkflowExecutionsRequest.execution_filter:type_name -> necode.filter.WorkflowExecutionFilter
	159, // 117: necode.workflowservice.ListOpenWorkflowExecutionsRequest.type_filter:type_name -> necode.filter.WorkflowTypeFilter
	160, // 118: necode.workflowservice.ListOpenWorkflowExecutionsResponse.executions:type_name -> necode.workflow.WorkflowExecutionInfo
	157, // 119: necode.workflowservice.ListClosedWorkflowExecutionsRequest.start_time_filter:type_name -> necode.filter.StartTimeFilter
	158, // 120: necode.workflowservice.ListClosedWorkflowExecutionsRequest.execution_filter:type_name -> necode.filter.WorkflowExecutionFilter
	159, // 121: necode.workflowservice.ListClosedWorkflowExecutionsRequest.type_filter:type_name -> necode.filter.WorkflowTypeFilter
	161, // 122: necode.workflowservice.ListClosedWorkflowExecutionsRequest.status_filter:type_name -> necode.filter.StatusFilter
	160, // 123: necode.workflowservice.ListClosedWorkflowExecutionsResponse.executions:type_name -> necode.workflow.WorkflowExecutionInfo
	160, // 124: necode.workflowservice.ListWorkflowExecutionsResponse.executions:type_name -> necode.workflow.WorkflowExecutionInfo
	160, // 125: necode.workflowservice.ListArchivedWorkflowExecutionsResponse.executions:type_name -> necode.workflow.WorkflowExecutionInfo
	160, // 126: necode.workflowservice.ScanWorkflowExecutionsResponse.executions:type_name -> necode.workflow.WorkflowExecutionInfo
	117, // 127: necode.workflowservice.GetSearchAttributesResponse.keys:type_name -> necode.workflowservice.GetSearchAttributesResponse.KeysEntry
	162, // 128: necode.workflowservice.RespondQueryTaskCompletedRequest.completed_type:type_name -> necode.enums.QueryResultType
	133, // 129: necode.workflowservice.RespondQueryTaskCompletedRequest.query_result:type_name -> necode.common.Payloads
	140, // 130: necode.workflowservice.ResetStickyTaskQueueRequest.execution:type_name -> necode.common.WorkflowExecution
	140, // 131: necode.workflowservice.QueryWorkflowRequest.execution:type_name -> necode.common.WorkflowExecution
	145, // 132: necode.workflowservice.QueryWorkflowRequest.query:type_name -> necode.query.WorkflowQuery
	163, // 133: necode.workflowservice.QueryWorkflowRequest.query_reject_condition:type_name -> necode.enums.QueryRejectCondition
	133, // 134: necode.workflowservice.QueryWorkflowResponse.query_result:type_name -> necode.common.Payloads
	164, // 135: necode.workflowservice.QueryWorkflowResponse.query_rejected:type_name -> necode.query.QueryRejected
	140, // 136: necode.workflowservice.DescribeWorkflowExecutionRequest.execution:type_name -> necode.common.WorkflowExecution
	165, // 137: necode.workflowservice.DescribeWorkflowExecutionResponse.execution_config:type_name -> necode.workflow.WorkflowExecutionConfig
	160, // 138: necode.workflowservice.DescribeWorkflowExecutionResponse.workflow_execution_info:type_name -> necode.workflow.WorkflowExecutionInfo
	166, // 139: necode.workflowservice.DescribeWorkflowExecutionResponse.pending_activities:type_name -> necode.workflow.PendingActivityInfo
	167, // 140: necode.workflowservice.DescribeWorkflowExecutionResponse.pending_children:type_name -> necode.workflow.PendingChildExecutionInfo
	168, // 141: necode.workflowservice.DescribeWorkflowExecutionResponse.pending_workflow_task:type_name -> necode.workflow.PendingWorkflowTaskInfo
	132, // 142: necode.workflowservice.DescribeTaskQueueRequest.task_queue:type_name -> necode.taskqueue.TaskQueue
	169, // 143: necode.workflowservice.DescribeTaskQueueRequest.task_queue_type:type_name -> necode.enums.TaskQueueType
	170, // 144: necode.workflowservice.DescribeTaskQueueResponse.pollers:type_name -> necode.taskqueue.PollerInfo
	171, // 145: necode.workflowservice.DescribeTaskQueueResponse.task_queue_status:type_name -> necode.taskqueue.TaskQueueStatus
	118, // 146: necode.workflowservice.GetClusterInfoResponse.supported_clients:type_name -> necode.workflowservice.GetClusterInfoResponse.SupportedClientsEntry
	172, // 147: necode.workflowservice.GetClusterInfoResponse.version_info:type_name -> necode.version.VersionInfo
	119, // 148: necode.workflowservice.GetSystemInfoResponse.capabilities:type_name -> necode.workflowservice.GetSystemInfoResponse.Capabilities
	132, // 149: necode.workflowservice.ListTaskQueuePartitionsRequest.task_queue:type_name -> necode.taskqueue.TaskQueue
	173, // 150: necode.workflowservice.ListTaskQueuePartitionsResponse.activity_task_queue_partitions:type_name -> necode.taskqueue.TaskQueuePartitionMetadata
	173, // 151: necode.workflowservice.ListTaskQueuePartitionsResponse.workflow_task_queue_partitions:type_name -> necode.taskqueue.TaskQueuePartitionMetadata
	174, // 152: necode.workflowservice.CreateScheduleRequest.schedule:type_name -> necode.schedule.Schedule
	175, // 153: necode.workflowservice.CreateScheduleRequest.initial_patch:type_name -> necode.schedule.SchedulePatch
	136, // 154: necode.workflowservice.CreateScheduleRequest.memo:type_name -> necode.common.Memo
	137, // 155: necode.workflowservice.CreateScheduleRequest.search_attributes:type_name -> necode.common.SearchAttributes
	174, // 156: necode.workflowservice.DescribeScheduleResponse.schedule:type_name -> necode.schedule.Schedule
	176, // 157: necode.workflowservice.DescribeScheduleResponse.info:type_name -> necode.schedule.ScheduleInfo
	136, // 158: necode.workflowservice.DescribeScheduleResponse.memo:type_name -> necode.common.Memo
	137, // 159: necode.workflowservice.DescribeScheduleResponse.search_attributes:type_name -> necode.common.SearchAttributes
	174, // 160: necode.workflowservice.UpdateScheduleRequest.schedule:type_name -> necode.schedule.Schedule
	175, // 161: necode.workflowservice.PatchScheduleRequest.patch:type_name -> necode.schedule.SchedulePatch
	146, // 162: necode.workflowservice.ListScheduleMatchingTimesRequest.start_time:type_name -> google.protobuf.Timestamp
	146, // 163: necode.workflowservice.ListScheduleMatchingTimesRequest.end_time:type_name -> google.protobuf.Timestamp
	146, // 164: necode.workflowservice.ListScheduleMatchingTimesResponse.start_time:type_name -> google.protobuf.Timestamp
	177, // 165: necode.workflowservice.ListSchedulesResponse.schedules:type_name -> necode.schedule.ScheduleListEntry
	120, // 166: necode.workflowservice.UpdateWorkerBuildIdCompatibilityRequest.add_new_compatible_build_id:type_name -> necode.workflowservice.UpdateWorkerBuildIdCompatibilityRequest.AddNewCompatibleVersion
	121, // 167: necode.workflowservice.UpdateWorkerBuildIdCompatibilityRequest.merge_sets:type_name -> necode.workflowservice.UpdateWorkerBuildIdCompatibilityRequest.MergeSets
	178, // 168: necode.workflowservice.GetWorkerBuildIdCompatibilityResponse.major_version_sets:type_name -> necode.taskqueue.CompatibleVersionSet
	179, // 169: necode.workflowservice.GetWorkerTaskReachabilityRequest.reachability:type_name -> necode.enums.TaskReachability
	180, // 170: necode.workflowservice.GetWorkerTaskReachabilityResponse.build_id_reachability:type_name -> necode.taskqueue.BuildIdReachability
	140, // 171: necode.workflowservice.UpdateWorkflowExecutionRequest.workflow_execution:type_name -> necode.common.WorkflowExecution
	181, // 172: necode.workflowservice.UpdateWorkflowExecutionRequest.wait_policy:type_name -> necode.update.WaitPolicy
	182, // 173: necode.workflowservice.UpdateWorkflowExecutionRequest.request:type_name -> necode.update.Request
	183, // 174: necode.workflowservice.UpdateWorkflowExecutionResponse.update_ref:type_name -> necode.update.UpdateRef
	184, // 175: necode.workflowservice.UpdateWorkflowExecutionResponse.outcome:type_name -> necode.update.Outcome
	140, // 176: necode.workflowservice.StartBatchOperationRequest.executions:type_name -> necode.common.WorkflowExecution
	185, // 177: necode.workflowservice.StartBatchOperationRequest.termination_operation:type_name -> necode.batch.BatchOperationTermination
	186, // 178: necode.workflowservice.StartBatchOperationRequest.signal_operation:type_name -> necode.batch.BatchOperationSignal
	187, // 179: necode.workflowservice.StartBatchOperationRequest.cancellation_operation:type_name -> necode.batch.BatchOperationCancellation
	188, // 180: necode.workflowservice.StartBatchOperationRequest.deletion_operation:type_name -> necode.batch.BatchOperationDeletion
	189, // 181: necode.workflowservice.StartBatchOperationRequest.reset_operation:type_name -> necode.batch.BatchOperationReset
	190, // 182: necode.workflowservice.DescribeBatchOperationResponse.operation_type:type_name -> necode.enums.BatchOperationType
	191, // 183: necode.workflowservice.DescribeBatchOperationResponse.state:type_name -> necode.enums.BatchOperationState
	146, // 184: necode.workflowservice.DescribeBatchOperationResponse.start_time:type_name -> google.protobuf.Timestamp
	146, // 185: necode.workflowservice.DescribeBatchOperationResponse.close_time:type_name -> google.protobuf.Timestamp
	192, // 186: necode.workflowservice.ListBatchOperationsResponse.operation_info:type_name -> necode.batch.BatchOperationInfo
	183, // 187: necode.workflowservice.PollWorkflowExecutionUpdateRequest.update_ref:type_name -> necode.update.UpdateRef
	181, // 188: necode.workflowservice.PollWorkflowExecutionUpdateRequest.wait_policy:type_name -> necode.update.WaitPolicy
	184, // 189: necode.workflowservice.PollWorkflowExecutionUpdateResponse.outcome:type_name -> necode.update.Outcome
	145, // 190: necode.workflowservice.PollWorkflowTaskQueueResponse.QueriesEntry.value:type_name -> necode.query.WorkflowQuery
	193, // 191: necode.workflowservice.RespondWorkflowTaskCompletedRequest.QueryResultsEntry.value:type_name -> necode.query.WorkflowQueryResult
	194, // 192: necode.workflowservice.GetSearchAttributesResponse.KeysEntry.value:type_name -> necode.enums.IndexedValueType
	193, // [193:193] is the sub-list for method output_type
	193, // [193:193] is the sub-list for method input_type
	193, // [193:193] is the sub-list for extension type_name
	193, // [193:193] is the sub-list for extension extendee
	0,   // [0:193] is the sub-list for field type_name
}

func init() { file_necode_workflowservice_request_response_proto_init() }
func file_necode_workflowservice_request_response_proto_init() {
	if File_necode_workflowservice_request_response_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_necode_workflowservice_request_response_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterNamespaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_workflowservice_request_response_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterNamespaceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_workflowservice_request_response_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNamespacesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_workflowservice_request_response_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNamespacesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_workflowservice_request_response_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeNamespaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_workflowservice_request_response_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeNamespaceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_workflowservice_request_response_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNamespaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_workflowservice_request_response_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNamespaceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_workflowservice_request_response_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeprecateNamespaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_workflowservice_request_response_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeprecateNamespaceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_workflowservice_request_response_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartWorkflowExecutionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_workflowservice_request_response_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartWorkflowExecutionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_workflowservice_request_response_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWorkflowExecutionHistoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_workflowservice_request_response_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWorkflowExecutionHistoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_workflowservice_request_response_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWorkflowExecutionHistoryReverseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_workflowservice_request_response_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWorkflowExecutionHistoryReverseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_workflowservice_request_response_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PollWorkflowTaskQueueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_workflowservice_request_response_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PollWorkflowTaskQueueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_workflowservice_request_response_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RespondWorkflowTaskCompletedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_workflowservice_request_response_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RespondWorkflowTaskCompletedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_workflowservice_request_response_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RespondWorkflowTaskFailedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_workflowservice_request_response_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RespondWorkflowTaskFailedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_workflowservice_request_response_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PollActivityTaskQueueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_workflowservice_request_response_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PollActivityTaskQueueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_workflowservice_request_response_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordActivityTaskHeartbeatRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_workflowservice_request_response_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordActivityTaskHeartbeatResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_workflowservice_request_response_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordActivityTaskHeartbeatByIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_workflowservice_request_response_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordActivityTaskHeartbeatByIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_workflowservice_request_response_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RespondActivityTaskCompletedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_workflowservice_request_response_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RespondActivityTaskCompletedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_workflowservice_request_response_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RespondActivityTaskCompletedByIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_workflowservice_request_response_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RespondActivityTaskCompletedByIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_workflowservice_request_response_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RespondActivityTaskFailedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_workflowservice_request_response_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RespondActivityTaskFailedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_workflowservice_request_response_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RespondActivityTaskFailedByIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_workflowservice_request_response_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RespondActivityTaskFailedByIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_workflowservice_request_response_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RespondActivityTaskCanceledRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_workflowservice_request_response_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RespondActivityTaskCanceledResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_workflowservice_request_response_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RespondActivityTaskCanceledByIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_workflowservice_request_response_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RespondActivityTaskCanceledByIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_workflowservice_request_response_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestCancelWorkflowExecutionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_workflowservice_request_response_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestCancelWorkflowExecutionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_workflowservice_request_response_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignalWorkflowExecutionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_workflowservice_request_response_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignalWorkflowExecutionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_workflowservice_request_response_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignalWithStartWorkflowExecutionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_workflowservice_request_response_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignalWithStartWorkflowExecutionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_workflowservice_request_response_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetWorkflowExecutionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_workflowservice_request_response_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetWorkflowExecutionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_workflowservice_request_response_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TerminateWorkflowExecutionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_workflowservice_request_response_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TerminateWorkflowExecutionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_workflowservice_request_response_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteWorkflowExecutionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_workflowservice_request_response_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteWorkflowExecutionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_workflowservice_request_response_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOpenWorkflowExecutionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_workflowservice_request_response_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOpenWorkflowExecutionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_workflowservice_request_response_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListClosedWorkflowExecutionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_workflowservice_request_response_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListClosedWorkflowExecutionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_workflowservice_request_response_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWorkflowExecutionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_workflowservice_request_response_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWorkflowExecutionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_workflowservice_request_response_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListArchivedWorkflowExecutionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_workflowservice_request_response_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListArchivedWorkflowExecutionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_workflowservice_request_response_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScanWorkflowExecutionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_workflowservice_request_response_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScanWorkflowExecutionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_workflowservice_request_response_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountWorkflowExecutionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_workflowservice_request_response_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountWorkflowExecutionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_workflowservice_request_response_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSearchAttributesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_workflowservice_request_response_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSearchAttributesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_workflowservice_request_response_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RespondQueryTaskCompletedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_workflowservice_request_response_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RespondQueryTaskCompletedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_workflowservice_request_response_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetStickyTaskQueueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_workflowservice_request_response_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetStickyTaskQueueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_workflowservice_request_response_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryWorkflowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_workflowservice_request_response_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryWorkflowResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_workflowservice_request_response_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeWorkflowExecutionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_workflowservice_request_response_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeWorkflowExecutionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_workflowservice_request_response_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeTaskQueueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_workflowservice_request_response_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeTaskQueueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_workflowservice_request_response_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetClusterInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_workflowservice_request_response_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetClusterInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_workflowservice_request_response_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSystemInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_workflowservice_request_response_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSystemInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_workflowservice_request_response_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTaskQueuePartitionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_workflowservice_request_response_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTaskQueuePartitionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_workflowservice_request_response_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateScheduleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_workflowservice_request_response_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateScheduleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_workflowservice_request_response_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeScheduleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_workflowservice_request_response_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeScheduleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_workflowservice_request_response_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateScheduleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_workflowservice_request_response_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateScheduleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_workflowservice_request_response_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchScheduleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_workflowservice_request_response_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchScheduleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_workflowservice_request_response_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListScheduleMatchingTimesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_workflowservice_request_response_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListScheduleMatchingTimesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_workflowservice_request_response_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteScheduleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_workflowservice_request_response_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteScheduleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_workflowservice_request_response_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSchedulesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_workflowservice_request_response_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSchedulesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_workflowservice_request_response_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateWorkerBuildIdCompatibilityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_workflowservice_request_response_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateWorkerBuildIdCompatibilityResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_workflowservice_request_response_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWorkerBuildIdCompatibilityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_workflowservice_request_response_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWorkerBuildIdCompatibilityResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_workflowservice_request_response_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWorkerTaskReachabilityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_workflowservice_request_response_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWorkerTaskReachabilityResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_workflowservice_request_response_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateWorkflowExecutionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_workflowservice_request_response_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateWorkflowExecutionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_workflowservice_request_response_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartBatchOperationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_workflowservice_request_response_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartBatchOperationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_workflowservice_request_response_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopBatchOperationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_workflowservice_request_response_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopBatchOperationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_workflowservice_request_response_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeBatchOperationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_workflowservice_request_response_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeBatchOperationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_workflowservice_request_response_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBatchOperationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_workflowservice_request_response_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBatchOperationsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_workflowservice_request_response_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PollWorkflowExecutionUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_workflowservice_request_response_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PollWorkflowExecutionUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_workflowservice_request_response_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSystemInfoResponse_Capabilities); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_workflowservice_request_response_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateWorkerBuildIdCompatibilityRequest_AddNewCompatibleVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_workflowservice_request_response_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateWorkerBuildIdCompatibilityRequest_MergeSets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_necode_workflowservice_request_response_proto_msgTypes[52].OneofWrappers = []interface{}{
		(*ListOpenWorkflowExecutionsRequest_ExecutionFilter)(nil),
		(*ListOpenWorkflowExecutionsRequest_TypeFilter)(nil),
	}
	file_necode_workflowservice_request_response_proto_msgTypes[54].OneofWrappers = []interface{}{
		(*ListClosedWorkflowExecutionsRequest_ExecutionFilter)(nil),
		(*ListClosedWorkflowExecutionsRequest_TypeFilter)(nil),
		(*ListClosedWorkflowExecutionsRequest_StatusFilter)(nil),
	}
	file_necode_workflowservice_request_response_proto_msgTypes[96].OneofWrappers = []interface{}{
		(*UpdateWorkerBuildIdCompatibilityRequest_AddNewBuildIdInNewDefaultSet)(nil),
		(*UpdateWorkerBuildIdCompatibilityRequest_AddNewCompatibleBuildId)(nil),
		(*UpdateWorkerBuildIdCompatibilityRequest_PromoteSetByBuildId)(nil),
		(*UpdateWorkerBuildIdCompatibilityRequest_PromoteBuildIdWithinSet)(nil),
		(*UpdateWorkerBuildIdCompatibilityRequest_MergeSets_)(nil),
	}
	file_necode_workflowservice_request_response_proto_msgTypes[104].OneofWrappers = []interface{}{
		(*StartBatchOperationRequest_TerminationOperation)(nil),
		(*StartBatchOperationRequest_SignalOperation)(nil),
		(*StartBatchOperationRequest_CancellationOperation)(nil),
		(*StartBatchOperationRequest_DeletionOperation)(nil),
		(*StartBatchOperationRequest_ResetOperation)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_necode_workflowservice_request_response_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   122,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_necode_workflowservice_request_response_proto_goTypes,
		DependencyIndexes: file_necode_workflowservice_request_response_proto_depIdxs,
		MessageInfos:      file_necode_workflowservice_request_response_proto_msgTypes,
	}.Build()
	File_necode_workflowservice_request_response_proto = out.File
	file_necode_workflowservice_request_response_proto_rawDesc = nil
	file_necode_workflowservice_request_response_proto_goTypes = nil
	file_necode_workflowservice_request_response_proto_depIdxs = nil
}
