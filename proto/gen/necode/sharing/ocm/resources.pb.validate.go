// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: necode/sharing/ocm/resources.proto

package ocm

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	provider "github.com/rskvp/necode/proto/gen/necode/storage/provider"

	provider1 "github.com/rskvp/necode/proto/gen/necode/app/provider"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = provider.ResourceType(0)

	_ = provider1.ViewMode(0)
)

// Validate checks the field values on Share with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Share) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Share with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ShareMultiError, or nil if none found.
func (m *Share) ValidateAll() error {
	return m.validate(true)
}

func (m *Share) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ShareValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ShareValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ShareValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetResourceId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ShareValidationError{
					field:  "ResourceId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ShareValidationError{
					field:  "ResourceId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResourceId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ShareValidationError{
				field:  "ResourceId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Name

	// no validation rules for Token

	if all {
		switch v := interface{}(m.GetGrantee()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ShareValidationError{
					field:  "Grantee",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ShareValidationError{
					field:  "Grantee",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGrantee()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ShareValidationError{
				field:  "Grantee",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOwner()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ShareValidationError{
					field:  "Owner",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ShareValidationError{
					field:  "Owner",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOwner()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ShareValidationError{
				field:  "Owner",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCreator()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ShareValidationError{
					field:  "Creator",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ShareValidationError{
					field:  "Creator",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreator()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ShareValidationError{
				field:  "Creator",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCtime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ShareValidationError{
					field:  "Ctime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ShareValidationError{
					field:  "Ctime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCtime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ShareValidationError{
				field:  "Ctime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMtime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ShareValidationError{
					field:  "Mtime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ShareValidationError{
					field:  "Mtime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMtime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ShareValidationError{
				field:  "Mtime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetExpiration()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ShareValidationError{
					field:  "Expiration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ShareValidationError{
					field:  "Expiration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpiration()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ShareValidationError{
				field:  "Expiration",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ShareType

	for idx, item := range m.GetAccessMethods() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ShareValidationError{
						field:  fmt.Sprintf("AccessMethods[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ShareValidationError{
						field:  fmt.Sprintf("AccessMethods[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ShareValidationError{
					field:  fmt.Sprintf("AccessMethods[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ShareValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ShareValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ShareValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ShareMultiError(errors)
	}

	return nil
}

// ShareMultiError is an error wrapping multiple validation errors returned by
// Share.ValidateAll() if the designated constraints aren't met.
type ShareMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShareMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShareMultiError) AllErrors() []error { return m }

// ShareValidationError is the validation error returned by Share.Validate if
// the designated constraints aren't met.
type ShareValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShareValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShareValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShareValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShareValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShareValidationError) ErrorName() string { return "ShareValidationError" }

// Error satisfies the builtin error interface
func (e ShareValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShare.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShareValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShareValidationError{}

// Validate checks the field values on SharePermissions with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SharePermissions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SharePermissions with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SharePermissionsMultiError, or nil if none found.
func (m *SharePermissions) ValidateAll() error {
	return m.validate(true)
}

func (m *SharePermissions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPermissions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SharePermissionsValidationError{
					field:  "Permissions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SharePermissionsValidationError{
					field:  "Permissions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPermissions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SharePermissionsValidationError{
				field:  "Permissions",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Reshare

	if len(errors) > 0 {
		return SharePermissionsMultiError(errors)
	}

	return nil
}

// SharePermissionsMultiError is an error wrapping multiple validation errors
// returned by SharePermissions.ValidateAll() if the designated constraints
// aren't met.
type SharePermissionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SharePermissionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SharePermissionsMultiError) AllErrors() []error { return m }

// SharePermissionsValidationError is the validation error returned by
// SharePermissions.Validate if the designated constraints aren't met.
type SharePermissionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SharePermissionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SharePermissionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SharePermissionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SharePermissionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SharePermissionsValidationError) ErrorName() string { return "SharePermissionsValidationError" }

// Error satisfies the builtin error interface
func (e SharePermissionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSharePermissions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SharePermissionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SharePermissionsValidationError{}

// Validate checks the field values on ReceivedShare with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ReceivedShare) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReceivedShare with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ReceivedShareMultiError, or
// nil if none found.
func (m *ReceivedShare) ValidateAll() error {
	return m.validate(true)
}

func (m *ReceivedShare) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReceivedShareValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReceivedShareValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReceivedShareValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Name

	// no validation rules for RemoteShareId

	if all {
		switch v := interface{}(m.GetGrantee()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReceivedShareValidationError{
					field:  "Grantee",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReceivedShareValidationError{
					field:  "Grantee",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGrantee()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReceivedShareValidationError{
				field:  "Grantee",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOwner()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReceivedShareValidationError{
					field:  "Owner",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReceivedShareValidationError{
					field:  "Owner",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOwner()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReceivedShareValidationError{
				field:  "Owner",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCreator()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReceivedShareValidationError{
					field:  "Creator",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReceivedShareValidationError{
					field:  "Creator",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreator()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReceivedShareValidationError{
				field:  "Creator",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCtime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReceivedShareValidationError{
					field:  "Ctime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReceivedShareValidationError{
					field:  "Ctime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCtime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReceivedShareValidationError{
				field:  "Ctime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMtime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReceivedShareValidationError{
					field:  "Mtime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReceivedShareValidationError{
					field:  "Mtime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMtime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReceivedShareValidationError{
				field:  "Mtime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetExpiration()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReceivedShareValidationError{
					field:  "Expiration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReceivedShareValidationError{
					field:  "Expiration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpiration()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReceivedShareValidationError{
				field:  "Expiration",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ShareType

	for idx, item := range m.GetProtocols() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ReceivedShareValidationError{
						field:  fmt.Sprintf("Protocols[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ReceivedShareValidationError{
						field:  fmt.Sprintf("Protocols[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ReceivedShareValidationError{
					field:  fmt.Sprintf("Protocols[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for State

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReceivedShareValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReceivedShareValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReceivedShareValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ResourceType

	if len(errors) > 0 {
		return ReceivedShareMultiError(errors)
	}

	return nil
}

// ReceivedShareMultiError is an error wrapping multiple validation errors
// returned by ReceivedShare.ValidateAll() if the designated constraints
// aren't met.
type ReceivedShareMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReceivedShareMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReceivedShareMultiError) AllErrors() []error { return m }

// ReceivedShareValidationError is the validation error returned by
// ReceivedShare.Validate if the designated constraints aren't met.
type ReceivedShareValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReceivedShareValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReceivedShareValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReceivedShareValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReceivedShareValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReceivedShareValidationError) ErrorName() string { return "ReceivedShareValidationError" }

// Error satisfies the builtin error interface
func (e ReceivedShareValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReceivedShare.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReceivedShareValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReceivedShareValidationError{}

// Validate checks the field values on ShareKey with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ShareKey) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShareKey with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ShareKeyMultiError, or nil
// if none found.
func (m *ShareKey) ValidateAll() error {
	return m.validate(true)
}

func (m *ShareKey) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOwner()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ShareKeyValidationError{
					field:  "Owner",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ShareKeyValidationError{
					field:  "Owner",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOwner()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ShareKeyValidationError{
				field:  "Owner",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetResourceId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ShareKeyValidationError{
					field:  "ResourceId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ShareKeyValidationError{
					field:  "ResourceId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResourceId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ShareKeyValidationError{
				field:  "ResourceId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetGrantee()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ShareKeyValidationError{
					field:  "Grantee",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ShareKeyValidationError{
					field:  "Grantee",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGrantee()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ShareKeyValidationError{
				field:  "Grantee",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ShareKeyMultiError(errors)
	}

	return nil
}

// ShareKeyMultiError is an error wrapping multiple validation errors returned
// by ShareKey.ValidateAll() if the designated constraints aren't met.
type ShareKeyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShareKeyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShareKeyMultiError) AllErrors() []error { return m }

// ShareKeyValidationError is the validation error returned by
// ShareKey.Validate if the designated constraints aren't met.
type ShareKeyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShareKeyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShareKeyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShareKeyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShareKeyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShareKeyValidationError) ErrorName() string { return "ShareKeyValidationError" }

// Error satisfies the builtin error interface
func (e ShareKeyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShareKey.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShareKeyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShareKeyValidationError{}

// Validate checks the field values on ShareId with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ShareId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShareId with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ShareIdMultiError, or nil if none found.
func (m *ShareId) ValidateAll() error {
	return m.validate(true)
}

func (m *ShareId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OpaqueId

	if len(errors) > 0 {
		return ShareIdMultiError(errors)
	}

	return nil
}

// ShareIdMultiError is an error wrapping multiple validation errors returned
// by ShareId.ValidateAll() if the designated constraints aren't met.
type ShareIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShareIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShareIdMultiError) AllErrors() []error { return m }

// ShareIdValidationError is the validation error returned by ShareId.Validate
// if the designated constraints aren't met.
type ShareIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShareIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShareIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShareIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShareIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShareIdValidationError) ErrorName() string { return "ShareIdValidationError" }

// Error satisfies the builtin error interface
func (e ShareIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShareId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShareIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShareIdValidationError{}

// Validate checks the field values on ShareReference with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ShareReference) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShareReference with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ShareReferenceMultiError,
// or nil if none found.
func (m *ShareReference) ValidateAll() error {
	return m.validate(true)
}

func (m *ShareReference) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Spec.(type) {
	case *ShareReference_Id:
		if v == nil {
			err := ShareReferenceValidationError{
				field:  "Spec",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetId()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ShareReferenceValidationError{
						field:  "Id",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ShareReferenceValidationError{
						field:  "Id",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ShareReferenceValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ShareReference_Key:
		if v == nil {
			err := ShareReferenceValidationError{
				field:  "Spec",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetKey()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ShareReferenceValidationError{
						field:  "Key",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ShareReferenceValidationError{
						field:  "Key",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetKey()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ShareReferenceValidationError{
					field:  "Key",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ShareReference_Token:
		if v == nil {
			err := ShareReferenceValidationError{
				field:  "Spec",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Token
	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return ShareReferenceMultiError(errors)
	}

	return nil
}

// ShareReferenceMultiError is an error wrapping multiple validation errors
// returned by ShareReference.ValidateAll() if the designated constraints
// aren't met.
type ShareReferenceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShareReferenceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShareReferenceMultiError) AllErrors() []error { return m }

// ShareReferenceValidationError is the validation error returned by
// ShareReference.Validate if the designated constraints aren't met.
type ShareReferenceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShareReferenceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShareReferenceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShareReferenceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShareReferenceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShareReferenceValidationError) ErrorName() string { return "ShareReferenceValidationError" }

// Error satisfies the builtin error interface
func (e ShareReferenceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShareReference.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShareReferenceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShareReferenceValidationError{}

// Validate checks the field values on ShareGrant with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ShareGrant) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShareGrant with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ShareGrantMultiError, or
// nil if none found.
func (m *ShareGrant) ValidateAll() error {
	return m.validate(true)
}

func (m *ShareGrant) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGrantee()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ShareGrantValidationError{
					field:  "Grantee",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ShareGrantValidationError{
					field:  "Grantee",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGrantee()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ShareGrantValidationError{
				field:  "Grantee",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPermissions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ShareGrantValidationError{
					field:  "Permissions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ShareGrantValidationError{
					field:  "Permissions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPermissions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ShareGrantValidationError{
				field:  "Permissions",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ShareGrantMultiError(errors)
	}

	return nil
}

// ShareGrantMultiError is an error wrapping multiple validation errors
// returned by ShareGrant.ValidateAll() if the designated constraints aren't met.
type ShareGrantMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShareGrantMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShareGrantMultiError) AllErrors() []error { return m }

// ShareGrantValidationError is the validation error returned by
// ShareGrant.Validate if the designated constraints aren't met.
type ShareGrantValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShareGrantValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShareGrantValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShareGrantValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShareGrantValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShareGrantValidationError) ErrorName() string { return "ShareGrantValidationError" }

// Error satisfies the builtin error interface
func (e ShareGrantValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShareGrant.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShareGrantValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShareGrantValidationError{}

// Validate checks the field values on Protocol with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Protocol) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Protocol with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ProtocolMultiError, or nil
// if none found.
func (m *Protocol) ValidateAll() error {
	return m.validate(true)
}

func (m *Protocol) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Term.(type) {
	case *Protocol_WebdavOptions:
		if v == nil {
			err := ProtocolValidationError{
				field:  "Term",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetWebdavOptions()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ProtocolValidationError{
						field:  "WebdavOptions",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ProtocolValidationError{
						field:  "WebdavOptions",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetWebdavOptions()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProtocolValidationError{
					field:  "WebdavOptions",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Protocol_WebappOptions:
		if v == nil {
			err := ProtocolValidationError{
				field:  "Term",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetWebappOptions()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ProtocolValidationError{
						field:  "WebappOptions",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ProtocolValidationError{
						field:  "WebappOptions",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetWebappOptions()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProtocolValidationError{
					field:  "WebappOptions",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Protocol_TransferOptions:
		if v == nil {
			err := ProtocolValidationError{
				field:  "Term",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetTransferOptions()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ProtocolValidationError{
						field:  "TransferOptions",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ProtocolValidationError{
						field:  "TransferOptions",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTransferOptions()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProtocolValidationError{
					field:  "TransferOptions",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Protocol_GenericOptions:
		if v == nil {
			err := ProtocolValidationError{
				field:  "Term",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetGenericOptions()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ProtocolValidationError{
						field:  "GenericOptions",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ProtocolValidationError{
						field:  "GenericOptions",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetGenericOptions()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProtocolValidationError{
					field:  "GenericOptions",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return ProtocolMultiError(errors)
	}

	return nil
}

// ProtocolMultiError is an error wrapping multiple validation errors returned
// by Protocol.ValidateAll() if the designated constraints aren't met.
type ProtocolMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProtocolMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProtocolMultiError) AllErrors() []error { return m }

// ProtocolValidationError is the validation error returned by
// Protocol.Validate if the designated constraints aren't met.
type ProtocolValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProtocolValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProtocolValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProtocolValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProtocolValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProtocolValidationError) ErrorName() string { return "ProtocolValidationError" }

// Error satisfies the builtin error interface
func (e ProtocolValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProtocol.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProtocolValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProtocolValidationError{}

// Validate checks the field values on WebDAVProtocol with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *WebDAVProtocol) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WebDAVProtocol with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in WebDAVProtocolMultiError,
// or nil if none found.
func (m *WebDAVProtocol) ValidateAll() error {
	return m.validate(true)
}

func (m *WebDAVProtocol) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SharedSecret

	if all {
		switch v := interface{}(m.GetPermissions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WebDAVProtocolValidationError{
					field:  "Permissions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WebDAVProtocolValidationError{
					field:  "Permissions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPermissions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WebDAVProtocolValidationError{
				field:  "Permissions",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Uri

	if len(errors) > 0 {
		return WebDAVProtocolMultiError(errors)
	}

	return nil
}

// WebDAVProtocolMultiError is an error wrapping multiple validation errors
// returned by WebDAVProtocol.ValidateAll() if the designated constraints
// aren't met.
type WebDAVProtocolMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WebDAVProtocolMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WebDAVProtocolMultiError) AllErrors() []error { return m }

// WebDAVProtocolValidationError is the validation error returned by
// WebDAVProtocol.Validate if the designated constraints aren't met.
type WebDAVProtocolValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WebDAVProtocolValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WebDAVProtocolValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WebDAVProtocolValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WebDAVProtocolValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WebDAVProtocolValidationError) ErrorName() string { return "WebDAVProtocolValidationError" }

// Error satisfies the builtin error interface
func (e WebDAVProtocolValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWebDAVProtocol.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WebDAVProtocolValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WebDAVProtocolValidationError{}

// Validate checks the field values on WebappProtocol with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *WebappProtocol) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WebappProtocol with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in WebappProtocolMultiError,
// or nil if none found.
func (m *WebappProtocol) ValidateAll() error {
	return m.validate(true)
}

func (m *WebappProtocol) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UriTemplate

	// no validation rules for ViewMode

	if len(errors) > 0 {
		return WebappProtocolMultiError(errors)
	}

	return nil
}

// WebappProtocolMultiError is an error wrapping multiple validation errors
// returned by WebappProtocol.ValidateAll() if the designated constraints
// aren't met.
type WebappProtocolMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WebappProtocolMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WebappProtocolMultiError) AllErrors() []error { return m }

// WebappProtocolValidationError is the validation error returned by
// WebappProtocol.Validate if the designated constraints aren't met.
type WebappProtocolValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WebappProtocolValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WebappProtocolValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WebappProtocolValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WebappProtocolValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WebappProtocolValidationError) ErrorName() string { return "WebappProtocolValidationError" }

// Error satisfies the builtin error interface
func (e WebappProtocolValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWebappProtocol.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WebappProtocolValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WebappProtocolValidationError{}

// Validate checks the field values on TransferProtocol with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TransferProtocol) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TransferProtocol with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TransferProtocolMultiError, or nil if none found.
func (m *TransferProtocol) ValidateAll() error {
	return m.validate(true)
}

func (m *TransferProtocol) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SharedSecret

	// no validation rules for SourceUri

	// no validation rules for Size

	if len(errors) > 0 {
		return TransferProtocolMultiError(errors)
	}

	return nil
}

// TransferProtocolMultiError is an error wrapping multiple validation errors
// returned by TransferProtocol.ValidateAll() if the designated constraints
// aren't met.
type TransferProtocolMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransferProtocolMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransferProtocolMultiError) AllErrors() []error { return m }

// TransferProtocolValidationError is the validation error returned by
// TransferProtocol.Validate if the designated constraints aren't met.
type TransferProtocolValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransferProtocolValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransferProtocolValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransferProtocolValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransferProtocolValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransferProtocolValidationError) ErrorName() string { return "TransferProtocolValidationError" }

// Error satisfies the builtin error interface
func (e TransferProtocolValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransferProtocol.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransferProtocolValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransferProtocolValidationError{}

// Validate checks the field values on AccessMethod with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AccessMethod) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AccessMethod with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AccessMethodMultiError, or
// nil if none found.
func (m *AccessMethod) ValidateAll() error {
	return m.validate(true)
}

func (m *AccessMethod) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Term.(type) {
	case *AccessMethod_WebdavOptions:
		if v == nil {
			err := AccessMethodValidationError{
				field:  "Term",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetWebdavOptions()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AccessMethodValidationError{
						field:  "WebdavOptions",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AccessMethodValidationError{
						field:  "WebdavOptions",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetWebdavOptions()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AccessMethodValidationError{
					field:  "WebdavOptions",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AccessMethod_WebappOptions:
		if v == nil {
			err := AccessMethodValidationError{
				field:  "Term",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetWebappOptions()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AccessMethodValidationError{
						field:  "WebappOptions",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AccessMethodValidationError{
						field:  "WebappOptions",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetWebappOptions()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AccessMethodValidationError{
					field:  "WebappOptions",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AccessMethod_TransferOptions:
		if v == nil {
			err := AccessMethodValidationError{
				field:  "Term",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetTransferOptions()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AccessMethodValidationError{
						field:  "TransferOptions",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AccessMethodValidationError{
						field:  "TransferOptions",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTransferOptions()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AccessMethodValidationError{
					field:  "TransferOptions",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AccessMethod_GenericOptions:
		if v == nil {
			err := AccessMethodValidationError{
				field:  "Term",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetGenericOptions()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AccessMethodValidationError{
						field:  "GenericOptions",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AccessMethodValidationError{
						field:  "GenericOptions",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetGenericOptions()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AccessMethodValidationError{
					field:  "GenericOptions",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return AccessMethodMultiError(errors)
	}

	return nil
}

// AccessMethodMultiError is an error wrapping multiple validation errors
// returned by AccessMethod.ValidateAll() if the designated constraints aren't met.
type AccessMethodMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AccessMethodMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AccessMethodMultiError) AllErrors() []error { return m }

// AccessMethodValidationError is the validation error returned by
// AccessMethod.Validate if the designated constraints aren't met.
type AccessMethodValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccessMethodValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccessMethodValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccessMethodValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccessMethodValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccessMethodValidationError) ErrorName() string { return "AccessMethodValidationError" }

// Error satisfies the builtin error interface
func (e AccessMethodValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccessMethod.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccessMethodValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccessMethodValidationError{}

// Validate checks the field values on WebDAVAccessMethod with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WebDAVAccessMethod) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WebDAVAccessMethod with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WebDAVAccessMethodMultiError, or nil if none found.
func (m *WebDAVAccessMethod) ValidateAll() error {
	return m.validate(true)
}

func (m *WebDAVAccessMethod) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPermissions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WebDAVAccessMethodValidationError{
					field:  "Permissions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WebDAVAccessMethodValidationError{
					field:  "Permissions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPermissions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WebDAVAccessMethodValidationError{
				field:  "Permissions",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return WebDAVAccessMethodMultiError(errors)
	}

	return nil
}

// WebDAVAccessMethodMultiError is an error wrapping multiple validation errors
// returned by WebDAVAccessMethod.ValidateAll() if the designated constraints
// aren't met.
type WebDAVAccessMethodMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WebDAVAccessMethodMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WebDAVAccessMethodMultiError) AllErrors() []error { return m }

// WebDAVAccessMethodValidationError is the validation error returned by
// WebDAVAccessMethod.Validate if the designated constraints aren't met.
type WebDAVAccessMethodValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WebDAVAccessMethodValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WebDAVAccessMethodValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WebDAVAccessMethodValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WebDAVAccessMethodValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WebDAVAccessMethodValidationError) ErrorName() string {
	return "WebDAVAccessMethodValidationError"
}

// Error satisfies the builtin error interface
func (e WebDAVAccessMethodValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWebDAVAccessMethod.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WebDAVAccessMethodValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WebDAVAccessMethodValidationError{}

// Validate checks the field values on WebappAccessMethod with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WebappAccessMethod) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WebappAccessMethod with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WebappAccessMethodMultiError, or nil if none found.
func (m *WebappAccessMethod) ValidateAll() error {
	return m.validate(true)
}

func (m *WebappAccessMethod) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ViewMode

	if len(errors) > 0 {
		return WebappAccessMethodMultiError(errors)
	}

	return nil
}

// WebappAccessMethodMultiError is an error wrapping multiple validation errors
// returned by WebappAccessMethod.ValidateAll() if the designated constraints
// aren't met.
type WebappAccessMethodMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WebappAccessMethodMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WebappAccessMethodMultiError) AllErrors() []error { return m }

// WebappAccessMethodValidationError is the validation error returned by
// WebappAccessMethod.Validate if the designated constraints aren't met.
type WebappAccessMethodValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WebappAccessMethodValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WebappAccessMethodValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WebappAccessMethodValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WebappAccessMethodValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WebappAccessMethodValidationError) ErrorName() string {
	return "WebappAccessMethodValidationError"
}

// Error satisfies the builtin error interface
func (e WebappAccessMethodValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWebappAccessMethod.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WebappAccessMethodValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WebappAccessMethodValidationError{}

// Validate checks the field values on TransferAccessMethod with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TransferAccessMethod) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TransferAccessMethod with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TransferAccessMethodMultiError, or nil if none found.
func (m *TransferAccessMethod) ValidateAll() error {
	return m.validate(true)
}

func (m *TransferAccessMethod) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDestination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TransferAccessMethodValidationError{
					field:  "Destination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TransferAccessMethodValidationError{
					field:  "Destination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDestination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TransferAccessMethodValidationError{
				field:  "Destination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TransferAccessMethodMultiError(errors)
	}

	return nil
}

// TransferAccessMethodMultiError is an error wrapping multiple validation
// errors returned by TransferAccessMethod.ValidateAll() if the designated
// constraints aren't met.
type TransferAccessMethodMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransferAccessMethodMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransferAccessMethodMultiError) AllErrors() []error { return m }

// TransferAccessMethodValidationError is the validation error returned by
// TransferAccessMethod.Validate if the designated constraints aren't met.
type TransferAccessMethodValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransferAccessMethodValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransferAccessMethodValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransferAccessMethodValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransferAccessMethodValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransferAccessMethodValidationError) ErrorName() string {
	return "TransferAccessMethodValidationError"
}

// Error satisfies the builtin error interface
func (e TransferAccessMethodValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransferAccessMethod.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransferAccessMethodValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransferAccessMethodValidationError{}
