// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: necode/sharing/ocm/ocm_api.proto

package ocm

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateOCMShareRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOCMShareRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOCMShareRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOCMShareRequestMultiError, or nil if none found.
func (m *CreateOCMShareRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOCMShareRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOCMShareRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOCMShareRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOCMShareRequestValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetResourceId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOCMShareRequestValidationError{
					field:  "ResourceId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOCMShareRequestValidationError{
					field:  "ResourceId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResourceId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOCMShareRequestValidationError{
				field:  "ResourceId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetGrantee()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOCMShareRequestValidationError{
					field:  "Grantee",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOCMShareRequestValidationError{
					field:  "Grantee",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGrantee()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOCMShareRequestValidationError{
				field:  "Grantee",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRecipientMeshProvider()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOCMShareRequestValidationError{
					field:  "RecipientMeshProvider",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOCMShareRequestValidationError{
					field:  "RecipientMeshProvider",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRecipientMeshProvider()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOCMShareRequestValidationError{
				field:  "RecipientMeshProvider",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetAccessMethods() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateOCMShareRequestValidationError{
						field:  fmt.Sprintf("AccessMethods[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateOCMShareRequestValidationError{
						field:  fmt.Sprintf("AccessMethods[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateOCMShareRequestValidationError{
					field:  fmt.Sprintf("AccessMethods[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetExpiration()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOCMShareRequestValidationError{
					field:  "Expiration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOCMShareRequestValidationError{
					field:  "Expiration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpiration()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOCMShareRequestValidationError{
				field:  "Expiration",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateOCMShareRequestMultiError(errors)
	}

	return nil
}

// CreateOCMShareRequestMultiError is an error wrapping multiple validation
// errors returned by CreateOCMShareRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateOCMShareRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOCMShareRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOCMShareRequestMultiError) AllErrors() []error { return m }

// CreateOCMShareRequestValidationError is the validation error returned by
// CreateOCMShareRequest.Validate if the designated constraints aren't met.
type CreateOCMShareRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOCMShareRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOCMShareRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOCMShareRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOCMShareRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOCMShareRequestValidationError) ErrorName() string {
	return "CreateOCMShareRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOCMShareRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOCMShareRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOCMShareRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOCMShareRequestValidationError{}

// Validate checks the field values on CreateOCMShareResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOCMShareResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOCMShareResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOCMShareResponseMultiError, or nil if none found.
func (m *CreateOCMShareResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOCMShareResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOCMShareResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOCMShareResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOCMShareResponseValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOCMShareResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOCMShareResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOCMShareResponseValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetShare()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOCMShareResponseValidationError{
					field:  "Share",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOCMShareResponseValidationError{
					field:  "Share",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetShare()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOCMShareResponseValidationError{
				field:  "Share",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for RecipientDisplayName

	if len(errors) > 0 {
		return CreateOCMShareResponseMultiError(errors)
	}

	return nil
}

// CreateOCMShareResponseMultiError is an error wrapping multiple validation
// errors returned by CreateOCMShareResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateOCMShareResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOCMShareResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOCMShareResponseMultiError) AllErrors() []error { return m }

// CreateOCMShareResponseValidationError is the validation error returned by
// CreateOCMShareResponse.Validate if the designated constraints aren't met.
type CreateOCMShareResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOCMShareResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOCMShareResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOCMShareResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOCMShareResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOCMShareResponseValidationError) ErrorName() string {
	return "CreateOCMShareResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOCMShareResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOCMShareResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOCMShareResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOCMShareResponseValidationError{}

// Validate checks the field values on UpdateOCMShareRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateOCMShareRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOCMShareRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateOCMShareRequestMultiError, or nil if none found.
func (m *UpdateOCMShareRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOCMShareRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateOCMShareRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateOCMShareRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateOCMShareRequestValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRef()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateOCMShareRequestValidationError{
					field:  "Ref",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateOCMShareRequestValidationError{
					field:  "Ref",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRef()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateOCMShareRequestValidationError{
				field:  "Ref",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetField() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateOCMShareRequestValidationError{
						field:  fmt.Sprintf("Field[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateOCMShareRequestValidationError{
						field:  fmt.Sprintf("Field[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateOCMShareRequestValidationError{
					field:  fmt.Sprintf("Field[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpdateOCMShareRequestMultiError(errors)
	}

	return nil
}

// UpdateOCMShareRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateOCMShareRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateOCMShareRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOCMShareRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOCMShareRequestMultiError) AllErrors() []error { return m }

// UpdateOCMShareRequestValidationError is the validation error returned by
// UpdateOCMShareRequest.Validate if the designated constraints aren't met.
type UpdateOCMShareRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOCMShareRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOCMShareRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOCMShareRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOCMShareRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOCMShareRequestValidationError) ErrorName() string {
	return "UpdateOCMShareRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOCMShareRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOCMShareRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOCMShareRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOCMShareRequestValidationError{}

// Validate checks the field values on UpdateOCMShareResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateOCMShareResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOCMShareResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateOCMShareResponseMultiError, or nil if none found.
func (m *UpdateOCMShareResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOCMShareResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateOCMShareResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateOCMShareResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateOCMShareResponseValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateOCMShareResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateOCMShareResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateOCMShareResponseValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateOCMShareResponseMultiError(errors)
	}

	return nil
}

// UpdateOCMShareResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateOCMShareResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateOCMShareResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOCMShareResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOCMShareResponseMultiError) AllErrors() []error { return m }

// UpdateOCMShareResponseValidationError is the validation error returned by
// UpdateOCMShareResponse.Validate if the designated constraints aren't met.
type UpdateOCMShareResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOCMShareResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOCMShareResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOCMShareResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOCMShareResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOCMShareResponseValidationError) ErrorName() string {
	return "UpdateOCMShareResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOCMShareResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOCMShareResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOCMShareResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOCMShareResponseValidationError{}

// Validate checks the field values on ListOCMSharesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListOCMSharesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOCMSharesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListOCMSharesRequestMultiError, or nil if none found.
func (m *ListOCMSharesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOCMSharesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListOCMSharesRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListOCMSharesRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListOCMSharesRequestValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetFilters() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListOCMSharesRequestValidationError{
						field:  fmt.Sprintf("Filters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListOCMSharesRequestValidationError{
						field:  fmt.Sprintf("Filters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOCMSharesRequestValidationError{
					field:  fmt.Sprintf("Filters[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for PageSize

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListOCMSharesRequestMultiError(errors)
	}

	return nil
}

// ListOCMSharesRequestMultiError is an error wrapping multiple validation
// errors returned by ListOCMSharesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListOCMSharesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOCMSharesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOCMSharesRequestMultiError) AllErrors() []error { return m }

// ListOCMSharesRequestValidationError is the validation error returned by
// ListOCMSharesRequest.Validate if the designated constraints aren't met.
type ListOCMSharesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOCMSharesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOCMSharesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOCMSharesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOCMSharesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOCMSharesRequestValidationError) ErrorName() string {
	return "ListOCMSharesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListOCMSharesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOCMSharesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOCMSharesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOCMSharesRequestValidationError{}

// Validate checks the field values on ListOCMSharesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListOCMSharesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOCMSharesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListOCMSharesResponseMultiError, or nil if none found.
func (m *ListOCMSharesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOCMSharesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListOCMSharesResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListOCMSharesResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListOCMSharesResponseValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListOCMSharesResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListOCMSharesResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListOCMSharesResponseValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetShares() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListOCMSharesResponseValidationError{
						field:  fmt.Sprintf("Shares[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListOCMSharesResponseValidationError{
						field:  fmt.Sprintf("Shares[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOCMSharesResponseValidationError{
					field:  fmt.Sprintf("Shares[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListOCMSharesResponseMultiError(errors)
	}

	return nil
}

// ListOCMSharesResponseMultiError is an error wrapping multiple validation
// errors returned by ListOCMSharesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListOCMSharesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOCMSharesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOCMSharesResponseMultiError) AllErrors() []error { return m }

// ListOCMSharesResponseValidationError is the validation error returned by
// ListOCMSharesResponse.Validate if the designated constraints aren't met.
type ListOCMSharesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOCMSharesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOCMSharesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOCMSharesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOCMSharesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOCMSharesResponseValidationError) ErrorName() string {
	return "ListOCMSharesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListOCMSharesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOCMSharesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOCMSharesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOCMSharesResponseValidationError{}

// Validate checks the field values on RemoveOCMShareRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveOCMShareRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveOCMShareRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveOCMShareRequestMultiError, or nil if none found.
func (m *RemoveOCMShareRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveOCMShareRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RemoveOCMShareRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RemoveOCMShareRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RemoveOCMShareRequestValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRef()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RemoveOCMShareRequestValidationError{
					field:  "Ref",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RemoveOCMShareRequestValidationError{
					field:  "Ref",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRef()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RemoveOCMShareRequestValidationError{
				field:  "Ref",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RemoveOCMShareRequestMultiError(errors)
	}

	return nil
}

// RemoveOCMShareRequestMultiError is an error wrapping multiple validation
// errors returned by RemoveOCMShareRequest.ValidateAll() if the designated
// constraints aren't met.
type RemoveOCMShareRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveOCMShareRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveOCMShareRequestMultiError) AllErrors() []error { return m }

// RemoveOCMShareRequestValidationError is the validation error returned by
// RemoveOCMShareRequest.Validate if the designated constraints aren't met.
type RemoveOCMShareRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveOCMShareRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveOCMShareRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveOCMShareRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveOCMShareRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveOCMShareRequestValidationError) ErrorName() string {
	return "RemoveOCMShareRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveOCMShareRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveOCMShareRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveOCMShareRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveOCMShareRequestValidationError{}

// Validate checks the field values on RemoveOCMShareResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveOCMShareResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveOCMShareResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveOCMShareResponseMultiError, or nil if none found.
func (m *RemoveOCMShareResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveOCMShareResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RemoveOCMShareResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RemoveOCMShareResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RemoveOCMShareResponseValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RemoveOCMShareResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RemoveOCMShareResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RemoveOCMShareResponseValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RemoveOCMShareResponseMultiError(errors)
	}

	return nil
}

// RemoveOCMShareResponseMultiError is an error wrapping multiple validation
// errors returned by RemoveOCMShareResponse.ValidateAll() if the designated
// constraints aren't met.
type RemoveOCMShareResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveOCMShareResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveOCMShareResponseMultiError) AllErrors() []error { return m }

// RemoveOCMShareResponseValidationError is the validation error returned by
// RemoveOCMShareResponse.Validate if the designated constraints aren't met.
type RemoveOCMShareResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveOCMShareResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveOCMShareResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveOCMShareResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveOCMShareResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveOCMShareResponseValidationError) ErrorName() string {
	return "RemoveOCMShareResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveOCMShareResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveOCMShareResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveOCMShareResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveOCMShareResponseValidationError{}

// Validate checks the field values on GetOCMShareRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOCMShareRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOCMShareRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOCMShareRequestMultiError, or nil if none found.
func (m *GetOCMShareRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOCMShareRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOCMShareRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOCMShareRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOCMShareRequestValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRef()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOCMShareRequestValidationError{
					field:  "Ref",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOCMShareRequestValidationError{
					field:  "Ref",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRef()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOCMShareRequestValidationError{
				field:  "Ref",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetOCMShareRequestMultiError(errors)
	}

	return nil
}

// GetOCMShareRequestMultiError is an error wrapping multiple validation errors
// returned by GetOCMShareRequest.ValidateAll() if the designated constraints
// aren't met.
type GetOCMShareRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOCMShareRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOCMShareRequestMultiError) AllErrors() []error { return m }

// GetOCMShareRequestValidationError is the validation error returned by
// GetOCMShareRequest.Validate if the designated constraints aren't met.
type GetOCMShareRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOCMShareRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOCMShareRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOCMShareRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOCMShareRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOCMShareRequestValidationError) ErrorName() string {
	return "GetOCMShareRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetOCMShareRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOCMShareRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOCMShareRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOCMShareRequestValidationError{}

// Validate checks the field values on GetOCMShareResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOCMShareResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOCMShareResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOCMShareResponseMultiError, or nil if none found.
func (m *GetOCMShareResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOCMShareResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOCMShareResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOCMShareResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOCMShareResponseValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOCMShareResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOCMShareResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOCMShareResponseValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetShare()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOCMShareResponseValidationError{
					field:  "Share",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOCMShareResponseValidationError{
					field:  "Share",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetShare()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOCMShareResponseValidationError{
				field:  "Share",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetOCMShareResponseMultiError(errors)
	}

	return nil
}

// GetOCMShareResponseMultiError is an error wrapping multiple validation
// errors returned by GetOCMShareResponse.ValidateAll() if the designated
// constraints aren't met.
type GetOCMShareResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOCMShareResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOCMShareResponseMultiError) AllErrors() []error { return m }

// GetOCMShareResponseValidationError is the validation error returned by
// GetOCMShareResponse.Validate if the designated constraints aren't met.
type GetOCMShareResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOCMShareResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOCMShareResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOCMShareResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOCMShareResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOCMShareResponseValidationError) ErrorName() string {
	return "GetOCMShareResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetOCMShareResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOCMShareResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOCMShareResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOCMShareResponseValidationError{}

// Validate checks the field values on GetOCMShareByTokenRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOCMShareByTokenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOCMShareByTokenRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOCMShareByTokenRequestMultiError, or nil if none found.
func (m *GetOCMShareByTokenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOCMShareByTokenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if len(errors) > 0 {
		return GetOCMShareByTokenRequestMultiError(errors)
	}

	return nil
}

// GetOCMShareByTokenRequestMultiError is an error wrapping multiple validation
// errors returned by GetOCMShareByTokenRequest.ValidateAll() if the
// designated constraints aren't met.
type GetOCMShareByTokenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOCMShareByTokenRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOCMShareByTokenRequestMultiError) AllErrors() []error { return m }

// GetOCMShareByTokenRequestValidationError is the validation error returned by
// GetOCMShareByTokenRequest.Validate if the designated constraints aren't met.
type GetOCMShareByTokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOCMShareByTokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOCMShareByTokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOCMShareByTokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOCMShareByTokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOCMShareByTokenRequestValidationError) ErrorName() string {
	return "GetOCMShareByTokenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetOCMShareByTokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOCMShareByTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOCMShareByTokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOCMShareByTokenRequestValidationError{}

// Validate checks the field values on GetOCMShareByTokenResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOCMShareByTokenResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOCMShareByTokenResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOCMShareByTokenResponseMultiError, or nil if none found.
func (m *GetOCMShareByTokenResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOCMShareByTokenResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOCMShareByTokenResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOCMShareByTokenResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOCMShareByTokenResponseValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetShare()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOCMShareByTokenResponseValidationError{
					field:  "Share",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOCMShareByTokenResponseValidationError{
					field:  "Share",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetShare()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOCMShareByTokenResponseValidationError{
				field:  "Share",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetOCMShareByTokenResponseMultiError(errors)
	}

	return nil
}

// GetOCMShareByTokenResponseMultiError is an error wrapping multiple
// validation errors returned by GetOCMShareByTokenResponse.ValidateAll() if
// the designated constraints aren't met.
type GetOCMShareByTokenResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOCMShareByTokenResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOCMShareByTokenResponseMultiError) AllErrors() []error { return m }

// GetOCMShareByTokenResponseValidationError is the validation error returned
// by GetOCMShareByTokenResponse.Validate if the designated constraints aren't met.
type GetOCMShareByTokenResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOCMShareByTokenResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOCMShareByTokenResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOCMShareByTokenResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOCMShareByTokenResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOCMShareByTokenResponseValidationError) ErrorName() string {
	return "GetOCMShareByTokenResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetOCMShareByTokenResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOCMShareByTokenResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOCMShareByTokenResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOCMShareByTokenResponseValidationError{}

// Validate checks the field values on ListReceivedOCMSharesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListReceivedOCMSharesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListReceivedOCMSharesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListReceivedOCMSharesRequestMultiError, or nil if none found.
func (m *ListReceivedOCMSharesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListReceivedOCMSharesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListReceivedOCMSharesRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListReceivedOCMSharesRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListReceivedOCMSharesRequestValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for PageSize

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListReceivedOCMSharesRequestMultiError(errors)
	}

	return nil
}

// ListReceivedOCMSharesRequestMultiError is an error wrapping multiple
// validation errors returned by ListReceivedOCMSharesRequest.ValidateAll() if
// the designated constraints aren't met.
type ListReceivedOCMSharesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListReceivedOCMSharesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListReceivedOCMSharesRequestMultiError) AllErrors() []error { return m }

// ListReceivedOCMSharesRequestValidationError is the validation error returned
// by ListReceivedOCMSharesRequest.Validate if the designated constraints
// aren't met.
type ListReceivedOCMSharesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListReceivedOCMSharesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListReceivedOCMSharesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListReceivedOCMSharesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListReceivedOCMSharesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListReceivedOCMSharesRequestValidationError) ErrorName() string {
	return "ListReceivedOCMSharesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListReceivedOCMSharesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListReceivedOCMSharesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListReceivedOCMSharesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListReceivedOCMSharesRequestValidationError{}

// Validate checks the field values on ListReceivedOCMSharesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListReceivedOCMSharesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListReceivedOCMSharesResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListReceivedOCMSharesResponseMultiError, or nil if none found.
func (m *ListReceivedOCMSharesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListReceivedOCMSharesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListReceivedOCMSharesResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListReceivedOCMSharesResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListReceivedOCMSharesResponseValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListReceivedOCMSharesResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListReceivedOCMSharesResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListReceivedOCMSharesResponseValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetShares() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListReceivedOCMSharesResponseValidationError{
						field:  fmt.Sprintf("Shares[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListReceivedOCMSharesResponseValidationError{
						field:  fmt.Sprintf("Shares[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListReceivedOCMSharesResponseValidationError{
					field:  fmt.Sprintf("Shares[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListReceivedOCMSharesResponseMultiError(errors)
	}

	return nil
}

// ListReceivedOCMSharesResponseMultiError is an error wrapping multiple
// validation errors returned by ListReceivedOCMSharesResponse.ValidateAll()
// if the designated constraints aren't met.
type ListReceivedOCMSharesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListReceivedOCMSharesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListReceivedOCMSharesResponseMultiError) AllErrors() []error { return m }

// ListReceivedOCMSharesResponseValidationError is the validation error
// returned by ListReceivedOCMSharesResponse.Validate if the designated
// constraints aren't met.
type ListReceivedOCMSharesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListReceivedOCMSharesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListReceivedOCMSharesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListReceivedOCMSharesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListReceivedOCMSharesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListReceivedOCMSharesResponseValidationError) ErrorName() string {
	return "ListReceivedOCMSharesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListReceivedOCMSharesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListReceivedOCMSharesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListReceivedOCMSharesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListReceivedOCMSharesResponseValidationError{}

// Validate checks the field values on UpdateReceivedOCMShareRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateReceivedOCMShareRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateReceivedOCMShareRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateReceivedOCMShareRequestMultiError, or nil if none found.
func (m *UpdateReceivedOCMShareRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateReceivedOCMShareRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateReceivedOCMShareRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateReceivedOCMShareRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateReceivedOCMShareRequestValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetShare()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateReceivedOCMShareRequestValidationError{
					field:  "Share",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateReceivedOCMShareRequestValidationError{
					field:  "Share",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetShare()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateReceivedOCMShareRequestValidationError{
				field:  "Share",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateMask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateReceivedOCMShareRequestValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateReceivedOCMShareRequestValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateReceivedOCMShareRequestValidationError{
				field:  "UpdateMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateReceivedOCMShareRequestMultiError(errors)
	}

	return nil
}

// UpdateReceivedOCMShareRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateReceivedOCMShareRequest.ValidateAll()
// if the designated constraints aren't met.
type UpdateReceivedOCMShareRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateReceivedOCMShareRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateReceivedOCMShareRequestMultiError) AllErrors() []error { return m }

// UpdateReceivedOCMShareRequestValidationError is the validation error
// returned by UpdateReceivedOCMShareRequest.Validate if the designated
// constraints aren't met.
type UpdateReceivedOCMShareRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateReceivedOCMShareRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateReceivedOCMShareRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateReceivedOCMShareRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateReceivedOCMShareRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateReceivedOCMShareRequestValidationError) ErrorName() string {
	return "UpdateReceivedOCMShareRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateReceivedOCMShareRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateReceivedOCMShareRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateReceivedOCMShareRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateReceivedOCMShareRequestValidationError{}

// Validate checks the field values on UpdateReceivedOCMShareResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateReceivedOCMShareResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateReceivedOCMShareResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateReceivedOCMShareResponseMultiError, or nil if none found.
func (m *UpdateReceivedOCMShareResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateReceivedOCMShareResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateReceivedOCMShareResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateReceivedOCMShareResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateReceivedOCMShareResponseValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateReceivedOCMShareResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateReceivedOCMShareResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateReceivedOCMShareResponseValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateReceivedOCMShareResponseMultiError(errors)
	}

	return nil
}

// UpdateReceivedOCMShareResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateReceivedOCMShareResponse.ValidateAll()
// if the designated constraints aren't met.
type UpdateReceivedOCMShareResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateReceivedOCMShareResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateReceivedOCMShareResponseMultiError) AllErrors() []error { return m }

// UpdateReceivedOCMShareResponseValidationError is the validation error
// returned by UpdateReceivedOCMShareResponse.Validate if the designated
// constraints aren't met.
type UpdateReceivedOCMShareResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateReceivedOCMShareResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateReceivedOCMShareResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateReceivedOCMShareResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateReceivedOCMShareResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateReceivedOCMShareResponseValidationError) ErrorName() string {
	return "UpdateReceivedOCMShareResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateReceivedOCMShareResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateReceivedOCMShareResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateReceivedOCMShareResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateReceivedOCMShareResponseValidationError{}

// Validate checks the field values on GetReceivedOCMShareRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetReceivedOCMShareRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetReceivedOCMShareRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetReceivedOCMShareRequestMultiError, or nil if none found.
func (m *GetReceivedOCMShareRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetReceivedOCMShareRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetReceivedOCMShareRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetReceivedOCMShareRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetReceivedOCMShareRequestValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRef()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetReceivedOCMShareRequestValidationError{
					field:  "Ref",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetReceivedOCMShareRequestValidationError{
					field:  "Ref",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRef()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetReceivedOCMShareRequestValidationError{
				field:  "Ref",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetReceivedOCMShareRequestMultiError(errors)
	}

	return nil
}

// GetReceivedOCMShareRequestMultiError is an error wrapping multiple
// validation errors returned by GetReceivedOCMShareRequest.ValidateAll() if
// the designated constraints aren't met.
type GetReceivedOCMShareRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetReceivedOCMShareRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetReceivedOCMShareRequestMultiError) AllErrors() []error { return m }

// GetReceivedOCMShareRequestValidationError is the validation error returned
// by GetReceivedOCMShareRequest.Validate if the designated constraints aren't met.
type GetReceivedOCMShareRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetReceivedOCMShareRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetReceivedOCMShareRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetReceivedOCMShareRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetReceivedOCMShareRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetReceivedOCMShareRequestValidationError) ErrorName() string {
	return "GetReceivedOCMShareRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetReceivedOCMShareRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetReceivedOCMShareRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetReceivedOCMShareRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetReceivedOCMShareRequestValidationError{}

// Validate checks the field values on GetReceivedOCMShareResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetReceivedOCMShareResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetReceivedOCMShareResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetReceivedOCMShareResponseMultiError, or nil if none found.
func (m *GetReceivedOCMShareResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetReceivedOCMShareResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetReceivedOCMShareResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetReceivedOCMShareResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetReceivedOCMShareResponseValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetReceivedOCMShareResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetReceivedOCMShareResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetReceivedOCMShareResponseValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetShare()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetReceivedOCMShareResponseValidationError{
					field:  "Share",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetReceivedOCMShareResponseValidationError{
					field:  "Share",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetShare()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetReceivedOCMShareResponseValidationError{
				field:  "Share",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetReceivedOCMShareResponseMultiError(errors)
	}

	return nil
}

// GetReceivedOCMShareResponseMultiError is an error wrapping multiple
// validation errors returned by GetReceivedOCMShareResponse.ValidateAll() if
// the designated constraints aren't met.
type GetReceivedOCMShareResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetReceivedOCMShareResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetReceivedOCMShareResponseMultiError) AllErrors() []error { return m }

// GetReceivedOCMShareResponseValidationError is the validation error returned
// by GetReceivedOCMShareResponse.Validate if the designated constraints
// aren't met.
type GetReceivedOCMShareResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetReceivedOCMShareResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetReceivedOCMShareResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetReceivedOCMShareResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetReceivedOCMShareResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetReceivedOCMShareResponseValidationError) ErrorName() string {
	return "GetReceivedOCMShareResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetReceivedOCMShareResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetReceivedOCMShareResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetReceivedOCMShareResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetReceivedOCMShareResponseValidationError{}

// Validate checks the field values on UpdateOCMShareRequest_UpdateField with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateOCMShareRequest_UpdateField) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOCMShareRequest_UpdateField
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateOCMShareRequest_UpdateFieldMultiError, or nil if none found.
func (m *UpdateOCMShareRequest_UpdateField) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOCMShareRequest_UpdateField) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Field.(type) {
	case *UpdateOCMShareRequest_UpdateField_Expiration:
		if v == nil {
			err := UpdateOCMShareRequest_UpdateFieldValidationError{
				field:  "Field",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetExpiration()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateOCMShareRequest_UpdateFieldValidationError{
						field:  "Expiration",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateOCMShareRequest_UpdateFieldValidationError{
						field:  "Expiration",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetExpiration()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateOCMShareRequest_UpdateFieldValidationError{
					field:  "Expiration",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *UpdateOCMShareRequest_UpdateField_AccessMethods:
		if v == nil {
			err := UpdateOCMShareRequest_UpdateFieldValidationError{
				field:  "Field",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetAccessMethods()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateOCMShareRequest_UpdateFieldValidationError{
						field:  "AccessMethods",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateOCMShareRequest_UpdateFieldValidationError{
						field:  "AccessMethods",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAccessMethods()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateOCMShareRequest_UpdateFieldValidationError{
					field:  "AccessMethods",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return UpdateOCMShareRequest_UpdateFieldMultiError(errors)
	}

	return nil
}

// UpdateOCMShareRequest_UpdateFieldMultiError is an error wrapping multiple
// validation errors returned by
// UpdateOCMShareRequest_UpdateField.ValidateAll() if the designated
// constraints aren't met.
type UpdateOCMShareRequest_UpdateFieldMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOCMShareRequest_UpdateFieldMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOCMShareRequest_UpdateFieldMultiError) AllErrors() []error { return m }

// UpdateOCMShareRequest_UpdateFieldValidationError is the validation error
// returned by UpdateOCMShareRequest_UpdateField.Validate if the designated
// constraints aren't met.
type UpdateOCMShareRequest_UpdateFieldValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOCMShareRequest_UpdateFieldValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOCMShareRequest_UpdateFieldValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOCMShareRequest_UpdateFieldValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOCMShareRequest_UpdateFieldValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOCMShareRequest_UpdateFieldValidationError) ErrorName() string {
	return "UpdateOCMShareRequest_UpdateFieldValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOCMShareRequest_UpdateFieldValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOCMShareRequest_UpdateField.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOCMShareRequest_UpdateFieldValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOCMShareRequest_UpdateFieldValidationError{}

// Validate checks the field values on ListOCMSharesRequest_Filter with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListOCMSharesRequest_Filter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOCMSharesRequest_Filter with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListOCMSharesRequest_FilterMultiError, or nil if none found.
func (m *ListOCMSharesRequest_Filter) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOCMSharesRequest_Filter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	switch v := m.Term.(type) {
	case *ListOCMSharesRequest_Filter_ResourceId:
		if v == nil {
			err := ListOCMSharesRequest_FilterValidationError{
				field:  "Term",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetResourceId()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListOCMSharesRequest_FilterValidationError{
						field:  "ResourceId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListOCMSharesRequest_FilterValidationError{
						field:  "ResourceId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetResourceId()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOCMSharesRequest_FilterValidationError{
					field:  "ResourceId",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ListOCMSharesRequest_Filter_Owner:
		if v == nil {
			err := ListOCMSharesRequest_FilterValidationError{
				field:  "Term",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetOwner()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListOCMSharesRequest_FilterValidationError{
						field:  "Owner",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListOCMSharesRequest_FilterValidationError{
						field:  "Owner",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetOwner()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOCMSharesRequest_FilterValidationError{
					field:  "Owner",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ListOCMSharesRequest_Filter_Creator:
		if v == nil {
			err := ListOCMSharesRequest_FilterValidationError{
				field:  "Term",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetCreator()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListOCMSharesRequest_FilterValidationError{
						field:  "Creator",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListOCMSharesRequest_FilterValidationError{
						field:  "Creator",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCreator()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOCMSharesRequest_FilterValidationError{
					field:  "Creator",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return ListOCMSharesRequest_FilterMultiError(errors)
	}

	return nil
}

// ListOCMSharesRequest_FilterMultiError is an error wrapping multiple
// validation errors returned by ListOCMSharesRequest_Filter.ValidateAll() if
// the designated constraints aren't met.
type ListOCMSharesRequest_FilterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOCMSharesRequest_FilterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOCMSharesRequest_FilterMultiError) AllErrors() []error { return m }

// ListOCMSharesRequest_FilterValidationError is the validation error returned
// by ListOCMSharesRequest_Filter.Validate if the designated constraints
// aren't met.
type ListOCMSharesRequest_FilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOCMSharesRequest_FilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOCMSharesRequest_FilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOCMSharesRequest_FilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOCMSharesRequest_FilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOCMSharesRequest_FilterValidationError) ErrorName() string {
	return "ListOCMSharesRequest_FilterValidationError"
}

// Error satisfies the builtin error interface
func (e ListOCMSharesRequest_FilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOCMSharesRequest_Filter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOCMSharesRequest_FilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOCMSharesRequest_FilterValidationError{}
