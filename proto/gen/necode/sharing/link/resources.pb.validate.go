// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: necode/sharing/link/resources.proto

package link

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on PublicShare with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PublicShare) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PublicShare with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PublicShareMultiError, or
// nil if none found.
func (m *PublicShare) ValidateAll() error {
	return m.validate(true)
}

func (m *PublicShare) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PublicShareValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PublicShareValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PublicShareValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Token

	if all {
		switch v := interface{}(m.GetResourceId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PublicShareValidationError{
					field:  "ResourceId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PublicShareValidationError{
					field:  "ResourceId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResourceId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PublicShareValidationError{
				field:  "ResourceId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPermissions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PublicShareValidationError{
					field:  "Permissions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PublicShareValidationError{
					field:  "Permissions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPermissions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PublicShareValidationError{
				field:  "Permissions",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOwner()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PublicShareValidationError{
					field:  "Owner",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PublicShareValidationError{
					field:  "Owner",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOwner()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PublicShareValidationError{
				field:  "Owner",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCreator()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PublicShareValidationError{
					field:  "Creator",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PublicShareValidationError{
					field:  "Creator",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreator()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PublicShareValidationError{
				field:  "Creator",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCtime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PublicShareValidationError{
					field:  "Ctime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PublicShareValidationError{
					field:  "Ctime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCtime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PublicShareValidationError{
				field:  "Ctime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMtime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PublicShareValidationError{
					field:  "Mtime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PublicShareValidationError{
					field:  "Mtime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMtime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PublicShareValidationError{
				field:  "Mtime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for PasswordProtected

	if all {
		switch v := interface{}(m.GetExpiration()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PublicShareValidationError{
					field:  "Expiration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PublicShareValidationError{
					field:  "Expiration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpiration()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PublicShareValidationError{
				field:  "Expiration",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DisplayName

	if all {
		switch v := interface{}(m.GetSignature()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PublicShareValidationError{
					field:  "Signature",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PublicShareValidationError{
					field:  "Signature",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSignature()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PublicShareValidationError{
				field:  "Signature",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Quicklink

	// no validation rules for Description

	// no validation rules for NotifyUploads

	// no validation rules for NotifyUploadsExtraRecipients

	if len(errors) > 0 {
		return PublicShareMultiError(errors)
	}

	return nil
}

// PublicShareMultiError is an error wrapping multiple validation errors
// returned by PublicShare.ValidateAll() if the designated constraints aren't met.
type PublicShareMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PublicShareMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PublicShareMultiError) AllErrors() []error { return m }

// PublicShareValidationError is the validation error returned by
// PublicShare.Validate if the designated constraints aren't met.
type PublicShareValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PublicShareValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PublicShareValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PublicShareValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PublicShareValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PublicShareValidationError) ErrorName() string { return "PublicShareValidationError" }

// Error satisfies the builtin error interface
func (e PublicShareValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPublicShare.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PublicShareValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PublicShareValidationError{}

// Validate checks the field values on PublicSharePermissions with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PublicSharePermissions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PublicSharePermissions with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PublicSharePermissionsMultiError, or nil if none found.
func (m *PublicSharePermissions) ValidateAll() error {
	return m.validate(true)
}

func (m *PublicSharePermissions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPermissions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PublicSharePermissionsValidationError{
					field:  "Permissions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PublicSharePermissionsValidationError{
					field:  "Permissions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPermissions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PublicSharePermissionsValidationError{
				field:  "Permissions",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PublicSharePermissionsMultiError(errors)
	}

	return nil
}

// PublicSharePermissionsMultiError is an error wrapping multiple validation
// errors returned by PublicSharePermissions.ValidateAll() if the designated
// constraints aren't met.
type PublicSharePermissionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PublicSharePermissionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PublicSharePermissionsMultiError) AllErrors() []error { return m }

// PublicSharePermissionsValidationError is the validation error returned by
// PublicSharePermissions.Validate if the designated constraints aren't met.
type PublicSharePermissionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PublicSharePermissionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PublicSharePermissionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PublicSharePermissionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PublicSharePermissionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PublicSharePermissionsValidationError) ErrorName() string {
	return "PublicSharePermissionsValidationError"
}

// Error satisfies the builtin error interface
func (e PublicSharePermissionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPublicSharePermissions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PublicSharePermissionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PublicSharePermissionsValidationError{}

// Validate checks the field values on PublicShareId with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PublicShareId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PublicShareId with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PublicShareIdMultiError, or
// nil if none found.
func (m *PublicShareId) ValidateAll() error {
	return m.validate(true)
}

func (m *PublicShareId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OpaqueId

	if len(errors) > 0 {
		return PublicShareIdMultiError(errors)
	}

	return nil
}

// PublicShareIdMultiError is an error wrapping multiple validation errors
// returned by PublicShareId.ValidateAll() if the designated constraints
// aren't met.
type PublicShareIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PublicShareIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PublicShareIdMultiError) AllErrors() []error { return m }

// PublicShareIdValidationError is the validation error returned by
// PublicShareId.Validate if the designated constraints aren't met.
type PublicShareIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PublicShareIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PublicShareIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PublicShareIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PublicShareIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PublicShareIdValidationError) ErrorName() string { return "PublicShareIdValidationError" }

// Error satisfies the builtin error interface
func (e PublicShareIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPublicShareId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PublicShareIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PublicShareIdValidationError{}

// Validate checks the field values on PublicShareReference with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PublicShareReference) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PublicShareReference with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PublicShareReferenceMultiError, or nil if none found.
func (m *PublicShareReference) ValidateAll() error {
	return m.validate(true)
}

func (m *PublicShareReference) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Spec.(type) {
	case *PublicShareReference_Id:
		if v == nil {
			err := PublicShareReferenceValidationError{
				field:  "Spec",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetId()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PublicShareReferenceValidationError{
						field:  "Id",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PublicShareReferenceValidationError{
						field:  "Id",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PublicShareReferenceValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *PublicShareReference_Token:
		if v == nil {
			err := PublicShareReferenceValidationError{
				field:  "Spec",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Token
	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return PublicShareReferenceMultiError(errors)
	}

	return nil
}

// PublicShareReferenceMultiError is an error wrapping multiple validation
// errors returned by PublicShareReference.ValidateAll() if the designated
// constraints aren't met.
type PublicShareReferenceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PublicShareReferenceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PublicShareReferenceMultiError) AllErrors() []error { return m }

// PublicShareReferenceValidationError is the validation error returned by
// PublicShareReference.Validate if the designated constraints aren't met.
type PublicShareReferenceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PublicShareReferenceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PublicShareReferenceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PublicShareReferenceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PublicShareReferenceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PublicShareReferenceValidationError) ErrorName() string {
	return "PublicShareReferenceValidationError"
}

// Error satisfies the builtin error interface
func (e PublicShareReferenceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPublicShareReference.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PublicShareReferenceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PublicShareReferenceValidationError{}

// Validate checks the field values on PublicShareAuthentication with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PublicShareAuthentication) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PublicShareAuthentication with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PublicShareAuthenticationMultiError, or nil if none found.
func (m *PublicShareAuthentication) ValidateAll() error {
	return m.validate(true)
}

func (m *PublicShareAuthentication) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Spec.(type) {
	case *PublicShareAuthentication_Password:
		if v == nil {
			err := PublicShareAuthenticationValidationError{
				field:  "Spec",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Password
	case *PublicShareAuthentication_Signature:
		if v == nil {
			err := PublicShareAuthenticationValidationError{
				field:  "Spec",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetSignature()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PublicShareAuthenticationValidationError{
						field:  "Signature",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PublicShareAuthenticationValidationError{
						field:  "Signature",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSignature()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PublicShareAuthenticationValidationError{
					field:  "Signature",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return PublicShareAuthenticationMultiError(errors)
	}

	return nil
}

// PublicShareAuthenticationMultiError is an error wrapping multiple validation
// errors returned by PublicShareAuthentication.ValidateAll() if the
// designated constraints aren't met.
type PublicShareAuthenticationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PublicShareAuthenticationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PublicShareAuthenticationMultiError) AllErrors() []error { return m }

// PublicShareAuthenticationValidationError is the validation error returned by
// PublicShareAuthentication.Validate if the designated constraints aren't met.
type PublicShareAuthenticationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PublicShareAuthenticationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PublicShareAuthenticationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PublicShareAuthenticationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PublicShareAuthenticationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PublicShareAuthenticationValidationError) ErrorName() string {
	return "PublicShareAuthenticationValidationError"
}

// Error satisfies the builtin error interface
func (e PublicShareAuthenticationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPublicShareAuthentication.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PublicShareAuthenticationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PublicShareAuthenticationValidationError{}

// Validate checks the field values on ShareSignature with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ShareSignature) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShareSignature with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ShareSignatureMultiError,
// or nil if none found.
func (m *ShareSignature) ValidateAll() error {
	return m.validate(true)
}

func (m *ShareSignature) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Signature

	if all {
		switch v := interface{}(m.GetSignatureExpiration()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ShareSignatureValidationError{
					field:  "SignatureExpiration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ShareSignatureValidationError{
					field:  "SignatureExpiration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSignatureExpiration()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ShareSignatureValidationError{
				field:  "SignatureExpiration",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ShareSignatureMultiError(errors)
	}

	return nil
}

// ShareSignatureMultiError is an error wrapping multiple validation errors
// returned by ShareSignature.ValidateAll() if the designated constraints
// aren't met.
type ShareSignatureMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShareSignatureMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShareSignatureMultiError) AllErrors() []error { return m }

// ShareSignatureValidationError is the validation error returned by
// ShareSignature.Validate if the designated constraints aren't met.
type ShareSignatureValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShareSignatureValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShareSignatureValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShareSignatureValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShareSignatureValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShareSignatureValidationError) ErrorName() string { return "ShareSignatureValidationError" }

// Error satisfies the builtin error interface
func (e ShareSignatureValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShareSignature.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShareSignatureValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShareSignatureValidationError{}

// Validate checks the field values on Grant with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Grant) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Grant with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in GrantMultiError, or nil if none found.
func (m *Grant) ValidateAll() error {
	return m.validate(true)
}

func (m *Grant) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPermissions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GrantValidationError{
					field:  "Permissions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GrantValidationError{
					field:  "Permissions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPermissions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GrantValidationError{
				field:  "Permissions",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Password

	if all {
		switch v := interface{}(m.GetExpiration()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GrantValidationError{
					field:  "Expiration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GrantValidationError{
					field:  "Expiration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpiration()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GrantValidationError{
				field:  "Expiration",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GrantMultiError(errors)
	}

	return nil
}

// GrantMultiError is an error wrapping multiple validation errors returned by
// Grant.ValidateAll() if the designated constraints aren't met.
type GrantMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GrantMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GrantMultiError) AllErrors() []error { return m }

// GrantValidationError is the validation error returned by Grant.Validate if
// the designated constraints aren't met.
type GrantValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GrantValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GrantValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GrantValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GrantValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GrantValidationError) ErrorName() string { return "GrantValidationError" }

// Error satisfies the builtin error interface
func (e GrantValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGrant.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GrantValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GrantValidationError{}
