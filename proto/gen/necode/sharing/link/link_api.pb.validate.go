// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: necode/sharing/link/link_api.proto

package link

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreatePublicShareRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePublicShareRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePublicShareRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePublicShareRequestMultiError, or nil if none found.
func (m *CreatePublicShareRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePublicShareRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreatePublicShareRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreatePublicShareRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePublicShareRequestValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetResourceInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreatePublicShareRequestValidationError{
					field:  "ResourceInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreatePublicShareRequestValidationError{
					field:  "ResourceInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResourceInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePublicShareRequestValidationError{
				field:  "ResourceInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetGrant()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreatePublicShareRequestValidationError{
					field:  "Grant",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreatePublicShareRequestValidationError{
					field:  "Grant",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGrant()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePublicShareRequestValidationError{
				field:  "Grant",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Description

	// no validation rules for Internal

	// no validation rules for NotifyUploads

	// no validation rules for NotifyUploadsExtraRecipients

	if len(errors) > 0 {
		return CreatePublicShareRequestMultiError(errors)
	}

	return nil
}

// CreatePublicShareRequestMultiError is an error wrapping multiple validation
// errors returned by CreatePublicShareRequest.ValidateAll() if the designated
// constraints aren't met.
type CreatePublicShareRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePublicShareRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePublicShareRequestMultiError) AllErrors() []error { return m }

// CreatePublicShareRequestValidationError is the validation error returned by
// CreatePublicShareRequest.Validate if the designated constraints aren't met.
type CreatePublicShareRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePublicShareRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePublicShareRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePublicShareRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePublicShareRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePublicShareRequestValidationError) ErrorName() string {
	return "CreatePublicShareRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePublicShareRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePublicShareRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePublicShareRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePublicShareRequestValidationError{}

// Validate checks the field values on CreatePublicShareResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePublicShareResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePublicShareResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePublicShareResponseMultiError, or nil if none found.
func (m *CreatePublicShareResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePublicShareResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreatePublicShareResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreatePublicShareResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePublicShareResponseValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreatePublicShareResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreatePublicShareResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePublicShareResponseValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetShare()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreatePublicShareResponseValidationError{
					field:  "Share",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreatePublicShareResponseValidationError{
					field:  "Share",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetShare()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePublicShareResponseValidationError{
				field:  "Share",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreatePublicShareResponseMultiError(errors)
	}

	return nil
}

// CreatePublicShareResponseMultiError is an error wrapping multiple validation
// errors returned by CreatePublicShareResponse.ValidateAll() if the
// designated constraints aren't met.
type CreatePublicShareResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePublicShareResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePublicShareResponseMultiError) AllErrors() []error { return m }

// CreatePublicShareResponseValidationError is the validation error returned by
// CreatePublicShareResponse.Validate if the designated constraints aren't met.
type CreatePublicShareResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePublicShareResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePublicShareResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePublicShareResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePublicShareResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePublicShareResponseValidationError) ErrorName() string {
	return "CreatePublicShareResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePublicShareResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePublicShareResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePublicShareResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePublicShareResponseValidationError{}

// Validate checks the field values on UpdatePublicShareRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePublicShareRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePublicShareRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePublicShareRequestMultiError, or nil if none found.
func (m *UpdatePublicShareRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePublicShareRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdatePublicShareRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdatePublicShareRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdatePublicShareRequestValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRef()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdatePublicShareRequestValidationError{
					field:  "Ref",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdatePublicShareRequestValidationError{
					field:  "Ref",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRef()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdatePublicShareRequestValidationError{
				field:  "Ref",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdatePublicShareRequestValidationError{
					field:  "Update",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdatePublicShareRequestValidationError{
					field:  "Update",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdatePublicShareRequestValidationError{
				field:  "Update",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdatePublicShareRequestMultiError(errors)
	}

	return nil
}

// UpdatePublicShareRequestMultiError is an error wrapping multiple validation
// errors returned by UpdatePublicShareRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdatePublicShareRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePublicShareRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePublicShareRequestMultiError) AllErrors() []error { return m }

// UpdatePublicShareRequestValidationError is the validation error returned by
// UpdatePublicShareRequest.Validate if the designated constraints aren't met.
type UpdatePublicShareRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePublicShareRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePublicShareRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePublicShareRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePublicShareRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePublicShareRequestValidationError) ErrorName() string {
	return "UpdatePublicShareRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePublicShareRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePublicShareRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePublicShareRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePublicShareRequestValidationError{}

// Validate checks the field values on UpdatePublicShareResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePublicShareResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePublicShareResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePublicShareResponseMultiError, or nil if none found.
func (m *UpdatePublicShareResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePublicShareResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdatePublicShareResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdatePublicShareResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdatePublicShareResponseValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdatePublicShareResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdatePublicShareResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdatePublicShareResponseValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetShare()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdatePublicShareResponseValidationError{
					field:  "Share",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdatePublicShareResponseValidationError{
					field:  "Share",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetShare()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdatePublicShareResponseValidationError{
				field:  "Share",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdatePublicShareResponseMultiError(errors)
	}

	return nil
}

// UpdatePublicShareResponseMultiError is an error wrapping multiple validation
// errors returned by UpdatePublicShareResponse.ValidateAll() if the
// designated constraints aren't met.
type UpdatePublicShareResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePublicShareResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePublicShareResponseMultiError) AllErrors() []error { return m }

// UpdatePublicShareResponseValidationError is the validation error returned by
// UpdatePublicShareResponse.Validate if the designated constraints aren't met.
type UpdatePublicShareResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePublicShareResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePublicShareResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePublicShareResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePublicShareResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePublicShareResponseValidationError) ErrorName() string {
	return "UpdatePublicShareResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePublicShareResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePublicShareResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePublicShareResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePublicShareResponseValidationError{}

// Validate checks the field values on ListPublicSharesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListPublicSharesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPublicSharesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPublicSharesRequestMultiError, or nil if none found.
func (m *ListPublicSharesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPublicSharesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListPublicSharesRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListPublicSharesRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListPublicSharesRequestValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetFilters() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListPublicSharesRequestValidationError{
						field:  fmt.Sprintf("Filters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListPublicSharesRequestValidationError{
						field:  fmt.Sprintf("Filters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListPublicSharesRequestValidationError{
					field:  fmt.Sprintf("Filters[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Sign

	// no validation rules for PageSize

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListPublicSharesRequestMultiError(errors)
	}

	return nil
}

// ListPublicSharesRequestMultiError is an error wrapping multiple validation
// errors returned by ListPublicSharesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListPublicSharesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPublicSharesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPublicSharesRequestMultiError) AllErrors() []error { return m }

// ListPublicSharesRequestValidationError is the validation error returned by
// ListPublicSharesRequest.Validate if the designated constraints aren't met.
type ListPublicSharesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPublicSharesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPublicSharesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPublicSharesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPublicSharesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPublicSharesRequestValidationError) ErrorName() string {
	return "ListPublicSharesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListPublicSharesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPublicSharesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPublicSharesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPublicSharesRequestValidationError{}

// Validate checks the field values on ListPublicSharesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListPublicSharesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPublicSharesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPublicSharesResponseMultiError, or nil if none found.
func (m *ListPublicSharesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPublicSharesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListPublicSharesResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListPublicSharesResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListPublicSharesResponseValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListPublicSharesResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListPublicSharesResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListPublicSharesResponseValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetShare() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListPublicSharesResponseValidationError{
						field:  fmt.Sprintf("Share[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListPublicSharesResponseValidationError{
						field:  fmt.Sprintf("Share[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListPublicSharesResponseValidationError{
					field:  fmt.Sprintf("Share[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListPublicSharesResponseMultiError(errors)
	}

	return nil
}

// ListPublicSharesResponseMultiError is an error wrapping multiple validation
// errors returned by ListPublicSharesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListPublicSharesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPublicSharesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPublicSharesResponseMultiError) AllErrors() []error { return m }

// ListPublicSharesResponseValidationError is the validation error returned by
// ListPublicSharesResponse.Validate if the designated constraints aren't met.
type ListPublicSharesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPublicSharesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPublicSharesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPublicSharesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPublicSharesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPublicSharesResponseValidationError) ErrorName() string {
	return "ListPublicSharesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListPublicSharesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPublicSharesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPublicSharesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPublicSharesResponseValidationError{}

// Validate checks the field values on RemovePublicShareRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemovePublicShareRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemovePublicShareRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemovePublicShareRequestMultiError, or nil if none found.
func (m *RemovePublicShareRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemovePublicShareRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RemovePublicShareRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RemovePublicShareRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RemovePublicShareRequestValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRef()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RemovePublicShareRequestValidationError{
					field:  "Ref",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RemovePublicShareRequestValidationError{
					field:  "Ref",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRef()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RemovePublicShareRequestValidationError{
				field:  "Ref",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RemovePublicShareRequestMultiError(errors)
	}

	return nil
}

// RemovePublicShareRequestMultiError is an error wrapping multiple validation
// errors returned by RemovePublicShareRequest.ValidateAll() if the designated
// constraints aren't met.
type RemovePublicShareRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemovePublicShareRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemovePublicShareRequestMultiError) AllErrors() []error { return m }

// RemovePublicShareRequestValidationError is the validation error returned by
// RemovePublicShareRequest.Validate if the designated constraints aren't met.
type RemovePublicShareRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemovePublicShareRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemovePublicShareRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemovePublicShareRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemovePublicShareRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemovePublicShareRequestValidationError) ErrorName() string {
	return "RemovePublicShareRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemovePublicShareRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemovePublicShareRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemovePublicShareRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemovePublicShareRequestValidationError{}

// Validate checks the field values on RemovePublicShareResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemovePublicShareResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemovePublicShareResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemovePublicShareResponseMultiError, or nil if none found.
func (m *RemovePublicShareResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RemovePublicShareResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RemovePublicShareResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RemovePublicShareResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RemovePublicShareResponseValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RemovePublicShareResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RemovePublicShareResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RemovePublicShareResponseValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RemovePublicShareResponseMultiError(errors)
	}

	return nil
}

// RemovePublicShareResponseMultiError is an error wrapping multiple validation
// errors returned by RemovePublicShareResponse.ValidateAll() if the
// designated constraints aren't met.
type RemovePublicShareResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemovePublicShareResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemovePublicShareResponseMultiError) AllErrors() []error { return m }

// RemovePublicShareResponseValidationError is the validation error returned by
// RemovePublicShareResponse.Validate if the designated constraints aren't met.
type RemovePublicShareResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemovePublicShareResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemovePublicShareResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemovePublicShareResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemovePublicShareResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemovePublicShareResponseValidationError) ErrorName() string {
	return "RemovePublicShareResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemovePublicShareResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemovePublicShareResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemovePublicShareResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemovePublicShareResponseValidationError{}

// Validate checks the field values on GetPublicShareRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPublicShareRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPublicShareRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPublicShareRequestMultiError, or nil if none found.
func (m *GetPublicShareRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPublicShareRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPublicShareRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPublicShareRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPublicShareRequestValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRef()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPublicShareRequestValidationError{
					field:  "Ref",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPublicShareRequestValidationError{
					field:  "Ref",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRef()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPublicShareRequestValidationError{
				field:  "Ref",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Sign

	if len(errors) > 0 {
		return GetPublicShareRequestMultiError(errors)
	}

	return nil
}

// GetPublicShareRequestMultiError is an error wrapping multiple validation
// errors returned by GetPublicShareRequest.ValidateAll() if the designated
// constraints aren't met.
type GetPublicShareRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPublicShareRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPublicShareRequestMultiError) AllErrors() []error { return m }

// GetPublicShareRequestValidationError is the validation error returned by
// GetPublicShareRequest.Validate if the designated constraints aren't met.
type GetPublicShareRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPublicShareRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPublicShareRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPublicShareRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPublicShareRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPublicShareRequestValidationError) ErrorName() string {
	return "GetPublicShareRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPublicShareRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPublicShareRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPublicShareRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPublicShareRequestValidationError{}

// Validate checks the field values on GetPublicShareResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPublicShareResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPublicShareResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPublicShareResponseMultiError, or nil if none found.
func (m *GetPublicShareResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPublicShareResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPublicShareResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPublicShareResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPublicShareResponseValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPublicShareResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPublicShareResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPublicShareResponseValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetShare()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPublicShareResponseValidationError{
					field:  "Share",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPublicShareResponseValidationError{
					field:  "Share",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetShare()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPublicShareResponseValidationError{
				field:  "Share",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetPublicShareResponseMultiError(errors)
	}

	return nil
}

// GetPublicShareResponseMultiError is an error wrapping multiple validation
// errors returned by GetPublicShareResponse.ValidateAll() if the designated
// constraints aren't met.
type GetPublicShareResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPublicShareResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPublicShareResponseMultiError) AllErrors() []error { return m }

// GetPublicShareResponseValidationError is the validation error returned by
// GetPublicShareResponse.Validate if the designated constraints aren't met.
type GetPublicShareResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPublicShareResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPublicShareResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPublicShareResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPublicShareResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPublicShareResponseValidationError) ErrorName() string {
	return "GetPublicShareResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPublicShareResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPublicShareResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPublicShareResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPublicShareResponseValidationError{}

// Validate checks the field values on GetPublicShareByTokenRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPublicShareByTokenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPublicShareByTokenRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPublicShareByTokenRequestMultiError, or nil if none found.
func (m *GetPublicShareByTokenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPublicShareByTokenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPublicShareByTokenRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPublicShareByTokenRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPublicShareByTokenRequestValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Token

	if all {
		switch v := interface{}(m.GetAuthentication()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPublicShareByTokenRequestValidationError{
					field:  "Authentication",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPublicShareByTokenRequestValidationError{
					field:  "Authentication",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAuthentication()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPublicShareByTokenRequestValidationError{
				field:  "Authentication",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Sign

	if len(errors) > 0 {
		return GetPublicShareByTokenRequestMultiError(errors)
	}

	return nil
}

// GetPublicShareByTokenRequestMultiError is an error wrapping multiple
// validation errors returned by GetPublicShareByTokenRequest.ValidateAll() if
// the designated constraints aren't met.
type GetPublicShareByTokenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPublicShareByTokenRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPublicShareByTokenRequestMultiError) AllErrors() []error { return m }

// GetPublicShareByTokenRequestValidationError is the validation error returned
// by GetPublicShareByTokenRequest.Validate if the designated constraints
// aren't met.
type GetPublicShareByTokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPublicShareByTokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPublicShareByTokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPublicShareByTokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPublicShareByTokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPublicShareByTokenRequestValidationError) ErrorName() string {
	return "GetPublicShareByTokenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPublicShareByTokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPublicShareByTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPublicShareByTokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPublicShareByTokenRequestValidationError{}

// Validate checks the field values on GetPublicShareByTokenResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPublicShareByTokenResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPublicShareByTokenResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetPublicShareByTokenResponseMultiError, or nil if none found.
func (m *GetPublicShareByTokenResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPublicShareByTokenResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPublicShareByTokenResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPublicShareByTokenResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPublicShareByTokenResponseValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPublicShareByTokenResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPublicShareByTokenResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPublicShareByTokenResponseValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetShare()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPublicShareByTokenResponseValidationError{
					field:  "Share",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPublicShareByTokenResponseValidationError{
					field:  "Share",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetShare()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPublicShareByTokenResponseValidationError{
				field:  "Share",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for PasswordHash

	if len(errors) > 0 {
		return GetPublicShareByTokenResponseMultiError(errors)
	}

	return nil
}

// GetPublicShareByTokenResponseMultiError is an error wrapping multiple
// validation errors returned by GetPublicShareByTokenResponse.ValidateAll()
// if the designated constraints aren't met.
type GetPublicShareByTokenResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPublicShareByTokenResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPublicShareByTokenResponseMultiError) AllErrors() []error { return m }

// GetPublicShareByTokenResponseValidationError is the validation error
// returned by GetPublicShareByTokenResponse.Validate if the designated
// constraints aren't met.
type GetPublicShareByTokenResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPublicShareByTokenResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPublicShareByTokenResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPublicShareByTokenResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPublicShareByTokenResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPublicShareByTokenResponseValidationError) ErrorName() string {
	return "GetPublicShareByTokenResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPublicShareByTokenResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPublicShareByTokenResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPublicShareByTokenResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPublicShareByTokenResponseValidationError{}

// Validate checks the field values on UpdatePublicShareRequest_Update with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePublicShareRequest_Update) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePublicShareRequest_Update with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdatePublicShareRequest_UpdateMultiError, or nil if none found.
func (m *UpdatePublicShareRequest_Update) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePublicShareRequest_Update) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	if all {
		switch v := interface{}(m.GetGrant()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdatePublicShareRequest_UpdateValidationError{
					field:  "Grant",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdatePublicShareRequest_UpdateValidationError{
					field:  "Grant",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGrant()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdatePublicShareRequest_UpdateValidationError{
				field:  "Grant",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DisplayName

	// no validation rules for Description

	// no validation rules for NotifyUploads

	// no validation rules for NotifyUploadsExtraRecipients

	if len(errors) > 0 {
		return UpdatePublicShareRequest_UpdateMultiError(errors)
	}

	return nil
}

// UpdatePublicShareRequest_UpdateMultiError is an error wrapping multiple
// validation errors returned by UpdatePublicShareRequest_Update.ValidateAll()
// if the designated constraints aren't met.
type UpdatePublicShareRequest_UpdateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePublicShareRequest_UpdateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePublicShareRequest_UpdateMultiError) AllErrors() []error { return m }

// UpdatePublicShareRequest_UpdateValidationError is the validation error
// returned by UpdatePublicShareRequest_Update.Validate if the designated
// constraints aren't met.
type UpdatePublicShareRequest_UpdateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePublicShareRequest_UpdateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePublicShareRequest_UpdateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePublicShareRequest_UpdateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePublicShareRequest_UpdateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePublicShareRequest_UpdateValidationError) ErrorName() string {
	return "UpdatePublicShareRequest_UpdateValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePublicShareRequest_UpdateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePublicShareRequest_Update.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePublicShareRequest_UpdateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePublicShareRequest_UpdateValidationError{}

// Validate checks the field values on ListPublicSharesRequest_Filter with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListPublicSharesRequest_Filter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPublicSharesRequest_Filter with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListPublicSharesRequest_FilterMultiError, or nil if none found.
func (m *ListPublicSharesRequest_Filter) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPublicSharesRequest_Filter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	switch v := m.Term.(type) {
	case *ListPublicSharesRequest_Filter_ResourceId:
		if v == nil {
			err := ListPublicSharesRequest_FilterValidationError{
				field:  "Term",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetResourceId()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListPublicSharesRequest_FilterValidationError{
						field:  "ResourceId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListPublicSharesRequest_FilterValidationError{
						field:  "ResourceId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetResourceId()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListPublicSharesRequest_FilterValidationError{
					field:  "ResourceId",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ListPublicSharesRequest_Filter_Owner:
		if v == nil {
			err := ListPublicSharesRequest_FilterValidationError{
				field:  "Term",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetOwner()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListPublicSharesRequest_FilterValidationError{
						field:  "Owner",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListPublicSharesRequest_FilterValidationError{
						field:  "Owner",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetOwner()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListPublicSharesRequest_FilterValidationError{
					field:  "Owner",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ListPublicSharesRequest_Filter_Creator:
		if v == nil {
			err := ListPublicSharesRequest_FilterValidationError{
				field:  "Term",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetCreator()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListPublicSharesRequest_FilterValidationError{
						field:  "Creator",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListPublicSharesRequest_FilterValidationError{
						field:  "Creator",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCreator()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListPublicSharesRequest_FilterValidationError{
					field:  "Creator",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return ListPublicSharesRequest_FilterMultiError(errors)
	}

	return nil
}

// ListPublicSharesRequest_FilterMultiError is an error wrapping multiple
// validation errors returned by ListPublicSharesRequest_Filter.ValidateAll()
// if the designated constraints aren't met.
type ListPublicSharesRequest_FilterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPublicSharesRequest_FilterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPublicSharesRequest_FilterMultiError) AllErrors() []error { return m }

// ListPublicSharesRequest_FilterValidationError is the validation error
// returned by ListPublicSharesRequest_Filter.Validate if the designated
// constraints aren't met.
type ListPublicSharesRequest_FilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPublicSharesRequest_FilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPublicSharesRequest_FilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPublicSharesRequest_FilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPublicSharesRequest_FilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPublicSharesRequest_FilterValidationError) ErrorName() string {
	return "ListPublicSharesRequest_FilterValidationError"
}

// Error satisfies the builtin error interface
func (e ListPublicSharesRequest_FilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPublicSharesRequest_Filter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPublicSharesRequest_FilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPublicSharesRequest_FilterValidationError{}
