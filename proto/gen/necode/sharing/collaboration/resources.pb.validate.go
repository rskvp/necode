// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: necode/sharing/collaboration/resources.proto

package collaboration

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	provider "github.com/rskvp/necode/proto/gen/necode/storage/provider"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = provider.GranteeType(0)
)

// Validate checks the field values on Share with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Share) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Share with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ShareMultiError, or nil if none found.
func (m *Share) ValidateAll() error {
	return m.validate(true)
}

func (m *Share) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ShareValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ShareValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ShareValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetResourceId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ShareValidationError{
					field:  "ResourceId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ShareValidationError{
					field:  "ResourceId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResourceId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ShareValidationError{
				field:  "ResourceId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPermissions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ShareValidationError{
					field:  "Permissions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ShareValidationError{
					field:  "Permissions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPermissions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ShareValidationError{
				field:  "Permissions",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetGrantee()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ShareValidationError{
					field:  "Grantee",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ShareValidationError{
					field:  "Grantee",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGrantee()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ShareValidationError{
				field:  "Grantee",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOwner()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ShareValidationError{
					field:  "Owner",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ShareValidationError{
					field:  "Owner",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOwner()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ShareValidationError{
				field:  "Owner",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCreator()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ShareValidationError{
					field:  "Creator",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ShareValidationError{
					field:  "Creator",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreator()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ShareValidationError{
				field:  "Creator",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCtime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ShareValidationError{
					field:  "Ctime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ShareValidationError{
					field:  "Ctime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCtime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ShareValidationError{
				field:  "Ctime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMtime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ShareValidationError{
					field:  "Mtime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ShareValidationError{
					field:  "Mtime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMtime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ShareValidationError{
				field:  "Mtime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetExpiration()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ShareValidationError{
					field:  "Expiration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ShareValidationError{
					field:  "Expiration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpiration()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ShareValidationError{
				field:  "Expiration",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ShareMultiError(errors)
	}

	return nil
}

// ShareMultiError is an error wrapping multiple validation errors returned by
// Share.ValidateAll() if the designated constraints aren't met.
type ShareMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShareMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShareMultiError) AllErrors() []error { return m }

// ShareValidationError is the validation error returned by Share.Validate if
// the designated constraints aren't met.
type ShareValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShareValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShareValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShareValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShareValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShareValidationError) ErrorName() string { return "ShareValidationError" }

// Error satisfies the builtin error interface
func (e ShareValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShare.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShareValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShareValidationError{}

// Validate checks the field values on SharePermissions with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SharePermissions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SharePermissions with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SharePermissionsMultiError, or nil if none found.
func (m *SharePermissions) ValidateAll() error {
	return m.validate(true)
}

func (m *SharePermissions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPermissions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SharePermissionsValidationError{
					field:  "Permissions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SharePermissionsValidationError{
					field:  "Permissions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPermissions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SharePermissionsValidationError{
				field:  "Permissions",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SharePermissionsMultiError(errors)
	}

	return nil
}

// SharePermissionsMultiError is an error wrapping multiple validation errors
// returned by SharePermissions.ValidateAll() if the designated constraints
// aren't met.
type SharePermissionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SharePermissionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SharePermissionsMultiError) AllErrors() []error { return m }

// SharePermissionsValidationError is the validation error returned by
// SharePermissions.Validate if the designated constraints aren't met.
type SharePermissionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SharePermissionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SharePermissionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SharePermissionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SharePermissionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SharePermissionsValidationError) ErrorName() string { return "SharePermissionsValidationError" }

// Error satisfies the builtin error interface
func (e SharePermissionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSharePermissions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SharePermissionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SharePermissionsValidationError{}

// Validate checks the field values on ReceivedShare with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ReceivedShare) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReceivedShare with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ReceivedShareMultiError, or
// nil if none found.
func (m *ReceivedShare) ValidateAll() error {
	return m.validate(true)
}

func (m *ReceivedShare) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetShare()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReceivedShareValidationError{
					field:  "Share",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReceivedShareValidationError{
					field:  "Share",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetShare()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReceivedShareValidationError{
				field:  "Share",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for State

	if all {
		switch v := interface{}(m.GetMountPoint()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReceivedShareValidationError{
					field:  "MountPoint",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReceivedShareValidationError{
					field:  "MountPoint",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMountPoint()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReceivedShareValidationError{
				field:  "MountPoint",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ReceivedShareMultiError(errors)
	}

	return nil
}

// ReceivedShareMultiError is an error wrapping multiple validation errors
// returned by ReceivedShare.ValidateAll() if the designated constraints
// aren't met.
type ReceivedShareMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReceivedShareMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReceivedShareMultiError) AllErrors() []error { return m }

// ReceivedShareValidationError is the validation error returned by
// ReceivedShare.Validate if the designated constraints aren't met.
type ReceivedShareValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReceivedShareValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReceivedShareValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReceivedShareValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReceivedShareValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReceivedShareValidationError) ErrorName() string { return "ReceivedShareValidationError" }

// Error satisfies the builtin error interface
func (e ReceivedShareValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReceivedShare.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReceivedShareValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReceivedShareValidationError{}

// Validate checks the field values on ShareKey with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ShareKey) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShareKey with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ShareKeyMultiError, or nil
// if none found.
func (m *ShareKey) ValidateAll() error {
	return m.validate(true)
}

func (m *ShareKey) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOwner()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ShareKeyValidationError{
					field:  "Owner",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ShareKeyValidationError{
					field:  "Owner",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOwner()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ShareKeyValidationError{
				field:  "Owner",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetResourceId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ShareKeyValidationError{
					field:  "ResourceId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ShareKeyValidationError{
					field:  "ResourceId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResourceId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ShareKeyValidationError{
				field:  "ResourceId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetGrantee()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ShareKeyValidationError{
					field:  "Grantee",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ShareKeyValidationError{
					field:  "Grantee",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGrantee()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ShareKeyValidationError{
				field:  "Grantee",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ShareKeyMultiError(errors)
	}

	return nil
}

// ShareKeyMultiError is an error wrapping multiple validation errors returned
// by ShareKey.ValidateAll() if the designated constraints aren't met.
type ShareKeyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShareKeyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShareKeyMultiError) AllErrors() []error { return m }

// ShareKeyValidationError is the validation error returned by
// ShareKey.Validate if the designated constraints aren't met.
type ShareKeyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShareKeyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShareKeyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShareKeyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShareKeyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShareKeyValidationError) ErrorName() string { return "ShareKeyValidationError" }

// Error satisfies the builtin error interface
func (e ShareKeyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShareKey.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShareKeyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShareKeyValidationError{}

// Validate checks the field values on ShareId with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ShareId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShareId with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ShareIdMultiError, or nil if none found.
func (m *ShareId) ValidateAll() error {
	return m.validate(true)
}

func (m *ShareId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OpaqueId

	if len(errors) > 0 {
		return ShareIdMultiError(errors)
	}

	return nil
}

// ShareIdMultiError is an error wrapping multiple validation errors returned
// by ShareId.ValidateAll() if the designated constraints aren't met.
type ShareIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShareIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShareIdMultiError) AllErrors() []error { return m }

// ShareIdValidationError is the validation error returned by ShareId.Validate
// if the designated constraints aren't met.
type ShareIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShareIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShareIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShareIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShareIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShareIdValidationError) ErrorName() string { return "ShareIdValidationError" }

// Error satisfies the builtin error interface
func (e ShareIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShareId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShareIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShareIdValidationError{}

// Validate checks the field values on ShareReference with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ShareReference) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShareReference with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ShareReferenceMultiError,
// or nil if none found.
func (m *ShareReference) ValidateAll() error {
	return m.validate(true)
}

func (m *ShareReference) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Spec.(type) {
	case *ShareReference_Id:
		if v == nil {
			err := ShareReferenceValidationError{
				field:  "Spec",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetId()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ShareReferenceValidationError{
						field:  "Id",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ShareReferenceValidationError{
						field:  "Id",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ShareReferenceValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ShareReference_Key:
		if v == nil {
			err := ShareReferenceValidationError{
				field:  "Spec",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetKey()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ShareReferenceValidationError{
						field:  "Key",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ShareReferenceValidationError{
						field:  "Key",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetKey()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ShareReferenceValidationError{
					field:  "Key",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return ShareReferenceMultiError(errors)
	}

	return nil
}

// ShareReferenceMultiError is an error wrapping multiple validation errors
// returned by ShareReference.ValidateAll() if the designated constraints
// aren't met.
type ShareReferenceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShareReferenceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShareReferenceMultiError) AllErrors() []error { return m }

// ShareReferenceValidationError is the validation error returned by
// ShareReference.Validate if the designated constraints aren't met.
type ShareReferenceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShareReferenceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShareReferenceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShareReferenceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShareReferenceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShareReferenceValidationError) ErrorName() string { return "ShareReferenceValidationError" }

// Error satisfies the builtin error interface
func (e ShareReferenceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShareReference.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShareReferenceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShareReferenceValidationError{}

// Validate checks the field values on ShareGrant with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ShareGrant) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShareGrant with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ShareGrantMultiError, or
// nil if none found.
func (m *ShareGrant) ValidateAll() error {
	return m.validate(true)
}

func (m *ShareGrant) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGrantee()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ShareGrantValidationError{
					field:  "Grantee",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ShareGrantValidationError{
					field:  "Grantee",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGrantee()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ShareGrantValidationError{
				field:  "Grantee",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPermissions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ShareGrantValidationError{
					field:  "Permissions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ShareGrantValidationError{
					field:  "Permissions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPermissions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ShareGrantValidationError{
				field:  "Permissions",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetExpiration()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ShareGrantValidationError{
					field:  "Expiration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ShareGrantValidationError{
					field:  "Expiration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpiration()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ShareGrantValidationError{
				field:  "Expiration",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ShareGrantMultiError(errors)
	}

	return nil
}

// ShareGrantMultiError is an error wrapping multiple validation errors
// returned by ShareGrant.ValidateAll() if the designated constraints aren't met.
type ShareGrantMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShareGrantMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShareGrantMultiError) AllErrors() []error { return m }

// ShareGrantValidationError is the validation error returned by
// ShareGrant.Validate if the designated constraints aren't met.
type ShareGrantValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShareGrantValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShareGrantValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShareGrantValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShareGrantValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShareGrantValidationError) ErrorName() string { return "ShareGrantValidationError" }

// Error satisfies the builtin error interface
func (e ShareGrantValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShareGrant.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShareGrantValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShareGrantValidationError{}

// Validate checks the field values on Filter with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Filter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Filter with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in FilterMultiError, or nil if none found.
func (m *Filter) ValidateAll() error {
	return m.validate(true)
}

func (m *Filter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	switch v := m.Term.(type) {
	case *Filter_ResourceId:
		if v == nil {
			err := FilterValidationError{
				field:  "Term",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetResourceId()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FilterValidationError{
						field:  "ResourceId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FilterValidationError{
						field:  "ResourceId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetResourceId()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FilterValidationError{
					field:  "ResourceId",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Filter_Owner:
		if v == nil {
			err := FilterValidationError{
				field:  "Term",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetOwner()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FilterValidationError{
						field:  "Owner",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FilterValidationError{
						field:  "Owner",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetOwner()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FilterValidationError{
					field:  "Owner",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Filter_Creator:
		if v == nil {
			err := FilterValidationError{
				field:  "Term",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetCreator()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FilterValidationError{
						field:  "Creator",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FilterValidationError{
						field:  "Creator",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCreator()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FilterValidationError{
					field:  "Creator",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Filter_GranteeType:
		if v == nil {
			err := FilterValidationError{
				field:  "Term",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for GranteeType
	case *Filter_SpaceId:
		if v == nil {
			err := FilterValidationError{
				field:  "Term",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for SpaceId
	case *Filter_State:
		if v == nil {
			err := FilterValidationError{
				field:  "Term",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for State
	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return FilterMultiError(errors)
	}

	return nil
}

// FilterMultiError is an error wrapping multiple validation errors returned by
// Filter.ValidateAll() if the designated constraints aren't met.
type FilterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FilterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FilterMultiError) AllErrors() []error { return m }

// FilterValidationError is the validation error returned by Filter.Validate if
// the designated constraints aren't met.
type FilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FilterValidationError) ErrorName() string { return "FilterValidationError" }

// Error satisfies the builtin error interface
func (e FilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FilterValidationError{}
