// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: necode/sharing/collaboration/collaboration_api.proto

package collaboration

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateShareRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateShareRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateShareRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateShareRequestMultiError, or nil if none found.
func (m *CreateShareRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateShareRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateShareRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateShareRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateShareRequestValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetResourceInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateShareRequestValidationError{
					field:  "ResourceInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateShareRequestValidationError{
					field:  "ResourceInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResourceInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateShareRequestValidationError{
				field:  "ResourceInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetGrant()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateShareRequestValidationError{
					field:  "Grant",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateShareRequestValidationError{
					field:  "Grant",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGrant()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateShareRequestValidationError{
				field:  "Grant",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateShareRequestMultiError(errors)
	}

	return nil
}

// CreateShareRequestMultiError is an error wrapping multiple validation errors
// returned by CreateShareRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateShareRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateShareRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateShareRequestMultiError) AllErrors() []error { return m }

// CreateShareRequestValidationError is the validation error returned by
// CreateShareRequest.Validate if the designated constraints aren't met.
type CreateShareRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateShareRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateShareRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateShareRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateShareRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateShareRequestValidationError) ErrorName() string {
	return "CreateShareRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateShareRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateShareRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateShareRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateShareRequestValidationError{}

// Validate checks the field values on CreateShareResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateShareResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateShareResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateShareResponseMultiError, or nil if none found.
func (m *CreateShareResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateShareResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateShareResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateShareResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateShareResponseValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateShareResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateShareResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateShareResponseValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetShare()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateShareResponseValidationError{
					field:  "Share",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateShareResponseValidationError{
					field:  "Share",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetShare()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateShareResponseValidationError{
				field:  "Share",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateShareResponseMultiError(errors)
	}

	return nil
}

// CreateShareResponseMultiError is an error wrapping multiple validation
// errors returned by CreateShareResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateShareResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateShareResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateShareResponseMultiError) AllErrors() []error { return m }

// CreateShareResponseValidationError is the validation error returned by
// CreateShareResponse.Validate if the designated constraints aren't met.
type CreateShareResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateShareResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateShareResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateShareResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateShareResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateShareResponseValidationError) ErrorName() string {
	return "CreateShareResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateShareResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateShareResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateShareResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateShareResponseValidationError{}

// Validate checks the field values on UpdateShareRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateShareRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateShareRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateShareRequestMultiError, or nil if none found.
func (m *UpdateShareRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateShareRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateShareRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateShareRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateShareRequestValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRef()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateShareRequestValidationError{
					field:  "Ref",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateShareRequestValidationError{
					field:  "Ref",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRef()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateShareRequestValidationError{
				field:  "Ref",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetField()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateShareRequestValidationError{
					field:  "Field",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateShareRequestValidationError{
					field:  "Field",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetField()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateShareRequestValidationError{
				field:  "Field",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateMask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateShareRequestValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateShareRequestValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateShareRequestValidationError{
				field:  "UpdateMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetShare()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateShareRequestValidationError{
					field:  "Share",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateShareRequestValidationError{
					field:  "Share",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetShare()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateShareRequestValidationError{
				field:  "Share",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateShareRequestMultiError(errors)
	}

	return nil
}

// UpdateShareRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateShareRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateShareRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateShareRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateShareRequestMultiError) AllErrors() []error { return m }

// UpdateShareRequestValidationError is the validation error returned by
// UpdateShareRequest.Validate if the designated constraints aren't met.
type UpdateShareRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateShareRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateShareRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateShareRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateShareRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateShareRequestValidationError) ErrorName() string {
	return "UpdateShareRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateShareRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateShareRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateShareRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateShareRequestValidationError{}

// Validate checks the field values on UpdateShareResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateShareResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateShareResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateShareResponseMultiError, or nil if none found.
func (m *UpdateShareResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateShareResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateShareResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateShareResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateShareResponseValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateShareResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateShareResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateShareResponseValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetShare()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateShareResponseValidationError{
					field:  "Share",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateShareResponseValidationError{
					field:  "Share",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetShare()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateShareResponseValidationError{
				field:  "Share",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateShareResponseMultiError(errors)
	}

	return nil
}

// UpdateShareResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateShareResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateShareResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateShareResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateShareResponseMultiError) AllErrors() []error { return m }

// UpdateShareResponseValidationError is the validation error returned by
// UpdateShareResponse.Validate if the designated constraints aren't met.
type UpdateShareResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateShareResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateShareResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateShareResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateShareResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateShareResponseValidationError) ErrorName() string {
	return "UpdateShareResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateShareResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateShareResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateShareResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateShareResponseValidationError{}

// Validate checks the field values on ListSharesRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListSharesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSharesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSharesRequestMultiError, or nil if none found.
func (m *ListSharesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSharesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListSharesRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListSharesRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListSharesRequestValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetFilters() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListSharesRequestValidationError{
						field:  fmt.Sprintf("Filters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListSharesRequestValidationError{
						field:  fmt.Sprintf("Filters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListSharesRequestValidationError{
					field:  fmt.Sprintf("Filters[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for PageSize

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListSharesRequestMultiError(errors)
	}

	return nil
}

// ListSharesRequestMultiError is an error wrapping multiple validation errors
// returned by ListSharesRequest.ValidateAll() if the designated constraints
// aren't met.
type ListSharesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSharesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSharesRequestMultiError) AllErrors() []error { return m }

// ListSharesRequestValidationError is the validation error returned by
// ListSharesRequest.Validate if the designated constraints aren't met.
type ListSharesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSharesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSharesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSharesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSharesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSharesRequestValidationError) ErrorName() string {
	return "ListSharesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListSharesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSharesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSharesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSharesRequestValidationError{}

// Validate checks the field values on ListSharesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSharesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSharesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSharesResponseMultiError, or nil if none found.
func (m *ListSharesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSharesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListSharesResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListSharesResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListSharesResponseValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListSharesResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListSharesResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListSharesResponseValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetShares() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListSharesResponseValidationError{
						field:  fmt.Sprintf("Shares[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListSharesResponseValidationError{
						field:  fmt.Sprintf("Shares[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListSharesResponseValidationError{
					field:  fmt.Sprintf("Shares[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListSharesResponseMultiError(errors)
	}

	return nil
}

// ListSharesResponseMultiError is an error wrapping multiple validation errors
// returned by ListSharesResponse.ValidateAll() if the designated constraints
// aren't met.
type ListSharesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSharesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSharesResponseMultiError) AllErrors() []error { return m }

// ListSharesResponseValidationError is the validation error returned by
// ListSharesResponse.Validate if the designated constraints aren't met.
type ListSharesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSharesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSharesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSharesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSharesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSharesResponseValidationError) ErrorName() string {
	return "ListSharesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListSharesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSharesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSharesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSharesResponseValidationError{}

// Validate checks the field values on RemoveShareRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveShareRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveShareRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveShareRequestMultiError, or nil if none found.
func (m *RemoveShareRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveShareRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RemoveShareRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RemoveShareRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RemoveShareRequestValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRef()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RemoveShareRequestValidationError{
					field:  "Ref",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RemoveShareRequestValidationError{
					field:  "Ref",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRef()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RemoveShareRequestValidationError{
				field:  "Ref",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RemoveShareRequestMultiError(errors)
	}

	return nil
}

// RemoveShareRequestMultiError is an error wrapping multiple validation errors
// returned by RemoveShareRequest.ValidateAll() if the designated constraints
// aren't met.
type RemoveShareRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveShareRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveShareRequestMultiError) AllErrors() []error { return m }

// RemoveShareRequestValidationError is the validation error returned by
// RemoveShareRequest.Validate if the designated constraints aren't met.
type RemoveShareRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveShareRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveShareRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveShareRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveShareRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveShareRequestValidationError) ErrorName() string {
	return "RemoveShareRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveShareRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveShareRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveShareRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveShareRequestValidationError{}

// Validate checks the field values on RemoveShareResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveShareResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveShareResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveShareResponseMultiError, or nil if none found.
func (m *RemoveShareResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveShareResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RemoveShareResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RemoveShareResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RemoveShareResponseValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RemoveShareResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RemoveShareResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RemoveShareResponseValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RemoveShareResponseMultiError(errors)
	}

	return nil
}

// RemoveShareResponseMultiError is an error wrapping multiple validation
// errors returned by RemoveShareResponse.ValidateAll() if the designated
// constraints aren't met.
type RemoveShareResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveShareResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveShareResponseMultiError) AllErrors() []error { return m }

// RemoveShareResponseValidationError is the validation error returned by
// RemoveShareResponse.Validate if the designated constraints aren't met.
type RemoveShareResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveShareResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveShareResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveShareResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveShareResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveShareResponseValidationError) ErrorName() string {
	return "RemoveShareResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveShareResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveShareResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveShareResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveShareResponseValidationError{}

// Validate checks the field values on GetShareRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetShareRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetShareRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetShareRequestMultiError, or nil if none found.
func (m *GetShareRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetShareRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetShareRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetShareRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetShareRequestValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRef()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetShareRequestValidationError{
					field:  "Ref",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetShareRequestValidationError{
					field:  "Ref",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRef()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetShareRequestValidationError{
				field:  "Ref",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetShareRequestMultiError(errors)
	}

	return nil
}

// GetShareRequestMultiError is an error wrapping multiple validation errors
// returned by GetShareRequest.ValidateAll() if the designated constraints
// aren't met.
type GetShareRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetShareRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetShareRequestMultiError) AllErrors() []error { return m }

// GetShareRequestValidationError is the validation error returned by
// GetShareRequest.Validate if the designated constraints aren't met.
type GetShareRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetShareRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetShareRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetShareRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetShareRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetShareRequestValidationError) ErrorName() string { return "GetShareRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetShareRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetShareRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetShareRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetShareRequestValidationError{}

// Validate checks the field values on GetShareResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetShareResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetShareResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetShareResponseMultiError, or nil if none found.
func (m *GetShareResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetShareResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetShareResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetShareResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetShareResponseValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetShareResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetShareResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetShareResponseValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetShare()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetShareResponseValidationError{
					field:  "Share",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetShareResponseValidationError{
					field:  "Share",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetShare()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetShareResponseValidationError{
				field:  "Share",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetShareResponseMultiError(errors)
	}

	return nil
}

// GetShareResponseMultiError is an error wrapping multiple validation errors
// returned by GetShareResponse.ValidateAll() if the designated constraints
// aren't met.
type GetShareResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetShareResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetShareResponseMultiError) AllErrors() []error { return m }

// GetShareResponseValidationError is the validation error returned by
// GetShareResponse.Validate if the designated constraints aren't met.
type GetShareResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetShareResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetShareResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetShareResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetShareResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetShareResponseValidationError) ErrorName() string { return "GetShareResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetShareResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetShareResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetShareResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetShareResponseValidationError{}

// Validate checks the field values on ListReceivedSharesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListReceivedSharesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListReceivedSharesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListReceivedSharesRequestMultiError, or nil if none found.
func (m *ListReceivedSharesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListReceivedSharesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListReceivedSharesRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListReceivedSharesRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListReceivedSharesRequestValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetFilters() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListReceivedSharesRequestValidationError{
						field:  fmt.Sprintf("Filters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListReceivedSharesRequestValidationError{
						field:  fmt.Sprintf("Filters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListReceivedSharesRequestValidationError{
					field:  fmt.Sprintf("Filters[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for PageSize

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListReceivedSharesRequestMultiError(errors)
	}

	return nil
}

// ListReceivedSharesRequestMultiError is an error wrapping multiple validation
// errors returned by ListReceivedSharesRequest.ValidateAll() if the
// designated constraints aren't met.
type ListReceivedSharesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListReceivedSharesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListReceivedSharesRequestMultiError) AllErrors() []error { return m }

// ListReceivedSharesRequestValidationError is the validation error returned by
// ListReceivedSharesRequest.Validate if the designated constraints aren't met.
type ListReceivedSharesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListReceivedSharesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListReceivedSharesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListReceivedSharesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListReceivedSharesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListReceivedSharesRequestValidationError) ErrorName() string {
	return "ListReceivedSharesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListReceivedSharesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListReceivedSharesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListReceivedSharesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListReceivedSharesRequestValidationError{}

// Validate checks the field values on ListReceivedSharesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListReceivedSharesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListReceivedSharesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListReceivedSharesResponseMultiError, or nil if none found.
func (m *ListReceivedSharesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListReceivedSharesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListReceivedSharesResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListReceivedSharesResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListReceivedSharesResponseValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListReceivedSharesResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListReceivedSharesResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListReceivedSharesResponseValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetShares() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListReceivedSharesResponseValidationError{
						field:  fmt.Sprintf("Shares[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListReceivedSharesResponseValidationError{
						field:  fmt.Sprintf("Shares[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListReceivedSharesResponseValidationError{
					field:  fmt.Sprintf("Shares[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListReceivedSharesResponseMultiError(errors)
	}

	return nil
}

// ListReceivedSharesResponseMultiError is an error wrapping multiple
// validation errors returned by ListReceivedSharesResponse.ValidateAll() if
// the designated constraints aren't met.
type ListReceivedSharesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListReceivedSharesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListReceivedSharesResponseMultiError) AllErrors() []error { return m }

// ListReceivedSharesResponseValidationError is the validation error returned
// by ListReceivedSharesResponse.Validate if the designated constraints aren't met.
type ListReceivedSharesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListReceivedSharesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListReceivedSharesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListReceivedSharesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListReceivedSharesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListReceivedSharesResponseValidationError) ErrorName() string {
	return "ListReceivedSharesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListReceivedSharesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListReceivedSharesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListReceivedSharesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListReceivedSharesResponseValidationError{}

// Validate checks the field values on UpdateReceivedShareRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateReceivedShareRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateReceivedShareRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateReceivedShareRequestMultiError, or nil if none found.
func (m *UpdateReceivedShareRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateReceivedShareRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateReceivedShareRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateReceivedShareRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateReceivedShareRequestValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetShare()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateReceivedShareRequestValidationError{
					field:  "Share",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateReceivedShareRequestValidationError{
					field:  "Share",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetShare()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateReceivedShareRequestValidationError{
				field:  "Share",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateMask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateReceivedShareRequestValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateReceivedShareRequestValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateReceivedShareRequestValidationError{
				field:  "UpdateMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateReceivedShareRequestMultiError(errors)
	}

	return nil
}

// UpdateReceivedShareRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateReceivedShareRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateReceivedShareRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateReceivedShareRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateReceivedShareRequestMultiError) AllErrors() []error { return m }

// UpdateReceivedShareRequestValidationError is the validation error returned
// by UpdateReceivedShareRequest.Validate if the designated constraints aren't met.
type UpdateReceivedShareRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateReceivedShareRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateReceivedShareRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateReceivedShareRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateReceivedShareRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateReceivedShareRequestValidationError) ErrorName() string {
	return "UpdateReceivedShareRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateReceivedShareRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateReceivedShareRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateReceivedShareRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateReceivedShareRequestValidationError{}

// Validate checks the field values on UpdateReceivedShareResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateReceivedShareResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateReceivedShareResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateReceivedShareResponseMultiError, or nil if none found.
func (m *UpdateReceivedShareResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateReceivedShareResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateReceivedShareResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateReceivedShareResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateReceivedShareResponseValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateReceivedShareResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateReceivedShareResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateReceivedShareResponseValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetShare()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateReceivedShareResponseValidationError{
					field:  "Share",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateReceivedShareResponseValidationError{
					field:  "Share",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetShare()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateReceivedShareResponseValidationError{
				field:  "Share",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateReceivedShareResponseMultiError(errors)
	}

	return nil
}

// UpdateReceivedShareResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateReceivedShareResponse.ValidateAll() if
// the designated constraints aren't met.
type UpdateReceivedShareResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateReceivedShareResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateReceivedShareResponseMultiError) AllErrors() []error { return m }

// UpdateReceivedShareResponseValidationError is the validation error returned
// by UpdateReceivedShareResponse.Validate if the designated constraints
// aren't met.
type UpdateReceivedShareResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateReceivedShareResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateReceivedShareResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateReceivedShareResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateReceivedShareResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateReceivedShareResponseValidationError) ErrorName() string {
	return "UpdateReceivedShareResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateReceivedShareResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateReceivedShareResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateReceivedShareResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateReceivedShareResponseValidationError{}

// Validate checks the field values on GetReceivedShareRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetReceivedShareRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetReceivedShareRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetReceivedShareRequestMultiError, or nil if none found.
func (m *GetReceivedShareRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetReceivedShareRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetReceivedShareRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetReceivedShareRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetReceivedShareRequestValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRef()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetReceivedShareRequestValidationError{
					field:  "Ref",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetReceivedShareRequestValidationError{
					field:  "Ref",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRef()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetReceivedShareRequestValidationError{
				field:  "Ref",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetReceivedShareRequestMultiError(errors)
	}

	return nil
}

// GetReceivedShareRequestMultiError is an error wrapping multiple validation
// errors returned by GetReceivedShareRequest.ValidateAll() if the designated
// constraints aren't met.
type GetReceivedShareRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetReceivedShareRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetReceivedShareRequestMultiError) AllErrors() []error { return m }

// GetReceivedShareRequestValidationError is the validation error returned by
// GetReceivedShareRequest.Validate if the designated constraints aren't met.
type GetReceivedShareRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetReceivedShareRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetReceivedShareRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetReceivedShareRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetReceivedShareRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetReceivedShareRequestValidationError) ErrorName() string {
	return "GetReceivedShareRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetReceivedShareRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetReceivedShareRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetReceivedShareRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetReceivedShareRequestValidationError{}

// Validate checks the field values on GetReceivedShareResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetReceivedShareResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetReceivedShareResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetReceivedShareResponseMultiError, or nil if none found.
func (m *GetReceivedShareResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetReceivedShareResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetReceivedShareResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetReceivedShareResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetReceivedShareResponseValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetReceivedShareResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetReceivedShareResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetReceivedShareResponseValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetShare()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetReceivedShareResponseValidationError{
					field:  "Share",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetReceivedShareResponseValidationError{
					field:  "Share",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetShare()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetReceivedShareResponseValidationError{
				field:  "Share",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetReceivedShareResponseMultiError(errors)
	}

	return nil
}

// GetReceivedShareResponseMultiError is an error wrapping multiple validation
// errors returned by GetReceivedShareResponse.ValidateAll() if the designated
// constraints aren't met.
type GetReceivedShareResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetReceivedShareResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetReceivedShareResponseMultiError) AllErrors() []error { return m }

// GetReceivedShareResponseValidationError is the validation error returned by
// GetReceivedShareResponse.Validate if the designated constraints aren't met.
type GetReceivedShareResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetReceivedShareResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetReceivedShareResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetReceivedShareResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetReceivedShareResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetReceivedShareResponseValidationError) ErrorName() string {
	return "GetReceivedShareResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetReceivedShareResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetReceivedShareResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetReceivedShareResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetReceivedShareResponseValidationError{}

// Validate checks the field values on UpdateShareRequest_UpdateField with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateShareRequest_UpdateField) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateShareRequest_UpdateField with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateShareRequest_UpdateFieldMultiError, or nil if none found.
func (m *UpdateShareRequest_UpdateField) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateShareRequest_UpdateField) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Field.(type) {
	case *UpdateShareRequest_UpdateField_Permissions:
		if v == nil {
			err := UpdateShareRequest_UpdateFieldValidationError{
				field:  "Field",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPermissions()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateShareRequest_UpdateFieldValidationError{
						field:  "Permissions",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateShareRequest_UpdateFieldValidationError{
						field:  "Permissions",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPermissions()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateShareRequest_UpdateFieldValidationError{
					field:  "Permissions",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *UpdateShareRequest_UpdateField_DisplayName:
		if v == nil {
			err := UpdateShareRequest_UpdateFieldValidationError{
				field:  "Field",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for DisplayName
	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return UpdateShareRequest_UpdateFieldMultiError(errors)
	}

	return nil
}

// UpdateShareRequest_UpdateFieldMultiError is an error wrapping multiple
// validation errors returned by UpdateShareRequest_UpdateField.ValidateAll()
// if the designated constraints aren't met.
type UpdateShareRequest_UpdateFieldMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateShareRequest_UpdateFieldMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateShareRequest_UpdateFieldMultiError) AllErrors() []error { return m }

// UpdateShareRequest_UpdateFieldValidationError is the validation error
// returned by UpdateShareRequest_UpdateField.Validate if the designated
// constraints aren't met.
type UpdateShareRequest_UpdateFieldValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateShareRequest_UpdateFieldValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateShareRequest_UpdateFieldValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateShareRequest_UpdateFieldValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateShareRequest_UpdateFieldValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateShareRequest_UpdateFieldValidationError) ErrorName() string {
	return "UpdateShareRequest_UpdateFieldValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateShareRequest_UpdateFieldValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateShareRequest_UpdateField.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateShareRequest_UpdateFieldValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateShareRequest_UpdateFieldValidationError{}
