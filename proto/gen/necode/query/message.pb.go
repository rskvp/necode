// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: necode/query/message.proto

package query

import (
	common "github.com/rskvp/necode/proto/gen/necode/common"
	enums "github.com/rskvp/necode/proto/gen/necode/enums"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// See https://docs.temporal.io/docs/concepts/queries/
type WorkflowQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The workflow-author-defined identifier of the query. Typically a function name.
	QueryType string `protobuf:"bytes,1,opt,name=query_type,json=queryType,proto3" json:"query_type,omitempty"`
	// Serialized arguments that will be provided to the query handler.
	QueryArgs *common.Payloads `protobuf:"bytes,2,opt,name=query_args,json=queryArgs,proto3" json:"query_args,omitempty"`
	// Headers that were passed by the caller of the query and copied by temporal
	// server into the workflow task.
	Header *common.Header `protobuf:"bytes,3,opt,name=header,proto3" json:"header,omitempty"`
}

func (x *WorkflowQuery) Reset() {
	*x = WorkflowQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_query_message_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkflowQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowQuery) ProtoMessage() {}

func (x *WorkflowQuery) ProtoReflect() protoreflect.Message {
	mi := &file_necode_query_message_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowQuery.ProtoReflect.Descriptor instead.
func (*WorkflowQuery) Descriptor() ([]byte, []int) {
	return file_necode_query_message_proto_rawDescGZIP(), []int{0}
}

func (x *WorkflowQuery) GetQueryType() string {
	if x != nil {
		return x.QueryType
	}
	return ""
}

func (x *WorkflowQuery) GetQueryArgs() *common.Payloads {
	if x != nil {
		return x.QueryArgs
	}
	return nil
}

func (x *WorkflowQuery) GetHeader() *common.Header {
	if x != nil {
		return x.Header
	}
	return nil
}

// Answer to a `WorkflowQuery`
type WorkflowQueryResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Did the query succeed or fail?
	ResultType enums.QueryResultType `protobuf:"varint,1,opt,name=result_type,json=resultType,proto3,enum=necode.enums.QueryResultType" json:"result_type,omitempty"`
	// Set when the query succeeds with the results
	Answer *common.Payloads `protobuf:"bytes,2,opt,name=answer,proto3" json:"answer,omitempty"`
	// Mutually exclusive with `answer`. Set when the query fails.
	ErrorMessage string `protobuf:"bytes,3,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (x *WorkflowQueryResult) Reset() {
	*x = WorkflowQueryResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_query_message_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkflowQueryResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowQueryResult) ProtoMessage() {}

func (x *WorkflowQueryResult) ProtoReflect() protoreflect.Message {
	mi := &file_necode_query_message_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowQueryResult.ProtoReflect.Descriptor instead.
func (*WorkflowQueryResult) Descriptor() ([]byte, []int) {
	return file_necode_query_message_proto_rawDescGZIP(), []int{1}
}

func (x *WorkflowQueryResult) GetResultType() enums.QueryResultType {
	if x != nil {
		return x.ResultType
	}
	return enums.QueryResultType(0)
}

func (x *WorkflowQueryResult) GetAnswer() *common.Payloads {
	if x != nil {
		return x.Answer
	}
	return nil
}

func (x *WorkflowQueryResult) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type QueryRejected struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status enums.WorkflowExecutionStatus `protobuf:"varint,1,opt,name=status,proto3,enum=necode.enums.WorkflowExecutionStatus" json:"status,omitempty"`
}

func (x *QueryRejected) Reset() {
	*x = QueryRejected{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_query_message_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryRejected) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRejected) ProtoMessage() {}

func (x *QueryRejected) ProtoReflect() protoreflect.Message {
	mi := &file_necode_query_message_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRejected.ProtoReflect.Descriptor instead.
func (*QueryRejected) Descriptor() ([]byte, []int) {
	return file_necode_query_message_proto_rawDescGZIP(), []int{2}
}

func (x *QueryRejected) GetStatus() enums.WorkflowExecutionStatus {
	if x != nil {
		return x.Status
	}
	return enums.WorkflowExecutionStatus(0)
}

var File_necode_query_message_proto protoreflect.FileDescriptor

var file_necode_query_message_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x6e, 0x65,
	0x63, 0x6f, 0x64, 0x65, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x18, 0x6e, 0x65, 0x63, 0x6f,
	0x64, 0x65, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2f, 0x65, 0x6e, 0x75,
	0x6d, 0x73, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1b, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x95,
	0x01, 0x0a, 0x0d, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x1d, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x36, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x52, 0x09, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x41, 0x72, 0x67, 0x73, 0x12, 0x2d, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0xab, 0x01, 0x0a, 0x13, 0x57, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3e,
	0x0a, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x65, 0x6e, 0x75,
	0x6d, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2f,
	0x0a, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x52, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12,
	0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x4e, 0x0a, 0x0d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x6a,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x3d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x65,
	0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x42, 0xa1, 0x01, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x63,
	0x6f, 0x64, 0x65, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x42, 0x0c, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x73, 0x6b, 0x76, 0x70, 0x2f, 0x6e, 0x65, 0x63, 0x6f,
	0x64, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x6e, 0x65, 0x63,
	0x6f, 0x64, 0x65, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0xa2, 0x02, 0x03, 0x4e, 0x51, 0x58, 0xaa,
	0x02, 0x0c, 0x4e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0xca, 0x02,
	0x0c, 0x4e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x5c, 0x51, 0x75, 0x65, 0x72, 0x79, 0xe2, 0x02, 0x18,
	0x4e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x5c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x5c, 0x47, 0x50, 0x42,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0d, 0x4e, 0x65, 0x63, 0x6f, 0x64,
	0x65, 0x3a, 0x3a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_necode_query_message_proto_rawDescOnce sync.Once
	file_necode_query_message_proto_rawDescData = file_necode_query_message_proto_rawDesc
)

func file_necode_query_message_proto_rawDescGZIP() []byte {
	file_necode_query_message_proto_rawDescOnce.Do(func() {
		file_necode_query_message_proto_rawDescData = protoimpl.X.CompressGZIP(file_necode_query_message_proto_rawDescData)
	})
	return file_necode_query_message_proto_rawDescData
}

var file_necode_query_message_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_necode_query_message_proto_goTypes = []interface{}{
	(*WorkflowQuery)(nil),              // 0: necode.query.WorkflowQuery
	(*WorkflowQueryResult)(nil),        // 1: necode.query.WorkflowQueryResult
	(*QueryRejected)(nil),              // 2: necode.query.QueryRejected
	(*common.Payloads)(nil),            // 3: necode.common.Payloads
	(*common.Header)(nil),              // 4: necode.common.Header
	(enums.QueryResultType)(0),         // 5: necode.enums.QueryResultType
	(enums.WorkflowExecutionStatus)(0), // 6: necode.enums.WorkflowExecutionStatus
}
var file_necode_query_message_proto_depIdxs = []int32{
	3, // 0: necode.query.WorkflowQuery.query_args:type_name -> necode.common.Payloads
	4, // 1: necode.query.WorkflowQuery.header:type_name -> necode.common.Header
	5, // 2: necode.query.WorkflowQueryResult.result_type:type_name -> necode.enums.QueryResultType
	3, // 3: necode.query.WorkflowQueryResult.answer:type_name -> necode.common.Payloads
	6, // 4: necode.query.QueryRejected.status:type_name -> necode.enums.WorkflowExecutionStatus
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_necode_query_message_proto_init() }
func file_necode_query_message_proto_init() {
	if File_necode_query_message_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_necode_query_message_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkflowQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_query_message_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkflowQueryResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_query_message_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryRejected); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_necode_query_message_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_necode_query_message_proto_goTypes,
		DependencyIndexes: file_necode_query_message_proto_depIdxs,
		MessageInfos:      file_necode_query_message_proto_msgTypes,
	}.Build()
	File_necode_query_message_proto = out.File
	file_necode_query_message_proto_rawDesc = nil
	file_necode_query_message_proto_goTypes = nil
	file_necode_query_message_proto_depIdxs = nil
}
