// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: necode/app/registry/registry_api.proto

package registry

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetAppProvidersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAppProvidersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAppProvidersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAppProvidersRequestMultiError, or nil if none found.
func (m *GetAppProvidersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAppProvidersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetAppProvidersRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetAppProvidersRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAppProvidersRequestValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetResourceInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetAppProvidersRequestValidationError{
					field:  "ResourceInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetAppProvidersRequestValidationError{
					field:  "ResourceInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResourceInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAppProvidersRequestValidationError{
				field:  "ResourceInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetAppProvidersRequestMultiError(errors)
	}

	return nil
}

// GetAppProvidersRequestMultiError is an error wrapping multiple validation
// errors returned by GetAppProvidersRequest.ValidateAll() if the designated
// constraints aren't met.
type GetAppProvidersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAppProvidersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAppProvidersRequestMultiError) AllErrors() []error { return m }

// GetAppProvidersRequestValidationError is the validation error returned by
// GetAppProvidersRequest.Validate if the designated constraints aren't met.
type GetAppProvidersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAppProvidersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAppProvidersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAppProvidersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAppProvidersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAppProvidersRequestValidationError) ErrorName() string {
	return "GetAppProvidersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAppProvidersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAppProvidersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAppProvidersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAppProvidersRequestValidationError{}

// Validate checks the field values on GetAppProvidersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAppProvidersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAppProvidersResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAppProvidersResponseMultiError, or nil if none found.
func (m *GetAppProvidersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAppProvidersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetAppProvidersResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetAppProvidersResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAppProvidersResponseValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetAppProvidersResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetAppProvidersResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAppProvidersResponseValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetProviders() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAppProvidersResponseValidationError{
						field:  fmt.Sprintf("Providers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAppProvidersResponseValidationError{
						field:  fmt.Sprintf("Providers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAppProvidersResponseValidationError{
					field:  fmt.Sprintf("Providers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetAppProvidersResponseMultiError(errors)
	}

	return nil
}

// GetAppProvidersResponseMultiError is an error wrapping multiple validation
// errors returned by GetAppProvidersResponse.ValidateAll() if the designated
// constraints aren't met.
type GetAppProvidersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAppProvidersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAppProvidersResponseMultiError) AllErrors() []error { return m }

// GetAppProvidersResponseValidationError is the validation error returned by
// GetAppProvidersResponse.Validate if the designated constraints aren't met.
type GetAppProvidersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAppProvidersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAppProvidersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAppProvidersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAppProvidersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAppProvidersResponseValidationError) ErrorName() string {
	return "GetAppProvidersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAppProvidersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAppProvidersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAppProvidersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAppProvidersResponseValidationError{}

// Validate checks the field values on AddAppProviderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddAppProviderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddAppProviderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddAppProviderRequestMultiError, or nil if none found.
func (m *AddAppProviderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddAppProviderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddAppProviderRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddAppProviderRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddAppProviderRequestValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetProvider()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddAppProviderRequestValidationError{
					field:  "Provider",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddAppProviderRequestValidationError{
					field:  "Provider",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProvider()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddAppProviderRequestValidationError{
				field:  "Provider",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddAppProviderRequestMultiError(errors)
	}

	return nil
}

// AddAppProviderRequestMultiError is an error wrapping multiple validation
// errors returned by AddAppProviderRequest.ValidateAll() if the designated
// constraints aren't met.
type AddAppProviderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddAppProviderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddAppProviderRequestMultiError) AllErrors() []error { return m }

// AddAppProviderRequestValidationError is the validation error returned by
// AddAppProviderRequest.Validate if the designated constraints aren't met.
type AddAppProviderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddAppProviderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddAppProviderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddAppProviderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddAppProviderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddAppProviderRequestValidationError) ErrorName() string {
	return "AddAppProviderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddAppProviderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddAppProviderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddAppProviderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddAppProviderRequestValidationError{}

// Validate checks the field values on AddAppProviderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddAppProviderResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddAppProviderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddAppProviderResponseMultiError, or nil if none found.
func (m *AddAppProviderResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddAppProviderResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddAppProviderResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddAppProviderResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddAppProviderResponseValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddAppProviderResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddAppProviderResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddAppProviderResponseValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddAppProviderResponseMultiError(errors)
	}

	return nil
}

// AddAppProviderResponseMultiError is an error wrapping multiple validation
// errors returned by AddAppProviderResponse.ValidateAll() if the designated
// constraints aren't met.
type AddAppProviderResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddAppProviderResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddAppProviderResponseMultiError) AllErrors() []error { return m }

// AddAppProviderResponseValidationError is the validation error returned by
// AddAppProviderResponse.Validate if the designated constraints aren't met.
type AddAppProviderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddAppProviderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddAppProviderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddAppProviderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddAppProviderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddAppProviderResponseValidationError) ErrorName() string {
	return "AddAppProviderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddAppProviderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddAppProviderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddAppProviderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddAppProviderResponseValidationError{}

// Validate checks the field values on ListAppProvidersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAppProvidersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAppProvidersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAppProvidersRequestMultiError, or nil if none found.
func (m *ListAppProvidersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAppProvidersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListAppProvidersRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListAppProvidersRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListAppProvidersRequestValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListAppProvidersRequestMultiError(errors)
	}

	return nil
}

// ListAppProvidersRequestMultiError is an error wrapping multiple validation
// errors returned by ListAppProvidersRequest.ValidateAll() if the designated
// constraints aren't met.
type ListAppProvidersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAppProvidersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAppProvidersRequestMultiError) AllErrors() []error { return m }

// ListAppProvidersRequestValidationError is the validation error returned by
// ListAppProvidersRequest.Validate if the designated constraints aren't met.
type ListAppProvidersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAppProvidersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAppProvidersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAppProvidersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAppProvidersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAppProvidersRequestValidationError) ErrorName() string {
	return "ListAppProvidersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAppProvidersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAppProvidersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAppProvidersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAppProvidersRequestValidationError{}

// Validate checks the field values on ListAppProvidersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAppProvidersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAppProvidersResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAppProvidersResponseMultiError, or nil if none found.
func (m *ListAppProvidersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAppProvidersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListAppProvidersResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListAppProvidersResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListAppProvidersResponseValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListAppProvidersResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListAppProvidersResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListAppProvidersResponseValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetProviders() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAppProvidersResponseValidationError{
						field:  fmt.Sprintf("Providers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAppProvidersResponseValidationError{
						field:  fmt.Sprintf("Providers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAppProvidersResponseValidationError{
					field:  fmt.Sprintf("Providers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListAppProvidersResponseMultiError(errors)
	}

	return nil
}

// ListAppProvidersResponseMultiError is an error wrapping multiple validation
// errors returned by ListAppProvidersResponse.ValidateAll() if the designated
// constraints aren't met.
type ListAppProvidersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAppProvidersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAppProvidersResponseMultiError) AllErrors() []error { return m }

// ListAppProvidersResponseValidationError is the validation error returned by
// ListAppProvidersResponse.Validate if the designated constraints aren't met.
type ListAppProvidersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAppProvidersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAppProvidersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAppProvidersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAppProvidersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAppProvidersResponseValidationError) ErrorName() string {
	return "ListAppProvidersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListAppProvidersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAppProvidersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAppProvidersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAppProvidersResponseValidationError{}

// Validate checks the field values on ListSupportedMimeTypesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSupportedMimeTypesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSupportedMimeTypesRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListSupportedMimeTypesRequestMultiError, or nil if none found.
func (m *ListSupportedMimeTypesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSupportedMimeTypesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListSupportedMimeTypesRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListSupportedMimeTypesRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListSupportedMimeTypesRequestValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListSupportedMimeTypesRequestMultiError(errors)
	}

	return nil
}

// ListSupportedMimeTypesRequestMultiError is an error wrapping multiple
// validation errors returned by ListSupportedMimeTypesRequest.ValidateAll()
// if the designated constraints aren't met.
type ListSupportedMimeTypesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSupportedMimeTypesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSupportedMimeTypesRequestMultiError) AllErrors() []error { return m }

// ListSupportedMimeTypesRequestValidationError is the validation error
// returned by ListSupportedMimeTypesRequest.Validate if the designated
// constraints aren't met.
type ListSupportedMimeTypesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSupportedMimeTypesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSupportedMimeTypesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSupportedMimeTypesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSupportedMimeTypesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSupportedMimeTypesRequestValidationError) ErrorName() string {
	return "ListSupportedMimeTypesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListSupportedMimeTypesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSupportedMimeTypesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSupportedMimeTypesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSupportedMimeTypesRequestValidationError{}

// Validate checks the field values on ListSupportedMimeTypesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSupportedMimeTypesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSupportedMimeTypesResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListSupportedMimeTypesResponseMultiError, or nil if none found.
func (m *ListSupportedMimeTypesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSupportedMimeTypesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListSupportedMimeTypesResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListSupportedMimeTypesResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListSupportedMimeTypesResponseValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListSupportedMimeTypesResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListSupportedMimeTypesResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListSupportedMimeTypesResponseValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetMimeTypes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListSupportedMimeTypesResponseValidationError{
						field:  fmt.Sprintf("MimeTypes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListSupportedMimeTypesResponseValidationError{
						field:  fmt.Sprintf("MimeTypes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListSupportedMimeTypesResponseValidationError{
					field:  fmt.Sprintf("MimeTypes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListSupportedMimeTypesResponseMultiError(errors)
	}

	return nil
}

// ListSupportedMimeTypesResponseMultiError is an error wrapping multiple
// validation errors returned by ListSupportedMimeTypesResponse.ValidateAll()
// if the designated constraints aren't met.
type ListSupportedMimeTypesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSupportedMimeTypesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSupportedMimeTypesResponseMultiError) AllErrors() []error { return m }

// ListSupportedMimeTypesResponseValidationError is the validation error
// returned by ListSupportedMimeTypesResponse.Validate if the designated
// constraints aren't met.
type ListSupportedMimeTypesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSupportedMimeTypesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSupportedMimeTypesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSupportedMimeTypesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSupportedMimeTypesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSupportedMimeTypesResponseValidationError) ErrorName() string {
	return "ListSupportedMimeTypesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListSupportedMimeTypesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSupportedMimeTypesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSupportedMimeTypesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSupportedMimeTypesResponseValidationError{}

// Validate checks the field values on GetDefaultAppProviderForMimeTypeRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetDefaultAppProviderForMimeTypeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetDefaultAppProviderForMimeTypeRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// GetDefaultAppProviderForMimeTypeRequestMultiError, or nil if none found.
func (m *GetDefaultAppProviderForMimeTypeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDefaultAppProviderForMimeTypeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetDefaultAppProviderForMimeTypeRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetDefaultAppProviderForMimeTypeRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDefaultAppProviderForMimeTypeRequestValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for MimeType

	if len(errors) > 0 {
		return GetDefaultAppProviderForMimeTypeRequestMultiError(errors)
	}

	return nil
}

// GetDefaultAppProviderForMimeTypeRequestMultiError is an error wrapping
// multiple validation errors returned by
// GetDefaultAppProviderForMimeTypeRequest.ValidateAll() if the designated
// constraints aren't met.
type GetDefaultAppProviderForMimeTypeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDefaultAppProviderForMimeTypeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDefaultAppProviderForMimeTypeRequestMultiError) AllErrors() []error { return m }

// GetDefaultAppProviderForMimeTypeRequestValidationError is the validation
// error returned by GetDefaultAppProviderForMimeTypeRequest.Validate if the
// designated constraints aren't met.
type GetDefaultAppProviderForMimeTypeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDefaultAppProviderForMimeTypeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDefaultAppProviderForMimeTypeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDefaultAppProviderForMimeTypeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDefaultAppProviderForMimeTypeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDefaultAppProviderForMimeTypeRequestValidationError) ErrorName() string {
	return "GetDefaultAppProviderForMimeTypeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDefaultAppProviderForMimeTypeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDefaultAppProviderForMimeTypeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDefaultAppProviderForMimeTypeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDefaultAppProviderForMimeTypeRequestValidationError{}

// Validate checks the field values on GetDefaultAppProviderForMimeTypeResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetDefaultAppProviderForMimeTypeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetDefaultAppProviderForMimeTypeResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// GetDefaultAppProviderForMimeTypeResponseMultiError, or nil if none found.
func (m *GetDefaultAppProviderForMimeTypeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDefaultAppProviderForMimeTypeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetDefaultAppProviderForMimeTypeResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetDefaultAppProviderForMimeTypeResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDefaultAppProviderForMimeTypeResponseValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetDefaultAppProviderForMimeTypeResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetDefaultAppProviderForMimeTypeResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDefaultAppProviderForMimeTypeResponseValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetProvider()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetDefaultAppProviderForMimeTypeResponseValidationError{
					field:  "Provider",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetDefaultAppProviderForMimeTypeResponseValidationError{
					field:  "Provider",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProvider()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDefaultAppProviderForMimeTypeResponseValidationError{
				field:  "Provider",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetDefaultAppProviderForMimeTypeResponseMultiError(errors)
	}

	return nil
}

// GetDefaultAppProviderForMimeTypeResponseMultiError is an error wrapping
// multiple validation errors returned by
// GetDefaultAppProviderForMimeTypeResponse.ValidateAll() if the designated
// constraints aren't met.
type GetDefaultAppProviderForMimeTypeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDefaultAppProviderForMimeTypeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDefaultAppProviderForMimeTypeResponseMultiError) AllErrors() []error { return m }

// GetDefaultAppProviderForMimeTypeResponseValidationError is the validation
// error returned by GetDefaultAppProviderForMimeTypeResponse.Validate if the
// designated constraints aren't met.
type GetDefaultAppProviderForMimeTypeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDefaultAppProviderForMimeTypeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDefaultAppProviderForMimeTypeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDefaultAppProviderForMimeTypeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDefaultAppProviderForMimeTypeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDefaultAppProviderForMimeTypeResponseValidationError) ErrorName() string {
	return "GetDefaultAppProviderForMimeTypeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDefaultAppProviderForMimeTypeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDefaultAppProviderForMimeTypeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDefaultAppProviderForMimeTypeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDefaultAppProviderForMimeTypeResponseValidationError{}

// Validate checks the field values on SetDefaultAppProviderForMimeTypeRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *SetDefaultAppProviderForMimeTypeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SetDefaultAppProviderForMimeTypeRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// SetDefaultAppProviderForMimeTypeRequestMultiError, or nil if none found.
func (m *SetDefaultAppProviderForMimeTypeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetDefaultAppProviderForMimeTypeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetDefaultAppProviderForMimeTypeRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetDefaultAppProviderForMimeTypeRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetDefaultAppProviderForMimeTypeRequestValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for MimeType

	if all {
		switch v := interface{}(m.GetProvider()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetDefaultAppProviderForMimeTypeRequestValidationError{
					field:  "Provider",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetDefaultAppProviderForMimeTypeRequestValidationError{
					field:  "Provider",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProvider()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetDefaultAppProviderForMimeTypeRequestValidationError{
				field:  "Provider",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SetDefaultAppProviderForMimeTypeRequestMultiError(errors)
	}

	return nil
}

// SetDefaultAppProviderForMimeTypeRequestMultiError is an error wrapping
// multiple validation errors returned by
// SetDefaultAppProviderForMimeTypeRequest.ValidateAll() if the designated
// constraints aren't met.
type SetDefaultAppProviderForMimeTypeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetDefaultAppProviderForMimeTypeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetDefaultAppProviderForMimeTypeRequestMultiError) AllErrors() []error { return m }

// SetDefaultAppProviderForMimeTypeRequestValidationError is the validation
// error returned by SetDefaultAppProviderForMimeTypeRequest.Validate if the
// designated constraints aren't met.
type SetDefaultAppProviderForMimeTypeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetDefaultAppProviderForMimeTypeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetDefaultAppProviderForMimeTypeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetDefaultAppProviderForMimeTypeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetDefaultAppProviderForMimeTypeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetDefaultAppProviderForMimeTypeRequestValidationError) ErrorName() string {
	return "SetDefaultAppProviderForMimeTypeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetDefaultAppProviderForMimeTypeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetDefaultAppProviderForMimeTypeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetDefaultAppProviderForMimeTypeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetDefaultAppProviderForMimeTypeRequestValidationError{}

// Validate checks the field values on SetDefaultAppProviderForMimeTypeResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *SetDefaultAppProviderForMimeTypeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SetDefaultAppProviderForMimeTypeResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// SetDefaultAppProviderForMimeTypeResponseMultiError, or nil if none found.
func (m *SetDefaultAppProviderForMimeTypeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SetDefaultAppProviderForMimeTypeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetDefaultAppProviderForMimeTypeResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetDefaultAppProviderForMimeTypeResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetDefaultAppProviderForMimeTypeResponseValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetDefaultAppProviderForMimeTypeResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetDefaultAppProviderForMimeTypeResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetDefaultAppProviderForMimeTypeResponseValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SetDefaultAppProviderForMimeTypeResponseMultiError(errors)
	}

	return nil
}

// SetDefaultAppProviderForMimeTypeResponseMultiError is an error wrapping
// multiple validation errors returned by
// SetDefaultAppProviderForMimeTypeResponse.ValidateAll() if the designated
// constraints aren't met.
type SetDefaultAppProviderForMimeTypeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetDefaultAppProviderForMimeTypeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetDefaultAppProviderForMimeTypeResponseMultiError) AllErrors() []error { return m }

// SetDefaultAppProviderForMimeTypeResponseValidationError is the validation
// error returned by SetDefaultAppProviderForMimeTypeResponse.Validate if the
// designated constraints aren't met.
type SetDefaultAppProviderForMimeTypeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetDefaultAppProviderForMimeTypeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetDefaultAppProviderForMimeTypeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetDefaultAppProviderForMimeTypeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetDefaultAppProviderForMimeTypeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetDefaultAppProviderForMimeTypeResponseValidationError) ErrorName() string {
	return "SetDefaultAppProviderForMimeTypeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetDefaultAppProviderForMimeTypeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetDefaultAppProviderForMimeTypeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetDefaultAppProviderForMimeTypeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetDefaultAppProviderForMimeTypeResponseValidationError{}
