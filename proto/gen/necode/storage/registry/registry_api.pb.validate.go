// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: necode/storage/registry/registry_api.proto

package registry

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetHomeRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetHomeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetHomeRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetHomeRequestMultiError,
// or nil if none found.
func (m *GetHomeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetHomeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetHomeRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetHomeRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetHomeRequestValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetHomeRequestMultiError(errors)
	}

	return nil
}

// GetHomeRequestMultiError is an error wrapping multiple validation errors
// returned by GetHomeRequest.ValidateAll() if the designated constraints
// aren't met.
type GetHomeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetHomeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetHomeRequestMultiError) AllErrors() []error { return m }

// GetHomeRequestValidationError is the validation error returned by
// GetHomeRequest.Validate if the designated constraints aren't met.
type GetHomeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetHomeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetHomeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetHomeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetHomeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetHomeRequestValidationError) ErrorName() string { return "GetHomeRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetHomeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetHomeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetHomeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetHomeRequestValidationError{}

// Validate checks the field values on GetHomeResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetHomeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetHomeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetHomeResponseMultiError, or nil if none found.
func (m *GetHomeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetHomeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetHomeResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetHomeResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetHomeResponseValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetHomeResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetHomeResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetHomeResponseValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetProvider()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetHomeResponseValidationError{
					field:  "Provider",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetHomeResponseValidationError{
					field:  "Provider",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProvider()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetHomeResponseValidationError{
				field:  "Provider",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetHomeResponseMultiError(errors)
	}

	return nil
}

// GetHomeResponseMultiError is an error wrapping multiple validation errors
// returned by GetHomeResponse.ValidateAll() if the designated constraints
// aren't met.
type GetHomeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetHomeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetHomeResponseMultiError) AllErrors() []error { return m }

// GetHomeResponseValidationError is the validation error returned by
// GetHomeResponse.Validate if the designated constraints aren't met.
type GetHomeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetHomeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetHomeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetHomeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetHomeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetHomeResponseValidationError) ErrorName() string { return "GetHomeResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetHomeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetHomeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetHomeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetHomeResponseValidationError{}

// Validate checks the field values on GetStorageProvidersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetStorageProvidersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStorageProvidersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetStorageProvidersRequestMultiError, or nil if none found.
func (m *GetStorageProvidersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStorageProvidersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetStorageProvidersRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetStorageProvidersRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetStorageProvidersRequestValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRef()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetStorageProvidersRequestValidationError{
					field:  "Ref",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetStorageProvidersRequestValidationError{
					field:  "Ref",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRef()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetStorageProvidersRequestValidationError{
				field:  "Ref",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetStorageProvidersRequestMultiError(errors)
	}

	return nil
}

// GetStorageProvidersRequestMultiError is an error wrapping multiple
// validation errors returned by GetStorageProvidersRequest.ValidateAll() if
// the designated constraints aren't met.
type GetStorageProvidersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStorageProvidersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStorageProvidersRequestMultiError) AllErrors() []error { return m }

// GetStorageProvidersRequestValidationError is the validation error returned
// by GetStorageProvidersRequest.Validate if the designated constraints aren't met.
type GetStorageProvidersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStorageProvidersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStorageProvidersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStorageProvidersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStorageProvidersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStorageProvidersRequestValidationError) ErrorName() string {
	return "GetStorageProvidersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetStorageProvidersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStorageProvidersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStorageProvidersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStorageProvidersRequestValidationError{}

// Validate checks the field values on GetStorageProvidersResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetStorageProvidersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStorageProvidersResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetStorageProvidersResponseMultiError, or nil if none found.
func (m *GetStorageProvidersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStorageProvidersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetStorageProvidersResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetStorageProvidersResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetStorageProvidersResponseValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetStorageProvidersResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetStorageProvidersResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetStorageProvidersResponseValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetProviders() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetStorageProvidersResponseValidationError{
						field:  fmt.Sprintf("Providers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetStorageProvidersResponseValidationError{
						field:  fmt.Sprintf("Providers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetStorageProvidersResponseValidationError{
					field:  fmt.Sprintf("Providers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetStorageProvidersResponseMultiError(errors)
	}

	return nil
}

// GetStorageProvidersResponseMultiError is an error wrapping multiple
// validation errors returned by GetStorageProvidersResponse.ValidateAll() if
// the designated constraints aren't met.
type GetStorageProvidersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStorageProvidersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStorageProvidersResponseMultiError) AllErrors() []error { return m }

// GetStorageProvidersResponseValidationError is the validation error returned
// by GetStorageProvidersResponse.Validate if the designated constraints
// aren't met.
type GetStorageProvidersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStorageProvidersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStorageProvidersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStorageProvidersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStorageProvidersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStorageProvidersResponseValidationError) ErrorName() string {
	return "GetStorageProvidersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetStorageProvidersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStorageProvidersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStorageProvidersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStorageProvidersResponseValidationError{}

// Validate checks the field values on ListStorageProvidersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListStorageProvidersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListStorageProvidersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListStorageProvidersRequestMultiError, or nil if none found.
func (m *ListStorageProvidersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListStorageProvidersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListStorageProvidersRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListStorageProvidersRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListStorageProvidersRequestValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListStorageProvidersRequestMultiError(errors)
	}

	return nil
}

// ListStorageProvidersRequestMultiError is an error wrapping multiple
// validation errors returned by ListStorageProvidersRequest.ValidateAll() if
// the designated constraints aren't met.
type ListStorageProvidersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListStorageProvidersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListStorageProvidersRequestMultiError) AllErrors() []error { return m }

// ListStorageProvidersRequestValidationError is the validation error returned
// by ListStorageProvidersRequest.Validate if the designated constraints
// aren't met.
type ListStorageProvidersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListStorageProvidersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListStorageProvidersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListStorageProvidersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListStorageProvidersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListStorageProvidersRequestValidationError) ErrorName() string {
	return "ListStorageProvidersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListStorageProvidersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListStorageProvidersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListStorageProvidersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListStorageProvidersRequestValidationError{}

// Validate checks the field values on ListStorageProvidersResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListStorageProvidersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListStorageProvidersResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListStorageProvidersResponseMultiError, or nil if none found.
func (m *ListStorageProvidersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListStorageProvidersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListStorageProvidersResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListStorageProvidersResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListStorageProvidersResponseValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListStorageProvidersResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListStorageProvidersResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListStorageProvidersResponseValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetProviders() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListStorageProvidersResponseValidationError{
						field:  fmt.Sprintf("Providers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListStorageProvidersResponseValidationError{
						field:  fmt.Sprintf("Providers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListStorageProvidersResponseValidationError{
					field:  fmt.Sprintf("Providers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListStorageProvidersResponseMultiError(errors)
	}

	return nil
}

// ListStorageProvidersResponseMultiError is an error wrapping multiple
// validation errors returned by ListStorageProvidersResponse.ValidateAll() if
// the designated constraints aren't met.
type ListStorageProvidersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListStorageProvidersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListStorageProvidersResponseMultiError) AllErrors() []error { return m }

// ListStorageProvidersResponseValidationError is the validation error returned
// by ListStorageProvidersResponse.Validate if the designated constraints
// aren't met.
type ListStorageProvidersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListStorageProvidersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListStorageProvidersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListStorageProvidersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListStorageProvidersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListStorageProvidersResponseValidationError) ErrorName() string {
	return "ListStorageProvidersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListStorageProvidersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListStorageProvidersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListStorageProvidersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListStorageProvidersResponseValidationError{}
