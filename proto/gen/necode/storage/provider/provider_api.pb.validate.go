// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: necode/storage/provider/provider_api.proto

package provider

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetHomeRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetHomeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetHomeRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetHomeRequestMultiError,
// or nil if none found.
func (m *GetHomeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetHomeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetHomeRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetHomeRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetHomeRequestValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetHomeRequestMultiError(errors)
	}

	return nil
}

// GetHomeRequestMultiError is an error wrapping multiple validation errors
// returned by GetHomeRequest.ValidateAll() if the designated constraints
// aren't met.
type GetHomeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetHomeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetHomeRequestMultiError) AllErrors() []error { return m }

// GetHomeRequestValidationError is the validation error returned by
// GetHomeRequest.Validate if the designated constraints aren't met.
type GetHomeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetHomeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetHomeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetHomeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetHomeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetHomeRequestValidationError) ErrorName() string { return "GetHomeRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetHomeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetHomeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetHomeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetHomeRequestValidationError{}

// Validate checks the field values on GetHomeResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetHomeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetHomeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetHomeResponseMultiError, or nil if none found.
func (m *GetHomeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetHomeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetHomeResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetHomeResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetHomeResponseValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetHomeResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetHomeResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetHomeResponseValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Path

	if len(errors) > 0 {
		return GetHomeResponseMultiError(errors)
	}

	return nil
}

// GetHomeResponseMultiError is an error wrapping multiple validation errors
// returned by GetHomeResponse.ValidateAll() if the designated constraints
// aren't met.
type GetHomeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetHomeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetHomeResponseMultiError) AllErrors() []error { return m }

// GetHomeResponseValidationError is the validation error returned by
// GetHomeResponse.Validate if the designated constraints aren't met.
type GetHomeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetHomeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetHomeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetHomeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetHomeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetHomeResponseValidationError) ErrorName() string { return "GetHomeResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetHomeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetHomeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetHomeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetHomeResponseValidationError{}

// Validate checks the field values on AddGrantRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddGrantRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddGrantRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddGrantRequestMultiError, or nil if none found.
func (m *AddGrantRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddGrantRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddGrantRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddGrantRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddGrantRequestValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRef()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddGrantRequestValidationError{
					field:  "Ref",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddGrantRequestValidationError{
					field:  "Ref",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRef()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddGrantRequestValidationError{
				field:  "Ref",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetGrant()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddGrantRequestValidationError{
					field:  "Grant",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddGrantRequestValidationError{
					field:  "Grant",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGrant()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddGrantRequestValidationError{
				field:  "Grant",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for LockId

	if len(errors) > 0 {
		return AddGrantRequestMultiError(errors)
	}

	return nil
}

// AddGrantRequestMultiError is an error wrapping multiple validation errors
// returned by AddGrantRequest.ValidateAll() if the designated constraints
// aren't met.
type AddGrantRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddGrantRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddGrantRequestMultiError) AllErrors() []error { return m }

// AddGrantRequestValidationError is the validation error returned by
// AddGrantRequest.Validate if the designated constraints aren't met.
type AddGrantRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddGrantRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddGrantRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddGrantRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddGrantRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddGrantRequestValidationError) ErrorName() string { return "AddGrantRequestValidationError" }

// Error satisfies the builtin error interface
func (e AddGrantRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddGrantRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddGrantRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddGrantRequestValidationError{}

// Validate checks the field values on AddGrantResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddGrantResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddGrantResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddGrantResponseMultiError, or nil if none found.
func (m *AddGrantResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddGrantResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddGrantResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddGrantResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddGrantResponseValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddGrantResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddGrantResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddGrantResponseValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddGrantResponseMultiError(errors)
	}

	return nil
}

// AddGrantResponseMultiError is an error wrapping multiple validation errors
// returned by AddGrantResponse.ValidateAll() if the designated constraints
// aren't met.
type AddGrantResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddGrantResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddGrantResponseMultiError) AllErrors() []error { return m }

// AddGrantResponseValidationError is the validation error returned by
// AddGrantResponse.Validate if the designated constraints aren't met.
type AddGrantResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddGrantResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddGrantResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddGrantResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddGrantResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddGrantResponseValidationError) ErrorName() string { return "AddGrantResponseValidationError" }

// Error satisfies the builtin error interface
func (e AddGrantResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddGrantResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddGrantResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddGrantResponseValidationError{}

// Validate checks the field values on DenyGrantRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DenyGrantRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DenyGrantRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DenyGrantRequestMultiError, or nil if none found.
func (m *DenyGrantRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DenyGrantRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DenyGrantRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DenyGrantRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DenyGrantRequestValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRef()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DenyGrantRequestValidationError{
					field:  "Ref",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DenyGrantRequestValidationError{
					field:  "Ref",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRef()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DenyGrantRequestValidationError{
				field:  "Ref",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetGrantee()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DenyGrantRequestValidationError{
					field:  "Grantee",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DenyGrantRequestValidationError{
					field:  "Grantee",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGrantee()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DenyGrantRequestValidationError{
				field:  "Grantee",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for LockId

	if len(errors) > 0 {
		return DenyGrantRequestMultiError(errors)
	}

	return nil
}

// DenyGrantRequestMultiError is an error wrapping multiple validation errors
// returned by DenyGrantRequest.ValidateAll() if the designated constraints
// aren't met.
type DenyGrantRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DenyGrantRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DenyGrantRequestMultiError) AllErrors() []error { return m }

// DenyGrantRequestValidationError is the validation error returned by
// DenyGrantRequest.Validate if the designated constraints aren't met.
type DenyGrantRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DenyGrantRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DenyGrantRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DenyGrantRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DenyGrantRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DenyGrantRequestValidationError) ErrorName() string { return "DenyGrantRequestValidationError" }

// Error satisfies the builtin error interface
func (e DenyGrantRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDenyGrantRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DenyGrantRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DenyGrantRequestValidationError{}

// Validate checks the field values on DenyGrantResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DenyGrantResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DenyGrantResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DenyGrantResponseMultiError, or nil if none found.
func (m *DenyGrantResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DenyGrantResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DenyGrantResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DenyGrantResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DenyGrantResponseValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DenyGrantResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DenyGrantResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DenyGrantResponseValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DenyGrantResponseMultiError(errors)
	}

	return nil
}

// DenyGrantResponseMultiError is an error wrapping multiple validation errors
// returned by DenyGrantResponse.ValidateAll() if the designated constraints
// aren't met.
type DenyGrantResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DenyGrantResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DenyGrantResponseMultiError) AllErrors() []error { return m }

// DenyGrantResponseValidationError is the validation error returned by
// DenyGrantResponse.Validate if the designated constraints aren't met.
type DenyGrantResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DenyGrantResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DenyGrantResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DenyGrantResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DenyGrantResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DenyGrantResponseValidationError) ErrorName() string {
	return "DenyGrantResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DenyGrantResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDenyGrantResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DenyGrantResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DenyGrantResponseValidationError{}

// Validate checks the field values on CreateContainerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateContainerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateContainerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateContainerRequestMultiError, or nil if none found.
func (m *CreateContainerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateContainerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateContainerRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateContainerRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateContainerRequestValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRef()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateContainerRequestValidationError{
					field:  "Ref",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateContainerRequestValidationError{
					field:  "Ref",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRef()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateContainerRequestValidationError{
				field:  "Ref",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateContainerRequestMultiError(errors)
	}

	return nil
}

// CreateContainerRequestMultiError is an error wrapping multiple validation
// errors returned by CreateContainerRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateContainerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateContainerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateContainerRequestMultiError) AllErrors() []error { return m }

// CreateContainerRequestValidationError is the validation error returned by
// CreateContainerRequest.Validate if the designated constraints aren't met.
type CreateContainerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateContainerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateContainerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateContainerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateContainerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateContainerRequestValidationError) ErrorName() string {
	return "CreateContainerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateContainerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateContainerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateContainerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateContainerRequestValidationError{}

// Validate checks the field values on CreateContainerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateContainerResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateContainerResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateContainerResponseMultiError, or nil if none found.
func (m *CreateContainerResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateContainerResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateContainerResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateContainerResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateContainerResponseValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateContainerResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateContainerResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateContainerResponseValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateContainerResponseMultiError(errors)
	}

	return nil
}

// CreateContainerResponseMultiError is an error wrapping multiple validation
// errors returned by CreateContainerResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateContainerResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateContainerResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateContainerResponseMultiError) AllErrors() []error { return m }

// CreateContainerResponseValidationError is the validation error returned by
// CreateContainerResponse.Validate if the designated constraints aren't met.
type CreateContainerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateContainerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateContainerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateContainerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateContainerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateContainerResponseValidationError) ErrorName() string {
	return "CreateContainerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateContainerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateContainerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateContainerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateContainerResponseValidationError{}

// Validate checks the field values on TouchFileRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TouchFileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TouchFileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TouchFileRequestMultiError, or nil if none found.
func (m *TouchFileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TouchFileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TouchFileRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TouchFileRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TouchFileRequestValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRef()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TouchFileRequestValidationError{
					field:  "Ref",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TouchFileRequestValidationError{
					field:  "Ref",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRef()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TouchFileRequestValidationError{
				field:  "Ref",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TouchFileRequestMultiError(errors)
	}

	return nil
}

// TouchFileRequestMultiError is an error wrapping multiple validation errors
// returned by TouchFileRequest.ValidateAll() if the designated constraints
// aren't met.
type TouchFileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TouchFileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TouchFileRequestMultiError) AllErrors() []error { return m }

// TouchFileRequestValidationError is the validation error returned by
// TouchFileRequest.Validate if the designated constraints aren't met.
type TouchFileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TouchFileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TouchFileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TouchFileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TouchFileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TouchFileRequestValidationError) ErrorName() string { return "TouchFileRequestValidationError" }

// Error satisfies the builtin error interface
func (e TouchFileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTouchFileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TouchFileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TouchFileRequestValidationError{}

// Validate checks the field values on TouchFileResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TouchFileResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TouchFileResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TouchFileResponseMultiError, or nil if none found.
func (m *TouchFileResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TouchFileResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TouchFileResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TouchFileResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TouchFileResponseValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TouchFileResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TouchFileResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TouchFileResponseValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TouchFileResponseMultiError(errors)
	}

	return nil
}

// TouchFileResponseMultiError is an error wrapping multiple validation errors
// returned by TouchFileResponse.ValidateAll() if the designated constraints
// aren't met.
type TouchFileResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TouchFileResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TouchFileResponseMultiError) AllErrors() []error { return m }

// TouchFileResponseValidationError is the validation error returned by
// TouchFileResponse.Validate if the designated constraints aren't met.
type TouchFileResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TouchFileResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TouchFileResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TouchFileResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TouchFileResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TouchFileResponseValidationError) ErrorName() string {
	return "TouchFileResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TouchFileResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTouchFileResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TouchFileResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TouchFileResponseValidationError{}

// Validate checks the field values on DeleteRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeleteRequestMultiError, or
// nil if none found.
func (m *DeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteRequestValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRef()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteRequestValidationError{
					field:  "Ref",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteRequestValidationError{
					field:  "Ref",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRef()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteRequestValidationError{
				field:  "Ref",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for LockId

	if len(errors) > 0 {
		return DeleteRequestMultiError(errors)
	}

	return nil
}

// DeleteRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRequestMultiError) AllErrors() []error { return m }

// DeleteRequestValidationError is the validation error returned by
// DeleteRequest.Validate if the designated constraints aren't met.
type DeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRequestValidationError) ErrorName() string { return "DeleteRequestValidationError" }

// Error satisfies the builtin error interface
func (e DeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRequestValidationError{}

// Validate checks the field values on DeleteResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeleteResponseMultiError,
// or nil if none found.
func (m *DeleteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteResponseValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteResponseValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteResponseMultiError(errors)
	}

	return nil
}

// DeleteResponseMultiError is an error wrapping multiple validation errors
// returned by DeleteResponse.ValidateAll() if the designated constraints
// aren't met.
type DeleteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteResponseMultiError) AllErrors() []error { return m }

// DeleteResponseValidationError is the validation error returned by
// DeleteResponse.Validate if the designated constraints aren't met.
type DeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteResponseValidationError) ErrorName() string { return "DeleteResponseValidationError" }

// Error satisfies the builtin error interface
func (e DeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteResponseValidationError{}

// Validate checks the field values on GetPathRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetPathRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPathRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetPathRequestMultiError,
// or nil if none found.
func (m *GetPathRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPathRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPathRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPathRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPathRequestValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetResourceId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPathRequestValidationError{
					field:  "ResourceId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPathRequestValidationError{
					field:  "ResourceId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResourceId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPathRequestValidationError{
				field:  "ResourceId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetPathRequestMultiError(errors)
	}

	return nil
}

// GetPathRequestMultiError is an error wrapping multiple validation errors
// returned by GetPathRequest.ValidateAll() if the designated constraints
// aren't met.
type GetPathRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPathRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPathRequestMultiError) AllErrors() []error { return m }

// GetPathRequestValidationError is the validation error returned by
// GetPathRequest.Validate if the designated constraints aren't met.
type GetPathRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPathRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPathRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPathRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPathRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPathRequestValidationError) ErrorName() string { return "GetPathRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetPathRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPathRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPathRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPathRequestValidationError{}

// Validate checks the field values on GetPathResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetPathResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPathResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPathResponseMultiError, or nil if none found.
func (m *GetPathResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPathResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPathResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPathResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPathResponseValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPathResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPathResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPathResponseValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Path

	if len(errors) > 0 {
		return GetPathResponseMultiError(errors)
	}

	return nil
}

// GetPathResponseMultiError is an error wrapping multiple validation errors
// returned by GetPathResponse.ValidateAll() if the designated constraints
// aren't met.
type GetPathResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPathResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPathResponseMultiError) AllErrors() []error { return m }

// GetPathResponseValidationError is the validation error returned by
// GetPathResponse.Validate if the designated constraints aren't met.
type GetPathResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPathResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPathResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPathResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPathResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPathResponseValidationError) ErrorName() string { return "GetPathResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetPathResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPathResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPathResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPathResponseValidationError{}

// Validate checks the field values on GetQuotaRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetQuotaRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetQuotaRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetQuotaRequestMultiError, or nil if none found.
func (m *GetQuotaRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetQuotaRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetQuotaRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetQuotaRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetQuotaRequestValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRef()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetQuotaRequestValidationError{
					field:  "Ref",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetQuotaRequestValidationError{
					field:  "Ref",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRef()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetQuotaRequestValidationError{
				field:  "Ref",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetQuotaRequestMultiError(errors)
	}

	return nil
}

// GetQuotaRequestMultiError is an error wrapping multiple validation errors
// returned by GetQuotaRequest.ValidateAll() if the designated constraints
// aren't met.
type GetQuotaRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetQuotaRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetQuotaRequestMultiError) AllErrors() []error { return m }

// GetQuotaRequestValidationError is the validation error returned by
// GetQuotaRequest.Validate if the designated constraints aren't met.
type GetQuotaRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetQuotaRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetQuotaRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetQuotaRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetQuotaRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetQuotaRequestValidationError) ErrorName() string { return "GetQuotaRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetQuotaRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetQuotaRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetQuotaRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetQuotaRequestValidationError{}

// Validate checks the field values on GetQuotaResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetQuotaResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetQuotaResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetQuotaResponseMultiError, or nil if none found.
func (m *GetQuotaResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetQuotaResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetQuotaResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetQuotaResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetQuotaResponseValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetQuotaResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetQuotaResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetQuotaResponseValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for TotalBytes

	// no validation rules for UsedBytes

	if len(errors) > 0 {
		return GetQuotaResponseMultiError(errors)
	}

	return nil
}

// GetQuotaResponseMultiError is an error wrapping multiple validation errors
// returned by GetQuotaResponse.ValidateAll() if the designated constraints
// aren't met.
type GetQuotaResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetQuotaResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetQuotaResponseMultiError) AllErrors() []error { return m }

// GetQuotaResponseValidationError is the validation error returned by
// GetQuotaResponse.Validate if the designated constraints aren't met.
type GetQuotaResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetQuotaResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetQuotaResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetQuotaResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetQuotaResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetQuotaResponseValidationError) ErrorName() string { return "GetQuotaResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetQuotaResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetQuotaResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetQuotaResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetQuotaResponseValidationError{}

// Validate checks the field values on InitiateFileUploadRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InitiateFileUploadRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InitiateFileUploadRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InitiateFileUploadRequestMultiError, or nil if none found.
func (m *InitiateFileUploadRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *InitiateFileUploadRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InitiateFileUploadRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InitiateFileUploadRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InitiateFileUploadRequestValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRef()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InitiateFileUploadRequestValidationError{
					field:  "Ref",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InitiateFileUploadRequestValidationError{
					field:  "Ref",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRef()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InitiateFileUploadRequestValidationError{
				field:  "Ref",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for LockId

	switch v := m.Options.(type) {
	case *InitiateFileUploadRequest_IfNotExist:
		if v == nil {
			err := InitiateFileUploadRequestValidationError{
				field:  "Options",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for IfNotExist
	case *InitiateFileUploadRequest_IfMatch:
		if v == nil {
			err := InitiateFileUploadRequestValidationError{
				field:  "Options",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for IfMatch
	case *InitiateFileUploadRequest_IfUnmodifiedSince:
		if v == nil {
			err := InitiateFileUploadRequestValidationError{
				field:  "Options",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetIfUnmodifiedSince()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InitiateFileUploadRequestValidationError{
						field:  "IfUnmodifiedSince",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InitiateFileUploadRequestValidationError{
						field:  "IfUnmodifiedSince",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetIfUnmodifiedSince()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InitiateFileUploadRequestValidationError{
					field:  "IfUnmodifiedSince",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return InitiateFileUploadRequestMultiError(errors)
	}

	return nil
}

// InitiateFileUploadRequestMultiError is an error wrapping multiple validation
// errors returned by InitiateFileUploadRequest.ValidateAll() if the
// designated constraints aren't met.
type InitiateFileUploadRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InitiateFileUploadRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InitiateFileUploadRequestMultiError) AllErrors() []error { return m }

// InitiateFileUploadRequestValidationError is the validation error returned by
// InitiateFileUploadRequest.Validate if the designated constraints aren't met.
type InitiateFileUploadRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InitiateFileUploadRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InitiateFileUploadRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InitiateFileUploadRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InitiateFileUploadRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InitiateFileUploadRequestValidationError) ErrorName() string {
	return "InitiateFileUploadRequestValidationError"
}

// Error satisfies the builtin error interface
func (e InitiateFileUploadRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInitiateFileUploadRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InitiateFileUploadRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InitiateFileUploadRequestValidationError{}

// Validate checks the field values on InitiateFileUploadResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InitiateFileUploadResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InitiateFileUploadResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InitiateFileUploadResponseMultiError, or nil if none found.
func (m *InitiateFileUploadResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *InitiateFileUploadResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InitiateFileUploadResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InitiateFileUploadResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InitiateFileUploadResponseValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InitiateFileUploadResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InitiateFileUploadResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InitiateFileUploadResponseValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetProtocols() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InitiateFileUploadResponseValidationError{
						field:  fmt.Sprintf("Protocols[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InitiateFileUploadResponseValidationError{
						field:  fmt.Sprintf("Protocols[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InitiateFileUploadResponseValidationError{
					field:  fmt.Sprintf("Protocols[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return InitiateFileUploadResponseMultiError(errors)
	}

	return nil
}

// InitiateFileUploadResponseMultiError is an error wrapping multiple
// validation errors returned by InitiateFileUploadResponse.ValidateAll() if
// the designated constraints aren't met.
type InitiateFileUploadResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InitiateFileUploadResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InitiateFileUploadResponseMultiError) AllErrors() []error { return m }

// InitiateFileUploadResponseValidationError is the validation error returned
// by InitiateFileUploadResponse.Validate if the designated constraints aren't met.
type InitiateFileUploadResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InitiateFileUploadResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InitiateFileUploadResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InitiateFileUploadResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InitiateFileUploadResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InitiateFileUploadResponseValidationError) ErrorName() string {
	return "InitiateFileUploadResponseValidationError"
}

// Error satisfies the builtin error interface
func (e InitiateFileUploadResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInitiateFileUploadResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InitiateFileUploadResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InitiateFileUploadResponseValidationError{}

// Validate checks the field values on InitiateFileDownloadRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InitiateFileDownloadRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InitiateFileDownloadRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InitiateFileDownloadRequestMultiError, or nil if none found.
func (m *InitiateFileDownloadRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *InitiateFileDownloadRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InitiateFileDownloadRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InitiateFileDownloadRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InitiateFileDownloadRequestValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRef()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InitiateFileDownloadRequestValidationError{
					field:  "Ref",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InitiateFileDownloadRequestValidationError{
					field:  "Ref",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRef()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InitiateFileDownloadRequestValidationError{
				field:  "Ref",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for LockId

	if len(errors) > 0 {
		return InitiateFileDownloadRequestMultiError(errors)
	}

	return nil
}

// InitiateFileDownloadRequestMultiError is an error wrapping multiple
// validation errors returned by InitiateFileDownloadRequest.ValidateAll() if
// the designated constraints aren't met.
type InitiateFileDownloadRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InitiateFileDownloadRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InitiateFileDownloadRequestMultiError) AllErrors() []error { return m }

// InitiateFileDownloadRequestValidationError is the validation error returned
// by InitiateFileDownloadRequest.Validate if the designated constraints
// aren't met.
type InitiateFileDownloadRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InitiateFileDownloadRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InitiateFileDownloadRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InitiateFileDownloadRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InitiateFileDownloadRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InitiateFileDownloadRequestValidationError) ErrorName() string {
	return "InitiateFileDownloadRequestValidationError"
}

// Error satisfies the builtin error interface
func (e InitiateFileDownloadRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInitiateFileDownloadRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InitiateFileDownloadRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InitiateFileDownloadRequestValidationError{}

// Validate checks the field values on InitiateFileDownloadResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InitiateFileDownloadResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InitiateFileDownloadResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InitiateFileDownloadResponseMultiError, or nil if none found.
func (m *InitiateFileDownloadResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *InitiateFileDownloadResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InitiateFileDownloadResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InitiateFileDownloadResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InitiateFileDownloadResponseValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InitiateFileDownloadResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InitiateFileDownloadResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InitiateFileDownloadResponseValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetProtocols() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InitiateFileDownloadResponseValidationError{
						field:  fmt.Sprintf("Protocols[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InitiateFileDownloadResponseValidationError{
						field:  fmt.Sprintf("Protocols[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InitiateFileDownloadResponseValidationError{
					field:  fmt.Sprintf("Protocols[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return InitiateFileDownloadResponseMultiError(errors)
	}

	return nil
}

// InitiateFileDownloadResponseMultiError is an error wrapping multiple
// validation errors returned by InitiateFileDownloadResponse.ValidateAll() if
// the designated constraints aren't met.
type InitiateFileDownloadResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InitiateFileDownloadResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InitiateFileDownloadResponseMultiError) AllErrors() []error { return m }

// InitiateFileDownloadResponseValidationError is the validation error returned
// by InitiateFileDownloadResponse.Validate if the designated constraints
// aren't met.
type InitiateFileDownloadResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InitiateFileDownloadResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InitiateFileDownloadResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InitiateFileDownloadResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InitiateFileDownloadResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InitiateFileDownloadResponseValidationError) ErrorName() string {
	return "InitiateFileDownloadResponseValidationError"
}

// Error satisfies the builtin error interface
func (e InitiateFileDownloadResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInitiateFileDownloadResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InitiateFileDownloadResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InitiateFileDownloadResponseValidationError{}

// Validate checks the field values on ListGrantsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListGrantsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListGrantsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListGrantsRequestMultiError, or nil if none found.
func (m *ListGrantsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListGrantsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListGrantsRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListGrantsRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListGrantsRequestValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRef()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListGrantsRequestValidationError{
					field:  "Ref",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListGrantsRequestValidationError{
					field:  "Ref",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRef()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListGrantsRequestValidationError{
				field:  "Ref",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for PageSize

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListGrantsRequestMultiError(errors)
	}

	return nil
}

// ListGrantsRequestMultiError is an error wrapping multiple validation errors
// returned by ListGrantsRequest.ValidateAll() if the designated constraints
// aren't met.
type ListGrantsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListGrantsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListGrantsRequestMultiError) AllErrors() []error { return m }

// ListGrantsRequestValidationError is the validation error returned by
// ListGrantsRequest.Validate if the designated constraints aren't met.
type ListGrantsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListGrantsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListGrantsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListGrantsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListGrantsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListGrantsRequestValidationError) ErrorName() string {
	return "ListGrantsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListGrantsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListGrantsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListGrantsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListGrantsRequestValidationError{}

// Validate checks the field values on ListGrantsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListGrantsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListGrantsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListGrantsResponseMultiError, or nil if none found.
func (m *ListGrantsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListGrantsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListGrantsResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListGrantsResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListGrantsResponseValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListGrantsResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListGrantsResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListGrantsResponseValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetGrants() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListGrantsResponseValidationError{
						field:  fmt.Sprintf("Grants[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListGrantsResponseValidationError{
						field:  fmt.Sprintf("Grants[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListGrantsResponseValidationError{
					field:  fmt.Sprintf("Grants[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListGrantsResponseMultiError(errors)
	}

	return nil
}

// ListGrantsResponseMultiError is an error wrapping multiple validation errors
// returned by ListGrantsResponse.ValidateAll() if the designated constraints
// aren't met.
type ListGrantsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListGrantsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListGrantsResponseMultiError) AllErrors() []error { return m }

// ListGrantsResponseValidationError is the validation error returned by
// ListGrantsResponse.Validate if the designated constraints aren't met.
type ListGrantsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListGrantsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListGrantsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListGrantsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListGrantsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListGrantsResponseValidationError) ErrorName() string {
	return "ListGrantsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListGrantsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListGrantsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListGrantsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListGrantsResponseValidationError{}

// Validate checks the field values on ListContainerStreamRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListContainerStreamRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListContainerStreamRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListContainerStreamRequestMultiError, or nil if none found.
func (m *ListContainerStreamRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListContainerStreamRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListContainerStreamRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListContainerStreamRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListContainerStreamRequestValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRef()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListContainerStreamRequestValidationError{
					field:  "Ref",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListContainerStreamRequestValidationError{
					field:  "Ref",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRef()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListContainerStreamRequestValidationError{
				field:  "Ref",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetFieldMask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListContainerStreamRequestValidationError{
					field:  "FieldMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListContainerStreamRequestValidationError{
					field:  "FieldMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFieldMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListContainerStreamRequestValidationError{
				field:  "FieldMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for PageSize

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListContainerStreamRequestMultiError(errors)
	}

	return nil
}

// ListContainerStreamRequestMultiError is an error wrapping multiple
// validation errors returned by ListContainerStreamRequest.ValidateAll() if
// the designated constraints aren't met.
type ListContainerStreamRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListContainerStreamRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListContainerStreamRequestMultiError) AllErrors() []error { return m }

// ListContainerStreamRequestValidationError is the validation error returned
// by ListContainerStreamRequest.Validate if the designated constraints aren't met.
type ListContainerStreamRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListContainerStreamRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListContainerStreamRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListContainerStreamRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListContainerStreamRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListContainerStreamRequestValidationError) ErrorName() string {
	return "ListContainerStreamRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListContainerStreamRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListContainerStreamRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListContainerStreamRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListContainerStreamRequestValidationError{}

// Validate checks the field values on ListContainerStreamResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListContainerStreamResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListContainerStreamResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListContainerStreamResponseMultiError, or nil if none found.
func (m *ListContainerStreamResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListContainerStreamResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListContainerStreamResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListContainerStreamResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListContainerStreamResponseValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListContainerStreamResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListContainerStreamResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListContainerStreamResponseValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListContainerStreamResponseValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListContainerStreamResponseValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListContainerStreamResponseValidationError{
				field:  "Info",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListContainerStreamResponseMultiError(errors)
	}

	return nil
}

// ListContainerStreamResponseMultiError is an error wrapping multiple
// validation errors returned by ListContainerStreamResponse.ValidateAll() if
// the designated constraints aren't met.
type ListContainerStreamResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListContainerStreamResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListContainerStreamResponseMultiError) AllErrors() []error { return m }

// ListContainerStreamResponseValidationError is the validation error returned
// by ListContainerStreamResponse.Validate if the designated constraints
// aren't met.
type ListContainerStreamResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListContainerStreamResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListContainerStreamResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListContainerStreamResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListContainerStreamResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListContainerStreamResponseValidationError) ErrorName() string {
	return "ListContainerStreamResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListContainerStreamResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListContainerStreamResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListContainerStreamResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListContainerStreamResponseValidationError{}

// Validate checks the field values on ListContainerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListContainerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListContainerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListContainerRequestMultiError, or nil if none found.
func (m *ListContainerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListContainerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListContainerRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListContainerRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListContainerRequestValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRef()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListContainerRequestValidationError{
					field:  "Ref",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListContainerRequestValidationError{
					field:  "Ref",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRef()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListContainerRequestValidationError{
				field:  "Ref",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetFieldMask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListContainerRequestValidationError{
					field:  "FieldMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListContainerRequestValidationError{
					field:  "FieldMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFieldMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListContainerRequestValidationError{
				field:  "FieldMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for PageSize

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListContainerRequestMultiError(errors)
	}

	return nil
}

// ListContainerRequestMultiError is an error wrapping multiple validation
// errors returned by ListContainerRequest.ValidateAll() if the designated
// constraints aren't met.
type ListContainerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListContainerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListContainerRequestMultiError) AllErrors() []error { return m }

// ListContainerRequestValidationError is the validation error returned by
// ListContainerRequest.Validate if the designated constraints aren't met.
type ListContainerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListContainerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListContainerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListContainerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListContainerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListContainerRequestValidationError) ErrorName() string {
	return "ListContainerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListContainerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListContainerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListContainerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListContainerRequestValidationError{}

// Validate checks the field values on ListContainerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListContainerResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListContainerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListContainerResponseMultiError, or nil if none found.
func (m *ListContainerResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListContainerResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListContainerResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListContainerResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListContainerResponseValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListContainerResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListContainerResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListContainerResponseValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetInfos() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListContainerResponseValidationError{
						field:  fmt.Sprintf("Infos[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListContainerResponseValidationError{
						field:  fmt.Sprintf("Infos[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListContainerResponseValidationError{
					field:  fmt.Sprintf("Infos[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListContainerResponseMultiError(errors)
	}

	return nil
}

// ListContainerResponseMultiError is an error wrapping multiple validation
// errors returned by ListContainerResponse.ValidateAll() if the designated
// constraints aren't met.
type ListContainerResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListContainerResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListContainerResponseMultiError) AllErrors() []error { return m }

// ListContainerResponseValidationError is the validation error returned by
// ListContainerResponse.Validate if the designated constraints aren't met.
type ListContainerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListContainerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListContainerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListContainerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListContainerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListContainerResponseValidationError) ErrorName() string {
	return "ListContainerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListContainerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListContainerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListContainerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListContainerResponseValidationError{}

// Validate checks the field values on ListFileVersionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListFileVersionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListFileVersionsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListFileVersionsRequestMultiError, or nil if none found.
func (m *ListFileVersionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListFileVersionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListFileVersionsRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListFileVersionsRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListFileVersionsRequestValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRef()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListFileVersionsRequestValidationError{
					field:  "Ref",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListFileVersionsRequestValidationError{
					field:  "Ref",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRef()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListFileVersionsRequestValidationError{
				field:  "Ref",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for PageSize

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListFileVersionsRequestMultiError(errors)
	}

	return nil
}

// ListFileVersionsRequestMultiError is an error wrapping multiple validation
// errors returned by ListFileVersionsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListFileVersionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListFileVersionsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListFileVersionsRequestMultiError) AllErrors() []error { return m }

// ListFileVersionsRequestValidationError is the validation error returned by
// ListFileVersionsRequest.Validate if the designated constraints aren't met.
type ListFileVersionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListFileVersionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListFileVersionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListFileVersionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListFileVersionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListFileVersionsRequestValidationError) ErrorName() string {
	return "ListFileVersionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListFileVersionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListFileVersionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListFileVersionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListFileVersionsRequestValidationError{}

// Validate checks the field values on ListFileVersionsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListFileVersionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListFileVersionsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListFileVersionsResponseMultiError, or nil if none found.
func (m *ListFileVersionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListFileVersionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListFileVersionsResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListFileVersionsResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListFileVersionsResponseValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListFileVersionsResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListFileVersionsResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListFileVersionsResponseValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetVersions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListFileVersionsResponseValidationError{
						field:  fmt.Sprintf("Versions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListFileVersionsResponseValidationError{
						field:  fmt.Sprintf("Versions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListFileVersionsResponseValidationError{
					field:  fmt.Sprintf("Versions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListFileVersionsResponseMultiError(errors)
	}

	return nil
}

// ListFileVersionsResponseMultiError is an error wrapping multiple validation
// errors returned by ListFileVersionsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListFileVersionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListFileVersionsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListFileVersionsResponseMultiError) AllErrors() []error { return m }

// ListFileVersionsResponseValidationError is the validation error returned by
// ListFileVersionsResponse.Validate if the designated constraints aren't met.
type ListFileVersionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListFileVersionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListFileVersionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListFileVersionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListFileVersionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListFileVersionsResponseValidationError) ErrorName() string {
	return "ListFileVersionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListFileVersionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListFileVersionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListFileVersionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListFileVersionsResponseValidationError{}

// Validate checks the field values on ListRecycleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListRecycleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRecycleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRecycleRequestMultiError, or nil if none found.
func (m *ListRecycleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRecycleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListRecycleRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListRecycleRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListRecycleRequestValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetFromTs()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListRecycleRequestValidationError{
					field:  "FromTs",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListRecycleRequestValidationError{
					field:  "FromTs",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFromTs()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListRecycleRequestValidationError{
				field:  "FromTs",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetToTs()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListRecycleRequestValidationError{
					field:  "ToTs",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListRecycleRequestValidationError{
					field:  "ToTs",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetToTs()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListRecycleRequestValidationError{
				field:  "ToTs",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRef()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListRecycleRequestValidationError{
					field:  "Ref",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListRecycleRequestValidationError{
					field:  "Ref",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRef()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListRecycleRequestValidationError{
				field:  "Ref",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Key

	// no validation rules for PageSize

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListRecycleRequestMultiError(errors)
	}

	return nil
}

// ListRecycleRequestMultiError is an error wrapping multiple validation errors
// returned by ListRecycleRequest.ValidateAll() if the designated constraints
// aren't met.
type ListRecycleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRecycleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRecycleRequestMultiError) AllErrors() []error { return m }

// ListRecycleRequestValidationError is the validation error returned by
// ListRecycleRequest.Validate if the designated constraints aren't met.
type ListRecycleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRecycleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRecycleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRecycleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRecycleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRecycleRequestValidationError) ErrorName() string {
	return "ListRecycleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListRecycleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRecycleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRecycleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRecycleRequestValidationError{}

// Validate checks the field values on ListRecycleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListRecycleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRecycleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRecycleResponseMultiError, or nil if none found.
func (m *ListRecycleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRecycleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListRecycleResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListRecycleResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListRecycleResponseValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListRecycleResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListRecycleResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListRecycleResponseValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetRecycleItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListRecycleResponseValidationError{
						field:  fmt.Sprintf("RecycleItems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListRecycleResponseValidationError{
						field:  fmt.Sprintf("RecycleItems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListRecycleResponseValidationError{
					field:  fmt.Sprintf("RecycleItems[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListRecycleResponseMultiError(errors)
	}

	return nil
}

// ListRecycleResponseMultiError is an error wrapping multiple validation
// errors returned by ListRecycleResponse.ValidateAll() if the designated
// constraints aren't met.
type ListRecycleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRecycleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRecycleResponseMultiError) AllErrors() []error { return m }

// ListRecycleResponseValidationError is the validation error returned by
// ListRecycleResponse.Validate if the designated constraints aren't met.
type ListRecycleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRecycleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRecycleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRecycleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRecycleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRecycleResponseValidationError) ErrorName() string {
	return "ListRecycleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListRecycleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRecycleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRecycleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRecycleResponseValidationError{}

// Validate checks the field values on ListRecycleStreamRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListRecycleStreamRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRecycleStreamRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRecycleStreamRequestMultiError, or nil if none found.
func (m *ListRecycleStreamRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRecycleStreamRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListRecycleStreamRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListRecycleStreamRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListRecycleStreamRequestValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetFromTs()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListRecycleStreamRequestValidationError{
					field:  "FromTs",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListRecycleStreamRequestValidationError{
					field:  "FromTs",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFromTs()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListRecycleStreamRequestValidationError{
				field:  "FromTs",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetToTs()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListRecycleStreamRequestValidationError{
					field:  "ToTs",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListRecycleStreamRequestValidationError{
					field:  "ToTs",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetToTs()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListRecycleStreamRequestValidationError{
				field:  "ToTs",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRef()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListRecycleStreamRequestValidationError{
					field:  "Ref",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListRecycleStreamRequestValidationError{
					field:  "Ref",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRef()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListRecycleStreamRequestValidationError{
				field:  "Ref",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Key

	// no validation rules for PageSize

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListRecycleStreamRequestMultiError(errors)
	}

	return nil
}

// ListRecycleStreamRequestMultiError is an error wrapping multiple validation
// errors returned by ListRecycleStreamRequest.ValidateAll() if the designated
// constraints aren't met.
type ListRecycleStreamRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRecycleStreamRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRecycleStreamRequestMultiError) AllErrors() []error { return m }

// ListRecycleStreamRequestValidationError is the validation error returned by
// ListRecycleStreamRequest.Validate if the designated constraints aren't met.
type ListRecycleStreamRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRecycleStreamRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRecycleStreamRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRecycleStreamRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRecycleStreamRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRecycleStreamRequestValidationError) ErrorName() string {
	return "ListRecycleStreamRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListRecycleStreamRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRecycleStreamRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRecycleStreamRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRecycleStreamRequestValidationError{}

// Validate checks the field values on ListRecycleStreamResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListRecycleStreamResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRecycleStreamResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRecycleStreamResponseMultiError, or nil if none found.
func (m *ListRecycleStreamResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRecycleStreamResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListRecycleStreamResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListRecycleStreamResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListRecycleStreamResponseValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListRecycleStreamResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListRecycleStreamResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListRecycleStreamResponseValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRecycleItem()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListRecycleStreamResponseValidationError{
					field:  "RecycleItem",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListRecycleStreamResponseValidationError{
					field:  "RecycleItem",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRecycleItem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListRecycleStreamResponseValidationError{
				field:  "RecycleItem",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListRecycleStreamResponseMultiError(errors)
	}

	return nil
}

// ListRecycleStreamResponseMultiError is an error wrapping multiple validation
// errors returned by ListRecycleStreamResponse.ValidateAll() if the
// designated constraints aren't met.
type ListRecycleStreamResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRecycleStreamResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRecycleStreamResponseMultiError) AllErrors() []error { return m }

// ListRecycleStreamResponseValidationError is the validation error returned by
// ListRecycleStreamResponse.Validate if the designated constraints aren't met.
type ListRecycleStreamResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRecycleStreamResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRecycleStreamResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRecycleStreamResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRecycleStreamResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRecycleStreamResponseValidationError) ErrorName() string {
	return "ListRecycleStreamResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListRecycleStreamResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRecycleStreamResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRecycleStreamResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRecycleStreamResponseValidationError{}

// Validate checks the field values on MoveRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MoveRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MoveRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MoveRequestMultiError, or
// nil if none found.
func (m *MoveRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *MoveRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MoveRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MoveRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MoveRequestValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSource()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MoveRequestValidationError{
					field:  "Source",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MoveRequestValidationError{
					field:  "Source",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MoveRequestValidationError{
				field:  "Source",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDestination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MoveRequestValidationError{
					field:  "Destination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MoveRequestValidationError{
					field:  "Destination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDestination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MoveRequestValidationError{
				field:  "Destination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for LockId

	if len(errors) > 0 {
		return MoveRequestMultiError(errors)
	}

	return nil
}

// MoveRequestMultiError is an error wrapping multiple validation errors
// returned by MoveRequest.ValidateAll() if the designated constraints aren't met.
type MoveRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MoveRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MoveRequestMultiError) AllErrors() []error { return m }

// MoveRequestValidationError is the validation error returned by
// MoveRequest.Validate if the designated constraints aren't met.
type MoveRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MoveRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MoveRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MoveRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MoveRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MoveRequestValidationError) ErrorName() string { return "MoveRequestValidationError" }

// Error satisfies the builtin error interface
func (e MoveRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMoveRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MoveRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MoveRequestValidationError{}

// Validate checks the field values on MoveResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MoveResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MoveResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MoveResponseMultiError, or
// nil if none found.
func (m *MoveResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *MoveResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MoveResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MoveResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MoveResponseValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MoveResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MoveResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MoveResponseValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return MoveResponseMultiError(errors)
	}

	return nil
}

// MoveResponseMultiError is an error wrapping multiple validation errors
// returned by MoveResponse.ValidateAll() if the designated constraints aren't met.
type MoveResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MoveResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MoveResponseMultiError) AllErrors() []error { return m }

// MoveResponseValidationError is the validation error returned by
// MoveResponse.Validate if the designated constraints aren't met.
type MoveResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MoveResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MoveResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MoveResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MoveResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MoveResponseValidationError) ErrorName() string { return "MoveResponseValidationError" }

// Error satisfies the builtin error interface
func (e MoveResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMoveResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MoveResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MoveResponseValidationError{}

// Validate checks the field values on PurgeRecycleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PurgeRecycleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PurgeRecycleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PurgeRecycleRequestMultiError, or nil if none found.
func (m *PurgeRecycleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PurgeRecycleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PurgeRecycleRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PurgeRecycleRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PurgeRecycleRequestValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRef()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PurgeRecycleRequestValidationError{
					field:  "Ref",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PurgeRecycleRequestValidationError{
					field:  "Ref",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRef()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PurgeRecycleRequestValidationError{
				field:  "Ref",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Key

	if len(errors) > 0 {
		return PurgeRecycleRequestMultiError(errors)
	}

	return nil
}

// PurgeRecycleRequestMultiError is an error wrapping multiple validation
// errors returned by PurgeRecycleRequest.ValidateAll() if the designated
// constraints aren't met.
type PurgeRecycleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PurgeRecycleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PurgeRecycleRequestMultiError) AllErrors() []error { return m }

// PurgeRecycleRequestValidationError is the validation error returned by
// PurgeRecycleRequest.Validate if the designated constraints aren't met.
type PurgeRecycleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PurgeRecycleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PurgeRecycleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PurgeRecycleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PurgeRecycleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PurgeRecycleRequestValidationError) ErrorName() string {
	return "PurgeRecycleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PurgeRecycleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPurgeRecycleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PurgeRecycleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PurgeRecycleRequestValidationError{}

// Validate checks the field values on PurgeRecycleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PurgeRecycleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PurgeRecycleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PurgeRecycleResponseMultiError, or nil if none found.
func (m *PurgeRecycleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PurgeRecycleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PurgeRecycleResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PurgeRecycleResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PurgeRecycleResponseValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PurgeRecycleResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PurgeRecycleResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PurgeRecycleResponseValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PurgeRecycleResponseMultiError(errors)
	}

	return nil
}

// PurgeRecycleResponseMultiError is an error wrapping multiple validation
// errors returned by PurgeRecycleResponse.ValidateAll() if the designated
// constraints aren't met.
type PurgeRecycleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PurgeRecycleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PurgeRecycleResponseMultiError) AllErrors() []error { return m }

// PurgeRecycleResponseValidationError is the validation error returned by
// PurgeRecycleResponse.Validate if the designated constraints aren't met.
type PurgeRecycleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PurgeRecycleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PurgeRecycleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PurgeRecycleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PurgeRecycleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PurgeRecycleResponseValidationError) ErrorName() string {
	return "PurgeRecycleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PurgeRecycleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPurgeRecycleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PurgeRecycleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PurgeRecycleResponseValidationError{}

// Validate checks the field values on RestoreFileVersionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RestoreFileVersionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RestoreFileVersionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RestoreFileVersionRequestMultiError, or nil if none found.
func (m *RestoreFileVersionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RestoreFileVersionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RestoreFileVersionRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RestoreFileVersionRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RestoreFileVersionRequestValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRef()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RestoreFileVersionRequestValidationError{
					field:  "Ref",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RestoreFileVersionRequestValidationError{
					field:  "Ref",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRef()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RestoreFileVersionRequestValidationError{
				field:  "Ref",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Key

	// no validation rules for LockId

	if len(errors) > 0 {
		return RestoreFileVersionRequestMultiError(errors)
	}

	return nil
}

// RestoreFileVersionRequestMultiError is an error wrapping multiple validation
// errors returned by RestoreFileVersionRequest.ValidateAll() if the
// designated constraints aren't met.
type RestoreFileVersionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RestoreFileVersionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RestoreFileVersionRequestMultiError) AllErrors() []error { return m }

// RestoreFileVersionRequestValidationError is the validation error returned by
// RestoreFileVersionRequest.Validate if the designated constraints aren't met.
type RestoreFileVersionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RestoreFileVersionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RestoreFileVersionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RestoreFileVersionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RestoreFileVersionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RestoreFileVersionRequestValidationError) ErrorName() string {
	return "RestoreFileVersionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RestoreFileVersionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRestoreFileVersionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RestoreFileVersionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RestoreFileVersionRequestValidationError{}

// Validate checks the field values on RestoreFileVersionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RestoreFileVersionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RestoreFileVersionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RestoreFileVersionResponseMultiError, or nil if none found.
func (m *RestoreFileVersionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RestoreFileVersionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RestoreFileVersionResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RestoreFileVersionResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RestoreFileVersionResponseValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RestoreFileVersionResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RestoreFileVersionResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RestoreFileVersionResponseValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RestoreFileVersionResponseMultiError(errors)
	}

	return nil
}

// RestoreFileVersionResponseMultiError is an error wrapping multiple
// validation errors returned by RestoreFileVersionResponse.ValidateAll() if
// the designated constraints aren't met.
type RestoreFileVersionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RestoreFileVersionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RestoreFileVersionResponseMultiError) AllErrors() []error { return m }

// RestoreFileVersionResponseValidationError is the validation error returned
// by RestoreFileVersionResponse.Validate if the designated constraints aren't met.
type RestoreFileVersionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RestoreFileVersionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RestoreFileVersionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RestoreFileVersionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RestoreFileVersionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RestoreFileVersionResponseValidationError) ErrorName() string {
	return "RestoreFileVersionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RestoreFileVersionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRestoreFileVersionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RestoreFileVersionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RestoreFileVersionResponseValidationError{}

// Validate checks the field values on RestoreRecycleItemRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RestoreRecycleItemRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RestoreRecycleItemRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RestoreRecycleItemRequestMultiError, or nil if none found.
func (m *RestoreRecycleItemRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RestoreRecycleItemRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RestoreRecycleItemRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RestoreRecycleItemRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RestoreRecycleItemRequestValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRef()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RestoreRecycleItemRequestValidationError{
					field:  "Ref",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RestoreRecycleItemRequestValidationError{
					field:  "Ref",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRef()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RestoreRecycleItemRequestValidationError{
				field:  "Ref",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Key

	if all {
		switch v := interface{}(m.GetRestoreRef()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RestoreRecycleItemRequestValidationError{
					field:  "RestoreRef",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RestoreRecycleItemRequestValidationError{
					field:  "RestoreRef",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRestoreRef()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RestoreRecycleItemRequestValidationError{
				field:  "RestoreRef",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for LockId

	if len(errors) > 0 {
		return RestoreRecycleItemRequestMultiError(errors)
	}

	return nil
}

// RestoreRecycleItemRequestMultiError is an error wrapping multiple validation
// errors returned by RestoreRecycleItemRequest.ValidateAll() if the
// designated constraints aren't met.
type RestoreRecycleItemRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RestoreRecycleItemRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RestoreRecycleItemRequestMultiError) AllErrors() []error { return m }

// RestoreRecycleItemRequestValidationError is the validation error returned by
// RestoreRecycleItemRequest.Validate if the designated constraints aren't met.
type RestoreRecycleItemRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RestoreRecycleItemRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RestoreRecycleItemRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RestoreRecycleItemRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RestoreRecycleItemRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RestoreRecycleItemRequestValidationError) ErrorName() string {
	return "RestoreRecycleItemRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RestoreRecycleItemRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRestoreRecycleItemRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RestoreRecycleItemRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RestoreRecycleItemRequestValidationError{}

// Validate checks the field values on RestoreRecycleItemResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RestoreRecycleItemResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RestoreRecycleItemResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RestoreRecycleItemResponseMultiError, or nil if none found.
func (m *RestoreRecycleItemResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RestoreRecycleItemResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RestoreRecycleItemResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RestoreRecycleItemResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RestoreRecycleItemResponseValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RestoreRecycleItemResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RestoreRecycleItemResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RestoreRecycleItemResponseValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RestoreRecycleItemResponseMultiError(errors)
	}

	return nil
}

// RestoreRecycleItemResponseMultiError is an error wrapping multiple
// validation errors returned by RestoreRecycleItemResponse.ValidateAll() if
// the designated constraints aren't met.
type RestoreRecycleItemResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RestoreRecycleItemResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RestoreRecycleItemResponseMultiError) AllErrors() []error { return m }

// RestoreRecycleItemResponseValidationError is the validation error returned
// by RestoreRecycleItemResponse.Validate if the designated constraints aren't met.
type RestoreRecycleItemResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RestoreRecycleItemResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RestoreRecycleItemResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RestoreRecycleItemResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RestoreRecycleItemResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RestoreRecycleItemResponseValidationError) ErrorName() string {
	return "RestoreRecycleItemResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RestoreRecycleItemResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRestoreRecycleItemResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RestoreRecycleItemResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RestoreRecycleItemResponseValidationError{}

// Validate checks the field values on RemoveGrantRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveGrantRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveGrantRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveGrantRequestMultiError, or nil if none found.
func (m *RemoveGrantRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveGrantRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RemoveGrantRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RemoveGrantRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RemoveGrantRequestValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRef()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RemoveGrantRequestValidationError{
					field:  "Ref",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RemoveGrantRequestValidationError{
					field:  "Ref",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRef()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RemoveGrantRequestValidationError{
				field:  "Ref",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetGrant()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RemoveGrantRequestValidationError{
					field:  "Grant",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RemoveGrantRequestValidationError{
					field:  "Grant",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGrant()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RemoveGrantRequestValidationError{
				field:  "Grant",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for LockId

	if len(errors) > 0 {
		return RemoveGrantRequestMultiError(errors)
	}

	return nil
}

// RemoveGrantRequestMultiError is an error wrapping multiple validation errors
// returned by RemoveGrantRequest.ValidateAll() if the designated constraints
// aren't met.
type RemoveGrantRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveGrantRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveGrantRequestMultiError) AllErrors() []error { return m }

// RemoveGrantRequestValidationError is the validation error returned by
// RemoveGrantRequest.Validate if the designated constraints aren't met.
type RemoveGrantRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveGrantRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveGrantRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveGrantRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveGrantRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveGrantRequestValidationError) ErrorName() string {
	return "RemoveGrantRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveGrantRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveGrantRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveGrantRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveGrantRequestValidationError{}

// Validate checks the field values on RemoveGrantResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveGrantResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveGrantResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveGrantResponseMultiError, or nil if none found.
func (m *RemoveGrantResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveGrantResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RemoveGrantResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RemoveGrantResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RemoveGrantResponseValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RemoveGrantResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RemoveGrantResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RemoveGrantResponseValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RemoveGrantResponseMultiError(errors)
	}

	return nil
}

// RemoveGrantResponseMultiError is an error wrapping multiple validation
// errors returned by RemoveGrantResponse.ValidateAll() if the designated
// constraints aren't met.
type RemoveGrantResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveGrantResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveGrantResponseMultiError) AllErrors() []error { return m }

// RemoveGrantResponseValidationError is the validation error returned by
// RemoveGrantResponse.Validate if the designated constraints aren't met.
type RemoveGrantResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveGrantResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveGrantResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveGrantResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveGrantResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveGrantResponseValidationError) ErrorName() string {
	return "RemoveGrantResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveGrantResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveGrantResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveGrantResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveGrantResponseValidationError{}

// Validate checks the field values on StatRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StatRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StatRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StatRequestMultiError, or
// nil if none found.
func (m *StatRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StatRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StatRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StatRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StatRequestValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRef()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StatRequestValidationError{
					field:  "Ref",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StatRequestValidationError{
					field:  "Ref",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRef()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StatRequestValidationError{
				field:  "Ref",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetFieldMask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StatRequestValidationError{
					field:  "FieldMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StatRequestValidationError{
					field:  "FieldMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFieldMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StatRequestValidationError{
				field:  "FieldMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return StatRequestMultiError(errors)
	}

	return nil
}

// StatRequestMultiError is an error wrapping multiple validation errors
// returned by StatRequest.ValidateAll() if the designated constraints aren't met.
type StatRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StatRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StatRequestMultiError) AllErrors() []error { return m }

// StatRequestValidationError is the validation error returned by
// StatRequest.Validate if the designated constraints aren't met.
type StatRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StatRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StatRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StatRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StatRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StatRequestValidationError) ErrorName() string { return "StatRequestValidationError" }

// Error satisfies the builtin error interface
func (e StatRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStatRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StatRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StatRequestValidationError{}

// Validate checks the field values on StatResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StatResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StatResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StatResponseMultiError, or
// nil if none found.
func (m *StatResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StatResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StatResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StatResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StatResponseValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StatResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StatResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StatResponseValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StatResponseValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StatResponseValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StatResponseValidationError{
				field:  "Info",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return StatResponseMultiError(errors)
	}

	return nil
}

// StatResponseMultiError is an error wrapping multiple validation errors
// returned by StatResponse.ValidateAll() if the designated constraints aren't met.
type StatResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StatResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StatResponseMultiError) AllErrors() []error { return m }

// StatResponseValidationError is the validation error returned by
// StatResponse.Validate if the designated constraints aren't met.
type StatResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StatResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StatResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StatResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StatResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StatResponseValidationError) ErrorName() string { return "StatResponseValidationError" }

// Error satisfies the builtin error interface
func (e StatResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStatResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StatResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StatResponseValidationError{}

// Validate checks the field values on UpdateGrantRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateGrantRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateGrantRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateGrantRequestMultiError, or nil if none found.
func (m *UpdateGrantRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateGrantRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateGrantRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateGrantRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateGrantRequestValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRef()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateGrantRequestValidationError{
					field:  "Ref",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateGrantRequestValidationError{
					field:  "Ref",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRef()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateGrantRequestValidationError{
				field:  "Ref",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetGrant()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateGrantRequestValidationError{
					field:  "Grant",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateGrantRequestValidationError{
					field:  "Grant",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGrant()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateGrantRequestValidationError{
				field:  "Grant",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for LockId

	if len(errors) > 0 {
		return UpdateGrantRequestMultiError(errors)
	}

	return nil
}

// UpdateGrantRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateGrantRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateGrantRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateGrantRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateGrantRequestMultiError) AllErrors() []error { return m }

// UpdateGrantRequestValidationError is the validation error returned by
// UpdateGrantRequest.Validate if the designated constraints aren't met.
type UpdateGrantRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateGrantRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateGrantRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateGrantRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateGrantRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateGrantRequestValidationError) ErrorName() string {
	return "UpdateGrantRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateGrantRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateGrantRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateGrantRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateGrantRequestValidationError{}

// Validate checks the field values on UpdateGrantResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateGrantResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateGrantResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateGrantResponseMultiError, or nil if none found.
func (m *UpdateGrantResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateGrantResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateGrantResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateGrantResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateGrantResponseValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateGrantResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateGrantResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateGrantResponseValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateGrantResponseMultiError(errors)
	}

	return nil
}

// UpdateGrantResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateGrantResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateGrantResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateGrantResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateGrantResponseMultiError) AllErrors() []error { return m }

// UpdateGrantResponseValidationError is the validation error returned by
// UpdateGrantResponse.Validate if the designated constraints aren't met.
type UpdateGrantResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateGrantResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateGrantResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateGrantResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateGrantResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateGrantResponseValidationError) ErrorName() string {
	return "UpdateGrantResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateGrantResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateGrantResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateGrantResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateGrantResponseValidationError{}

// Validate checks the field values on CreateSymlinkRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSymlinkRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSymlinkRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSymlinkRequestMultiError, or nil if none found.
func (m *CreateSymlinkRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSymlinkRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateSymlinkRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateSymlinkRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateSymlinkRequestValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRef()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateSymlinkRequestValidationError{
					field:  "Ref",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateSymlinkRequestValidationError{
					field:  "Ref",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRef()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateSymlinkRequestValidationError{
				field:  "Ref",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Target

	if len(errors) > 0 {
		return CreateSymlinkRequestMultiError(errors)
	}

	return nil
}

// CreateSymlinkRequestMultiError is an error wrapping multiple validation
// errors returned by CreateSymlinkRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateSymlinkRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSymlinkRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSymlinkRequestMultiError) AllErrors() []error { return m }

// CreateSymlinkRequestValidationError is the validation error returned by
// CreateSymlinkRequest.Validate if the designated constraints aren't met.
type CreateSymlinkRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSymlinkRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSymlinkRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSymlinkRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSymlinkRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSymlinkRequestValidationError) ErrorName() string {
	return "CreateSymlinkRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSymlinkRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSymlinkRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSymlinkRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSymlinkRequestValidationError{}

// Validate checks the field values on CreateSymlinkResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSymlinkResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSymlinkResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSymlinkResponseMultiError, or nil if none found.
func (m *CreateSymlinkResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSymlinkResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateSymlinkResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateSymlinkResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateSymlinkResponseValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateSymlinkResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateSymlinkResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateSymlinkResponseValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateSymlinkResponseMultiError(errors)
	}

	return nil
}

// CreateSymlinkResponseMultiError is an error wrapping multiple validation
// errors returned by CreateSymlinkResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateSymlinkResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSymlinkResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSymlinkResponseMultiError) AllErrors() []error { return m }

// CreateSymlinkResponseValidationError is the validation error returned by
// CreateSymlinkResponse.Validate if the designated constraints aren't met.
type CreateSymlinkResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSymlinkResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSymlinkResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSymlinkResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSymlinkResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSymlinkResponseValidationError) ErrorName() string {
	return "CreateSymlinkResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSymlinkResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSymlinkResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSymlinkResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSymlinkResponseValidationError{}

// Validate checks the field values on CreateReferenceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateReferenceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateReferenceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateReferenceRequestMultiError, or nil if none found.
func (m *CreateReferenceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateReferenceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateReferenceRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateReferenceRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateReferenceRequestValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRef()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateReferenceRequestValidationError{
					field:  "Ref",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateReferenceRequestValidationError{
					field:  "Ref",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRef()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateReferenceRequestValidationError{
				field:  "Ref",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for TargetUri

	if len(errors) > 0 {
		return CreateReferenceRequestMultiError(errors)
	}

	return nil
}

// CreateReferenceRequestMultiError is an error wrapping multiple validation
// errors returned by CreateReferenceRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateReferenceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateReferenceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateReferenceRequestMultiError) AllErrors() []error { return m }

// CreateReferenceRequestValidationError is the validation error returned by
// CreateReferenceRequest.Validate if the designated constraints aren't met.
type CreateReferenceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateReferenceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateReferenceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateReferenceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateReferenceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateReferenceRequestValidationError) ErrorName() string {
	return "CreateReferenceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateReferenceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateReferenceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateReferenceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateReferenceRequestValidationError{}

// Validate checks the field values on CreateReferenceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateReferenceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateReferenceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateReferenceResponseMultiError, or nil if none found.
func (m *CreateReferenceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateReferenceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateReferenceResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateReferenceResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateReferenceResponseValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateReferenceResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateReferenceResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateReferenceResponseValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateReferenceResponseMultiError(errors)
	}

	return nil
}

// CreateReferenceResponseMultiError is an error wrapping multiple validation
// errors returned by CreateReferenceResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateReferenceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateReferenceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateReferenceResponseMultiError) AllErrors() []error { return m }

// CreateReferenceResponseValidationError is the validation error returned by
// CreateReferenceResponse.Validate if the designated constraints aren't met.
type CreateReferenceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateReferenceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateReferenceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateReferenceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateReferenceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateReferenceResponseValidationError) ErrorName() string {
	return "CreateReferenceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateReferenceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateReferenceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateReferenceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateReferenceResponseValidationError{}

// Validate checks the field values on SetArbitraryMetadataRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetArbitraryMetadataRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetArbitraryMetadataRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetArbitraryMetadataRequestMultiError, or nil if none found.
func (m *SetArbitraryMetadataRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetArbitraryMetadataRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetArbitraryMetadataRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetArbitraryMetadataRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetArbitraryMetadataRequestValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRef()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetArbitraryMetadataRequestValidationError{
					field:  "Ref",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetArbitraryMetadataRequestValidationError{
					field:  "Ref",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRef()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetArbitraryMetadataRequestValidationError{
				field:  "Ref",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetArbitraryMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetArbitraryMetadataRequestValidationError{
					field:  "ArbitraryMetadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetArbitraryMetadataRequestValidationError{
					field:  "ArbitraryMetadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetArbitraryMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetArbitraryMetadataRequestValidationError{
				field:  "ArbitraryMetadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for LockId

	if len(errors) > 0 {
		return SetArbitraryMetadataRequestMultiError(errors)
	}

	return nil
}

// SetArbitraryMetadataRequestMultiError is an error wrapping multiple
// validation errors returned by SetArbitraryMetadataRequest.ValidateAll() if
// the designated constraints aren't met.
type SetArbitraryMetadataRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetArbitraryMetadataRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetArbitraryMetadataRequestMultiError) AllErrors() []error { return m }

// SetArbitraryMetadataRequestValidationError is the validation error returned
// by SetArbitraryMetadataRequest.Validate if the designated constraints
// aren't met.
type SetArbitraryMetadataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetArbitraryMetadataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetArbitraryMetadataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetArbitraryMetadataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetArbitraryMetadataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetArbitraryMetadataRequestValidationError) ErrorName() string {
	return "SetArbitraryMetadataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetArbitraryMetadataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetArbitraryMetadataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetArbitraryMetadataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetArbitraryMetadataRequestValidationError{}

// Validate checks the field values on SetArbitraryMetadataResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetArbitraryMetadataResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetArbitraryMetadataResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetArbitraryMetadataResponseMultiError, or nil if none found.
func (m *SetArbitraryMetadataResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SetArbitraryMetadataResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetArbitraryMetadataResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetArbitraryMetadataResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetArbitraryMetadataResponseValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetArbitraryMetadataResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetArbitraryMetadataResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetArbitraryMetadataResponseValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SetArbitraryMetadataResponseMultiError(errors)
	}

	return nil
}

// SetArbitraryMetadataResponseMultiError is an error wrapping multiple
// validation errors returned by SetArbitraryMetadataResponse.ValidateAll() if
// the designated constraints aren't met.
type SetArbitraryMetadataResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetArbitraryMetadataResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetArbitraryMetadataResponseMultiError) AllErrors() []error { return m }

// SetArbitraryMetadataResponseValidationError is the validation error returned
// by SetArbitraryMetadataResponse.Validate if the designated constraints
// aren't met.
type SetArbitraryMetadataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetArbitraryMetadataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetArbitraryMetadataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetArbitraryMetadataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetArbitraryMetadataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetArbitraryMetadataResponseValidationError) ErrorName() string {
	return "SetArbitraryMetadataResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetArbitraryMetadataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetArbitraryMetadataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetArbitraryMetadataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetArbitraryMetadataResponseValidationError{}

// Validate checks the field values on UnsetArbitraryMetadataRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UnsetArbitraryMetadataRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnsetArbitraryMetadataRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UnsetArbitraryMetadataRequestMultiError, or nil if none found.
func (m *UnsetArbitraryMetadataRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UnsetArbitraryMetadataRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UnsetArbitraryMetadataRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UnsetArbitraryMetadataRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UnsetArbitraryMetadataRequestValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRef()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UnsetArbitraryMetadataRequestValidationError{
					field:  "Ref",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UnsetArbitraryMetadataRequestValidationError{
					field:  "Ref",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRef()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UnsetArbitraryMetadataRequestValidationError{
				field:  "Ref",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for LockId

	if len(errors) > 0 {
		return UnsetArbitraryMetadataRequestMultiError(errors)
	}

	return nil
}

// UnsetArbitraryMetadataRequestMultiError is an error wrapping multiple
// validation errors returned by UnsetArbitraryMetadataRequest.ValidateAll()
// if the designated constraints aren't met.
type UnsetArbitraryMetadataRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnsetArbitraryMetadataRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnsetArbitraryMetadataRequestMultiError) AllErrors() []error { return m }

// UnsetArbitraryMetadataRequestValidationError is the validation error
// returned by UnsetArbitraryMetadataRequest.Validate if the designated
// constraints aren't met.
type UnsetArbitraryMetadataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnsetArbitraryMetadataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnsetArbitraryMetadataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnsetArbitraryMetadataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnsetArbitraryMetadataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnsetArbitraryMetadataRequestValidationError) ErrorName() string {
	return "UnsetArbitraryMetadataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UnsetArbitraryMetadataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnsetArbitraryMetadataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnsetArbitraryMetadataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnsetArbitraryMetadataRequestValidationError{}

// Validate checks the field values on UnsetArbitraryMetadataResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UnsetArbitraryMetadataResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnsetArbitraryMetadataResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UnsetArbitraryMetadataResponseMultiError, or nil if none found.
func (m *UnsetArbitraryMetadataResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UnsetArbitraryMetadataResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UnsetArbitraryMetadataResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UnsetArbitraryMetadataResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UnsetArbitraryMetadataResponseValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UnsetArbitraryMetadataResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UnsetArbitraryMetadataResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UnsetArbitraryMetadataResponseValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UnsetArbitraryMetadataResponseMultiError(errors)
	}

	return nil
}

// UnsetArbitraryMetadataResponseMultiError is an error wrapping multiple
// validation errors returned by UnsetArbitraryMetadataResponse.ValidateAll()
// if the designated constraints aren't met.
type UnsetArbitraryMetadataResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnsetArbitraryMetadataResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnsetArbitraryMetadataResponseMultiError) AllErrors() []error { return m }

// UnsetArbitraryMetadataResponseValidationError is the validation error
// returned by UnsetArbitraryMetadataResponse.Validate if the designated
// constraints aren't met.
type UnsetArbitraryMetadataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnsetArbitraryMetadataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnsetArbitraryMetadataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnsetArbitraryMetadataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnsetArbitraryMetadataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnsetArbitraryMetadataResponseValidationError) ErrorName() string {
	return "UnsetArbitraryMetadataResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UnsetArbitraryMetadataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnsetArbitraryMetadataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnsetArbitraryMetadataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnsetArbitraryMetadataResponseValidationError{}

// Validate checks the field values on SetLockRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SetLockRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetLockRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SetLockRequestMultiError,
// or nil if none found.
func (m *SetLockRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetLockRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetLockRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetLockRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetLockRequestValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRef()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetLockRequestValidationError{
					field:  "Ref",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetLockRequestValidationError{
					field:  "Ref",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRef()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetLockRequestValidationError{
				field:  "Ref",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetLock()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetLockRequestValidationError{
					field:  "Lock",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetLockRequestValidationError{
					field:  "Lock",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLock()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetLockRequestValidationError{
				field:  "Lock",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SetLockRequestMultiError(errors)
	}

	return nil
}

// SetLockRequestMultiError is an error wrapping multiple validation errors
// returned by SetLockRequest.ValidateAll() if the designated constraints
// aren't met.
type SetLockRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetLockRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetLockRequestMultiError) AllErrors() []error { return m }

// SetLockRequestValidationError is the validation error returned by
// SetLockRequest.Validate if the designated constraints aren't met.
type SetLockRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetLockRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetLockRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetLockRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetLockRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetLockRequestValidationError) ErrorName() string { return "SetLockRequestValidationError" }

// Error satisfies the builtin error interface
func (e SetLockRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetLockRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetLockRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetLockRequestValidationError{}

// Validate checks the field values on SetLockResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SetLockResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetLockResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetLockResponseMultiError, or nil if none found.
func (m *SetLockResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SetLockResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetLockResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetLockResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetLockResponseValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetLockResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetLockResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetLockResponseValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SetLockResponseMultiError(errors)
	}

	return nil
}

// SetLockResponseMultiError is an error wrapping multiple validation errors
// returned by SetLockResponse.ValidateAll() if the designated constraints
// aren't met.
type SetLockResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetLockResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetLockResponseMultiError) AllErrors() []error { return m }

// SetLockResponseValidationError is the validation error returned by
// SetLockResponse.Validate if the designated constraints aren't met.
type SetLockResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetLockResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetLockResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetLockResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetLockResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetLockResponseValidationError) ErrorName() string { return "SetLockResponseValidationError" }

// Error satisfies the builtin error interface
func (e SetLockResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetLockResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetLockResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetLockResponseValidationError{}

// Validate checks the field values on GetLockRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetLockRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLockRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetLockRequestMultiError,
// or nil if none found.
func (m *GetLockRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLockRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetLockRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetLockRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetLockRequestValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRef()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetLockRequestValidationError{
					field:  "Ref",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetLockRequestValidationError{
					field:  "Ref",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRef()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetLockRequestValidationError{
				field:  "Ref",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetLockRequestMultiError(errors)
	}

	return nil
}

// GetLockRequestMultiError is an error wrapping multiple validation errors
// returned by GetLockRequest.ValidateAll() if the designated constraints
// aren't met.
type GetLockRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLockRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLockRequestMultiError) AllErrors() []error { return m }

// GetLockRequestValidationError is the validation error returned by
// GetLockRequest.Validate if the designated constraints aren't met.
type GetLockRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLockRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLockRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLockRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLockRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLockRequestValidationError) ErrorName() string { return "GetLockRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetLockRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLockRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLockRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLockRequestValidationError{}

// Validate checks the field values on GetLockResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetLockResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLockResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetLockResponseMultiError, or nil if none found.
func (m *GetLockResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLockResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetLockResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetLockResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetLockResponseValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetLockResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetLockResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetLockResponseValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetLock()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetLockResponseValidationError{
					field:  "Lock",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetLockResponseValidationError{
					field:  "Lock",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLock()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetLockResponseValidationError{
				field:  "Lock",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetLockResponseMultiError(errors)
	}

	return nil
}

// GetLockResponseMultiError is an error wrapping multiple validation errors
// returned by GetLockResponse.ValidateAll() if the designated constraints
// aren't met.
type GetLockResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLockResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLockResponseMultiError) AllErrors() []error { return m }

// GetLockResponseValidationError is the validation error returned by
// GetLockResponse.Validate if the designated constraints aren't met.
type GetLockResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLockResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLockResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLockResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLockResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLockResponseValidationError) ErrorName() string { return "GetLockResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetLockResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLockResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLockResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLockResponseValidationError{}

// Validate checks the field values on RefreshLockRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RefreshLockRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RefreshLockRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RefreshLockRequestMultiError, or nil if none found.
func (m *RefreshLockRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RefreshLockRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RefreshLockRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RefreshLockRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RefreshLockRequestValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRef()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RefreshLockRequestValidationError{
					field:  "Ref",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RefreshLockRequestValidationError{
					field:  "Ref",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRef()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RefreshLockRequestValidationError{
				field:  "Ref",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetLock()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RefreshLockRequestValidationError{
					field:  "Lock",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RefreshLockRequestValidationError{
					field:  "Lock",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLock()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RefreshLockRequestValidationError{
				field:  "Lock",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ExistingLockId

	if len(errors) > 0 {
		return RefreshLockRequestMultiError(errors)
	}

	return nil
}

// RefreshLockRequestMultiError is an error wrapping multiple validation errors
// returned by RefreshLockRequest.ValidateAll() if the designated constraints
// aren't met.
type RefreshLockRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RefreshLockRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RefreshLockRequestMultiError) AllErrors() []error { return m }

// RefreshLockRequestValidationError is the validation error returned by
// RefreshLockRequest.Validate if the designated constraints aren't met.
type RefreshLockRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RefreshLockRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RefreshLockRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RefreshLockRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RefreshLockRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RefreshLockRequestValidationError) ErrorName() string {
	return "RefreshLockRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RefreshLockRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRefreshLockRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RefreshLockRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RefreshLockRequestValidationError{}

// Validate checks the field values on RefreshLockResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RefreshLockResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RefreshLockResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RefreshLockResponseMultiError, or nil if none found.
func (m *RefreshLockResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RefreshLockResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RefreshLockResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RefreshLockResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RefreshLockResponseValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RefreshLockResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RefreshLockResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RefreshLockResponseValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RefreshLockResponseMultiError(errors)
	}

	return nil
}

// RefreshLockResponseMultiError is an error wrapping multiple validation
// errors returned by RefreshLockResponse.ValidateAll() if the designated
// constraints aren't met.
type RefreshLockResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RefreshLockResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RefreshLockResponseMultiError) AllErrors() []error { return m }

// RefreshLockResponseValidationError is the validation error returned by
// RefreshLockResponse.Validate if the designated constraints aren't met.
type RefreshLockResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RefreshLockResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RefreshLockResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RefreshLockResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RefreshLockResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RefreshLockResponseValidationError) ErrorName() string {
	return "RefreshLockResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RefreshLockResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRefreshLockResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RefreshLockResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RefreshLockResponseValidationError{}

// Validate checks the field values on UnlockRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UnlockRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnlockRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UnlockRequestMultiError, or
// nil if none found.
func (m *UnlockRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UnlockRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UnlockRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UnlockRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UnlockRequestValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRef()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UnlockRequestValidationError{
					field:  "Ref",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UnlockRequestValidationError{
					field:  "Ref",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRef()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UnlockRequestValidationError{
				field:  "Ref",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetLock()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UnlockRequestValidationError{
					field:  "Lock",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UnlockRequestValidationError{
					field:  "Lock",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLock()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UnlockRequestValidationError{
				field:  "Lock",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UnlockRequestMultiError(errors)
	}

	return nil
}

// UnlockRequestMultiError is an error wrapping multiple validation errors
// returned by UnlockRequest.ValidateAll() if the designated constraints
// aren't met.
type UnlockRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnlockRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnlockRequestMultiError) AllErrors() []error { return m }

// UnlockRequestValidationError is the validation error returned by
// UnlockRequest.Validate if the designated constraints aren't met.
type UnlockRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnlockRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnlockRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnlockRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnlockRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnlockRequestValidationError) ErrorName() string { return "UnlockRequestValidationError" }

// Error satisfies the builtin error interface
func (e UnlockRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnlockRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnlockRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnlockRequestValidationError{}

// Validate checks the field values on UnlockResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UnlockResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnlockResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UnlockResponseMultiError,
// or nil if none found.
func (m *UnlockResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UnlockResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UnlockResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UnlockResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UnlockResponseValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UnlockResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UnlockResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UnlockResponseValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UnlockResponseMultiError(errors)
	}

	return nil
}

// UnlockResponseMultiError is an error wrapping multiple validation errors
// returned by UnlockResponse.ValidateAll() if the designated constraints
// aren't met.
type UnlockResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnlockResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnlockResponseMultiError) AllErrors() []error { return m }

// UnlockResponseValidationError is the validation error returned by
// UnlockResponse.Validate if the designated constraints aren't met.
type UnlockResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnlockResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnlockResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnlockResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnlockResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnlockResponseValidationError) ErrorName() string { return "UnlockResponseValidationError" }

// Error satisfies the builtin error interface
func (e UnlockResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnlockResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnlockResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnlockResponseValidationError{}

// Validate checks the field values on CreateHomeRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateHomeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateHomeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateHomeRequestMultiError, or nil if none found.
func (m *CreateHomeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateHomeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateHomeRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateHomeRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateHomeRequestValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetQuota()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateHomeRequestValidationError{
					field:  "Quota",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateHomeRequestValidationError{
					field:  "Quota",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetQuota()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateHomeRequestValidationError{
				field:  "Quota",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateHomeRequestMultiError(errors)
	}

	return nil
}

// CreateHomeRequestMultiError is an error wrapping multiple validation errors
// returned by CreateHomeRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateHomeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateHomeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateHomeRequestMultiError) AllErrors() []error { return m }

// CreateHomeRequestValidationError is the validation error returned by
// CreateHomeRequest.Validate if the designated constraints aren't met.
type CreateHomeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateHomeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateHomeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateHomeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateHomeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateHomeRequestValidationError) ErrorName() string {
	return "CreateHomeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateHomeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateHomeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateHomeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateHomeRequestValidationError{}

// Validate checks the field values on CreateHomeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateHomeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateHomeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateHomeResponseMultiError, or nil if none found.
func (m *CreateHomeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateHomeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateHomeResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateHomeResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateHomeResponseValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateHomeResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateHomeResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateHomeResponseValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateHomeResponseMultiError(errors)
	}

	return nil
}

// CreateHomeResponseMultiError is an error wrapping multiple validation errors
// returned by CreateHomeResponse.ValidateAll() if the designated constraints
// aren't met.
type CreateHomeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateHomeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateHomeResponseMultiError) AllErrors() []error { return m }

// CreateHomeResponseValidationError is the validation error returned by
// CreateHomeResponse.Validate if the designated constraints aren't met.
type CreateHomeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateHomeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateHomeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateHomeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateHomeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateHomeResponseValidationError) ErrorName() string {
	return "CreateHomeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateHomeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateHomeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateHomeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateHomeResponseValidationError{}

// Validate checks the field values on CreateStorageSpaceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateStorageSpaceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateStorageSpaceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateStorageSpaceRequestMultiError, or nil if none found.
func (m *CreateStorageSpaceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateStorageSpaceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateStorageSpaceRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateStorageSpaceRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateStorageSpaceRequestValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOwner()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateStorageSpaceRequestValidationError{
					field:  "Owner",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateStorageSpaceRequestValidationError{
					field:  "Owner",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOwner()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateStorageSpaceRequestValidationError{
				field:  "Owner",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Type

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetQuota()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateStorageSpaceRequestValidationError{
					field:  "Quota",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateStorageSpaceRequestValidationError{
					field:  "Quota",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetQuota()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateStorageSpaceRequestValidationError{
				field:  "Quota",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateStorageSpaceRequestMultiError(errors)
	}

	return nil
}

// CreateStorageSpaceRequestMultiError is an error wrapping multiple validation
// errors returned by CreateStorageSpaceRequest.ValidateAll() if the
// designated constraints aren't met.
type CreateStorageSpaceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateStorageSpaceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateStorageSpaceRequestMultiError) AllErrors() []error { return m }

// CreateStorageSpaceRequestValidationError is the validation error returned by
// CreateStorageSpaceRequest.Validate if the designated constraints aren't met.
type CreateStorageSpaceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateStorageSpaceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateStorageSpaceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateStorageSpaceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateStorageSpaceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateStorageSpaceRequestValidationError) ErrorName() string {
	return "CreateStorageSpaceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateStorageSpaceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateStorageSpaceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateStorageSpaceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateStorageSpaceRequestValidationError{}

// Validate checks the field values on CreateStorageSpaceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateStorageSpaceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateStorageSpaceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateStorageSpaceResponseMultiError, or nil if none found.
func (m *CreateStorageSpaceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateStorageSpaceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateStorageSpaceResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateStorageSpaceResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateStorageSpaceResponseValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateStorageSpaceResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateStorageSpaceResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateStorageSpaceResponseValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStorageSpace()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateStorageSpaceResponseValidationError{
					field:  "StorageSpace",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateStorageSpaceResponseValidationError{
					field:  "StorageSpace",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStorageSpace()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateStorageSpaceResponseValidationError{
				field:  "StorageSpace",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateStorageSpaceResponseMultiError(errors)
	}

	return nil
}

// CreateStorageSpaceResponseMultiError is an error wrapping multiple
// validation errors returned by CreateStorageSpaceResponse.ValidateAll() if
// the designated constraints aren't met.
type CreateStorageSpaceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateStorageSpaceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateStorageSpaceResponseMultiError) AllErrors() []error { return m }

// CreateStorageSpaceResponseValidationError is the validation error returned
// by CreateStorageSpaceResponse.Validate if the designated constraints aren't met.
type CreateStorageSpaceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateStorageSpaceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateStorageSpaceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateStorageSpaceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateStorageSpaceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateStorageSpaceResponseValidationError) ErrorName() string {
	return "CreateStorageSpaceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateStorageSpaceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateStorageSpaceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateStorageSpaceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateStorageSpaceResponseValidationError{}

// Validate checks the field values on ListStorageSpacesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListStorageSpacesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListStorageSpacesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListStorageSpacesRequestMultiError, or nil if none found.
func (m *ListStorageSpacesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListStorageSpacesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListStorageSpacesRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListStorageSpacesRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListStorageSpacesRequestValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetFilters() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListStorageSpacesRequestValidationError{
						field:  fmt.Sprintf("Filters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListStorageSpacesRequestValidationError{
						field:  fmt.Sprintf("Filters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListStorageSpacesRequestValidationError{
					field:  fmt.Sprintf("Filters[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetFieldMask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListStorageSpacesRequestValidationError{
					field:  "FieldMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListStorageSpacesRequestValidationError{
					field:  "FieldMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFieldMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListStorageSpacesRequestValidationError{
				field:  "FieldMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for PageSize

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListStorageSpacesRequestMultiError(errors)
	}

	return nil
}

// ListStorageSpacesRequestMultiError is an error wrapping multiple validation
// errors returned by ListStorageSpacesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListStorageSpacesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListStorageSpacesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListStorageSpacesRequestMultiError) AllErrors() []error { return m }

// ListStorageSpacesRequestValidationError is the validation error returned by
// ListStorageSpacesRequest.Validate if the designated constraints aren't met.
type ListStorageSpacesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListStorageSpacesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListStorageSpacesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListStorageSpacesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListStorageSpacesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListStorageSpacesRequestValidationError) ErrorName() string {
	return "ListStorageSpacesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListStorageSpacesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListStorageSpacesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListStorageSpacesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListStorageSpacesRequestValidationError{}

// Validate checks the field values on ListStorageSpacesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListStorageSpacesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListStorageSpacesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListStorageSpacesResponseMultiError, or nil if none found.
func (m *ListStorageSpacesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListStorageSpacesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListStorageSpacesResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListStorageSpacesResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListStorageSpacesResponseValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListStorageSpacesResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListStorageSpacesResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListStorageSpacesResponseValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetStorageSpaces() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListStorageSpacesResponseValidationError{
						field:  fmt.Sprintf("StorageSpaces[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListStorageSpacesResponseValidationError{
						field:  fmt.Sprintf("StorageSpaces[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListStorageSpacesResponseValidationError{
					field:  fmt.Sprintf("StorageSpaces[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListStorageSpacesResponseMultiError(errors)
	}

	return nil
}

// ListStorageSpacesResponseMultiError is an error wrapping multiple validation
// errors returned by ListStorageSpacesResponse.ValidateAll() if the
// designated constraints aren't met.
type ListStorageSpacesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListStorageSpacesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListStorageSpacesResponseMultiError) AllErrors() []error { return m }

// ListStorageSpacesResponseValidationError is the validation error returned by
// ListStorageSpacesResponse.Validate if the designated constraints aren't met.
type ListStorageSpacesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListStorageSpacesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListStorageSpacesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListStorageSpacesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListStorageSpacesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListStorageSpacesResponseValidationError) ErrorName() string {
	return "ListStorageSpacesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListStorageSpacesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListStorageSpacesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListStorageSpacesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListStorageSpacesResponseValidationError{}

// Validate checks the field values on UpdateStorageSpaceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateStorageSpaceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateStorageSpaceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateStorageSpaceRequestMultiError, or nil if none found.
func (m *UpdateStorageSpaceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateStorageSpaceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateStorageSpaceRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateStorageSpaceRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateStorageSpaceRequestValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStorageSpace()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateStorageSpaceRequestValidationError{
					field:  "StorageSpace",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateStorageSpaceRequestValidationError{
					field:  "StorageSpace",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStorageSpace()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateStorageSpaceRequestValidationError{
				field:  "StorageSpace",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateStorageSpaceRequestMultiError(errors)
	}

	return nil
}

// UpdateStorageSpaceRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateStorageSpaceRequest.ValidateAll() if the
// designated constraints aren't met.
type UpdateStorageSpaceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateStorageSpaceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateStorageSpaceRequestMultiError) AllErrors() []error { return m }

// UpdateStorageSpaceRequestValidationError is the validation error returned by
// UpdateStorageSpaceRequest.Validate if the designated constraints aren't met.
type UpdateStorageSpaceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateStorageSpaceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateStorageSpaceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateStorageSpaceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateStorageSpaceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateStorageSpaceRequestValidationError) ErrorName() string {
	return "UpdateStorageSpaceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateStorageSpaceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateStorageSpaceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateStorageSpaceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateStorageSpaceRequestValidationError{}

// Validate checks the field values on UpdateStorageSpaceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateStorageSpaceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateStorageSpaceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateStorageSpaceResponseMultiError, or nil if none found.
func (m *UpdateStorageSpaceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateStorageSpaceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateStorageSpaceResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateStorageSpaceResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateStorageSpaceResponseValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateStorageSpaceResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateStorageSpaceResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateStorageSpaceResponseValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStorageSpace()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateStorageSpaceResponseValidationError{
					field:  "StorageSpace",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateStorageSpaceResponseValidationError{
					field:  "StorageSpace",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStorageSpace()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateStorageSpaceResponseValidationError{
				field:  "StorageSpace",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateStorageSpaceResponseMultiError(errors)
	}

	return nil
}

// UpdateStorageSpaceResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateStorageSpaceResponse.ValidateAll() if
// the designated constraints aren't met.
type UpdateStorageSpaceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateStorageSpaceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateStorageSpaceResponseMultiError) AllErrors() []error { return m }

// UpdateStorageSpaceResponseValidationError is the validation error returned
// by UpdateStorageSpaceResponse.Validate if the designated constraints aren't met.
type UpdateStorageSpaceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateStorageSpaceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateStorageSpaceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateStorageSpaceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateStorageSpaceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateStorageSpaceResponseValidationError) ErrorName() string {
	return "UpdateStorageSpaceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateStorageSpaceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateStorageSpaceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateStorageSpaceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateStorageSpaceResponseValidationError{}

// Validate checks the field values on DeleteStorageSpaceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteStorageSpaceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteStorageSpaceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteStorageSpaceRequestMultiError, or nil if none found.
func (m *DeleteStorageSpaceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteStorageSpaceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteStorageSpaceRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteStorageSpaceRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteStorageSpaceRequestValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteStorageSpaceRequestValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteStorageSpaceRequestValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteStorageSpaceRequestValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteStorageSpaceRequestMultiError(errors)
	}

	return nil
}

// DeleteStorageSpaceRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteStorageSpaceRequest.ValidateAll() if the
// designated constraints aren't met.
type DeleteStorageSpaceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteStorageSpaceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteStorageSpaceRequestMultiError) AllErrors() []error { return m }

// DeleteStorageSpaceRequestValidationError is the validation error returned by
// DeleteStorageSpaceRequest.Validate if the designated constraints aren't met.
type DeleteStorageSpaceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteStorageSpaceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteStorageSpaceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteStorageSpaceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteStorageSpaceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteStorageSpaceRequestValidationError) ErrorName() string {
	return "DeleteStorageSpaceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteStorageSpaceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteStorageSpaceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteStorageSpaceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteStorageSpaceRequestValidationError{}

// Validate checks the field values on DeleteStorageSpaceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteStorageSpaceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteStorageSpaceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteStorageSpaceResponseMultiError, or nil if none found.
func (m *DeleteStorageSpaceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteStorageSpaceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteStorageSpaceResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteStorageSpaceResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteStorageSpaceResponseValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteStorageSpaceResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteStorageSpaceResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteStorageSpaceResponseValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteStorageSpaceResponseMultiError(errors)
	}

	return nil
}

// DeleteStorageSpaceResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteStorageSpaceResponse.ValidateAll() if
// the designated constraints aren't met.
type DeleteStorageSpaceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteStorageSpaceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteStorageSpaceResponseMultiError) AllErrors() []error { return m }

// DeleteStorageSpaceResponseValidationError is the validation error returned
// by DeleteStorageSpaceResponse.Validate if the designated constraints aren't met.
type DeleteStorageSpaceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteStorageSpaceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteStorageSpaceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteStorageSpaceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteStorageSpaceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteStorageSpaceResponseValidationError) ErrorName() string {
	return "DeleteStorageSpaceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteStorageSpaceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteStorageSpaceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteStorageSpaceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteStorageSpaceResponseValidationError{}

// Validate checks the field values on ListStorageSpacesRequest_Filter with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListStorageSpacesRequest_Filter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListStorageSpacesRequest_Filter with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListStorageSpacesRequest_FilterMultiError, or nil if none found.
func (m *ListStorageSpacesRequest_Filter) ValidateAll() error {
	return m.validate(true)
}

func (m *ListStorageSpacesRequest_Filter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	switch v := m.Term.(type) {
	case *ListStorageSpacesRequest_Filter_Id:
		if v == nil {
			err := ListStorageSpacesRequest_FilterValidationError{
				field:  "Term",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetId()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListStorageSpacesRequest_FilterValidationError{
						field:  "Id",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListStorageSpacesRequest_FilterValidationError{
						field:  "Id",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListStorageSpacesRequest_FilterValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ListStorageSpacesRequest_Filter_Owner:
		if v == nil {
			err := ListStorageSpacesRequest_FilterValidationError{
				field:  "Term",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetOwner()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListStorageSpacesRequest_FilterValidationError{
						field:  "Owner",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListStorageSpacesRequest_FilterValidationError{
						field:  "Owner",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetOwner()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListStorageSpacesRequest_FilterValidationError{
					field:  "Owner",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ListStorageSpacesRequest_Filter_SpaceType:
		if v == nil {
			err := ListStorageSpacesRequest_FilterValidationError{
				field:  "Term",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for SpaceType
	case *ListStorageSpacesRequest_Filter_Path:
		if v == nil {
			err := ListStorageSpacesRequest_FilterValidationError{
				field:  "Term",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Path
	case *ListStorageSpacesRequest_Filter_User:
		if v == nil {
			err := ListStorageSpacesRequest_FilterValidationError{
				field:  "Term",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetUser()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListStorageSpacesRequest_FilterValidationError{
						field:  "User",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListStorageSpacesRequest_FilterValidationError{
						field:  "User",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListStorageSpacesRequest_FilterValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return ListStorageSpacesRequest_FilterMultiError(errors)
	}

	return nil
}

// ListStorageSpacesRequest_FilterMultiError is an error wrapping multiple
// validation errors returned by ListStorageSpacesRequest_Filter.ValidateAll()
// if the designated constraints aren't met.
type ListStorageSpacesRequest_FilterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListStorageSpacesRequest_FilterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListStorageSpacesRequest_FilterMultiError) AllErrors() []error { return m }

// ListStorageSpacesRequest_FilterValidationError is the validation error
// returned by ListStorageSpacesRequest_Filter.Validate if the designated
// constraints aren't met.
type ListStorageSpacesRequest_FilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListStorageSpacesRequest_FilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListStorageSpacesRequest_FilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListStorageSpacesRequest_FilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListStorageSpacesRequest_FilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListStorageSpacesRequest_FilterValidationError) ErrorName() string {
	return "ListStorageSpacesRequest_FilterValidationError"
}

// Error satisfies the builtin error interface
func (e ListStorageSpacesRequest_FilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListStorageSpacesRequest_Filter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListStorageSpacesRequest_FilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListStorageSpacesRequest_FilterValidationError{}
