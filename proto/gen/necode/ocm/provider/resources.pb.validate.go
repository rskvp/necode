// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: necode/ocm/provider/resources.proto

package provider

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ServiceType with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ServiceType) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServiceType with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ServiceTypeMultiError, or
// nil if none found.
func (m *ServiceType) ValidateAll() error {
	return m.validate(true)
}

func (m *ServiceType) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Description

	if len(errors) > 0 {
		return ServiceTypeMultiError(errors)
	}

	return nil
}

// ServiceTypeMultiError is an error wrapping multiple validation errors
// returned by ServiceType.ValidateAll() if the designated constraints aren't met.
type ServiceTypeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServiceTypeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServiceTypeMultiError) AllErrors() []error { return m }

// ServiceTypeValidationError is the validation error returned by
// ServiceType.Validate if the designated constraints aren't met.
type ServiceTypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceTypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceTypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceTypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceTypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceTypeValidationError) ErrorName() string { return "ServiceTypeValidationError" }

// Error satisfies the builtin error interface
func (e ServiceTypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServiceType.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceTypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceTypeValidationError{}

// Validate checks the field values on ServiceEndpoint with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ServiceEndpoint) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServiceEndpoint with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ServiceEndpointMultiError, or nil if none found.
func (m *ServiceEndpoint) ValidateAll() error {
	return m.validate(true)
}

func (m *ServiceEndpoint) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ServiceEndpointValidationError{
					field:  "Type",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ServiceEndpointValidationError{
					field:  "Type",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServiceEndpointValidationError{
				field:  "Type",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Name

	// no validation rules for Path

	// no validation rules for IsMonitored

	// no validation rules for Properties

	if len(errors) > 0 {
		return ServiceEndpointMultiError(errors)
	}

	return nil
}

// ServiceEndpointMultiError is an error wrapping multiple validation errors
// returned by ServiceEndpoint.ValidateAll() if the designated constraints
// aren't met.
type ServiceEndpointMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServiceEndpointMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServiceEndpointMultiError) AllErrors() []error { return m }

// ServiceEndpointValidationError is the validation error returned by
// ServiceEndpoint.Validate if the designated constraints aren't met.
type ServiceEndpointValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceEndpointValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceEndpointValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceEndpointValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceEndpointValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceEndpointValidationError) ErrorName() string { return "ServiceEndpointValidationError" }

// Error satisfies the builtin error interface
func (e ServiceEndpointValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServiceEndpoint.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceEndpointValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceEndpointValidationError{}

// Validate checks the field values on Service with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Service) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Service with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ServiceMultiError, or nil if none found.
func (m *Service) ValidateAll() error {
	return m.validate(true)
}

func (m *Service) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Host

	if all {
		switch v := interface{}(m.GetEndpoint()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ServiceValidationError{
					field:  "Endpoint",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ServiceValidationError{
					field:  "Endpoint",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndpoint()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServiceValidationError{
				field:  "Endpoint",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ApiVersion

	for idx, item := range m.GetAdditionalEndpoints() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ServiceValidationError{
						field:  fmt.Sprintf("AdditionalEndpoints[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ServiceValidationError{
						field:  fmt.Sprintf("AdditionalEndpoints[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServiceValidationError{
					field:  fmt.Sprintf("AdditionalEndpoints[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ServiceMultiError(errors)
	}

	return nil
}

// ServiceMultiError is an error wrapping multiple validation errors returned
// by Service.ValidateAll() if the designated constraints aren't met.
type ServiceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServiceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServiceMultiError) AllErrors() []error { return m }

// ServiceValidationError is the validation error returned by Service.Validate
// if the designated constraints aren't met.
type ServiceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceValidationError) ErrorName() string { return "ServiceValidationError" }

// Error satisfies the builtin error interface
func (e ServiceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sService.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceValidationError{}

// Validate checks the field values on ProviderInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ProviderInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProviderInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ProviderInfoMultiError, or
// nil if none found.
func (m *ProviderInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *ProviderInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for FullName

	// no validation rules for Description

	// no validation rules for Organization

	// no validation rules for Domain

	// no validation rules for Homepage

	// no validation rules for Email

	for idx, item := range m.GetServices() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ProviderInfoValidationError{
						field:  fmt.Sprintf("Services[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ProviderInfoValidationError{
						field:  fmt.Sprintf("Services[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProviderInfoValidationError{
					field:  fmt.Sprintf("Services[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Properties

	if len(errors) > 0 {
		return ProviderInfoMultiError(errors)
	}

	return nil
}

// ProviderInfoMultiError is an error wrapping multiple validation errors
// returned by ProviderInfo.ValidateAll() if the designated constraints aren't met.
type ProviderInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProviderInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProviderInfoMultiError) AllErrors() []error { return m }

// ProviderInfoValidationError is the validation error returned by
// ProviderInfo.Validate if the designated constraints aren't met.
type ProviderInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProviderInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProviderInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProviderInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProviderInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProviderInfoValidationError) ErrorName() string { return "ProviderInfoValidationError" }

// Error satisfies the builtin error interface
func (e ProviderInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProviderInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProviderInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProviderInfoValidationError{}
