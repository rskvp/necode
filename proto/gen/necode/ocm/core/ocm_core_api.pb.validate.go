// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: necode/ocm/core/ocm_core_api.proto

package core

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	ocm "github.com/rskvp/necode/proto/gen/necode/sharing/ocm"

	provider "github.com/rskvp/necode/proto/gen/necode/storage/provider"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = ocm.ShareType(0)

	_ = provider.ResourceType(0)
)

// Validate checks the field values on CreateOCMCoreShareRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOCMCoreShareRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOCMCoreShareRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOCMCoreShareRequestMultiError, or nil if none found.
func (m *CreateOCMCoreShareRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOCMCoreShareRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOCMCoreShareRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOCMCoreShareRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOCMCoreShareRequestValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Description

	// no validation rules for Name

	// no validation rules for ResourceId

	if all {
		switch v := interface{}(m.GetOwner()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOCMCoreShareRequestValidationError{
					field:  "Owner",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOCMCoreShareRequestValidationError{
					field:  "Owner",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOwner()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOCMCoreShareRequestValidationError{
				field:  "Owner",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSender()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOCMCoreShareRequestValidationError{
					field:  "Sender",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOCMCoreShareRequestValidationError{
					field:  "Sender",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSender()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOCMCoreShareRequestValidationError{
				field:  "Sender",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetShareWith()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOCMCoreShareRequestValidationError{
					field:  "ShareWith",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOCMCoreShareRequestValidationError{
					field:  "ShareWith",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetShareWith()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOCMCoreShareRequestValidationError{
				field:  "ShareWith",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ResourceType

	// no validation rules for ShareType

	if all {
		switch v := interface{}(m.GetExpiration()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOCMCoreShareRequestValidationError{
					field:  "Expiration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOCMCoreShareRequestValidationError{
					field:  "Expiration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpiration()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOCMCoreShareRequestValidationError{
				field:  "Expiration",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetProtocols() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateOCMCoreShareRequestValidationError{
						field:  fmt.Sprintf("Protocols[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateOCMCoreShareRequestValidationError{
						field:  fmt.Sprintf("Protocols[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateOCMCoreShareRequestValidationError{
					field:  fmt.Sprintf("Protocols[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateOCMCoreShareRequestMultiError(errors)
	}

	return nil
}

// CreateOCMCoreShareRequestMultiError is an error wrapping multiple validation
// errors returned by CreateOCMCoreShareRequest.ValidateAll() if the
// designated constraints aren't met.
type CreateOCMCoreShareRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOCMCoreShareRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOCMCoreShareRequestMultiError) AllErrors() []error { return m }

// CreateOCMCoreShareRequestValidationError is the validation error returned by
// CreateOCMCoreShareRequest.Validate if the designated constraints aren't met.
type CreateOCMCoreShareRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOCMCoreShareRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOCMCoreShareRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOCMCoreShareRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOCMCoreShareRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOCMCoreShareRequestValidationError) ErrorName() string {
	return "CreateOCMCoreShareRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOCMCoreShareRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOCMCoreShareRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOCMCoreShareRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOCMCoreShareRequestValidationError{}

// Validate checks the field values on CreateOCMCoreShareResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOCMCoreShareResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOCMCoreShareResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOCMCoreShareResponseMultiError, or nil if none found.
func (m *CreateOCMCoreShareResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOCMCoreShareResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOCMCoreShareResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOCMCoreShareResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOCMCoreShareResponseValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOCMCoreShareResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOCMCoreShareResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOCMCoreShareResponseValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetCreated()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOCMCoreShareResponseValidationError{
					field:  "Created",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOCMCoreShareResponseValidationError{
					field:  "Created",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOCMCoreShareResponseValidationError{
				field:  "Created",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateOCMCoreShareResponseMultiError(errors)
	}

	return nil
}

// CreateOCMCoreShareResponseMultiError is an error wrapping multiple
// validation errors returned by CreateOCMCoreShareResponse.ValidateAll() if
// the designated constraints aren't met.
type CreateOCMCoreShareResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOCMCoreShareResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOCMCoreShareResponseMultiError) AllErrors() []error { return m }

// CreateOCMCoreShareResponseValidationError is the validation error returned
// by CreateOCMCoreShareResponse.Validate if the designated constraints aren't met.
type CreateOCMCoreShareResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOCMCoreShareResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOCMCoreShareResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOCMCoreShareResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOCMCoreShareResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOCMCoreShareResponseValidationError) ErrorName() string {
	return "CreateOCMCoreShareResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOCMCoreShareResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOCMCoreShareResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOCMCoreShareResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOCMCoreShareResponseValidationError{}

// Validate checks the field values on UpdateOCMCoreShareRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateOCMCoreShareRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOCMCoreShareRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateOCMCoreShareRequestMultiError, or nil if none found.
func (m *UpdateOCMCoreShareRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOCMCoreShareRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateOCMCoreShareRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateOCMCoreShareRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateOCMCoreShareRequestValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for OcmShareId

	// no validation rules for Description

	// no validation rules for ShareType

	if all {
		switch v := interface{}(m.GetExpiration()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateOCMCoreShareRequestValidationError{
					field:  "Expiration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateOCMCoreShareRequestValidationError{
					field:  "Expiration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpiration()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateOCMCoreShareRequestValidationError{
				field:  "Expiration",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetProtocols() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateOCMCoreShareRequestValidationError{
						field:  fmt.Sprintf("Protocols[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateOCMCoreShareRequestValidationError{
						field:  fmt.Sprintf("Protocols[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateOCMCoreShareRequestValidationError{
					field:  fmt.Sprintf("Protocols[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpdateOCMCoreShareRequestMultiError(errors)
	}

	return nil
}

// UpdateOCMCoreShareRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateOCMCoreShareRequest.ValidateAll() if the
// designated constraints aren't met.
type UpdateOCMCoreShareRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOCMCoreShareRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOCMCoreShareRequestMultiError) AllErrors() []error { return m }

// UpdateOCMCoreShareRequestValidationError is the validation error returned by
// UpdateOCMCoreShareRequest.Validate if the designated constraints aren't met.
type UpdateOCMCoreShareRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOCMCoreShareRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOCMCoreShareRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOCMCoreShareRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOCMCoreShareRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOCMCoreShareRequestValidationError) ErrorName() string {
	return "UpdateOCMCoreShareRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOCMCoreShareRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOCMCoreShareRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOCMCoreShareRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOCMCoreShareRequestValidationError{}

// Validate checks the field values on UpdateOCMCoreShareResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateOCMCoreShareResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOCMCoreShareResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateOCMCoreShareResponseMultiError, or nil if none found.
func (m *UpdateOCMCoreShareResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOCMCoreShareResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateOCMCoreShareResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateOCMCoreShareResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateOCMCoreShareResponseValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateOCMCoreShareResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateOCMCoreShareResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateOCMCoreShareResponseValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateOCMCoreShareResponseMultiError(errors)
	}

	return nil
}

// UpdateOCMCoreShareResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateOCMCoreShareResponse.ValidateAll() if
// the designated constraints aren't met.
type UpdateOCMCoreShareResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOCMCoreShareResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOCMCoreShareResponseMultiError) AllErrors() []error { return m }

// UpdateOCMCoreShareResponseValidationError is the validation error returned
// by UpdateOCMCoreShareResponse.Validate if the designated constraints aren't met.
type UpdateOCMCoreShareResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOCMCoreShareResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOCMCoreShareResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOCMCoreShareResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOCMCoreShareResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOCMCoreShareResponseValidationError) ErrorName() string {
	return "UpdateOCMCoreShareResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOCMCoreShareResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOCMCoreShareResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOCMCoreShareResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOCMCoreShareResponseValidationError{}

// Validate checks the field values on DeleteOCMCoreShareRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteOCMCoreShareRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteOCMCoreShareRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteOCMCoreShareRequestMultiError, or nil if none found.
func (m *DeleteOCMCoreShareRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteOCMCoreShareRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteOCMCoreShareRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteOCMCoreShareRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteOCMCoreShareRequestValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteOCMCoreShareRequestMultiError(errors)
	}

	return nil
}

// DeleteOCMCoreShareRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteOCMCoreShareRequest.ValidateAll() if the
// designated constraints aren't met.
type DeleteOCMCoreShareRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteOCMCoreShareRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteOCMCoreShareRequestMultiError) AllErrors() []error { return m }

// DeleteOCMCoreShareRequestValidationError is the validation error returned by
// DeleteOCMCoreShareRequest.Validate if the designated constraints aren't met.
type DeleteOCMCoreShareRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteOCMCoreShareRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteOCMCoreShareRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteOCMCoreShareRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteOCMCoreShareRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteOCMCoreShareRequestValidationError) ErrorName() string {
	return "DeleteOCMCoreShareRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteOCMCoreShareRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteOCMCoreShareRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteOCMCoreShareRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteOCMCoreShareRequestValidationError{}

// Validate checks the field values on DeleteOCMCoreShareResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteOCMCoreShareResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteOCMCoreShareResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteOCMCoreShareResponseMultiError, or nil if none found.
func (m *DeleteOCMCoreShareResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteOCMCoreShareResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteOCMCoreShareResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteOCMCoreShareResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteOCMCoreShareResponseValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteOCMCoreShareResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteOCMCoreShareResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteOCMCoreShareResponseValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteOCMCoreShareResponseMultiError(errors)
	}

	return nil
}

// DeleteOCMCoreShareResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteOCMCoreShareResponse.ValidateAll() if
// the designated constraints aren't met.
type DeleteOCMCoreShareResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteOCMCoreShareResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteOCMCoreShareResponseMultiError) AllErrors() []error { return m }

// DeleteOCMCoreShareResponseValidationError is the validation error returned
// by DeleteOCMCoreShareResponse.Validate if the designated constraints aren't met.
type DeleteOCMCoreShareResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteOCMCoreShareResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteOCMCoreShareResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteOCMCoreShareResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteOCMCoreShareResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteOCMCoreShareResponseValidationError) ErrorName() string {
	return "DeleteOCMCoreShareResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteOCMCoreShareResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteOCMCoreShareResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteOCMCoreShareResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteOCMCoreShareResponseValidationError{}
