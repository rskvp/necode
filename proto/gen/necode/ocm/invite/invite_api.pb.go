// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: necode/ocm/invite/invite_api.proto

package invite

import (
	user "github.com/rskvp/necode/proto/gen/necode/identity/user"
	provider "github.com/rskvp/necode/proto/gen/necode/ocm/provider"
	rpc "github.com/rskvp/necode/proto/gen/necode/rpc"
	types "github.com/rskvp/necode/proto/gen/necode/types"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GenerateInviteTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// OPTIONAL.
	// Opaque information.
	Opaque *types.Opaque `protobuf:"bytes,1,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// OPTIONAL.
	// The description of the token.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *GenerateInviteTokenRequest) Reset() {
	*x = GenerateInviteTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_ocm_invite_invite_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateInviteTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateInviteTokenRequest) ProtoMessage() {}

func (x *GenerateInviteTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_necode_ocm_invite_invite_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateInviteTokenRequest.ProtoReflect.Descriptor instead.
func (*GenerateInviteTokenRequest) Descriptor() ([]byte, []int) {
	return file_necode_ocm_invite_invite_api_proto_rawDescGZIP(), []int{0}
}

func (x *GenerateInviteTokenRequest) GetOpaque() *types.Opaque {
	if x != nil {
		return x.Opaque
	}
	return nil
}

func (x *GenerateInviteTokenRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type GenerateInviteTokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// REQUIRED.
	// The response status.
	Status *rpc.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// OPTIONAL.
	// Opaque information.
	Opaque *types.Opaque `protobuf:"bytes,2,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// REQUIRED.
	// The generated token.
	InviteToken *InviteToken `protobuf:"bytes,3,opt,name=invite_token,json=inviteToken,proto3" json:"invite_token,omitempty"`
}

func (x *GenerateInviteTokenResponse) Reset() {
	*x = GenerateInviteTokenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_ocm_invite_invite_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateInviteTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateInviteTokenResponse) ProtoMessage() {}

func (x *GenerateInviteTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_necode_ocm_invite_invite_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateInviteTokenResponse.ProtoReflect.Descriptor instead.
func (*GenerateInviteTokenResponse) Descriptor() ([]byte, []int) {
	return file_necode_ocm_invite_invite_api_proto_rawDescGZIP(), []int{1}
}

func (x *GenerateInviteTokenResponse) GetStatus() *rpc.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GenerateInviteTokenResponse) GetOpaque() *types.Opaque {
	if x != nil {
		return x.Opaque
	}
	return nil
}

func (x *GenerateInviteTokenResponse) GetInviteToken() *InviteToken {
	if x != nil {
		return x.InviteToken
	}
	return nil
}

type ListInviteTokensRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListInviteTokensRequest) Reset() {
	*x = ListInviteTokensRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_ocm_invite_invite_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInviteTokensRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInviteTokensRequest) ProtoMessage() {}

func (x *ListInviteTokensRequest) ProtoReflect() protoreflect.Message {
	mi := &file_necode_ocm_invite_invite_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInviteTokensRequest.ProtoReflect.Descriptor instead.
func (*ListInviteTokensRequest) Descriptor() ([]byte, []int) {
	return file_necode_ocm_invite_invite_api_proto_rawDescGZIP(), []int{2}
}

type ListInviteTokensResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// REQUIRED.
	// The response status.
	Status *rpc.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// REQUIRED.
	// The list of valid tokens.
	InviteTokens []*InviteToken `protobuf:"bytes,2,rep,name=invite_tokens,json=inviteTokens,proto3" json:"invite_tokens,omitempty"`
}

func (x *ListInviteTokensResponse) Reset() {
	*x = ListInviteTokensResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_ocm_invite_invite_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInviteTokensResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInviteTokensResponse) ProtoMessage() {}

func (x *ListInviteTokensResponse) ProtoReflect() protoreflect.Message {
	mi := &file_necode_ocm_invite_invite_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInviteTokensResponse.ProtoReflect.Descriptor instead.
func (*ListInviteTokensResponse) Descriptor() ([]byte, []int) {
	return file_necode_ocm_invite_invite_api_proto_rawDescGZIP(), []int{3}
}

func (x *ListInviteTokensResponse) GetStatus() *rpc.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ListInviteTokensResponse) GetInviteTokens() []*InviteToken {
	if x != nil {
		return x.InviteTokens
	}
	return nil
}

type ForwardInviteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// OPTIONAL.
	// Opaque information.
	Opaque *types.Opaque `protobuf:"bytes,1,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// REQUIRED.
	// The token to authenticate with.
	InviteToken *InviteToken `protobuf:"bytes,2,opt,name=invite_token,json=inviteToken,proto3" json:"invite_token,omitempty"`
	// REQUIRED.
	// The details of the sync'n'share system provider of the user who sent the invite.
	OriginSystemProvider *provider.ProviderInfo `protobuf:"bytes,3,opt,name=origin_system_provider,json=originSystemProvider,proto3" json:"origin_system_provider,omitempty"`
}

func (x *ForwardInviteRequest) Reset() {
	*x = ForwardInviteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_ocm_invite_invite_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForwardInviteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForwardInviteRequest) ProtoMessage() {}

func (x *ForwardInviteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_necode_ocm_invite_invite_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForwardInviteRequest.ProtoReflect.Descriptor instead.
func (*ForwardInviteRequest) Descriptor() ([]byte, []int) {
	return file_necode_ocm_invite_invite_api_proto_rawDescGZIP(), []int{4}
}

func (x *ForwardInviteRequest) GetOpaque() *types.Opaque {
	if x != nil {
		return x.Opaque
	}
	return nil
}

func (x *ForwardInviteRequest) GetInviteToken() *InviteToken {
	if x != nil {
		return x.InviteToken
	}
	return nil
}

func (x *ForwardInviteRequest) GetOriginSystemProvider() *provider.ProviderInfo {
	if x != nil {
		return x.OriginSystemProvider
	}
	return nil
}

type ForwardInviteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// REQUIRED.
	// The response status.
	Status *rpc.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// OPTIONAL.
	// Opaque information.
	Opaque *types.Opaque `protobuf:"bytes,2,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// REQUIRED.
	// The initiator's user id of the workflow.
	UserId *user.UserId `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// REQUIRED.
	// The initiator's email of the workflow.
	Email string `protobuf:"bytes,4,opt,name=email,proto3" json:"email,omitempty"`
	// REQUIRED.
	// The initiator's display name of the workflow.
	DisplayName string `protobuf:"bytes,5,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
}

func (x *ForwardInviteResponse) Reset() {
	*x = ForwardInviteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_ocm_invite_invite_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForwardInviteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForwardInviteResponse) ProtoMessage() {}

func (x *ForwardInviteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_necode_ocm_invite_invite_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForwardInviteResponse.ProtoReflect.Descriptor instead.
func (*ForwardInviteResponse) Descriptor() ([]byte, []int) {
	return file_necode_ocm_invite_invite_api_proto_rawDescGZIP(), []int{5}
}

func (x *ForwardInviteResponse) GetStatus() *rpc.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ForwardInviteResponse) GetOpaque() *types.Opaque {
	if x != nil {
		return x.Opaque
	}
	return nil
}

func (x *ForwardInviteResponse) GetUserId() *user.UserId {
	if x != nil {
		return x.UserId
	}
	return nil
}

func (x *ForwardInviteResponse) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *ForwardInviteResponse) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

type AcceptInviteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// OPTIONAL.
	// Opaque information.
	Opaque *types.Opaque `protobuf:"bytes,1,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// REQUIRED.
	// The token to authenticate with.
	InviteToken *InviteToken `protobuf:"bytes,2,opt,name=invite_token,json=inviteToken,proto3" json:"invite_token,omitempty"`
	// REQUIRED.
	// The user who accepted the invite.
	RemoteUser *user.User `protobuf:"bytes,3,opt,name=remote_user,json=remoteUser,proto3" json:"remote_user,omitempty"`
}

func (x *AcceptInviteRequest) Reset() {
	*x = AcceptInviteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_ocm_invite_invite_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcceptInviteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcceptInviteRequest) ProtoMessage() {}

func (x *AcceptInviteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_necode_ocm_invite_invite_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcceptInviteRequest.ProtoReflect.Descriptor instead.
func (*AcceptInviteRequest) Descriptor() ([]byte, []int) {
	return file_necode_ocm_invite_invite_api_proto_rawDescGZIP(), []int{6}
}

func (x *AcceptInviteRequest) GetOpaque() *types.Opaque {
	if x != nil {
		return x.Opaque
	}
	return nil
}

func (x *AcceptInviteRequest) GetInviteToken() *InviteToken {
	if x != nil {
		return x.InviteToken
	}
	return nil
}

func (x *AcceptInviteRequest) GetRemoteUser() *user.User {
	if x != nil {
		return x.RemoteUser
	}
	return nil
}

type AcceptInviteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// REQUIRED.
	// The response status.
	Status *rpc.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// OPTIONAL.
	// Opaque information.
	Opaque *types.Opaque `protobuf:"bytes,2,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// REQUIRED.
	// The initiator's user id of the workflow.
	UserId *user.UserId `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// REQUIRED.
	// The initiator's email of the workflow.
	Email string `protobuf:"bytes,4,opt,name=email,proto3" json:"email,omitempty"`
	// REQUIRED.
	// The initiator's display name of the workflow.
	DisplayName string `protobuf:"bytes,5,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
}

func (x *AcceptInviteResponse) Reset() {
	*x = AcceptInviteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_ocm_invite_invite_api_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcceptInviteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcceptInviteResponse) ProtoMessage() {}

func (x *AcceptInviteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_necode_ocm_invite_invite_api_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcceptInviteResponse.ProtoReflect.Descriptor instead.
func (*AcceptInviteResponse) Descriptor() ([]byte, []int) {
	return file_necode_ocm_invite_invite_api_proto_rawDescGZIP(), []int{7}
}

func (x *AcceptInviteResponse) GetStatus() *rpc.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *AcceptInviteResponse) GetOpaque() *types.Opaque {
	if x != nil {
		return x.Opaque
	}
	return nil
}

func (x *AcceptInviteResponse) GetUserId() *user.UserId {
	if x != nil {
		return x.UserId
	}
	return nil
}

func (x *AcceptInviteResponse) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *AcceptInviteResponse) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

type GetAcceptedUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// OPTIONAL.
	// Opaque information.
	Opaque *types.Opaque `protobuf:"bytes,1,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// REQUIRED.
	// The id of the user.
	RemoteUserId *user.UserId `protobuf:"bytes,2,opt,name=remote_user_id,json=remoteUserId,proto3" json:"remote_user_id,omitempty"`
}

func (x *GetAcceptedUserRequest) Reset() {
	*x = GetAcceptedUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_ocm_invite_invite_api_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAcceptedUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAcceptedUserRequest) ProtoMessage() {}

func (x *GetAcceptedUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_necode_ocm_invite_invite_api_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAcceptedUserRequest.ProtoReflect.Descriptor instead.
func (*GetAcceptedUserRequest) Descriptor() ([]byte, []int) {
	return file_necode_ocm_invite_invite_api_proto_rawDescGZIP(), []int{8}
}

func (x *GetAcceptedUserRequest) GetOpaque() *types.Opaque {
	if x != nil {
		return x.Opaque
	}
	return nil
}

func (x *GetAcceptedUserRequest) GetRemoteUserId() *user.UserId {
	if x != nil {
		return x.RemoteUserId
	}
	return nil
}

type GetAcceptedUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// REQUIRED.
	// The response status.
	Status *rpc.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// OPTIONAL.
	// Opaque information.
	Opaque *types.Opaque `protobuf:"bytes,2,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// REQUIRED.
	// The user information.
	RemoteUser *user.User `protobuf:"bytes,3,opt,name=remote_user,json=remoteUser,proto3" json:"remote_user,omitempty"`
}

func (x *GetAcceptedUserResponse) Reset() {
	*x = GetAcceptedUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_ocm_invite_invite_api_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAcceptedUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAcceptedUserResponse) ProtoMessage() {}

func (x *GetAcceptedUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_necode_ocm_invite_invite_api_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAcceptedUserResponse.ProtoReflect.Descriptor instead.
func (*GetAcceptedUserResponse) Descriptor() ([]byte, []int) {
	return file_necode_ocm_invite_invite_api_proto_rawDescGZIP(), []int{9}
}

func (x *GetAcceptedUserResponse) GetStatus() *rpc.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetAcceptedUserResponse) GetOpaque() *types.Opaque {
	if x != nil {
		return x.Opaque
	}
	return nil
}

func (x *GetAcceptedUserResponse) GetRemoteUser() *user.User {
	if x != nil {
		return x.RemoteUser
	}
	return nil
}

type FindAcceptedUsersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// OPTIONAL.
	// Opaque information.
	Opaque *types.Opaque `protobuf:"bytes,1,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// REQUIRED.
	// The filter to apply.
	Filter string `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *FindAcceptedUsersRequest) Reset() {
	*x = FindAcceptedUsersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_ocm_invite_invite_api_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAcceptedUsersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAcceptedUsersRequest) ProtoMessage() {}

func (x *FindAcceptedUsersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_necode_ocm_invite_invite_api_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAcceptedUsersRequest.ProtoReflect.Descriptor instead.
func (*FindAcceptedUsersRequest) Descriptor() ([]byte, []int) {
	return file_necode_ocm_invite_invite_api_proto_rawDescGZIP(), []int{10}
}

func (x *FindAcceptedUsersRequest) GetOpaque() *types.Opaque {
	if x != nil {
		return x.Opaque
	}
	return nil
}

func (x *FindAcceptedUsersRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

type FindAcceptedUsersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// REQUIRED.
	// The response status.
	Status *rpc.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// OPTIONAL.
	// Opaque information.
	Opaque *types.Opaque `protobuf:"bytes,2,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// REQUIRED.
	// The accepted users matching the specified filter.
	AcceptedUsers []*user.User `protobuf:"bytes,3,rep,name=accepted_users,json=acceptedUsers,proto3" json:"accepted_users,omitempty"`
}

func (x *FindAcceptedUsersResponse) Reset() {
	*x = FindAcceptedUsersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_ocm_invite_invite_api_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAcceptedUsersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAcceptedUsersResponse) ProtoMessage() {}

func (x *FindAcceptedUsersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_necode_ocm_invite_invite_api_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAcceptedUsersResponse.ProtoReflect.Descriptor instead.
func (*FindAcceptedUsersResponse) Descriptor() ([]byte, []int) {
	return file_necode_ocm_invite_invite_api_proto_rawDescGZIP(), []int{11}
}

func (x *FindAcceptedUsersResponse) GetStatus() *rpc.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *FindAcceptedUsersResponse) GetOpaque() *types.Opaque {
	if x != nil {
		return x.Opaque
	}
	return nil
}

func (x *FindAcceptedUsersResponse) GetAcceptedUsers() []*user.User {
	if x != nil {
		return x.AcceptedUsers
	}
	return nil
}

type DeleteAcceptedUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// OPTIONAL.
	// Opaque information.
	Opaque *types.Opaque `protobuf:"bytes,1,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// REQUIRED.
	// The id of the user.
	RemoteUserId *user.UserId `protobuf:"bytes,2,opt,name=remote_user_id,json=remoteUserId,proto3" json:"remote_user_id,omitempty"`
}

func (x *DeleteAcceptedUserRequest) Reset() {
	*x = DeleteAcceptedUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_ocm_invite_invite_api_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAcceptedUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAcceptedUserRequest) ProtoMessage() {}

func (x *DeleteAcceptedUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_necode_ocm_invite_invite_api_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAcceptedUserRequest.ProtoReflect.Descriptor instead.
func (*DeleteAcceptedUserRequest) Descriptor() ([]byte, []int) {
	return file_necode_ocm_invite_invite_api_proto_rawDescGZIP(), []int{12}
}

func (x *DeleteAcceptedUserRequest) GetOpaque() *types.Opaque {
	if x != nil {
		return x.Opaque
	}
	return nil
}

func (x *DeleteAcceptedUserRequest) GetRemoteUserId() *user.UserId {
	if x != nil {
		return x.RemoteUserId
	}
	return nil
}

type DeleteAcceptedUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// REQUIRED.
	// The response status.
	Status *rpc.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// OPTIONAL.
	// Opaque information.
	Opaque *types.Opaque `protobuf:"bytes,2,opt,name=opaque,proto3" json:"opaque,omitempty"`
}

func (x *DeleteAcceptedUserResponse) Reset() {
	*x = DeleteAcceptedUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_ocm_invite_invite_api_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAcceptedUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAcceptedUserResponse) ProtoMessage() {}

func (x *DeleteAcceptedUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_necode_ocm_invite_invite_api_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAcceptedUserResponse.ProtoReflect.Descriptor instead.
func (*DeleteAcceptedUserResponse) Descriptor() ([]byte, []int) {
	return file_necode_ocm_invite_invite_api_proto_rawDescGZIP(), []int{13}
}

func (x *DeleteAcceptedUserResponse) GetStatus() *rpc.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *DeleteAcceptedUserResponse) GetOpaque() *types.Opaque {
	if x != nil {
		return x.Opaque
	}
	return nil
}

var File_necode_ocm_invite_invite_api_proto protoreflect.FileDescriptor

var file_necode_ocm_invite_invite_api_proto_rawDesc = []byte{
	0x0a, 0x22, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2f, 0x6f, 0x63, 0x6d, 0x2f, 0x69, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x6f, 0x63, 0x6d,
	0x2e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x1a, 0x24, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2f,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x6e,
	0x65, 0x63, 0x6f, 0x64, 0x65, 0x2f, 0x6f, 0x63, 0x6d, 0x2f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x23, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2f, 0x6f, 0x63, 0x6d, 0x2f, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2f, 0x72, 0x70,
	0x63, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18,
	0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x6c, 0x0a, 0x1a, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x06, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x52, 0x06, 0x6f, 0x70,
	0x61, 0x71, 0x75, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xba, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x2c, 0x0a, 0x06, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x52, 0x06, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65,
	0x12, 0x41, 0x0a, 0x0c, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e,
	0x6f, 0x63, 0x6d, 0x2e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x0b, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x22, 0x19, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x8b,
	0x01, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6e, 0x65,
	0x63, 0x6f, 0x64, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x43, 0x0a, 0x0d, 0x69, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x6f, 0x63, 0x6d, 0x2e, 0x69, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x0c,
	0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x22, 0xe0, 0x01, 0x0a,
	0x14, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x06, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x52, 0x06, 0x6f, 0x70, 0x61,
	0x71, 0x75, 0x65, 0x12, 0x41, 0x0a, 0x0c, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6e, 0x65, 0x63, 0x6f,
	0x64, 0x65, 0x2e, 0x6f, 0x63, 0x6d, 0x2e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x2e, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x0b, 0x69, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x57, 0x0a, 0x16, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e,
	0x6f, 0x63, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x14, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x22,
	0xe1, 0x01, 0x0a, 0x15, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6e, 0x65, 0x63, 0x6f,
	0x64, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2c, 0x0a, 0x06, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x52, 0x06, 0x6f, 0x70, 0x61,
	0x71, 0x75, 0x65, 0x12, 0x35, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0xc3, 0x01, 0x0a, 0x13, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x06, 0x6f,
	0x70, 0x61, 0x71, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x65,
	0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4f, 0x70, 0x61, 0x71, 0x75,
	0x65, 0x52, 0x06, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x12, 0x41, 0x0a, 0x0c, 0x69, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x6f, 0x63, 0x6d, 0x2e, 0x69, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52,
	0x0b, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x3b, 0x0a, 0x0b,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x0a, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x22, 0xe0, 0x01, 0x0a, 0x14, 0x41, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2c,
	0x0a, 0x06, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4f, 0x70,
	0x61, 0x71, 0x75, 0x65, 0x52, 0x06, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x12, 0x35, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x8a, 0x01, 0x0a,
	0x16, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x06, 0x6f, 0x70, 0x61, 0x71, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x52, 0x06, 0x6f,
	0x70, 0x61, 0x71, 0x75, 0x65, 0x12, 0x42, 0x0a, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x0c, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xb0, 0x01, 0x0a, 0x17, 0x47, 0x65,
	0x74, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x2c, 0x0a, 0x06, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x52, 0x06, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x12,
	0x3b, 0x0a, 0x0b, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x22, 0x60, 0x0a, 0x18,
	0x46, 0x69, 0x6e, 0x64, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x06, 0x6f, 0x70, 0x61, 0x71,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64,
	0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x52, 0x06,
	0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0xb8,
	0x01, 0x0a, 0x19, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x55,
	0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6e,
	0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2c, 0x0a, 0x06, 0x6f, 0x70, 0x61, 0x71,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64,
	0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x52, 0x06,
	0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x12, 0x41, 0x0a, 0x0e, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74,
	0x65, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x0d, 0x61, 0x63, 0x63, 0x65,
	0x70, 0x74, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x73, 0x22, 0x8d, 0x01, 0x0a, 0x19, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x06, 0x6f, 0x70, 0x61, 0x71, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x52, 0x06, 0x6f,
	0x70, 0x61, 0x71, 0x75, 0x65, 0x12, 0x42, 0x0a, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x0c, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x76, 0x0a, 0x1a, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x2c, 0x0a, 0x06, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x52, 0x06, 0x6f, 0x70, 0x61, 0x71, 0x75,
	0x65, 0x32, 0x80, 0x06, 0x0a, 0x09, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x41, 0x50, 0x49, 0x12,
	0x74, 0x0a, 0x13, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2d, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e,
	0x6f, 0x63, 0x6d, 0x2e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x6f,
	0x63, 0x6d, 0x2e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6b, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x2a, 0x2e, 0x6e, 0x65, 0x63, 0x6f,
	0x64, 0x65, 0x2e, 0x6f, 0x63, 0x6d, 0x2e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x6f,
	0x63, 0x6d, 0x2e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x62, 0x0a, 0x0d, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x12, 0x27, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x6f, 0x63, 0x6d,
	0x2e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x2e, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6e,
	0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x6f, 0x63, 0x6d, 0x2e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x2e, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x0c, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x12, 0x26, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e,
	0x6f, 0x63, 0x6d, 0x2e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27,
	0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x6f, 0x63, 0x6d, 0x2e, 0x69, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x68, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x41, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x29, 0x2e, 0x6e, 0x65, 0x63,
	0x6f, 0x64, 0x65, 0x2e, 0x6f, 0x63, 0x6d, 0x2e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x6f,
	0x63, 0x6d, 0x2e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x6e, 0x0a, 0x11, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65,
	0x64, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x2b, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e,
	0x6f, 0x63, 0x6d, 0x2e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41,
	0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x6f, 0x63, 0x6d,
	0x2e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x63, 0x63, 0x65,
	0x70, 0x74, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x71, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x2c, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65,
	0x2e, 0x6f, 0x63, 0x6d, 0x2e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x6f,
	0x63, 0x6d, 0x2e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x42, 0xc2, 0x01, 0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x63,
	0x6f, 0x64, 0x65, 0x2e, 0x6f, 0x63, 0x6d, 0x2e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x42, 0x0e,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x33, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x73, 0x6b,
	0x76, 0x70, 0x2f, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x67, 0x65, 0x6e, 0x2f, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2f, 0x6f, 0x63, 0x6d, 0x2f, 0x69,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0xa2, 0x02, 0x03, 0x4e, 0x4f, 0x49, 0xaa, 0x02, 0x11, 0x4e, 0x65,
	0x63, 0x6f, 0x64, 0x65, 0x2e, 0x4f, 0x63, 0x6d, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0xca,
	0x02, 0x11, 0x4e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x5c, 0x4f, 0x63, 0x6d, 0x5c, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0xe2, 0x02, 0x1d, 0x4e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x5c, 0x4f, 0x63, 0x6d,
	0x5c, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0xea, 0x02, 0x13, 0x4e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x3a, 0x3a, 0x4f, 0x63,
	0x6d, 0x3a, 0x3a, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_necode_ocm_invite_invite_api_proto_rawDescOnce sync.Once
	file_necode_ocm_invite_invite_api_proto_rawDescData = file_necode_ocm_invite_invite_api_proto_rawDesc
)

func file_necode_ocm_invite_invite_api_proto_rawDescGZIP() []byte {
	file_necode_ocm_invite_invite_api_proto_rawDescOnce.Do(func() {
		file_necode_ocm_invite_invite_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_necode_ocm_invite_invite_api_proto_rawDescData)
	})
	return file_necode_ocm_invite_invite_api_proto_rawDescData
}

var file_necode_ocm_invite_invite_api_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_necode_ocm_invite_invite_api_proto_goTypes = []interface{}{
	(*GenerateInviteTokenRequest)(nil),  // 0: necode.ocm.invite.GenerateInviteTokenRequest
	(*GenerateInviteTokenResponse)(nil), // 1: necode.ocm.invite.GenerateInviteTokenResponse
	(*ListInviteTokensRequest)(nil),     // 2: necode.ocm.invite.ListInviteTokensRequest
	(*ListInviteTokensResponse)(nil),    // 3: necode.ocm.invite.ListInviteTokensResponse
	(*ForwardInviteRequest)(nil),        // 4: necode.ocm.invite.ForwardInviteRequest
	(*ForwardInviteResponse)(nil),       // 5: necode.ocm.invite.ForwardInviteResponse
	(*AcceptInviteRequest)(nil),         // 6: necode.ocm.invite.AcceptInviteRequest
	(*AcceptInviteResponse)(nil),        // 7: necode.ocm.invite.AcceptInviteResponse
	(*GetAcceptedUserRequest)(nil),      // 8: necode.ocm.invite.GetAcceptedUserRequest
	(*GetAcceptedUserResponse)(nil),     // 9: necode.ocm.invite.GetAcceptedUserResponse
	(*FindAcceptedUsersRequest)(nil),    // 10: necode.ocm.invite.FindAcceptedUsersRequest
	(*FindAcceptedUsersResponse)(nil),   // 11: necode.ocm.invite.FindAcceptedUsersResponse
	(*DeleteAcceptedUserRequest)(nil),   // 12: necode.ocm.invite.DeleteAcceptedUserRequest
	(*DeleteAcceptedUserResponse)(nil),  // 13: necode.ocm.invite.DeleteAcceptedUserResponse
	(*types.Opaque)(nil),                // 14: necode.types.Opaque
	(*rpc.Status)(nil),                  // 15: necode.rpc.Status
	(*InviteToken)(nil),                 // 16: necode.ocm.invite.InviteToken
	(*provider.ProviderInfo)(nil),       // 17: necode.ocm.provider.ProviderInfo
	(*user.UserId)(nil),                 // 18: necode.identity.user.UserId
	(*user.User)(nil),                   // 19: necode.identity.user.User
}
var file_necode_ocm_invite_invite_api_proto_depIdxs = []int32{
	14, // 0: necode.ocm.invite.GenerateInviteTokenRequest.opaque:type_name -> necode.types.Opaque
	15, // 1: necode.ocm.invite.GenerateInviteTokenResponse.status:type_name -> necode.rpc.Status
	14, // 2: necode.ocm.invite.GenerateInviteTokenResponse.opaque:type_name -> necode.types.Opaque
	16, // 3: necode.ocm.invite.GenerateInviteTokenResponse.invite_token:type_name -> necode.ocm.invite.InviteToken
	15, // 4: necode.ocm.invite.ListInviteTokensResponse.status:type_name -> necode.rpc.Status
	16, // 5: necode.ocm.invite.ListInviteTokensResponse.invite_tokens:type_name -> necode.ocm.invite.InviteToken
	14, // 6: necode.ocm.invite.ForwardInviteRequest.opaque:type_name -> necode.types.Opaque
	16, // 7: necode.ocm.invite.ForwardInviteRequest.invite_token:type_name -> necode.ocm.invite.InviteToken
	17, // 8: necode.ocm.invite.ForwardInviteRequest.origin_system_provider:type_name -> necode.ocm.provider.ProviderInfo
	15, // 9: necode.ocm.invite.ForwardInviteResponse.status:type_name -> necode.rpc.Status
	14, // 10: necode.ocm.invite.ForwardInviteResponse.opaque:type_name -> necode.types.Opaque
	18, // 11: necode.ocm.invite.ForwardInviteResponse.user_id:type_name -> necode.identity.user.UserId
	14, // 12: necode.ocm.invite.AcceptInviteRequest.opaque:type_name -> necode.types.Opaque
	16, // 13: necode.ocm.invite.AcceptInviteRequest.invite_token:type_name -> necode.ocm.invite.InviteToken
	19, // 14: necode.ocm.invite.AcceptInviteRequest.remote_user:type_name -> necode.identity.user.User
	15, // 15: necode.ocm.invite.AcceptInviteResponse.status:type_name -> necode.rpc.Status
	14, // 16: necode.ocm.invite.AcceptInviteResponse.opaque:type_name -> necode.types.Opaque
	18, // 17: necode.ocm.invite.AcceptInviteResponse.user_id:type_name -> necode.identity.user.UserId
	14, // 18: necode.ocm.invite.GetAcceptedUserRequest.opaque:type_name -> necode.types.Opaque
	18, // 19: necode.ocm.invite.GetAcceptedUserRequest.remote_user_id:type_name -> necode.identity.user.UserId
	15, // 20: necode.ocm.invite.GetAcceptedUserResponse.status:type_name -> necode.rpc.Status
	14, // 21: necode.ocm.invite.GetAcceptedUserResponse.opaque:type_name -> necode.types.Opaque
	19, // 22: necode.ocm.invite.GetAcceptedUserResponse.remote_user:type_name -> necode.identity.user.User
	14, // 23: necode.ocm.invite.FindAcceptedUsersRequest.opaque:type_name -> necode.types.Opaque
	15, // 24: necode.ocm.invite.FindAcceptedUsersResponse.status:type_name -> necode.rpc.Status
	14, // 25: necode.ocm.invite.FindAcceptedUsersResponse.opaque:type_name -> necode.types.Opaque
	19, // 26: necode.ocm.invite.FindAcceptedUsersResponse.accepted_users:type_name -> necode.identity.user.User
	14, // 27: necode.ocm.invite.DeleteAcceptedUserRequest.opaque:type_name -> necode.types.Opaque
	18, // 28: necode.ocm.invite.DeleteAcceptedUserRequest.remote_user_id:type_name -> necode.identity.user.UserId
	15, // 29: necode.ocm.invite.DeleteAcceptedUserResponse.status:type_name -> necode.rpc.Status
	14, // 30: necode.ocm.invite.DeleteAcceptedUserResponse.opaque:type_name -> necode.types.Opaque
	0,  // 31: necode.ocm.invite.InviteAPI.GenerateInviteToken:input_type -> necode.ocm.invite.GenerateInviteTokenRequest
	2,  // 32: necode.ocm.invite.InviteAPI.ListInviteTokens:input_type -> necode.ocm.invite.ListInviteTokensRequest
	4,  // 33: necode.ocm.invite.InviteAPI.ForwardInvite:input_type -> necode.ocm.invite.ForwardInviteRequest
	6,  // 34: necode.ocm.invite.InviteAPI.AcceptInvite:input_type -> necode.ocm.invite.AcceptInviteRequest
	8,  // 35: necode.ocm.invite.InviteAPI.GetAcceptedUser:input_type -> necode.ocm.invite.GetAcceptedUserRequest
	10, // 36: necode.ocm.invite.InviteAPI.FindAcceptedUsers:input_type -> necode.ocm.invite.FindAcceptedUsersRequest
	12, // 37: necode.ocm.invite.InviteAPI.DeleteAcceptedUser:input_type -> necode.ocm.invite.DeleteAcceptedUserRequest
	1,  // 38: necode.ocm.invite.InviteAPI.GenerateInviteToken:output_type -> necode.ocm.invite.GenerateInviteTokenResponse
	3,  // 39: necode.ocm.invite.InviteAPI.ListInviteTokens:output_type -> necode.ocm.invite.ListInviteTokensResponse
	5,  // 40: necode.ocm.invite.InviteAPI.ForwardInvite:output_type -> necode.ocm.invite.ForwardInviteResponse
	7,  // 41: necode.ocm.invite.InviteAPI.AcceptInvite:output_type -> necode.ocm.invite.AcceptInviteResponse
	9,  // 42: necode.ocm.invite.InviteAPI.GetAcceptedUser:output_type -> necode.ocm.invite.GetAcceptedUserResponse
	11, // 43: necode.ocm.invite.InviteAPI.FindAcceptedUsers:output_type -> necode.ocm.invite.FindAcceptedUsersResponse
	13, // 44: necode.ocm.invite.InviteAPI.DeleteAcceptedUser:output_type -> necode.ocm.invite.DeleteAcceptedUserResponse
	38, // [38:45] is the sub-list for method output_type
	31, // [31:38] is the sub-list for method input_type
	31, // [31:31] is the sub-list for extension type_name
	31, // [31:31] is the sub-list for extension extendee
	0,  // [0:31] is the sub-list for field type_name
}

func init() { file_necode_ocm_invite_invite_api_proto_init() }
func file_necode_ocm_invite_invite_api_proto_init() {
	if File_necode_ocm_invite_invite_api_proto != nil {
		return
	}
	file_necode_ocm_invite_resources_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_necode_ocm_invite_invite_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateInviteTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_ocm_invite_invite_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateInviteTokenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_ocm_invite_invite_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInviteTokensRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_ocm_invite_invite_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInviteTokensResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_ocm_invite_invite_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForwardInviteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_ocm_invite_invite_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForwardInviteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_ocm_invite_invite_api_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcceptInviteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_ocm_invite_invite_api_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcceptInviteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_ocm_invite_invite_api_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAcceptedUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_ocm_invite_invite_api_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAcceptedUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_ocm_invite_invite_api_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAcceptedUsersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_ocm_invite_invite_api_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAcceptedUsersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_ocm_invite_invite_api_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAcceptedUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_ocm_invite_invite_api_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAcceptedUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_necode_ocm_invite_invite_api_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_necode_ocm_invite_invite_api_proto_goTypes,
		DependencyIndexes: file_necode_ocm_invite_invite_api_proto_depIdxs,
		MessageInfos:      file_necode_ocm_invite_invite_api_proto_msgTypes,
	}.Build()
	File_necode_ocm_invite_invite_api_proto = out.File
	file_necode_ocm_invite_invite_api_proto_rawDesc = nil
	file_necode_ocm_invite_invite_api_proto_goTypes = nil
	file_necode_ocm_invite_invite_api_proto_depIdxs = nil
}
