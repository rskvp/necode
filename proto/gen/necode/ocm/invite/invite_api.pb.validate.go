// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: necode/ocm/invite/invite_api.proto

package invite

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GenerateInviteTokenRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GenerateInviteTokenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerateInviteTokenRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GenerateInviteTokenRequestMultiError, or nil if none found.
func (m *GenerateInviteTokenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateInviteTokenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GenerateInviteTokenRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GenerateInviteTokenRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GenerateInviteTokenRequestValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Description

	if len(errors) > 0 {
		return GenerateInviteTokenRequestMultiError(errors)
	}

	return nil
}

// GenerateInviteTokenRequestMultiError is an error wrapping multiple
// validation errors returned by GenerateInviteTokenRequest.ValidateAll() if
// the designated constraints aren't met.
type GenerateInviteTokenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateInviteTokenRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateInviteTokenRequestMultiError) AllErrors() []error { return m }

// GenerateInviteTokenRequestValidationError is the validation error returned
// by GenerateInviteTokenRequest.Validate if the designated constraints aren't met.
type GenerateInviteTokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateInviteTokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateInviteTokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateInviteTokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateInviteTokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateInviteTokenRequestValidationError) ErrorName() string {
	return "GenerateInviteTokenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GenerateInviteTokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateInviteTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateInviteTokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateInviteTokenRequestValidationError{}

// Validate checks the field values on GenerateInviteTokenResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GenerateInviteTokenResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerateInviteTokenResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GenerateInviteTokenResponseMultiError, or nil if none found.
func (m *GenerateInviteTokenResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateInviteTokenResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GenerateInviteTokenResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GenerateInviteTokenResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GenerateInviteTokenResponseValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GenerateInviteTokenResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GenerateInviteTokenResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GenerateInviteTokenResponseValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetInviteToken()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GenerateInviteTokenResponseValidationError{
					field:  "InviteToken",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GenerateInviteTokenResponseValidationError{
					field:  "InviteToken",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInviteToken()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GenerateInviteTokenResponseValidationError{
				field:  "InviteToken",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GenerateInviteTokenResponseMultiError(errors)
	}

	return nil
}

// GenerateInviteTokenResponseMultiError is an error wrapping multiple
// validation errors returned by GenerateInviteTokenResponse.ValidateAll() if
// the designated constraints aren't met.
type GenerateInviteTokenResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateInviteTokenResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateInviteTokenResponseMultiError) AllErrors() []error { return m }

// GenerateInviteTokenResponseValidationError is the validation error returned
// by GenerateInviteTokenResponse.Validate if the designated constraints
// aren't met.
type GenerateInviteTokenResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateInviteTokenResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateInviteTokenResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateInviteTokenResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateInviteTokenResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateInviteTokenResponseValidationError) ErrorName() string {
	return "GenerateInviteTokenResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GenerateInviteTokenResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateInviteTokenResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateInviteTokenResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateInviteTokenResponseValidationError{}

// Validate checks the field values on ListInviteTokensRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListInviteTokensRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListInviteTokensRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListInviteTokensRequestMultiError, or nil if none found.
func (m *ListInviteTokensRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListInviteTokensRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListInviteTokensRequestMultiError(errors)
	}

	return nil
}

// ListInviteTokensRequestMultiError is an error wrapping multiple validation
// errors returned by ListInviteTokensRequest.ValidateAll() if the designated
// constraints aren't met.
type ListInviteTokensRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListInviteTokensRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListInviteTokensRequestMultiError) AllErrors() []error { return m }

// ListInviteTokensRequestValidationError is the validation error returned by
// ListInviteTokensRequest.Validate if the designated constraints aren't met.
type ListInviteTokensRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListInviteTokensRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListInviteTokensRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListInviteTokensRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListInviteTokensRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListInviteTokensRequestValidationError) ErrorName() string {
	return "ListInviteTokensRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListInviteTokensRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListInviteTokensRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListInviteTokensRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListInviteTokensRequestValidationError{}

// Validate checks the field values on ListInviteTokensResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListInviteTokensResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListInviteTokensResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListInviteTokensResponseMultiError, or nil if none found.
func (m *ListInviteTokensResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListInviteTokensResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListInviteTokensResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListInviteTokensResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListInviteTokensResponseValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetInviteTokens() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListInviteTokensResponseValidationError{
						field:  fmt.Sprintf("InviteTokens[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListInviteTokensResponseValidationError{
						field:  fmt.Sprintf("InviteTokens[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListInviteTokensResponseValidationError{
					field:  fmt.Sprintf("InviteTokens[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListInviteTokensResponseMultiError(errors)
	}

	return nil
}

// ListInviteTokensResponseMultiError is an error wrapping multiple validation
// errors returned by ListInviteTokensResponse.ValidateAll() if the designated
// constraints aren't met.
type ListInviteTokensResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListInviteTokensResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListInviteTokensResponseMultiError) AllErrors() []error { return m }

// ListInviteTokensResponseValidationError is the validation error returned by
// ListInviteTokensResponse.Validate if the designated constraints aren't met.
type ListInviteTokensResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListInviteTokensResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListInviteTokensResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListInviteTokensResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListInviteTokensResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListInviteTokensResponseValidationError) ErrorName() string {
	return "ListInviteTokensResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListInviteTokensResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListInviteTokensResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListInviteTokensResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListInviteTokensResponseValidationError{}

// Validate checks the field values on ForwardInviteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ForwardInviteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ForwardInviteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ForwardInviteRequestMultiError, or nil if none found.
func (m *ForwardInviteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ForwardInviteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ForwardInviteRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ForwardInviteRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ForwardInviteRequestValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetInviteToken()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ForwardInviteRequestValidationError{
					field:  "InviteToken",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ForwardInviteRequestValidationError{
					field:  "InviteToken",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInviteToken()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ForwardInviteRequestValidationError{
				field:  "InviteToken",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOriginSystemProvider()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ForwardInviteRequestValidationError{
					field:  "OriginSystemProvider",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ForwardInviteRequestValidationError{
					field:  "OriginSystemProvider",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOriginSystemProvider()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ForwardInviteRequestValidationError{
				field:  "OriginSystemProvider",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ForwardInviteRequestMultiError(errors)
	}

	return nil
}

// ForwardInviteRequestMultiError is an error wrapping multiple validation
// errors returned by ForwardInviteRequest.ValidateAll() if the designated
// constraints aren't met.
type ForwardInviteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ForwardInviteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ForwardInviteRequestMultiError) AllErrors() []error { return m }

// ForwardInviteRequestValidationError is the validation error returned by
// ForwardInviteRequest.Validate if the designated constraints aren't met.
type ForwardInviteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ForwardInviteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ForwardInviteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ForwardInviteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ForwardInviteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ForwardInviteRequestValidationError) ErrorName() string {
	return "ForwardInviteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ForwardInviteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sForwardInviteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ForwardInviteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ForwardInviteRequestValidationError{}

// Validate checks the field values on ForwardInviteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ForwardInviteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ForwardInviteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ForwardInviteResponseMultiError, or nil if none found.
func (m *ForwardInviteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ForwardInviteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ForwardInviteResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ForwardInviteResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ForwardInviteResponseValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ForwardInviteResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ForwardInviteResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ForwardInviteResponseValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUserId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ForwardInviteResponseValidationError{
					field:  "UserId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ForwardInviteResponseValidationError{
					field:  "UserId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ForwardInviteResponseValidationError{
				field:  "UserId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Email

	// no validation rules for DisplayName

	if len(errors) > 0 {
		return ForwardInviteResponseMultiError(errors)
	}

	return nil
}

// ForwardInviteResponseMultiError is an error wrapping multiple validation
// errors returned by ForwardInviteResponse.ValidateAll() if the designated
// constraints aren't met.
type ForwardInviteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ForwardInviteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ForwardInviteResponseMultiError) AllErrors() []error { return m }

// ForwardInviteResponseValidationError is the validation error returned by
// ForwardInviteResponse.Validate if the designated constraints aren't met.
type ForwardInviteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ForwardInviteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ForwardInviteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ForwardInviteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ForwardInviteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ForwardInviteResponseValidationError) ErrorName() string {
	return "ForwardInviteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ForwardInviteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sForwardInviteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ForwardInviteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ForwardInviteResponseValidationError{}

// Validate checks the field values on AcceptInviteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AcceptInviteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AcceptInviteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AcceptInviteRequestMultiError, or nil if none found.
func (m *AcceptInviteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AcceptInviteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AcceptInviteRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AcceptInviteRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AcceptInviteRequestValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetInviteToken()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AcceptInviteRequestValidationError{
					field:  "InviteToken",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AcceptInviteRequestValidationError{
					field:  "InviteToken",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInviteToken()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AcceptInviteRequestValidationError{
				field:  "InviteToken",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRemoteUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AcceptInviteRequestValidationError{
					field:  "RemoteUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AcceptInviteRequestValidationError{
					field:  "RemoteUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRemoteUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AcceptInviteRequestValidationError{
				field:  "RemoteUser",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AcceptInviteRequestMultiError(errors)
	}

	return nil
}

// AcceptInviteRequestMultiError is an error wrapping multiple validation
// errors returned by AcceptInviteRequest.ValidateAll() if the designated
// constraints aren't met.
type AcceptInviteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AcceptInviteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AcceptInviteRequestMultiError) AllErrors() []error { return m }

// AcceptInviteRequestValidationError is the validation error returned by
// AcceptInviteRequest.Validate if the designated constraints aren't met.
type AcceptInviteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AcceptInviteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AcceptInviteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AcceptInviteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AcceptInviteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AcceptInviteRequestValidationError) ErrorName() string {
	return "AcceptInviteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AcceptInviteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAcceptInviteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AcceptInviteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AcceptInviteRequestValidationError{}

// Validate checks the field values on AcceptInviteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AcceptInviteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AcceptInviteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AcceptInviteResponseMultiError, or nil if none found.
func (m *AcceptInviteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AcceptInviteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AcceptInviteResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AcceptInviteResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AcceptInviteResponseValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AcceptInviteResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AcceptInviteResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AcceptInviteResponseValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUserId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AcceptInviteResponseValidationError{
					field:  "UserId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AcceptInviteResponseValidationError{
					field:  "UserId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AcceptInviteResponseValidationError{
				field:  "UserId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Email

	// no validation rules for DisplayName

	if len(errors) > 0 {
		return AcceptInviteResponseMultiError(errors)
	}

	return nil
}

// AcceptInviteResponseMultiError is an error wrapping multiple validation
// errors returned by AcceptInviteResponse.ValidateAll() if the designated
// constraints aren't met.
type AcceptInviteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AcceptInviteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AcceptInviteResponseMultiError) AllErrors() []error { return m }

// AcceptInviteResponseValidationError is the validation error returned by
// AcceptInviteResponse.Validate if the designated constraints aren't met.
type AcceptInviteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AcceptInviteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AcceptInviteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AcceptInviteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AcceptInviteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AcceptInviteResponseValidationError) ErrorName() string {
	return "AcceptInviteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AcceptInviteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAcceptInviteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AcceptInviteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AcceptInviteResponseValidationError{}

// Validate checks the field values on GetAcceptedUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAcceptedUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAcceptedUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAcceptedUserRequestMultiError, or nil if none found.
func (m *GetAcceptedUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAcceptedUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetAcceptedUserRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetAcceptedUserRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAcceptedUserRequestValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRemoteUserId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetAcceptedUserRequestValidationError{
					field:  "RemoteUserId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetAcceptedUserRequestValidationError{
					field:  "RemoteUserId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRemoteUserId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAcceptedUserRequestValidationError{
				field:  "RemoteUserId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetAcceptedUserRequestMultiError(errors)
	}

	return nil
}

// GetAcceptedUserRequestMultiError is an error wrapping multiple validation
// errors returned by GetAcceptedUserRequest.ValidateAll() if the designated
// constraints aren't met.
type GetAcceptedUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAcceptedUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAcceptedUserRequestMultiError) AllErrors() []error { return m }

// GetAcceptedUserRequestValidationError is the validation error returned by
// GetAcceptedUserRequest.Validate if the designated constraints aren't met.
type GetAcceptedUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAcceptedUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAcceptedUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAcceptedUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAcceptedUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAcceptedUserRequestValidationError) ErrorName() string {
	return "GetAcceptedUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAcceptedUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAcceptedUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAcceptedUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAcceptedUserRequestValidationError{}

// Validate checks the field values on GetAcceptedUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAcceptedUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAcceptedUserResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAcceptedUserResponseMultiError, or nil if none found.
func (m *GetAcceptedUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAcceptedUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetAcceptedUserResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetAcceptedUserResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAcceptedUserResponseValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetAcceptedUserResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetAcceptedUserResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAcceptedUserResponseValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRemoteUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetAcceptedUserResponseValidationError{
					field:  "RemoteUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetAcceptedUserResponseValidationError{
					field:  "RemoteUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRemoteUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAcceptedUserResponseValidationError{
				field:  "RemoteUser",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetAcceptedUserResponseMultiError(errors)
	}

	return nil
}

// GetAcceptedUserResponseMultiError is an error wrapping multiple validation
// errors returned by GetAcceptedUserResponse.ValidateAll() if the designated
// constraints aren't met.
type GetAcceptedUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAcceptedUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAcceptedUserResponseMultiError) AllErrors() []error { return m }

// GetAcceptedUserResponseValidationError is the validation error returned by
// GetAcceptedUserResponse.Validate if the designated constraints aren't met.
type GetAcceptedUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAcceptedUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAcceptedUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAcceptedUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAcceptedUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAcceptedUserResponseValidationError) ErrorName() string {
	return "GetAcceptedUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAcceptedUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAcceptedUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAcceptedUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAcceptedUserResponseValidationError{}

// Validate checks the field values on FindAcceptedUsersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FindAcceptedUsersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindAcceptedUsersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindAcceptedUsersRequestMultiError, or nil if none found.
func (m *FindAcceptedUsersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FindAcceptedUsersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FindAcceptedUsersRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FindAcceptedUsersRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FindAcceptedUsersRequestValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Filter

	if len(errors) > 0 {
		return FindAcceptedUsersRequestMultiError(errors)
	}

	return nil
}

// FindAcceptedUsersRequestMultiError is an error wrapping multiple validation
// errors returned by FindAcceptedUsersRequest.ValidateAll() if the designated
// constraints aren't met.
type FindAcceptedUsersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindAcceptedUsersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindAcceptedUsersRequestMultiError) AllErrors() []error { return m }

// FindAcceptedUsersRequestValidationError is the validation error returned by
// FindAcceptedUsersRequest.Validate if the designated constraints aren't met.
type FindAcceptedUsersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindAcceptedUsersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindAcceptedUsersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindAcceptedUsersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindAcceptedUsersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindAcceptedUsersRequestValidationError) ErrorName() string {
	return "FindAcceptedUsersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FindAcceptedUsersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindAcceptedUsersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindAcceptedUsersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindAcceptedUsersRequestValidationError{}

// Validate checks the field values on FindAcceptedUsersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FindAcceptedUsersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindAcceptedUsersResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindAcceptedUsersResponseMultiError, or nil if none found.
func (m *FindAcceptedUsersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FindAcceptedUsersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FindAcceptedUsersResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FindAcceptedUsersResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FindAcceptedUsersResponseValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FindAcceptedUsersResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FindAcceptedUsersResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FindAcceptedUsersResponseValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetAcceptedUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FindAcceptedUsersResponseValidationError{
						field:  fmt.Sprintf("AcceptedUsers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FindAcceptedUsersResponseValidationError{
						field:  fmt.Sprintf("AcceptedUsers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FindAcceptedUsersResponseValidationError{
					field:  fmt.Sprintf("AcceptedUsers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return FindAcceptedUsersResponseMultiError(errors)
	}

	return nil
}

// FindAcceptedUsersResponseMultiError is an error wrapping multiple validation
// errors returned by FindAcceptedUsersResponse.ValidateAll() if the
// designated constraints aren't met.
type FindAcceptedUsersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindAcceptedUsersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindAcceptedUsersResponseMultiError) AllErrors() []error { return m }

// FindAcceptedUsersResponseValidationError is the validation error returned by
// FindAcceptedUsersResponse.Validate if the designated constraints aren't met.
type FindAcceptedUsersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindAcceptedUsersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindAcceptedUsersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindAcceptedUsersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindAcceptedUsersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindAcceptedUsersResponseValidationError) ErrorName() string {
	return "FindAcceptedUsersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FindAcceptedUsersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindAcceptedUsersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindAcceptedUsersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindAcceptedUsersResponseValidationError{}

// Validate checks the field values on DeleteAcceptedUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteAcceptedUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAcceptedUserRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteAcceptedUserRequestMultiError, or nil if none found.
func (m *DeleteAcceptedUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAcceptedUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteAcceptedUserRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteAcceptedUserRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteAcceptedUserRequestValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRemoteUserId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteAcceptedUserRequestValidationError{
					field:  "RemoteUserId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteAcceptedUserRequestValidationError{
					field:  "RemoteUserId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRemoteUserId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteAcceptedUserRequestValidationError{
				field:  "RemoteUserId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteAcceptedUserRequestMultiError(errors)
	}

	return nil
}

// DeleteAcceptedUserRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteAcceptedUserRequest.ValidateAll() if the
// designated constraints aren't met.
type DeleteAcceptedUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAcceptedUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAcceptedUserRequestMultiError) AllErrors() []error { return m }

// DeleteAcceptedUserRequestValidationError is the validation error returned by
// DeleteAcceptedUserRequest.Validate if the designated constraints aren't met.
type DeleteAcceptedUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAcceptedUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAcceptedUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAcceptedUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAcceptedUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAcceptedUserRequestValidationError) ErrorName() string {
	return "DeleteAcceptedUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAcceptedUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAcceptedUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAcceptedUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAcceptedUserRequestValidationError{}

// Validate checks the field values on DeleteAcceptedUserResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteAcceptedUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAcceptedUserResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteAcceptedUserResponseMultiError, or nil if none found.
func (m *DeleteAcceptedUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAcceptedUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteAcceptedUserResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteAcceptedUserResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteAcceptedUserResponseValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteAcceptedUserResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteAcceptedUserResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteAcceptedUserResponseValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteAcceptedUserResponseMultiError(errors)
	}

	return nil
}

// DeleteAcceptedUserResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteAcceptedUserResponse.ValidateAll() if
// the designated constraints aren't met.
type DeleteAcceptedUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAcceptedUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAcceptedUserResponseMultiError) AllErrors() []error { return m }

// DeleteAcceptedUserResponseValidationError is the validation error returned
// by DeleteAcceptedUserResponse.Validate if the designated constraints aren't met.
type DeleteAcceptedUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAcceptedUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAcceptedUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAcceptedUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAcceptedUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAcceptedUserResponseValidationError) ErrorName() string {
	return "DeleteAcceptedUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAcceptedUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAcceptedUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAcceptedUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAcceptedUserResponseValidationError{}
