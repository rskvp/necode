// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: necode/operatorservice/request_response.proto

package operatorservice

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AddSearchAttributesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddSearchAttributesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddSearchAttributesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddSearchAttributesRequestMultiError, or nil if none found.
func (m *AddSearchAttributesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddSearchAttributesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SearchAttributes

	// no validation rules for Namespace

	if len(errors) > 0 {
		return AddSearchAttributesRequestMultiError(errors)
	}

	return nil
}

// AddSearchAttributesRequestMultiError is an error wrapping multiple
// validation errors returned by AddSearchAttributesRequest.ValidateAll() if
// the designated constraints aren't met.
type AddSearchAttributesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddSearchAttributesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddSearchAttributesRequestMultiError) AllErrors() []error { return m }

// AddSearchAttributesRequestValidationError is the validation error returned
// by AddSearchAttributesRequest.Validate if the designated constraints aren't met.
type AddSearchAttributesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddSearchAttributesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddSearchAttributesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddSearchAttributesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddSearchAttributesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddSearchAttributesRequestValidationError) ErrorName() string {
	return "AddSearchAttributesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddSearchAttributesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddSearchAttributesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddSearchAttributesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddSearchAttributesRequestValidationError{}

// Validate checks the field values on AddSearchAttributesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddSearchAttributesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddSearchAttributesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddSearchAttributesResponseMultiError, or nil if none found.
func (m *AddSearchAttributesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddSearchAttributesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddSearchAttributesResponseMultiError(errors)
	}

	return nil
}

// AddSearchAttributesResponseMultiError is an error wrapping multiple
// validation errors returned by AddSearchAttributesResponse.ValidateAll() if
// the designated constraints aren't met.
type AddSearchAttributesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddSearchAttributesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddSearchAttributesResponseMultiError) AllErrors() []error { return m }

// AddSearchAttributesResponseValidationError is the validation error returned
// by AddSearchAttributesResponse.Validate if the designated constraints
// aren't met.
type AddSearchAttributesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddSearchAttributesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddSearchAttributesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddSearchAttributesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddSearchAttributesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddSearchAttributesResponseValidationError) ErrorName() string {
	return "AddSearchAttributesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddSearchAttributesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddSearchAttributesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddSearchAttributesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddSearchAttributesResponseValidationError{}

// Validate checks the field values on RemoveSearchAttributesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveSearchAttributesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveSearchAttributesRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RemoveSearchAttributesRequestMultiError, or nil if none found.
func (m *RemoveSearchAttributesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveSearchAttributesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Namespace

	if len(errors) > 0 {
		return RemoveSearchAttributesRequestMultiError(errors)
	}

	return nil
}

// RemoveSearchAttributesRequestMultiError is an error wrapping multiple
// validation errors returned by RemoveSearchAttributesRequest.ValidateAll()
// if the designated constraints aren't met.
type RemoveSearchAttributesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveSearchAttributesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveSearchAttributesRequestMultiError) AllErrors() []error { return m }

// RemoveSearchAttributesRequestValidationError is the validation error
// returned by RemoveSearchAttributesRequest.Validate if the designated
// constraints aren't met.
type RemoveSearchAttributesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveSearchAttributesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveSearchAttributesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveSearchAttributesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveSearchAttributesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveSearchAttributesRequestValidationError) ErrorName() string {
	return "RemoveSearchAttributesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveSearchAttributesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveSearchAttributesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveSearchAttributesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveSearchAttributesRequestValidationError{}

// Validate checks the field values on RemoveSearchAttributesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveSearchAttributesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveSearchAttributesResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RemoveSearchAttributesResponseMultiError, or nil if none found.
func (m *RemoveSearchAttributesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveSearchAttributesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RemoveSearchAttributesResponseMultiError(errors)
	}

	return nil
}

// RemoveSearchAttributesResponseMultiError is an error wrapping multiple
// validation errors returned by RemoveSearchAttributesResponse.ValidateAll()
// if the designated constraints aren't met.
type RemoveSearchAttributesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveSearchAttributesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveSearchAttributesResponseMultiError) AllErrors() []error { return m }

// RemoveSearchAttributesResponseValidationError is the validation error
// returned by RemoveSearchAttributesResponse.Validate if the designated
// constraints aren't met.
type RemoveSearchAttributesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveSearchAttributesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveSearchAttributesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveSearchAttributesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveSearchAttributesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveSearchAttributesResponseValidationError) ErrorName() string {
	return "RemoveSearchAttributesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveSearchAttributesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveSearchAttributesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveSearchAttributesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveSearchAttributesResponseValidationError{}

// Validate checks the field values on ListSearchAttributesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSearchAttributesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSearchAttributesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSearchAttributesRequestMultiError, or nil if none found.
func (m *ListSearchAttributesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSearchAttributesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Namespace

	if len(errors) > 0 {
		return ListSearchAttributesRequestMultiError(errors)
	}

	return nil
}

// ListSearchAttributesRequestMultiError is an error wrapping multiple
// validation errors returned by ListSearchAttributesRequest.ValidateAll() if
// the designated constraints aren't met.
type ListSearchAttributesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSearchAttributesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSearchAttributesRequestMultiError) AllErrors() []error { return m }

// ListSearchAttributesRequestValidationError is the validation error returned
// by ListSearchAttributesRequest.Validate if the designated constraints
// aren't met.
type ListSearchAttributesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSearchAttributesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSearchAttributesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSearchAttributesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSearchAttributesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSearchAttributesRequestValidationError) ErrorName() string {
	return "ListSearchAttributesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListSearchAttributesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSearchAttributesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSearchAttributesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSearchAttributesRequestValidationError{}

// Validate checks the field values on ListSearchAttributesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSearchAttributesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSearchAttributesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSearchAttributesResponseMultiError, or nil if none found.
func (m *ListSearchAttributesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSearchAttributesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CustomAttributes

	// no validation rules for SystemAttributes

	// no validation rules for StorageSchema

	if len(errors) > 0 {
		return ListSearchAttributesResponseMultiError(errors)
	}

	return nil
}

// ListSearchAttributesResponseMultiError is an error wrapping multiple
// validation errors returned by ListSearchAttributesResponse.ValidateAll() if
// the designated constraints aren't met.
type ListSearchAttributesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSearchAttributesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSearchAttributesResponseMultiError) AllErrors() []error { return m }

// ListSearchAttributesResponseValidationError is the validation error returned
// by ListSearchAttributesResponse.Validate if the designated constraints
// aren't met.
type ListSearchAttributesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSearchAttributesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSearchAttributesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSearchAttributesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSearchAttributesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSearchAttributesResponseValidationError) ErrorName() string {
	return "ListSearchAttributesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListSearchAttributesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSearchAttributesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSearchAttributesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSearchAttributesResponseValidationError{}

// Validate checks the field values on DeleteNamespaceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteNamespaceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteNamespaceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteNamespaceRequestMultiError, or nil if none found.
func (m *DeleteNamespaceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteNamespaceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Namespace

	if len(errors) > 0 {
		return DeleteNamespaceRequestMultiError(errors)
	}

	return nil
}

// DeleteNamespaceRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteNamespaceRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteNamespaceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteNamespaceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteNamespaceRequestMultiError) AllErrors() []error { return m }

// DeleteNamespaceRequestValidationError is the validation error returned by
// DeleteNamespaceRequest.Validate if the designated constraints aren't met.
type DeleteNamespaceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteNamespaceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteNamespaceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteNamespaceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteNamespaceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteNamespaceRequestValidationError) ErrorName() string {
	return "DeleteNamespaceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteNamespaceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteNamespaceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteNamespaceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteNamespaceRequestValidationError{}

// Validate checks the field values on DeleteNamespaceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteNamespaceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteNamespaceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteNamespaceResponseMultiError, or nil if none found.
func (m *DeleteNamespaceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteNamespaceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DeletedNamespace

	if len(errors) > 0 {
		return DeleteNamespaceResponseMultiError(errors)
	}

	return nil
}

// DeleteNamespaceResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteNamespaceResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteNamespaceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteNamespaceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteNamespaceResponseMultiError) AllErrors() []error { return m }

// DeleteNamespaceResponseValidationError is the validation error returned by
// DeleteNamespaceResponse.Validate if the designated constraints aren't met.
type DeleteNamespaceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteNamespaceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteNamespaceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteNamespaceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteNamespaceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteNamespaceResponseValidationError) ErrorName() string {
	return "DeleteNamespaceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteNamespaceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteNamespaceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteNamespaceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteNamespaceResponseValidationError{}

// Validate checks the field values on AddOrUpdateRemoteClusterRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddOrUpdateRemoteClusterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddOrUpdateRemoteClusterRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AddOrUpdateRemoteClusterRequestMultiError, or nil if none found.
func (m *AddOrUpdateRemoteClusterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddOrUpdateRemoteClusterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FrontendAddress

	// no validation rules for EnableRemoteClusterConnection

	if len(errors) > 0 {
		return AddOrUpdateRemoteClusterRequestMultiError(errors)
	}

	return nil
}

// AddOrUpdateRemoteClusterRequestMultiError is an error wrapping multiple
// validation errors returned by AddOrUpdateRemoteClusterRequest.ValidateAll()
// if the designated constraints aren't met.
type AddOrUpdateRemoteClusterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddOrUpdateRemoteClusterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddOrUpdateRemoteClusterRequestMultiError) AllErrors() []error { return m }

// AddOrUpdateRemoteClusterRequestValidationError is the validation error
// returned by AddOrUpdateRemoteClusterRequest.Validate if the designated
// constraints aren't met.
type AddOrUpdateRemoteClusterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddOrUpdateRemoteClusterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddOrUpdateRemoteClusterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddOrUpdateRemoteClusterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddOrUpdateRemoteClusterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddOrUpdateRemoteClusterRequestValidationError) ErrorName() string {
	return "AddOrUpdateRemoteClusterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddOrUpdateRemoteClusterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddOrUpdateRemoteClusterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddOrUpdateRemoteClusterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddOrUpdateRemoteClusterRequestValidationError{}

// Validate checks the field values on AddOrUpdateRemoteClusterResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *AddOrUpdateRemoteClusterResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddOrUpdateRemoteClusterResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AddOrUpdateRemoteClusterResponseMultiError, or nil if none found.
func (m *AddOrUpdateRemoteClusterResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddOrUpdateRemoteClusterResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddOrUpdateRemoteClusterResponseMultiError(errors)
	}

	return nil
}

// AddOrUpdateRemoteClusterResponseMultiError is an error wrapping multiple
// validation errors returned by
// AddOrUpdateRemoteClusterResponse.ValidateAll() if the designated
// constraints aren't met.
type AddOrUpdateRemoteClusterResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddOrUpdateRemoteClusterResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddOrUpdateRemoteClusterResponseMultiError) AllErrors() []error { return m }

// AddOrUpdateRemoteClusterResponseValidationError is the validation error
// returned by AddOrUpdateRemoteClusterResponse.Validate if the designated
// constraints aren't met.
type AddOrUpdateRemoteClusterResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddOrUpdateRemoteClusterResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddOrUpdateRemoteClusterResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddOrUpdateRemoteClusterResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddOrUpdateRemoteClusterResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddOrUpdateRemoteClusterResponseValidationError) ErrorName() string {
	return "AddOrUpdateRemoteClusterResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddOrUpdateRemoteClusterResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddOrUpdateRemoteClusterResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddOrUpdateRemoteClusterResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddOrUpdateRemoteClusterResponseValidationError{}

// Validate checks the field values on RemoveRemoteClusterRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveRemoteClusterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveRemoteClusterRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveRemoteClusterRequestMultiError, or nil if none found.
func (m *RemoveRemoteClusterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveRemoteClusterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClusterName

	if len(errors) > 0 {
		return RemoveRemoteClusterRequestMultiError(errors)
	}

	return nil
}

// RemoveRemoteClusterRequestMultiError is an error wrapping multiple
// validation errors returned by RemoveRemoteClusterRequest.ValidateAll() if
// the designated constraints aren't met.
type RemoveRemoteClusterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveRemoteClusterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveRemoteClusterRequestMultiError) AllErrors() []error { return m }

// RemoveRemoteClusterRequestValidationError is the validation error returned
// by RemoveRemoteClusterRequest.Validate if the designated constraints aren't met.
type RemoveRemoteClusterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveRemoteClusterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveRemoteClusterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveRemoteClusterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveRemoteClusterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveRemoteClusterRequestValidationError) ErrorName() string {
	return "RemoveRemoteClusterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveRemoteClusterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveRemoteClusterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveRemoteClusterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveRemoteClusterRequestValidationError{}

// Validate checks the field values on RemoveRemoteClusterResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveRemoteClusterResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveRemoteClusterResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveRemoteClusterResponseMultiError, or nil if none found.
func (m *RemoveRemoteClusterResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveRemoteClusterResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RemoveRemoteClusterResponseMultiError(errors)
	}

	return nil
}

// RemoveRemoteClusterResponseMultiError is an error wrapping multiple
// validation errors returned by RemoveRemoteClusterResponse.ValidateAll() if
// the designated constraints aren't met.
type RemoveRemoteClusterResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveRemoteClusterResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveRemoteClusterResponseMultiError) AllErrors() []error { return m }

// RemoveRemoteClusterResponseValidationError is the validation error returned
// by RemoveRemoteClusterResponse.Validate if the designated constraints
// aren't met.
type RemoveRemoteClusterResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveRemoteClusterResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveRemoteClusterResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveRemoteClusterResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveRemoteClusterResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveRemoteClusterResponseValidationError) ErrorName() string {
	return "RemoveRemoteClusterResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveRemoteClusterResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveRemoteClusterResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveRemoteClusterResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveRemoteClusterResponseValidationError{}

// Validate checks the field values on ListClustersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListClustersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListClustersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListClustersRequestMultiError, or nil if none found.
func (m *ListClustersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListClustersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageSize

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListClustersRequestMultiError(errors)
	}

	return nil
}

// ListClustersRequestMultiError is an error wrapping multiple validation
// errors returned by ListClustersRequest.ValidateAll() if the designated
// constraints aren't met.
type ListClustersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListClustersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListClustersRequestMultiError) AllErrors() []error { return m }

// ListClustersRequestValidationError is the validation error returned by
// ListClustersRequest.Validate if the designated constraints aren't met.
type ListClustersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListClustersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListClustersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListClustersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListClustersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListClustersRequestValidationError) ErrorName() string {
	return "ListClustersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListClustersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListClustersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListClustersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListClustersRequestValidationError{}

// Validate checks the field values on ListClustersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListClustersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListClustersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListClustersResponseMultiError, or nil if none found.
func (m *ListClustersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListClustersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetClusters() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListClustersResponseValidationError{
						field:  fmt.Sprintf("Clusters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListClustersResponseValidationError{
						field:  fmt.Sprintf("Clusters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListClustersResponseValidationError{
					field:  fmt.Sprintf("Clusters[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListClustersResponseMultiError(errors)
	}

	return nil
}

// ListClustersResponseMultiError is an error wrapping multiple validation
// errors returned by ListClustersResponse.ValidateAll() if the designated
// constraints aren't met.
type ListClustersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListClustersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListClustersResponseMultiError) AllErrors() []error { return m }

// ListClustersResponseValidationError is the validation error returned by
// ListClustersResponse.Validate if the designated constraints aren't met.
type ListClustersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListClustersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListClustersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListClustersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListClustersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListClustersResponseValidationError) ErrorName() string {
	return "ListClustersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListClustersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListClustersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListClustersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListClustersResponseValidationError{}

// Validate checks the field values on ClusterMetadata with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ClusterMetadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ClusterMetadata with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ClusterMetadataMultiError, or nil if none found.
func (m *ClusterMetadata) ValidateAll() error {
	return m.validate(true)
}

func (m *ClusterMetadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClusterName

	// no validation rules for ClusterId

	// no validation rules for Address

	// no validation rules for InitialFailoverVersion

	// no validation rules for HistoryShardCount

	// no validation rules for IsConnectionEnabled

	if len(errors) > 0 {
		return ClusterMetadataMultiError(errors)
	}

	return nil
}

// ClusterMetadataMultiError is an error wrapping multiple validation errors
// returned by ClusterMetadata.ValidateAll() if the designated constraints
// aren't met.
type ClusterMetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClusterMetadataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClusterMetadataMultiError) AllErrors() []error { return m }

// ClusterMetadataValidationError is the validation error returned by
// ClusterMetadata.Validate if the designated constraints aren't met.
type ClusterMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClusterMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClusterMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClusterMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClusterMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClusterMetadataValidationError) ErrorName() string { return "ClusterMetadataValidationError" }

// Error satisfies the builtin error interface
func (e ClusterMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClusterMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClusterMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClusterMetadataValidationError{}
