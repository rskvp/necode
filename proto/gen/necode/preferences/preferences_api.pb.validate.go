// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: necode/preferences/preferences_api.proto

package preferences

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on SetKeyRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SetKeyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetKeyRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SetKeyRequestMultiError, or
// nil if none found.
func (m *SetKeyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetKeyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetKey()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetKeyRequestValidationError{
					field:  "Key",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetKeyRequestValidationError{
					field:  "Key",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetKey()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetKeyRequestValidationError{
				field:  "Key",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Val

	if len(errors) > 0 {
		return SetKeyRequestMultiError(errors)
	}

	return nil
}

// SetKeyRequestMultiError is an error wrapping multiple validation errors
// returned by SetKeyRequest.ValidateAll() if the designated constraints
// aren't met.
type SetKeyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetKeyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetKeyRequestMultiError) AllErrors() []error { return m }

// SetKeyRequestValidationError is the validation error returned by
// SetKeyRequest.Validate if the designated constraints aren't met.
type SetKeyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetKeyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetKeyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetKeyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetKeyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetKeyRequestValidationError) ErrorName() string { return "SetKeyRequestValidationError" }

// Error satisfies the builtin error interface
func (e SetKeyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetKeyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetKeyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetKeyRequestValidationError{}

// Validate checks the field values on SetKeyResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SetKeyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetKeyResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SetKeyResponseMultiError,
// or nil if none found.
func (m *SetKeyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SetKeyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetKeyResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetKeyResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetKeyResponseValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SetKeyResponseMultiError(errors)
	}

	return nil
}

// SetKeyResponseMultiError is an error wrapping multiple validation errors
// returned by SetKeyResponse.ValidateAll() if the designated constraints
// aren't met.
type SetKeyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetKeyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetKeyResponseMultiError) AllErrors() []error { return m }

// SetKeyResponseValidationError is the validation error returned by
// SetKeyResponse.Validate if the designated constraints aren't met.
type SetKeyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetKeyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetKeyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetKeyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetKeyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetKeyResponseValidationError) ErrorName() string { return "SetKeyResponseValidationError" }

// Error satisfies the builtin error interface
func (e SetKeyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetKeyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetKeyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetKeyResponseValidationError{}

// Validate checks the field values on GetKeyRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetKeyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetKeyRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetKeyRequestMultiError, or
// nil if none found.
func (m *GetKeyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetKeyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetKey()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetKeyRequestValidationError{
					field:  "Key",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetKeyRequestValidationError{
					field:  "Key",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetKey()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetKeyRequestValidationError{
				field:  "Key",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetKeyRequestMultiError(errors)
	}

	return nil
}

// GetKeyRequestMultiError is an error wrapping multiple validation errors
// returned by GetKeyRequest.ValidateAll() if the designated constraints
// aren't met.
type GetKeyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetKeyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetKeyRequestMultiError) AllErrors() []error { return m }

// GetKeyRequestValidationError is the validation error returned by
// GetKeyRequest.Validate if the designated constraints aren't met.
type GetKeyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetKeyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetKeyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetKeyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetKeyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetKeyRequestValidationError) ErrorName() string { return "GetKeyRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetKeyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetKeyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetKeyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetKeyRequestValidationError{}

// Validate checks the field values on GetKeyResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetKeyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetKeyResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetKeyResponseMultiError,
// or nil if none found.
func (m *GetKeyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetKeyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetKeyResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetKeyResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetKeyResponseValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Val

	if len(errors) > 0 {
		return GetKeyResponseMultiError(errors)
	}

	return nil
}

// GetKeyResponseMultiError is an error wrapping multiple validation errors
// returned by GetKeyResponse.ValidateAll() if the designated constraints
// aren't met.
type GetKeyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetKeyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetKeyResponseMultiError) AllErrors() []error { return m }

// GetKeyResponseValidationError is the validation error returned by
// GetKeyResponse.Validate if the designated constraints aren't met.
type GetKeyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetKeyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetKeyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetKeyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetKeyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetKeyResponseValidationError) ErrorName() string { return "GetKeyResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetKeyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetKeyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetKeyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetKeyResponseValidationError{}
