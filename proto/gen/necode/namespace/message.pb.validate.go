// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: necode/namespace/message.proto

package namespace

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	enums "github.com/rskvp/necode/proto/gen/necode/enums"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = enums.NamespaceState(0)
)

// Validate checks the field values on NamespaceInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NamespaceInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NamespaceInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NamespaceInfoMultiError, or
// nil if none found.
func (m *NamespaceInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *NamespaceInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for State

	// no validation rules for Description

	// no validation rules for OwnerEmail

	// no validation rules for Data

	// no validation rules for Id

	// no validation rules for SupportsSchedules

	if len(errors) > 0 {
		return NamespaceInfoMultiError(errors)
	}

	return nil
}

// NamespaceInfoMultiError is an error wrapping multiple validation errors
// returned by NamespaceInfo.ValidateAll() if the designated constraints
// aren't met.
type NamespaceInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NamespaceInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NamespaceInfoMultiError) AllErrors() []error { return m }

// NamespaceInfoValidationError is the validation error returned by
// NamespaceInfo.Validate if the designated constraints aren't met.
type NamespaceInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NamespaceInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NamespaceInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NamespaceInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NamespaceInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NamespaceInfoValidationError) ErrorName() string { return "NamespaceInfoValidationError" }

// Error satisfies the builtin error interface
func (e NamespaceInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNamespaceInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NamespaceInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NamespaceInfoValidationError{}

// Validate checks the field values on NamespaceConfig with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *NamespaceConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NamespaceConfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NamespaceConfigMultiError, or nil if none found.
func (m *NamespaceConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *NamespaceConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetWorkflowExecutionRetentionTtl()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NamespaceConfigValidationError{
					field:  "WorkflowExecutionRetentionTtl",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NamespaceConfigValidationError{
					field:  "WorkflowExecutionRetentionTtl",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkflowExecutionRetentionTtl()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NamespaceConfigValidationError{
				field:  "WorkflowExecutionRetentionTtl",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetBadBinaries()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NamespaceConfigValidationError{
					field:  "BadBinaries",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NamespaceConfigValidationError{
					field:  "BadBinaries",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBadBinaries()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NamespaceConfigValidationError{
				field:  "BadBinaries",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for HistoryArchivalState

	// no validation rules for HistoryArchivalUri

	// no validation rules for VisibilityArchivalState

	// no validation rules for VisibilityArchivalUri

	// no validation rules for CustomSearchAttributeAliases

	if len(errors) > 0 {
		return NamespaceConfigMultiError(errors)
	}

	return nil
}

// NamespaceConfigMultiError is an error wrapping multiple validation errors
// returned by NamespaceConfig.ValidateAll() if the designated constraints
// aren't met.
type NamespaceConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NamespaceConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NamespaceConfigMultiError) AllErrors() []error { return m }

// NamespaceConfigValidationError is the validation error returned by
// NamespaceConfig.Validate if the designated constraints aren't met.
type NamespaceConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NamespaceConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NamespaceConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NamespaceConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NamespaceConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NamespaceConfigValidationError) ErrorName() string { return "NamespaceConfigValidationError" }

// Error satisfies the builtin error interface
func (e NamespaceConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNamespaceConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NamespaceConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NamespaceConfigValidationError{}

// Validate checks the field values on BadBinaries with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BadBinaries) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BadBinaries with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BadBinariesMultiError, or
// nil if none found.
func (m *BadBinaries) ValidateAll() error {
	return m.validate(true)
}

func (m *BadBinaries) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetBinaries()))
		i := 0
		for key := range m.GetBinaries() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetBinaries()[key]
			_ = val

			// no validation rules for Binaries[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, BadBinariesValidationError{
							field:  fmt.Sprintf("Binaries[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, BadBinariesValidationError{
							field:  fmt.Sprintf("Binaries[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return BadBinariesValidationError{
						field:  fmt.Sprintf("Binaries[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return BadBinariesMultiError(errors)
	}

	return nil
}

// BadBinariesMultiError is an error wrapping multiple validation errors
// returned by BadBinaries.ValidateAll() if the designated constraints aren't met.
type BadBinariesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BadBinariesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BadBinariesMultiError) AllErrors() []error { return m }

// BadBinariesValidationError is the validation error returned by
// BadBinaries.Validate if the designated constraints aren't met.
type BadBinariesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BadBinariesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BadBinariesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BadBinariesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BadBinariesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BadBinariesValidationError) ErrorName() string { return "BadBinariesValidationError" }

// Error satisfies the builtin error interface
func (e BadBinariesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBadBinaries.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BadBinariesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BadBinariesValidationError{}

// Validate checks the field values on BadBinaryInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BadBinaryInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BadBinaryInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BadBinaryInfoMultiError, or
// nil if none found.
func (m *BadBinaryInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *BadBinaryInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Reason

	// no validation rules for Operator

	if all {
		switch v := interface{}(m.GetCreateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BadBinaryInfoValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BadBinaryInfoValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BadBinaryInfoValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BadBinaryInfoMultiError(errors)
	}

	return nil
}

// BadBinaryInfoMultiError is an error wrapping multiple validation errors
// returned by BadBinaryInfo.ValidateAll() if the designated constraints
// aren't met.
type BadBinaryInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BadBinaryInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BadBinaryInfoMultiError) AllErrors() []error { return m }

// BadBinaryInfoValidationError is the validation error returned by
// BadBinaryInfo.Validate if the designated constraints aren't met.
type BadBinaryInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BadBinaryInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BadBinaryInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BadBinaryInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BadBinaryInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BadBinaryInfoValidationError) ErrorName() string { return "BadBinaryInfoValidationError" }

// Error satisfies the builtin error interface
func (e BadBinaryInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBadBinaryInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BadBinaryInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BadBinaryInfoValidationError{}

// Validate checks the field values on UpdateNamespaceInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateNamespaceInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateNamespaceInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateNamespaceInfoMultiError, or nil if none found.
func (m *UpdateNamespaceInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateNamespaceInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Description

	// no validation rules for OwnerEmail

	// no validation rules for Data

	// no validation rules for State

	if len(errors) > 0 {
		return UpdateNamespaceInfoMultiError(errors)
	}

	return nil
}

// UpdateNamespaceInfoMultiError is an error wrapping multiple validation
// errors returned by UpdateNamespaceInfo.ValidateAll() if the designated
// constraints aren't met.
type UpdateNamespaceInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateNamespaceInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateNamespaceInfoMultiError) AllErrors() []error { return m }

// UpdateNamespaceInfoValidationError is the validation error returned by
// UpdateNamespaceInfo.Validate if the designated constraints aren't met.
type UpdateNamespaceInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateNamespaceInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateNamespaceInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateNamespaceInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateNamespaceInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateNamespaceInfoValidationError) ErrorName() string {
	return "UpdateNamespaceInfoValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateNamespaceInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateNamespaceInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateNamespaceInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateNamespaceInfoValidationError{}

// Validate checks the field values on NamespaceFilter with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *NamespaceFilter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NamespaceFilter with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NamespaceFilterMultiError, or nil if none found.
func (m *NamespaceFilter) ValidateAll() error {
	return m.validate(true)
}

func (m *NamespaceFilter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IncludeDeleted

	if len(errors) > 0 {
		return NamespaceFilterMultiError(errors)
	}

	return nil
}

// NamespaceFilterMultiError is an error wrapping multiple validation errors
// returned by NamespaceFilter.ValidateAll() if the designated constraints
// aren't met.
type NamespaceFilterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NamespaceFilterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NamespaceFilterMultiError) AllErrors() []error { return m }

// NamespaceFilterValidationError is the validation error returned by
// NamespaceFilter.Validate if the designated constraints aren't met.
type NamespaceFilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NamespaceFilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NamespaceFilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NamespaceFilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NamespaceFilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NamespaceFilterValidationError) ErrorName() string { return "NamespaceFilterValidationError" }

// Error satisfies the builtin error interface
func (e NamespaceFilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNamespaceFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NamespaceFilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NamespaceFilterValidationError{}
