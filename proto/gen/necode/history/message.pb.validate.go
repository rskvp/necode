// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: necode/history/message.proto

package history

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	enums "github.com/rskvp/necode/proto/gen/necode/enums"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = enums.ContinueAsNewInitiator(0)
)

// Validate checks the field values on WorkflowExecutionStartedEventAttributes
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *WorkflowExecutionStartedEventAttributes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// WorkflowExecutionStartedEventAttributes with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// WorkflowExecutionStartedEventAttributesMultiError, or nil if none found.
func (m *WorkflowExecutionStartedEventAttributes) ValidateAll() error {
	return m.validate(true)
}

func (m *WorkflowExecutionStartedEventAttributes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetWorkflowType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkflowExecutionStartedEventAttributesValidationError{
					field:  "WorkflowType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkflowExecutionStartedEventAttributesValidationError{
					field:  "WorkflowType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkflowType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkflowExecutionStartedEventAttributesValidationError{
				field:  "WorkflowType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ParentWorkflowNamespace

	// no validation rules for ParentWorkflowNamespaceId

	if all {
		switch v := interface{}(m.GetParentWorkflowExecution()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkflowExecutionStartedEventAttributesValidationError{
					field:  "ParentWorkflowExecution",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkflowExecutionStartedEventAttributesValidationError{
					field:  "ParentWorkflowExecution",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParentWorkflowExecution()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkflowExecutionStartedEventAttributesValidationError{
				field:  "ParentWorkflowExecution",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ParentInitiatedEventId

	if all {
		switch v := interface{}(m.GetTaskQueue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkflowExecutionStartedEventAttributesValidationError{
					field:  "TaskQueue",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkflowExecutionStartedEventAttributesValidationError{
					field:  "TaskQueue",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTaskQueue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkflowExecutionStartedEventAttributesValidationError{
				field:  "TaskQueue",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetInput()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkflowExecutionStartedEventAttributesValidationError{
					field:  "Input",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkflowExecutionStartedEventAttributesValidationError{
					field:  "Input",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInput()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkflowExecutionStartedEventAttributesValidationError{
				field:  "Input",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetWorkflowExecutionTimeout()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkflowExecutionStartedEventAttributesValidationError{
					field:  "WorkflowExecutionTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkflowExecutionStartedEventAttributesValidationError{
					field:  "WorkflowExecutionTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkflowExecutionTimeout()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkflowExecutionStartedEventAttributesValidationError{
				field:  "WorkflowExecutionTimeout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetWorkflowRunTimeout()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkflowExecutionStartedEventAttributesValidationError{
					field:  "WorkflowRunTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkflowExecutionStartedEventAttributesValidationError{
					field:  "WorkflowRunTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkflowRunTimeout()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkflowExecutionStartedEventAttributesValidationError{
				field:  "WorkflowRunTimeout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetWorkflowTaskTimeout()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkflowExecutionStartedEventAttributesValidationError{
					field:  "WorkflowTaskTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkflowExecutionStartedEventAttributesValidationError{
					field:  "WorkflowTaskTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkflowTaskTimeout()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkflowExecutionStartedEventAttributesValidationError{
				field:  "WorkflowTaskTimeout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ContinuedExecutionRunId

	// no validation rules for Initiator

	if all {
		switch v := interface{}(m.GetContinuedFailure()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkflowExecutionStartedEventAttributesValidationError{
					field:  "ContinuedFailure",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkflowExecutionStartedEventAttributesValidationError{
					field:  "ContinuedFailure",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetContinuedFailure()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkflowExecutionStartedEventAttributesValidationError{
				field:  "ContinuedFailure",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetLastCompletionResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkflowExecutionStartedEventAttributesValidationError{
					field:  "LastCompletionResult",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkflowExecutionStartedEventAttributesValidationError{
					field:  "LastCompletionResult",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLastCompletionResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkflowExecutionStartedEventAttributesValidationError{
				field:  "LastCompletionResult",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for OriginalExecutionRunId

	// no validation rules for Identity

	// no validation rules for FirstExecutionRunId

	if all {
		switch v := interface{}(m.GetRetryPolicy()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkflowExecutionStartedEventAttributesValidationError{
					field:  "RetryPolicy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkflowExecutionStartedEventAttributesValidationError{
					field:  "RetryPolicy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRetryPolicy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkflowExecutionStartedEventAttributesValidationError{
				field:  "RetryPolicy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Attempt

	if all {
		switch v := interface{}(m.GetWorkflowExecutionExpirationTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkflowExecutionStartedEventAttributesValidationError{
					field:  "WorkflowExecutionExpirationTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkflowExecutionStartedEventAttributesValidationError{
					field:  "WorkflowExecutionExpirationTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkflowExecutionExpirationTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkflowExecutionStartedEventAttributesValidationError{
				field:  "WorkflowExecutionExpirationTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CronSchedule

	if all {
		switch v := interface{}(m.GetFirstWorkflowTaskBackoff()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkflowExecutionStartedEventAttributesValidationError{
					field:  "FirstWorkflowTaskBackoff",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkflowExecutionStartedEventAttributesValidationError{
					field:  "FirstWorkflowTaskBackoff",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFirstWorkflowTaskBackoff()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkflowExecutionStartedEventAttributesValidationError{
				field:  "FirstWorkflowTaskBackoff",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMemo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkflowExecutionStartedEventAttributesValidationError{
					field:  "Memo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkflowExecutionStartedEventAttributesValidationError{
					field:  "Memo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMemo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkflowExecutionStartedEventAttributesValidationError{
				field:  "Memo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSearchAttributes()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkflowExecutionStartedEventAttributesValidationError{
					field:  "SearchAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkflowExecutionStartedEventAttributesValidationError{
					field:  "SearchAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSearchAttributes()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkflowExecutionStartedEventAttributesValidationError{
				field:  "SearchAttributes",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPrevAutoResetPoints()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkflowExecutionStartedEventAttributesValidationError{
					field:  "PrevAutoResetPoints",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkflowExecutionStartedEventAttributesValidationError{
					field:  "PrevAutoResetPoints",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPrevAutoResetPoints()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkflowExecutionStartedEventAttributesValidationError{
				field:  "PrevAutoResetPoints",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetHeader()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkflowExecutionStartedEventAttributesValidationError{
					field:  "Header",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkflowExecutionStartedEventAttributesValidationError{
					field:  "Header",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHeader()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkflowExecutionStartedEventAttributesValidationError{
				field:  "Header",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ParentInitiatedEventVersion

	// no validation rules for WorkflowId

	if all {
		switch v := interface{}(m.GetSourceVersionStamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkflowExecutionStartedEventAttributesValidationError{
					field:  "SourceVersionStamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkflowExecutionStartedEventAttributesValidationError{
					field:  "SourceVersionStamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSourceVersionStamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkflowExecutionStartedEventAttributesValidationError{
				field:  "SourceVersionStamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return WorkflowExecutionStartedEventAttributesMultiError(errors)
	}

	return nil
}

// WorkflowExecutionStartedEventAttributesMultiError is an error wrapping
// multiple validation errors returned by
// WorkflowExecutionStartedEventAttributes.ValidateAll() if the designated
// constraints aren't met.
type WorkflowExecutionStartedEventAttributesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WorkflowExecutionStartedEventAttributesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WorkflowExecutionStartedEventAttributesMultiError) AllErrors() []error { return m }

// WorkflowExecutionStartedEventAttributesValidationError is the validation
// error returned by WorkflowExecutionStartedEventAttributes.Validate if the
// designated constraints aren't met.
type WorkflowExecutionStartedEventAttributesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkflowExecutionStartedEventAttributesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorkflowExecutionStartedEventAttributesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WorkflowExecutionStartedEventAttributesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorkflowExecutionStartedEventAttributesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkflowExecutionStartedEventAttributesValidationError) ErrorName() string {
	return "WorkflowExecutionStartedEventAttributesValidationError"
}

// Error satisfies the builtin error interface
func (e WorkflowExecutionStartedEventAttributesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorkflowExecutionStartedEventAttributes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkflowExecutionStartedEventAttributesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkflowExecutionStartedEventAttributesValidationError{}

// Validate checks the field values on
// WorkflowExecutionCompletedEventAttributes with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *WorkflowExecutionCompletedEventAttributes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// WorkflowExecutionCompletedEventAttributes with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// WorkflowExecutionCompletedEventAttributesMultiError, or nil if none found.
func (m *WorkflowExecutionCompletedEventAttributes) ValidateAll() error {
	return m.validate(true)
}

func (m *WorkflowExecutionCompletedEventAttributes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkflowExecutionCompletedEventAttributesValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkflowExecutionCompletedEventAttributesValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkflowExecutionCompletedEventAttributesValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for WorkflowTaskCompletedEventId

	// no validation rules for NewExecutionRunId

	if len(errors) > 0 {
		return WorkflowExecutionCompletedEventAttributesMultiError(errors)
	}

	return nil
}

// WorkflowExecutionCompletedEventAttributesMultiError is an error wrapping
// multiple validation errors returned by
// WorkflowExecutionCompletedEventAttributes.ValidateAll() if the designated
// constraints aren't met.
type WorkflowExecutionCompletedEventAttributesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WorkflowExecutionCompletedEventAttributesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WorkflowExecutionCompletedEventAttributesMultiError) AllErrors() []error { return m }

// WorkflowExecutionCompletedEventAttributesValidationError is the validation
// error returned by WorkflowExecutionCompletedEventAttributes.Validate if the
// designated constraints aren't met.
type WorkflowExecutionCompletedEventAttributesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkflowExecutionCompletedEventAttributesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorkflowExecutionCompletedEventAttributesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WorkflowExecutionCompletedEventAttributesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorkflowExecutionCompletedEventAttributesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkflowExecutionCompletedEventAttributesValidationError) ErrorName() string {
	return "WorkflowExecutionCompletedEventAttributesValidationError"
}

// Error satisfies the builtin error interface
func (e WorkflowExecutionCompletedEventAttributesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorkflowExecutionCompletedEventAttributes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkflowExecutionCompletedEventAttributesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkflowExecutionCompletedEventAttributesValidationError{}

// Validate checks the field values on WorkflowExecutionFailedEventAttributes
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *WorkflowExecutionFailedEventAttributes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// WorkflowExecutionFailedEventAttributes with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// WorkflowExecutionFailedEventAttributesMultiError, or nil if none found.
func (m *WorkflowExecutionFailedEventAttributes) ValidateAll() error {
	return m.validate(true)
}

func (m *WorkflowExecutionFailedEventAttributes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFailure()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkflowExecutionFailedEventAttributesValidationError{
					field:  "Failure",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkflowExecutionFailedEventAttributesValidationError{
					field:  "Failure",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFailure()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkflowExecutionFailedEventAttributesValidationError{
				field:  "Failure",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for RetryState

	// no validation rules for WorkflowTaskCompletedEventId

	// no validation rules for NewExecutionRunId

	if len(errors) > 0 {
		return WorkflowExecutionFailedEventAttributesMultiError(errors)
	}

	return nil
}

// WorkflowExecutionFailedEventAttributesMultiError is an error wrapping
// multiple validation errors returned by
// WorkflowExecutionFailedEventAttributes.ValidateAll() if the designated
// constraints aren't met.
type WorkflowExecutionFailedEventAttributesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WorkflowExecutionFailedEventAttributesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WorkflowExecutionFailedEventAttributesMultiError) AllErrors() []error { return m }

// WorkflowExecutionFailedEventAttributesValidationError is the validation
// error returned by WorkflowExecutionFailedEventAttributes.Validate if the
// designated constraints aren't met.
type WorkflowExecutionFailedEventAttributesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkflowExecutionFailedEventAttributesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorkflowExecutionFailedEventAttributesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WorkflowExecutionFailedEventAttributesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorkflowExecutionFailedEventAttributesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkflowExecutionFailedEventAttributesValidationError) ErrorName() string {
	return "WorkflowExecutionFailedEventAttributesValidationError"
}

// Error satisfies the builtin error interface
func (e WorkflowExecutionFailedEventAttributesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorkflowExecutionFailedEventAttributes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkflowExecutionFailedEventAttributesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkflowExecutionFailedEventAttributesValidationError{}

// Validate checks the field values on WorkflowExecutionTimedOutEventAttributes
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *WorkflowExecutionTimedOutEventAttributes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// WorkflowExecutionTimedOutEventAttributes with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// WorkflowExecutionTimedOutEventAttributesMultiError, or nil if none found.
func (m *WorkflowExecutionTimedOutEventAttributes) ValidateAll() error {
	return m.validate(true)
}

func (m *WorkflowExecutionTimedOutEventAttributes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RetryState

	// no validation rules for NewExecutionRunId

	if len(errors) > 0 {
		return WorkflowExecutionTimedOutEventAttributesMultiError(errors)
	}

	return nil
}

// WorkflowExecutionTimedOutEventAttributesMultiError is an error wrapping
// multiple validation errors returned by
// WorkflowExecutionTimedOutEventAttributes.ValidateAll() if the designated
// constraints aren't met.
type WorkflowExecutionTimedOutEventAttributesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WorkflowExecutionTimedOutEventAttributesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WorkflowExecutionTimedOutEventAttributesMultiError) AllErrors() []error { return m }

// WorkflowExecutionTimedOutEventAttributesValidationError is the validation
// error returned by WorkflowExecutionTimedOutEventAttributes.Validate if the
// designated constraints aren't met.
type WorkflowExecutionTimedOutEventAttributesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkflowExecutionTimedOutEventAttributesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorkflowExecutionTimedOutEventAttributesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WorkflowExecutionTimedOutEventAttributesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorkflowExecutionTimedOutEventAttributesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkflowExecutionTimedOutEventAttributesValidationError) ErrorName() string {
	return "WorkflowExecutionTimedOutEventAttributesValidationError"
}

// Error satisfies the builtin error interface
func (e WorkflowExecutionTimedOutEventAttributesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorkflowExecutionTimedOutEventAttributes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkflowExecutionTimedOutEventAttributesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkflowExecutionTimedOutEventAttributesValidationError{}

// Validate checks the field values on
// WorkflowExecutionContinuedAsNewEventAttributes with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *WorkflowExecutionContinuedAsNewEventAttributes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// WorkflowExecutionContinuedAsNewEventAttributes with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// WorkflowExecutionContinuedAsNewEventAttributesMultiError, or nil if none found.
func (m *WorkflowExecutionContinuedAsNewEventAttributes) ValidateAll() error {
	return m.validate(true)
}

func (m *WorkflowExecutionContinuedAsNewEventAttributes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NewExecutionRunId

	if all {
		switch v := interface{}(m.GetWorkflowType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkflowExecutionContinuedAsNewEventAttributesValidationError{
					field:  "WorkflowType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkflowExecutionContinuedAsNewEventAttributesValidationError{
					field:  "WorkflowType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkflowType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkflowExecutionContinuedAsNewEventAttributesValidationError{
				field:  "WorkflowType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTaskQueue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkflowExecutionContinuedAsNewEventAttributesValidationError{
					field:  "TaskQueue",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkflowExecutionContinuedAsNewEventAttributesValidationError{
					field:  "TaskQueue",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTaskQueue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkflowExecutionContinuedAsNewEventAttributesValidationError{
				field:  "TaskQueue",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetInput()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkflowExecutionContinuedAsNewEventAttributesValidationError{
					field:  "Input",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkflowExecutionContinuedAsNewEventAttributesValidationError{
					field:  "Input",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInput()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkflowExecutionContinuedAsNewEventAttributesValidationError{
				field:  "Input",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetWorkflowRunTimeout()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkflowExecutionContinuedAsNewEventAttributesValidationError{
					field:  "WorkflowRunTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkflowExecutionContinuedAsNewEventAttributesValidationError{
					field:  "WorkflowRunTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkflowRunTimeout()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkflowExecutionContinuedAsNewEventAttributesValidationError{
				field:  "WorkflowRunTimeout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetWorkflowTaskTimeout()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkflowExecutionContinuedAsNewEventAttributesValidationError{
					field:  "WorkflowTaskTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkflowExecutionContinuedAsNewEventAttributesValidationError{
					field:  "WorkflowTaskTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkflowTaskTimeout()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkflowExecutionContinuedAsNewEventAttributesValidationError{
				field:  "WorkflowTaskTimeout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for WorkflowTaskCompletedEventId

	if all {
		switch v := interface{}(m.GetBackoffStartInterval()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkflowExecutionContinuedAsNewEventAttributesValidationError{
					field:  "BackoffStartInterval",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkflowExecutionContinuedAsNewEventAttributesValidationError{
					field:  "BackoffStartInterval",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBackoffStartInterval()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkflowExecutionContinuedAsNewEventAttributesValidationError{
				field:  "BackoffStartInterval",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Initiator

	if all {
		switch v := interface{}(m.GetFailure()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkflowExecutionContinuedAsNewEventAttributesValidationError{
					field:  "Failure",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkflowExecutionContinuedAsNewEventAttributesValidationError{
					field:  "Failure",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFailure()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkflowExecutionContinuedAsNewEventAttributesValidationError{
				field:  "Failure",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetLastCompletionResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkflowExecutionContinuedAsNewEventAttributesValidationError{
					field:  "LastCompletionResult",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkflowExecutionContinuedAsNewEventAttributesValidationError{
					field:  "LastCompletionResult",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLastCompletionResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkflowExecutionContinuedAsNewEventAttributesValidationError{
				field:  "LastCompletionResult",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetHeader()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkflowExecutionContinuedAsNewEventAttributesValidationError{
					field:  "Header",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkflowExecutionContinuedAsNewEventAttributesValidationError{
					field:  "Header",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHeader()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkflowExecutionContinuedAsNewEventAttributesValidationError{
				field:  "Header",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMemo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkflowExecutionContinuedAsNewEventAttributesValidationError{
					field:  "Memo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkflowExecutionContinuedAsNewEventAttributesValidationError{
					field:  "Memo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMemo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkflowExecutionContinuedAsNewEventAttributesValidationError{
				field:  "Memo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSearchAttributes()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkflowExecutionContinuedAsNewEventAttributesValidationError{
					field:  "SearchAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkflowExecutionContinuedAsNewEventAttributesValidationError{
					field:  "SearchAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSearchAttributes()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkflowExecutionContinuedAsNewEventAttributesValidationError{
				field:  "SearchAttributes",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for UseCompatibleVersion

	if len(errors) > 0 {
		return WorkflowExecutionContinuedAsNewEventAttributesMultiError(errors)
	}

	return nil
}

// WorkflowExecutionContinuedAsNewEventAttributesMultiError is an error
// wrapping multiple validation errors returned by
// WorkflowExecutionContinuedAsNewEventAttributes.ValidateAll() if the
// designated constraints aren't met.
type WorkflowExecutionContinuedAsNewEventAttributesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WorkflowExecutionContinuedAsNewEventAttributesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WorkflowExecutionContinuedAsNewEventAttributesMultiError) AllErrors() []error { return m }

// WorkflowExecutionContinuedAsNewEventAttributesValidationError is the
// validation error returned by
// WorkflowExecutionContinuedAsNewEventAttributes.Validate if the designated
// constraints aren't met.
type WorkflowExecutionContinuedAsNewEventAttributesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkflowExecutionContinuedAsNewEventAttributesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorkflowExecutionContinuedAsNewEventAttributesValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e WorkflowExecutionContinuedAsNewEventAttributesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorkflowExecutionContinuedAsNewEventAttributesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkflowExecutionContinuedAsNewEventAttributesValidationError) ErrorName() string {
	return "WorkflowExecutionContinuedAsNewEventAttributesValidationError"
}

// Error satisfies the builtin error interface
func (e WorkflowExecutionContinuedAsNewEventAttributesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorkflowExecutionContinuedAsNewEventAttributes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkflowExecutionContinuedAsNewEventAttributesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkflowExecutionContinuedAsNewEventAttributesValidationError{}

// Validate checks the field values on WorkflowTaskScheduledEventAttributes
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *WorkflowTaskScheduledEventAttributes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WorkflowTaskScheduledEventAttributes
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// WorkflowTaskScheduledEventAttributesMultiError, or nil if none found.
func (m *WorkflowTaskScheduledEventAttributes) ValidateAll() error {
	return m.validate(true)
}

func (m *WorkflowTaskScheduledEventAttributes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTaskQueue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkflowTaskScheduledEventAttributesValidationError{
					field:  "TaskQueue",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkflowTaskScheduledEventAttributesValidationError{
					field:  "TaskQueue",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTaskQueue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkflowTaskScheduledEventAttributesValidationError{
				field:  "TaskQueue",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStartToCloseTimeout()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkflowTaskScheduledEventAttributesValidationError{
					field:  "StartToCloseTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkflowTaskScheduledEventAttributesValidationError{
					field:  "StartToCloseTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartToCloseTimeout()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkflowTaskScheduledEventAttributesValidationError{
				field:  "StartToCloseTimeout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Attempt

	if len(errors) > 0 {
		return WorkflowTaskScheduledEventAttributesMultiError(errors)
	}

	return nil
}

// WorkflowTaskScheduledEventAttributesMultiError is an error wrapping multiple
// validation errors returned by
// WorkflowTaskScheduledEventAttributes.ValidateAll() if the designated
// constraints aren't met.
type WorkflowTaskScheduledEventAttributesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WorkflowTaskScheduledEventAttributesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WorkflowTaskScheduledEventAttributesMultiError) AllErrors() []error { return m }

// WorkflowTaskScheduledEventAttributesValidationError is the validation error
// returned by WorkflowTaskScheduledEventAttributes.Validate if the designated
// constraints aren't met.
type WorkflowTaskScheduledEventAttributesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkflowTaskScheduledEventAttributesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorkflowTaskScheduledEventAttributesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WorkflowTaskScheduledEventAttributesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorkflowTaskScheduledEventAttributesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkflowTaskScheduledEventAttributesValidationError) ErrorName() string {
	return "WorkflowTaskScheduledEventAttributesValidationError"
}

// Error satisfies the builtin error interface
func (e WorkflowTaskScheduledEventAttributesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorkflowTaskScheduledEventAttributes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkflowTaskScheduledEventAttributesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkflowTaskScheduledEventAttributesValidationError{}

// Validate checks the field values on WorkflowTaskStartedEventAttributes with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *WorkflowTaskStartedEventAttributes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WorkflowTaskStartedEventAttributes
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// WorkflowTaskStartedEventAttributesMultiError, or nil if none found.
func (m *WorkflowTaskStartedEventAttributes) ValidateAll() error {
	return m.validate(true)
}

func (m *WorkflowTaskStartedEventAttributes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ScheduledEventId

	// no validation rules for Identity

	// no validation rules for RequestId

	// no validation rules for SuggestContinueAsNew

	// no validation rules for HistorySizeBytes

	if len(errors) > 0 {
		return WorkflowTaskStartedEventAttributesMultiError(errors)
	}

	return nil
}

// WorkflowTaskStartedEventAttributesMultiError is an error wrapping multiple
// validation errors returned by
// WorkflowTaskStartedEventAttributes.ValidateAll() if the designated
// constraints aren't met.
type WorkflowTaskStartedEventAttributesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WorkflowTaskStartedEventAttributesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WorkflowTaskStartedEventAttributesMultiError) AllErrors() []error { return m }

// WorkflowTaskStartedEventAttributesValidationError is the validation error
// returned by WorkflowTaskStartedEventAttributes.Validate if the designated
// constraints aren't met.
type WorkflowTaskStartedEventAttributesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkflowTaskStartedEventAttributesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorkflowTaskStartedEventAttributesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WorkflowTaskStartedEventAttributesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorkflowTaskStartedEventAttributesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkflowTaskStartedEventAttributesValidationError) ErrorName() string {
	return "WorkflowTaskStartedEventAttributesValidationError"
}

// Error satisfies the builtin error interface
func (e WorkflowTaskStartedEventAttributesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorkflowTaskStartedEventAttributes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkflowTaskStartedEventAttributesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkflowTaskStartedEventAttributesValidationError{}

// Validate checks the field values on WorkflowTaskCompletedEventAttributes
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *WorkflowTaskCompletedEventAttributes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WorkflowTaskCompletedEventAttributes
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// WorkflowTaskCompletedEventAttributesMultiError, or nil if none found.
func (m *WorkflowTaskCompletedEventAttributes) ValidateAll() error {
	return m.validate(true)
}

func (m *WorkflowTaskCompletedEventAttributes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ScheduledEventId

	// no validation rules for StartedEventId

	// no validation rules for Identity

	// no validation rules for BinaryChecksum

	if all {
		switch v := interface{}(m.GetWorkerVersion()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkflowTaskCompletedEventAttributesValidationError{
					field:  "WorkerVersion",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkflowTaskCompletedEventAttributesValidationError{
					field:  "WorkerVersion",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkerVersion()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkflowTaskCompletedEventAttributesValidationError{
				field:  "WorkerVersion",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSdkMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkflowTaskCompletedEventAttributesValidationError{
					field:  "SdkMetadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkflowTaskCompletedEventAttributesValidationError{
					field:  "SdkMetadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSdkMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkflowTaskCompletedEventAttributesValidationError{
				field:  "SdkMetadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMeteringMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkflowTaskCompletedEventAttributesValidationError{
					field:  "MeteringMetadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkflowTaskCompletedEventAttributesValidationError{
					field:  "MeteringMetadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMeteringMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkflowTaskCompletedEventAttributesValidationError{
				field:  "MeteringMetadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return WorkflowTaskCompletedEventAttributesMultiError(errors)
	}

	return nil
}

// WorkflowTaskCompletedEventAttributesMultiError is an error wrapping multiple
// validation errors returned by
// WorkflowTaskCompletedEventAttributes.ValidateAll() if the designated
// constraints aren't met.
type WorkflowTaskCompletedEventAttributesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WorkflowTaskCompletedEventAttributesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WorkflowTaskCompletedEventAttributesMultiError) AllErrors() []error { return m }

// WorkflowTaskCompletedEventAttributesValidationError is the validation error
// returned by WorkflowTaskCompletedEventAttributes.Validate if the designated
// constraints aren't met.
type WorkflowTaskCompletedEventAttributesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkflowTaskCompletedEventAttributesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorkflowTaskCompletedEventAttributesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WorkflowTaskCompletedEventAttributesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorkflowTaskCompletedEventAttributesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkflowTaskCompletedEventAttributesValidationError) ErrorName() string {
	return "WorkflowTaskCompletedEventAttributesValidationError"
}

// Error satisfies the builtin error interface
func (e WorkflowTaskCompletedEventAttributesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorkflowTaskCompletedEventAttributes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkflowTaskCompletedEventAttributesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkflowTaskCompletedEventAttributesValidationError{}

// Validate checks the field values on WorkflowTaskTimedOutEventAttributes with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *WorkflowTaskTimedOutEventAttributes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WorkflowTaskTimedOutEventAttributes
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// WorkflowTaskTimedOutEventAttributesMultiError, or nil if none found.
func (m *WorkflowTaskTimedOutEventAttributes) ValidateAll() error {
	return m.validate(true)
}

func (m *WorkflowTaskTimedOutEventAttributes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ScheduledEventId

	// no validation rules for StartedEventId

	// no validation rules for TimeoutType

	if len(errors) > 0 {
		return WorkflowTaskTimedOutEventAttributesMultiError(errors)
	}

	return nil
}

// WorkflowTaskTimedOutEventAttributesMultiError is an error wrapping multiple
// validation errors returned by
// WorkflowTaskTimedOutEventAttributes.ValidateAll() if the designated
// constraints aren't met.
type WorkflowTaskTimedOutEventAttributesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WorkflowTaskTimedOutEventAttributesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WorkflowTaskTimedOutEventAttributesMultiError) AllErrors() []error { return m }

// WorkflowTaskTimedOutEventAttributesValidationError is the validation error
// returned by WorkflowTaskTimedOutEventAttributes.Validate if the designated
// constraints aren't met.
type WorkflowTaskTimedOutEventAttributesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkflowTaskTimedOutEventAttributesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorkflowTaskTimedOutEventAttributesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WorkflowTaskTimedOutEventAttributesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorkflowTaskTimedOutEventAttributesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkflowTaskTimedOutEventAttributesValidationError) ErrorName() string {
	return "WorkflowTaskTimedOutEventAttributesValidationError"
}

// Error satisfies the builtin error interface
func (e WorkflowTaskTimedOutEventAttributesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorkflowTaskTimedOutEventAttributes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkflowTaskTimedOutEventAttributesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkflowTaskTimedOutEventAttributesValidationError{}

// Validate checks the field values on WorkflowTaskFailedEventAttributes with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *WorkflowTaskFailedEventAttributes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WorkflowTaskFailedEventAttributes
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// WorkflowTaskFailedEventAttributesMultiError, or nil if none found.
func (m *WorkflowTaskFailedEventAttributes) ValidateAll() error {
	return m.validate(true)
}

func (m *WorkflowTaskFailedEventAttributes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ScheduledEventId

	// no validation rules for StartedEventId

	// no validation rules for Cause

	if all {
		switch v := interface{}(m.GetFailure()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkflowTaskFailedEventAttributesValidationError{
					field:  "Failure",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkflowTaskFailedEventAttributesValidationError{
					field:  "Failure",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFailure()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkflowTaskFailedEventAttributesValidationError{
				field:  "Failure",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Identity

	// no validation rules for BaseRunId

	// no validation rules for NewRunId

	// no validation rules for ForkEventVersion

	// no validation rules for BinaryChecksum

	if all {
		switch v := interface{}(m.GetWorkerVersion()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkflowTaskFailedEventAttributesValidationError{
					field:  "WorkerVersion",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkflowTaskFailedEventAttributesValidationError{
					field:  "WorkerVersion",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkerVersion()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkflowTaskFailedEventAttributesValidationError{
				field:  "WorkerVersion",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return WorkflowTaskFailedEventAttributesMultiError(errors)
	}

	return nil
}

// WorkflowTaskFailedEventAttributesMultiError is an error wrapping multiple
// validation errors returned by
// WorkflowTaskFailedEventAttributes.ValidateAll() if the designated
// constraints aren't met.
type WorkflowTaskFailedEventAttributesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WorkflowTaskFailedEventAttributesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WorkflowTaskFailedEventAttributesMultiError) AllErrors() []error { return m }

// WorkflowTaskFailedEventAttributesValidationError is the validation error
// returned by WorkflowTaskFailedEventAttributes.Validate if the designated
// constraints aren't met.
type WorkflowTaskFailedEventAttributesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkflowTaskFailedEventAttributesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorkflowTaskFailedEventAttributesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WorkflowTaskFailedEventAttributesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorkflowTaskFailedEventAttributesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkflowTaskFailedEventAttributesValidationError) ErrorName() string {
	return "WorkflowTaskFailedEventAttributesValidationError"
}

// Error satisfies the builtin error interface
func (e WorkflowTaskFailedEventAttributesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorkflowTaskFailedEventAttributes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkflowTaskFailedEventAttributesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkflowTaskFailedEventAttributesValidationError{}

// Validate checks the field values on ActivityTaskScheduledEventAttributes
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ActivityTaskScheduledEventAttributes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ActivityTaskScheduledEventAttributes
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ActivityTaskScheduledEventAttributesMultiError, or nil if none found.
func (m *ActivityTaskScheduledEventAttributes) ValidateAll() error {
	return m.validate(true)
}

func (m *ActivityTaskScheduledEventAttributes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ActivityId

	if all {
		switch v := interface{}(m.GetActivityType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ActivityTaskScheduledEventAttributesValidationError{
					field:  "ActivityType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ActivityTaskScheduledEventAttributesValidationError{
					field:  "ActivityType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetActivityType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ActivityTaskScheduledEventAttributesValidationError{
				field:  "ActivityType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTaskQueue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ActivityTaskScheduledEventAttributesValidationError{
					field:  "TaskQueue",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ActivityTaskScheduledEventAttributesValidationError{
					field:  "TaskQueue",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTaskQueue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ActivityTaskScheduledEventAttributesValidationError{
				field:  "TaskQueue",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetHeader()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ActivityTaskScheduledEventAttributesValidationError{
					field:  "Header",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ActivityTaskScheduledEventAttributesValidationError{
					field:  "Header",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHeader()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ActivityTaskScheduledEventAttributesValidationError{
				field:  "Header",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetInput()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ActivityTaskScheduledEventAttributesValidationError{
					field:  "Input",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ActivityTaskScheduledEventAttributesValidationError{
					field:  "Input",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInput()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ActivityTaskScheduledEventAttributesValidationError{
				field:  "Input",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetScheduleToCloseTimeout()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ActivityTaskScheduledEventAttributesValidationError{
					field:  "ScheduleToCloseTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ActivityTaskScheduledEventAttributesValidationError{
					field:  "ScheduleToCloseTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetScheduleToCloseTimeout()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ActivityTaskScheduledEventAttributesValidationError{
				field:  "ScheduleToCloseTimeout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetScheduleToStartTimeout()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ActivityTaskScheduledEventAttributesValidationError{
					field:  "ScheduleToStartTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ActivityTaskScheduledEventAttributesValidationError{
					field:  "ScheduleToStartTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetScheduleToStartTimeout()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ActivityTaskScheduledEventAttributesValidationError{
				field:  "ScheduleToStartTimeout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStartToCloseTimeout()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ActivityTaskScheduledEventAttributesValidationError{
					field:  "StartToCloseTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ActivityTaskScheduledEventAttributesValidationError{
					field:  "StartToCloseTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartToCloseTimeout()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ActivityTaskScheduledEventAttributesValidationError{
				field:  "StartToCloseTimeout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetHeartbeatTimeout()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ActivityTaskScheduledEventAttributesValidationError{
					field:  "HeartbeatTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ActivityTaskScheduledEventAttributesValidationError{
					field:  "HeartbeatTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHeartbeatTimeout()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ActivityTaskScheduledEventAttributesValidationError{
				field:  "HeartbeatTimeout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for WorkflowTaskCompletedEventId

	if all {
		switch v := interface{}(m.GetRetryPolicy()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ActivityTaskScheduledEventAttributesValidationError{
					field:  "RetryPolicy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ActivityTaskScheduledEventAttributesValidationError{
					field:  "RetryPolicy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRetryPolicy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ActivityTaskScheduledEventAttributesValidationError{
				field:  "RetryPolicy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for UseCompatibleVersion

	if len(errors) > 0 {
		return ActivityTaskScheduledEventAttributesMultiError(errors)
	}

	return nil
}

// ActivityTaskScheduledEventAttributesMultiError is an error wrapping multiple
// validation errors returned by
// ActivityTaskScheduledEventAttributes.ValidateAll() if the designated
// constraints aren't met.
type ActivityTaskScheduledEventAttributesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ActivityTaskScheduledEventAttributesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ActivityTaskScheduledEventAttributesMultiError) AllErrors() []error { return m }

// ActivityTaskScheduledEventAttributesValidationError is the validation error
// returned by ActivityTaskScheduledEventAttributes.Validate if the designated
// constraints aren't met.
type ActivityTaskScheduledEventAttributesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ActivityTaskScheduledEventAttributesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ActivityTaskScheduledEventAttributesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ActivityTaskScheduledEventAttributesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ActivityTaskScheduledEventAttributesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ActivityTaskScheduledEventAttributesValidationError) ErrorName() string {
	return "ActivityTaskScheduledEventAttributesValidationError"
}

// Error satisfies the builtin error interface
func (e ActivityTaskScheduledEventAttributesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sActivityTaskScheduledEventAttributes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ActivityTaskScheduledEventAttributesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ActivityTaskScheduledEventAttributesValidationError{}

// Validate checks the field values on ActivityTaskStartedEventAttributes with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ActivityTaskStartedEventAttributes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ActivityTaskStartedEventAttributes
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ActivityTaskStartedEventAttributesMultiError, or nil if none found.
func (m *ActivityTaskStartedEventAttributes) ValidateAll() error {
	return m.validate(true)
}

func (m *ActivityTaskStartedEventAttributes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ScheduledEventId

	// no validation rules for Identity

	// no validation rules for RequestId

	// no validation rules for Attempt

	if all {
		switch v := interface{}(m.GetLastFailure()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ActivityTaskStartedEventAttributesValidationError{
					field:  "LastFailure",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ActivityTaskStartedEventAttributesValidationError{
					field:  "LastFailure",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLastFailure()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ActivityTaskStartedEventAttributesValidationError{
				field:  "LastFailure",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ActivityTaskStartedEventAttributesMultiError(errors)
	}

	return nil
}

// ActivityTaskStartedEventAttributesMultiError is an error wrapping multiple
// validation errors returned by
// ActivityTaskStartedEventAttributes.ValidateAll() if the designated
// constraints aren't met.
type ActivityTaskStartedEventAttributesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ActivityTaskStartedEventAttributesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ActivityTaskStartedEventAttributesMultiError) AllErrors() []error { return m }

// ActivityTaskStartedEventAttributesValidationError is the validation error
// returned by ActivityTaskStartedEventAttributes.Validate if the designated
// constraints aren't met.
type ActivityTaskStartedEventAttributesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ActivityTaskStartedEventAttributesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ActivityTaskStartedEventAttributesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ActivityTaskStartedEventAttributesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ActivityTaskStartedEventAttributesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ActivityTaskStartedEventAttributesValidationError) ErrorName() string {
	return "ActivityTaskStartedEventAttributesValidationError"
}

// Error satisfies the builtin error interface
func (e ActivityTaskStartedEventAttributesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sActivityTaskStartedEventAttributes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ActivityTaskStartedEventAttributesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ActivityTaskStartedEventAttributesValidationError{}

// Validate checks the field values on ActivityTaskCompletedEventAttributes
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ActivityTaskCompletedEventAttributes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ActivityTaskCompletedEventAttributes
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ActivityTaskCompletedEventAttributesMultiError, or nil if none found.
func (m *ActivityTaskCompletedEventAttributes) ValidateAll() error {
	return m.validate(true)
}

func (m *ActivityTaskCompletedEventAttributes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ActivityTaskCompletedEventAttributesValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ActivityTaskCompletedEventAttributesValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ActivityTaskCompletedEventAttributesValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ScheduledEventId

	// no validation rules for StartedEventId

	// no validation rules for Identity

	if all {
		switch v := interface{}(m.GetWorkerVersion()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ActivityTaskCompletedEventAttributesValidationError{
					field:  "WorkerVersion",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ActivityTaskCompletedEventAttributesValidationError{
					field:  "WorkerVersion",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkerVersion()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ActivityTaskCompletedEventAttributesValidationError{
				field:  "WorkerVersion",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ActivityTaskCompletedEventAttributesMultiError(errors)
	}

	return nil
}

// ActivityTaskCompletedEventAttributesMultiError is an error wrapping multiple
// validation errors returned by
// ActivityTaskCompletedEventAttributes.ValidateAll() if the designated
// constraints aren't met.
type ActivityTaskCompletedEventAttributesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ActivityTaskCompletedEventAttributesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ActivityTaskCompletedEventAttributesMultiError) AllErrors() []error { return m }

// ActivityTaskCompletedEventAttributesValidationError is the validation error
// returned by ActivityTaskCompletedEventAttributes.Validate if the designated
// constraints aren't met.
type ActivityTaskCompletedEventAttributesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ActivityTaskCompletedEventAttributesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ActivityTaskCompletedEventAttributesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ActivityTaskCompletedEventAttributesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ActivityTaskCompletedEventAttributesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ActivityTaskCompletedEventAttributesValidationError) ErrorName() string {
	return "ActivityTaskCompletedEventAttributesValidationError"
}

// Error satisfies the builtin error interface
func (e ActivityTaskCompletedEventAttributesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sActivityTaskCompletedEventAttributes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ActivityTaskCompletedEventAttributesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ActivityTaskCompletedEventAttributesValidationError{}

// Validate checks the field values on ActivityTaskFailedEventAttributes with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ActivityTaskFailedEventAttributes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ActivityTaskFailedEventAttributes
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ActivityTaskFailedEventAttributesMultiError, or nil if none found.
func (m *ActivityTaskFailedEventAttributes) ValidateAll() error {
	return m.validate(true)
}

func (m *ActivityTaskFailedEventAttributes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFailure()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ActivityTaskFailedEventAttributesValidationError{
					field:  "Failure",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ActivityTaskFailedEventAttributesValidationError{
					field:  "Failure",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFailure()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ActivityTaskFailedEventAttributesValidationError{
				field:  "Failure",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ScheduledEventId

	// no validation rules for StartedEventId

	// no validation rules for Identity

	// no validation rules for RetryState

	if all {
		switch v := interface{}(m.GetWorkerVersion()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ActivityTaskFailedEventAttributesValidationError{
					field:  "WorkerVersion",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ActivityTaskFailedEventAttributesValidationError{
					field:  "WorkerVersion",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkerVersion()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ActivityTaskFailedEventAttributesValidationError{
				field:  "WorkerVersion",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ActivityTaskFailedEventAttributesMultiError(errors)
	}

	return nil
}

// ActivityTaskFailedEventAttributesMultiError is an error wrapping multiple
// validation errors returned by
// ActivityTaskFailedEventAttributes.ValidateAll() if the designated
// constraints aren't met.
type ActivityTaskFailedEventAttributesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ActivityTaskFailedEventAttributesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ActivityTaskFailedEventAttributesMultiError) AllErrors() []error { return m }

// ActivityTaskFailedEventAttributesValidationError is the validation error
// returned by ActivityTaskFailedEventAttributes.Validate if the designated
// constraints aren't met.
type ActivityTaskFailedEventAttributesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ActivityTaskFailedEventAttributesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ActivityTaskFailedEventAttributesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ActivityTaskFailedEventAttributesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ActivityTaskFailedEventAttributesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ActivityTaskFailedEventAttributesValidationError) ErrorName() string {
	return "ActivityTaskFailedEventAttributesValidationError"
}

// Error satisfies the builtin error interface
func (e ActivityTaskFailedEventAttributesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sActivityTaskFailedEventAttributes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ActivityTaskFailedEventAttributesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ActivityTaskFailedEventAttributesValidationError{}

// Validate checks the field values on ActivityTaskTimedOutEventAttributes with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ActivityTaskTimedOutEventAttributes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ActivityTaskTimedOutEventAttributes
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ActivityTaskTimedOutEventAttributesMultiError, or nil if none found.
func (m *ActivityTaskTimedOutEventAttributes) ValidateAll() error {
	return m.validate(true)
}

func (m *ActivityTaskTimedOutEventAttributes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFailure()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ActivityTaskTimedOutEventAttributesValidationError{
					field:  "Failure",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ActivityTaskTimedOutEventAttributesValidationError{
					field:  "Failure",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFailure()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ActivityTaskTimedOutEventAttributesValidationError{
				field:  "Failure",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ScheduledEventId

	// no validation rules for StartedEventId

	// no validation rules for RetryState

	if len(errors) > 0 {
		return ActivityTaskTimedOutEventAttributesMultiError(errors)
	}

	return nil
}

// ActivityTaskTimedOutEventAttributesMultiError is an error wrapping multiple
// validation errors returned by
// ActivityTaskTimedOutEventAttributes.ValidateAll() if the designated
// constraints aren't met.
type ActivityTaskTimedOutEventAttributesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ActivityTaskTimedOutEventAttributesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ActivityTaskTimedOutEventAttributesMultiError) AllErrors() []error { return m }

// ActivityTaskTimedOutEventAttributesValidationError is the validation error
// returned by ActivityTaskTimedOutEventAttributes.Validate if the designated
// constraints aren't met.
type ActivityTaskTimedOutEventAttributesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ActivityTaskTimedOutEventAttributesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ActivityTaskTimedOutEventAttributesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ActivityTaskTimedOutEventAttributesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ActivityTaskTimedOutEventAttributesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ActivityTaskTimedOutEventAttributesValidationError) ErrorName() string {
	return "ActivityTaskTimedOutEventAttributesValidationError"
}

// Error satisfies the builtin error interface
func (e ActivityTaskTimedOutEventAttributesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sActivityTaskTimedOutEventAttributes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ActivityTaskTimedOutEventAttributesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ActivityTaskTimedOutEventAttributesValidationError{}

// Validate checks the field values on
// ActivityTaskCancelRequestedEventAttributes with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ActivityTaskCancelRequestedEventAttributes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ActivityTaskCancelRequestedEventAttributes with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ActivityTaskCancelRequestedEventAttributesMultiError, or nil if none found.
func (m *ActivityTaskCancelRequestedEventAttributes) ValidateAll() error {
	return m.validate(true)
}

func (m *ActivityTaskCancelRequestedEventAttributes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ScheduledEventId

	// no validation rules for WorkflowTaskCompletedEventId

	if len(errors) > 0 {
		return ActivityTaskCancelRequestedEventAttributesMultiError(errors)
	}

	return nil
}

// ActivityTaskCancelRequestedEventAttributesMultiError is an error wrapping
// multiple validation errors returned by
// ActivityTaskCancelRequestedEventAttributes.ValidateAll() if the designated
// constraints aren't met.
type ActivityTaskCancelRequestedEventAttributesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ActivityTaskCancelRequestedEventAttributesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ActivityTaskCancelRequestedEventAttributesMultiError) AllErrors() []error { return m }

// ActivityTaskCancelRequestedEventAttributesValidationError is the validation
// error returned by ActivityTaskCancelRequestedEventAttributes.Validate if
// the designated constraints aren't met.
type ActivityTaskCancelRequestedEventAttributesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ActivityTaskCancelRequestedEventAttributesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ActivityTaskCancelRequestedEventAttributesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ActivityTaskCancelRequestedEventAttributesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ActivityTaskCancelRequestedEventAttributesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ActivityTaskCancelRequestedEventAttributesValidationError) ErrorName() string {
	return "ActivityTaskCancelRequestedEventAttributesValidationError"
}

// Error satisfies the builtin error interface
func (e ActivityTaskCancelRequestedEventAttributesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sActivityTaskCancelRequestedEventAttributes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ActivityTaskCancelRequestedEventAttributesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ActivityTaskCancelRequestedEventAttributesValidationError{}

// Validate checks the field values on ActivityTaskCanceledEventAttributes with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ActivityTaskCanceledEventAttributes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ActivityTaskCanceledEventAttributes
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ActivityTaskCanceledEventAttributesMultiError, or nil if none found.
func (m *ActivityTaskCanceledEventAttributes) ValidateAll() error {
	return m.validate(true)
}

func (m *ActivityTaskCanceledEventAttributes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDetails()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ActivityTaskCanceledEventAttributesValidationError{
					field:  "Details",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ActivityTaskCanceledEventAttributesValidationError{
					field:  "Details",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ActivityTaskCanceledEventAttributesValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for LatestCancelRequestedEventId

	// no validation rules for ScheduledEventId

	// no validation rules for StartedEventId

	// no validation rules for Identity

	if all {
		switch v := interface{}(m.GetWorkerVersion()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ActivityTaskCanceledEventAttributesValidationError{
					field:  "WorkerVersion",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ActivityTaskCanceledEventAttributesValidationError{
					field:  "WorkerVersion",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkerVersion()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ActivityTaskCanceledEventAttributesValidationError{
				field:  "WorkerVersion",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ActivityTaskCanceledEventAttributesMultiError(errors)
	}

	return nil
}

// ActivityTaskCanceledEventAttributesMultiError is an error wrapping multiple
// validation errors returned by
// ActivityTaskCanceledEventAttributes.ValidateAll() if the designated
// constraints aren't met.
type ActivityTaskCanceledEventAttributesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ActivityTaskCanceledEventAttributesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ActivityTaskCanceledEventAttributesMultiError) AllErrors() []error { return m }

// ActivityTaskCanceledEventAttributesValidationError is the validation error
// returned by ActivityTaskCanceledEventAttributes.Validate if the designated
// constraints aren't met.
type ActivityTaskCanceledEventAttributesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ActivityTaskCanceledEventAttributesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ActivityTaskCanceledEventAttributesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ActivityTaskCanceledEventAttributesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ActivityTaskCanceledEventAttributesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ActivityTaskCanceledEventAttributesValidationError) ErrorName() string {
	return "ActivityTaskCanceledEventAttributesValidationError"
}

// Error satisfies the builtin error interface
func (e ActivityTaskCanceledEventAttributesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sActivityTaskCanceledEventAttributes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ActivityTaskCanceledEventAttributesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ActivityTaskCanceledEventAttributesValidationError{}

// Validate checks the field values on TimerStartedEventAttributes with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TimerStartedEventAttributes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TimerStartedEventAttributes with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TimerStartedEventAttributesMultiError, or nil if none found.
func (m *TimerStartedEventAttributes) ValidateAll() error {
	return m.validate(true)
}

func (m *TimerStartedEventAttributes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TimerId

	if all {
		switch v := interface{}(m.GetStartToFireTimeout()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TimerStartedEventAttributesValidationError{
					field:  "StartToFireTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TimerStartedEventAttributesValidationError{
					field:  "StartToFireTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartToFireTimeout()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TimerStartedEventAttributesValidationError{
				field:  "StartToFireTimeout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for WorkflowTaskCompletedEventId

	if len(errors) > 0 {
		return TimerStartedEventAttributesMultiError(errors)
	}

	return nil
}

// TimerStartedEventAttributesMultiError is an error wrapping multiple
// validation errors returned by TimerStartedEventAttributes.ValidateAll() if
// the designated constraints aren't met.
type TimerStartedEventAttributesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TimerStartedEventAttributesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TimerStartedEventAttributesMultiError) AllErrors() []error { return m }

// TimerStartedEventAttributesValidationError is the validation error returned
// by TimerStartedEventAttributes.Validate if the designated constraints
// aren't met.
type TimerStartedEventAttributesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TimerStartedEventAttributesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TimerStartedEventAttributesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TimerStartedEventAttributesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TimerStartedEventAttributesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TimerStartedEventAttributesValidationError) ErrorName() string {
	return "TimerStartedEventAttributesValidationError"
}

// Error satisfies the builtin error interface
func (e TimerStartedEventAttributesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTimerStartedEventAttributes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TimerStartedEventAttributesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TimerStartedEventAttributesValidationError{}

// Validate checks the field values on TimerFiredEventAttributes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TimerFiredEventAttributes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TimerFiredEventAttributes with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TimerFiredEventAttributesMultiError, or nil if none found.
func (m *TimerFiredEventAttributes) ValidateAll() error {
	return m.validate(true)
}

func (m *TimerFiredEventAttributes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TimerId

	// no validation rules for StartedEventId

	if len(errors) > 0 {
		return TimerFiredEventAttributesMultiError(errors)
	}

	return nil
}

// TimerFiredEventAttributesMultiError is an error wrapping multiple validation
// errors returned by TimerFiredEventAttributes.ValidateAll() if the
// designated constraints aren't met.
type TimerFiredEventAttributesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TimerFiredEventAttributesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TimerFiredEventAttributesMultiError) AllErrors() []error { return m }

// TimerFiredEventAttributesValidationError is the validation error returned by
// TimerFiredEventAttributes.Validate if the designated constraints aren't met.
type TimerFiredEventAttributesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TimerFiredEventAttributesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TimerFiredEventAttributesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TimerFiredEventAttributesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TimerFiredEventAttributesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TimerFiredEventAttributesValidationError) ErrorName() string {
	return "TimerFiredEventAttributesValidationError"
}

// Error satisfies the builtin error interface
func (e TimerFiredEventAttributesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTimerFiredEventAttributes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TimerFiredEventAttributesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TimerFiredEventAttributesValidationError{}

// Validate checks the field values on TimerCanceledEventAttributes with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TimerCanceledEventAttributes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TimerCanceledEventAttributes with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TimerCanceledEventAttributesMultiError, or nil if none found.
func (m *TimerCanceledEventAttributes) ValidateAll() error {
	return m.validate(true)
}

func (m *TimerCanceledEventAttributes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TimerId

	// no validation rules for StartedEventId

	// no validation rules for WorkflowTaskCompletedEventId

	// no validation rules for Identity

	if len(errors) > 0 {
		return TimerCanceledEventAttributesMultiError(errors)
	}

	return nil
}

// TimerCanceledEventAttributesMultiError is an error wrapping multiple
// validation errors returned by TimerCanceledEventAttributes.ValidateAll() if
// the designated constraints aren't met.
type TimerCanceledEventAttributesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TimerCanceledEventAttributesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TimerCanceledEventAttributesMultiError) AllErrors() []error { return m }

// TimerCanceledEventAttributesValidationError is the validation error returned
// by TimerCanceledEventAttributes.Validate if the designated constraints
// aren't met.
type TimerCanceledEventAttributesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TimerCanceledEventAttributesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TimerCanceledEventAttributesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TimerCanceledEventAttributesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TimerCanceledEventAttributesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TimerCanceledEventAttributesValidationError) ErrorName() string {
	return "TimerCanceledEventAttributesValidationError"
}

// Error satisfies the builtin error interface
func (e TimerCanceledEventAttributesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTimerCanceledEventAttributes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TimerCanceledEventAttributesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TimerCanceledEventAttributesValidationError{}

// Validate checks the field values on
// WorkflowExecutionCancelRequestedEventAttributes with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *WorkflowExecutionCancelRequestedEventAttributes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// WorkflowExecutionCancelRequestedEventAttributes with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// WorkflowExecutionCancelRequestedEventAttributesMultiError, or nil if none found.
func (m *WorkflowExecutionCancelRequestedEventAttributes) ValidateAll() error {
	return m.validate(true)
}

func (m *WorkflowExecutionCancelRequestedEventAttributes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Cause

	// no validation rules for ExternalInitiatedEventId

	if all {
		switch v := interface{}(m.GetExternalWorkflowExecution()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkflowExecutionCancelRequestedEventAttributesValidationError{
					field:  "ExternalWorkflowExecution",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkflowExecutionCancelRequestedEventAttributesValidationError{
					field:  "ExternalWorkflowExecution",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExternalWorkflowExecution()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkflowExecutionCancelRequestedEventAttributesValidationError{
				field:  "ExternalWorkflowExecution",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Identity

	if len(errors) > 0 {
		return WorkflowExecutionCancelRequestedEventAttributesMultiError(errors)
	}

	return nil
}

// WorkflowExecutionCancelRequestedEventAttributesMultiError is an error
// wrapping multiple validation errors returned by
// WorkflowExecutionCancelRequestedEventAttributes.ValidateAll() if the
// designated constraints aren't met.
type WorkflowExecutionCancelRequestedEventAttributesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WorkflowExecutionCancelRequestedEventAttributesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WorkflowExecutionCancelRequestedEventAttributesMultiError) AllErrors() []error { return m }

// WorkflowExecutionCancelRequestedEventAttributesValidationError is the
// validation error returned by
// WorkflowExecutionCancelRequestedEventAttributes.Validate if the designated
// constraints aren't met.
type WorkflowExecutionCancelRequestedEventAttributesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkflowExecutionCancelRequestedEventAttributesValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e WorkflowExecutionCancelRequestedEventAttributesValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e WorkflowExecutionCancelRequestedEventAttributesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorkflowExecutionCancelRequestedEventAttributesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkflowExecutionCancelRequestedEventAttributesValidationError) ErrorName() string {
	return "WorkflowExecutionCancelRequestedEventAttributesValidationError"
}

// Error satisfies the builtin error interface
func (e WorkflowExecutionCancelRequestedEventAttributesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorkflowExecutionCancelRequestedEventAttributes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkflowExecutionCancelRequestedEventAttributesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkflowExecutionCancelRequestedEventAttributesValidationError{}

// Validate checks the field values on WorkflowExecutionCanceledEventAttributes
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *WorkflowExecutionCanceledEventAttributes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// WorkflowExecutionCanceledEventAttributes with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// WorkflowExecutionCanceledEventAttributesMultiError, or nil if none found.
func (m *WorkflowExecutionCanceledEventAttributes) ValidateAll() error {
	return m.validate(true)
}

func (m *WorkflowExecutionCanceledEventAttributes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WorkflowTaskCompletedEventId

	if all {
		switch v := interface{}(m.GetDetails()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkflowExecutionCanceledEventAttributesValidationError{
					field:  "Details",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkflowExecutionCanceledEventAttributesValidationError{
					field:  "Details",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkflowExecutionCanceledEventAttributesValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return WorkflowExecutionCanceledEventAttributesMultiError(errors)
	}

	return nil
}

// WorkflowExecutionCanceledEventAttributesMultiError is an error wrapping
// multiple validation errors returned by
// WorkflowExecutionCanceledEventAttributes.ValidateAll() if the designated
// constraints aren't met.
type WorkflowExecutionCanceledEventAttributesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WorkflowExecutionCanceledEventAttributesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WorkflowExecutionCanceledEventAttributesMultiError) AllErrors() []error { return m }

// WorkflowExecutionCanceledEventAttributesValidationError is the validation
// error returned by WorkflowExecutionCanceledEventAttributes.Validate if the
// designated constraints aren't met.
type WorkflowExecutionCanceledEventAttributesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkflowExecutionCanceledEventAttributesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorkflowExecutionCanceledEventAttributesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WorkflowExecutionCanceledEventAttributesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorkflowExecutionCanceledEventAttributesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkflowExecutionCanceledEventAttributesValidationError) ErrorName() string {
	return "WorkflowExecutionCanceledEventAttributesValidationError"
}

// Error satisfies the builtin error interface
func (e WorkflowExecutionCanceledEventAttributesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorkflowExecutionCanceledEventAttributes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkflowExecutionCanceledEventAttributesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkflowExecutionCanceledEventAttributesValidationError{}

// Validate checks the field values on MarkerRecordedEventAttributes with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MarkerRecordedEventAttributes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MarkerRecordedEventAttributes with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// MarkerRecordedEventAttributesMultiError, or nil if none found.
func (m *MarkerRecordedEventAttributes) ValidateAll() error {
	return m.validate(true)
}

func (m *MarkerRecordedEventAttributes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MarkerName

	{
		sorted_keys := make([]string, len(m.GetDetails()))
		i := 0
		for key := range m.GetDetails() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetDetails()[key]
			_ = val

			// no validation rules for Details[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, MarkerRecordedEventAttributesValidationError{
							field:  fmt.Sprintf("Details[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, MarkerRecordedEventAttributesValidationError{
							field:  fmt.Sprintf("Details[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return MarkerRecordedEventAttributesValidationError{
						field:  fmt.Sprintf("Details[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	// no validation rules for WorkflowTaskCompletedEventId

	if all {
		switch v := interface{}(m.GetHeader()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MarkerRecordedEventAttributesValidationError{
					field:  "Header",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MarkerRecordedEventAttributesValidationError{
					field:  "Header",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHeader()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MarkerRecordedEventAttributesValidationError{
				field:  "Header",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetFailure()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MarkerRecordedEventAttributesValidationError{
					field:  "Failure",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MarkerRecordedEventAttributesValidationError{
					field:  "Failure",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFailure()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MarkerRecordedEventAttributesValidationError{
				field:  "Failure",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return MarkerRecordedEventAttributesMultiError(errors)
	}

	return nil
}

// MarkerRecordedEventAttributesMultiError is an error wrapping multiple
// validation errors returned by MarkerRecordedEventAttributes.ValidateAll()
// if the designated constraints aren't met.
type MarkerRecordedEventAttributesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MarkerRecordedEventAttributesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MarkerRecordedEventAttributesMultiError) AllErrors() []error { return m }

// MarkerRecordedEventAttributesValidationError is the validation error
// returned by MarkerRecordedEventAttributes.Validate if the designated
// constraints aren't met.
type MarkerRecordedEventAttributesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MarkerRecordedEventAttributesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MarkerRecordedEventAttributesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MarkerRecordedEventAttributesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MarkerRecordedEventAttributesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MarkerRecordedEventAttributesValidationError) ErrorName() string {
	return "MarkerRecordedEventAttributesValidationError"
}

// Error satisfies the builtin error interface
func (e MarkerRecordedEventAttributesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMarkerRecordedEventAttributes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MarkerRecordedEventAttributesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MarkerRecordedEventAttributesValidationError{}

// Validate checks the field values on WorkflowExecutionSignaledEventAttributes
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *WorkflowExecutionSignaledEventAttributes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// WorkflowExecutionSignaledEventAttributes with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// WorkflowExecutionSignaledEventAttributesMultiError, or nil if none found.
func (m *WorkflowExecutionSignaledEventAttributes) ValidateAll() error {
	return m.validate(true)
}

func (m *WorkflowExecutionSignaledEventAttributes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SignalName

	if all {
		switch v := interface{}(m.GetInput()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkflowExecutionSignaledEventAttributesValidationError{
					field:  "Input",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkflowExecutionSignaledEventAttributesValidationError{
					field:  "Input",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInput()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkflowExecutionSignaledEventAttributesValidationError{
				field:  "Input",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Identity

	if all {
		switch v := interface{}(m.GetHeader()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkflowExecutionSignaledEventAttributesValidationError{
					field:  "Header",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkflowExecutionSignaledEventAttributesValidationError{
					field:  "Header",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHeader()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkflowExecutionSignaledEventAttributesValidationError{
				field:  "Header",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for SkipGenerateWorkflowTask

	if len(errors) > 0 {
		return WorkflowExecutionSignaledEventAttributesMultiError(errors)
	}

	return nil
}

// WorkflowExecutionSignaledEventAttributesMultiError is an error wrapping
// multiple validation errors returned by
// WorkflowExecutionSignaledEventAttributes.ValidateAll() if the designated
// constraints aren't met.
type WorkflowExecutionSignaledEventAttributesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WorkflowExecutionSignaledEventAttributesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WorkflowExecutionSignaledEventAttributesMultiError) AllErrors() []error { return m }

// WorkflowExecutionSignaledEventAttributesValidationError is the validation
// error returned by WorkflowExecutionSignaledEventAttributes.Validate if the
// designated constraints aren't met.
type WorkflowExecutionSignaledEventAttributesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkflowExecutionSignaledEventAttributesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorkflowExecutionSignaledEventAttributesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WorkflowExecutionSignaledEventAttributesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorkflowExecutionSignaledEventAttributesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkflowExecutionSignaledEventAttributesValidationError) ErrorName() string {
	return "WorkflowExecutionSignaledEventAttributesValidationError"
}

// Error satisfies the builtin error interface
func (e WorkflowExecutionSignaledEventAttributesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorkflowExecutionSignaledEventAttributes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkflowExecutionSignaledEventAttributesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkflowExecutionSignaledEventAttributesValidationError{}

// Validate checks the field values on
// WorkflowExecutionTerminatedEventAttributes with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *WorkflowExecutionTerminatedEventAttributes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// WorkflowExecutionTerminatedEventAttributes with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// WorkflowExecutionTerminatedEventAttributesMultiError, or nil if none found.
func (m *WorkflowExecutionTerminatedEventAttributes) ValidateAll() error {
	return m.validate(true)
}

func (m *WorkflowExecutionTerminatedEventAttributes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Reason

	if all {
		switch v := interface{}(m.GetDetails()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkflowExecutionTerminatedEventAttributesValidationError{
					field:  "Details",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkflowExecutionTerminatedEventAttributesValidationError{
					field:  "Details",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkflowExecutionTerminatedEventAttributesValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Identity

	if len(errors) > 0 {
		return WorkflowExecutionTerminatedEventAttributesMultiError(errors)
	}

	return nil
}

// WorkflowExecutionTerminatedEventAttributesMultiError is an error wrapping
// multiple validation errors returned by
// WorkflowExecutionTerminatedEventAttributes.ValidateAll() if the designated
// constraints aren't met.
type WorkflowExecutionTerminatedEventAttributesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WorkflowExecutionTerminatedEventAttributesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WorkflowExecutionTerminatedEventAttributesMultiError) AllErrors() []error { return m }

// WorkflowExecutionTerminatedEventAttributesValidationError is the validation
// error returned by WorkflowExecutionTerminatedEventAttributes.Validate if
// the designated constraints aren't met.
type WorkflowExecutionTerminatedEventAttributesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkflowExecutionTerminatedEventAttributesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorkflowExecutionTerminatedEventAttributesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WorkflowExecutionTerminatedEventAttributesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorkflowExecutionTerminatedEventAttributesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkflowExecutionTerminatedEventAttributesValidationError) ErrorName() string {
	return "WorkflowExecutionTerminatedEventAttributesValidationError"
}

// Error satisfies the builtin error interface
func (e WorkflowExecutionTerminatedEventAttributesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorkflowExecutionTerminatedEventAttributes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkflowExecutionTerminatedEventAttributesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkflowExecutionTerminatedEventAttributesValidationError{}

// Validate checks the field values on
// RequestCancelExternalWorkflowExecutionInitiatedEventAttributes with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RequestCancelExternalWorkflowExecutionInitiatedEventAttributes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// RequestCancelExternalWorkflowExecutionInitiatedEventAttributes with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RequestCancelExternalWorkflowExecutionInitiatedEventAttributesMultiError,
// or nil if none found.
func (m *RequestCancelExternalWorkflowExecutionInitiatedEventAttributes) ValidateAll() error {
	return m.validate(true)
}

func (m *RequestCancelExternalWorkflowExecutionInitiatedEventAttributes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WorkflowTaskCompletedEventId

	// no validation rules for Namespace

	// no validation rules for NamespaceId

	if all {
		switch v := interface{}(m.GetWorkflowExecution()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RequestCancelExternalWorkflowExecutionInitiatedEventAttributesValidationError{
					field:  "WorkflowExecution",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RequestCancelExternalWorkflowExecutionInitiatedEventAttributesValidationError{
					field:  "WorkflowExecution",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkflowExecution()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RequestCancelExternalWorkflowExecutionInitiatedEventAttributesValidationError{
				field:  "WorkflowExecution",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Control

	// no validation rules for ChildWorkflowOnly

	// no validation rules for Reason

	if len(errors) > 0 {
		return RequestCancelExternalWorkflowExecutionInitiatedEventAttributesMultiError(errors)
	}

	return nil
}

// RequestCancelExternalWorkflowExecutionInitiatedEventAttributesMultiError is
// an error wrapping multiple validation errors returned by
// RequestCancelExternalWorkflowExecutionInitiatedEventAttributes.ValidateAll()
// if the designated constraints aren't met.
type RequestCancelExternalWorkflowExecutionInitiatedEventAttributesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RequestCancelExternalWorkflowExecutionInitiatedEventAttributesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RequestCancelExternalWorkflowExecutionInitiatedEventAttributesMultiError) AllErrors() []error {
	return m
}

// RequestCancelExternalWorkflowExecutionInitiatedEventAttributesValidationError
// is the validation error returned by
// RequestCancelExternalWorkflowExecutionInitiatedEventAttributes.Validate if
// the designated constraints aren't met.
type RequestCancelExternalWorkflowExecutionInitiatedEventAttributesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestCancelExternalWorkflowExecutionInitiatedEventAttributesValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e RequestCancelExternalWorkflowExecutionInitiatedEventAttributesValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e RequestCancelExternalWorkflowExecutionInitiatedEventAttributesValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e RequestCancelExternalWorkflowExecutionInitiatedEventAttributesValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e RequestCancelExternalWorkflowExecutionInitiatedEventAttributesValidationError) ErrorName() string {
	return "RequestCancelExternalWorkflowExecutionInitiatedEventAttributesValidationError"
}

// Error satisfies the builtin error interface
func (e RequestCancelExternalWorkflowExecutionInitiatedEventAttributesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequestCancelExternalWorkflowExecutionInitiatedEventAttributes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestCancelExternalWorkflowExecutionInitiatedEventAttributesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestCancelExternalWorkflowExecutionInitiatedEventAttributesValidationError{}

// Validate checks the field values on
// RequestCancelExternalWorkflowExecutionFailedEventAttributes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RequestCancelExternalWorkflowExecutionFailedEventAttributes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// RequestCancelExternalWorkflowExecutionFailedEventAttributes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RequestCancelExternalWorkflowExecutionFailedEventAttributesMultiError, or
// nil if none found.
func (m *RequestCancelExternalWorkflowExecutionFailedEventAttributes) ValidateAll() error {
	return m.validate(true)
}

func (m *RequestCancelExternalWorkflowExecutionFailedEventAttributes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Cause

	// no validation rules for WorkflowTaskCompletedEventId

	// no validation rules for Namespace

	// no validation rules for NamespaceId

	if all {
		switch v := interface{}(m.GetWorkflowExecution()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RequestCancelExternalWorkflowExecutionFailedEventAttributesValidationError{
					field:  "WorkflowExecution",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RequestCancelExternalWorkflowExecutionFailedEventAttributesValidationError{
					field:  "WorkflowExecution",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkflowExecution()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RequestCancelExternalWorkflowExecutionFailedEventAttributesValidationError{
				field:  "WorkflowExecution",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for InitiatedEventId

	// no validation rules for Control

	if len(errors) > 0 {
		return RequestCancelExternalWorkflowExecutionFailedEventAttributesMultiError(errors)
	}

	return nil
}

// RequestCancelExternalWorkflowExecutionFailedEventAttributesMultiError is an
// error wrapping multiple validation errors returned by
// RequestCancelExternalWorkflowExecutionFailedEventAttributes.ValidateAll()
// if the designated constraints aren't met.
type RequestCancelExternalWorkflowExecutionFailedEventAttributesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RequestCancelExternalWorkflowExecutionFailedEventAttributesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RequestCancelExternalWorkflowExecutionFailedEventAttributesMultiError) AllErrors() []error {
	return m
}

// RequestCancelExternalWorkflowExecutionFailedEventAttributesValidationError
// is the validation error returned by
// RequestCancelExternalWorkflowExecutionFailedEventAttributes.Validate if the
// designated constraints aren't met.
type RequestCancelExternalWorkflowExecutionFailedEventAttributesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestCancelExternalWorkflowExecutionFailedEventAttributesValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e RequestCancelExternalWorkflowExecutionFailedEventAttributesValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e RequestCancelExternalWorkflowExecutionFailedEventAttributesValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e RequestCancelExternalWorkflowExecutionFailedEventAttributesValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e RequestCancelExternalWorkflowExecutionFailedEventAttributesValidationError) ErrorName() string {
	return "RequestCancelExternalWorkflowExecutionFailedEventAttributesValidationError"
}

// Error satisfies the builtin error interface
func (e RequestCancelExternalWorkflowExecutionFailedEventAttributesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequestCancelExternalWorkflowExecutionFailedEventAttributes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestCancelExternalWorkflowExecutionFailedEventAttributesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestCancelExternalWorkflowExecutionFailedEventAttributesValidationError{}

// Validate checks the field values on
// ExternalWorkflowExecutionCancelRequestedEventAttributes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExternalWorkflowExecutionCancelRequestedEventAttributes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ExternalWorkflowExecutionCancelRequestedEventAttributes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExternalWorkflowExecutionCancelRequestedEventAttributesMultiError, or nil
// if none found.
func (m *ExternalWorkflowExecutionCancelRequestedEventAttributes) ValidateAll() error {
	return m.validate(true)
}

func (m *ExternalWorkflowExecutionCancelRequestedEventAttributes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for InitiatedEventId

	// no validation rules for Namespace

	// no validation rules for NamespaceId

	if all {
		switch v := interface{}(m.GetWorkflowExecution()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExternalWorkflowExecutionCancelRequestedEventAttributesValidationError{
					field:  "WorkflowExecution",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExternalWorkflowExecutionCancelRequestedEventAttributesValidationError{
					field:  "WorkflowExecution",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkflowExecution()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExternalWorkflowExecutionCancelRequestedEventAttributesValidationError{
				field:  "WorkflowExecution",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ExternalWorkflowExecutionCancelRequestedEventAttributesMultiError(errors)
	}

	return nil
}

// ExternalWorkflowExecutionCancelRequestedEventAttributesMultiError is an
// error wrapping multiple validation errors returned by
// ExternalWorkflowExecutionCancelRequestedEventAttributes.ValidateAll() if
// the designated constraints aren't met.
type ExternalWorkflowExecutionCancelRequestedEventAttributesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExternalWorkflowExecutionCancelRequestedEventAttributesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExternalWorkflowExecutionCancelRequestedEventAttributesMultiError) AllErrors() []error {
	return m
}

// ExternalWorkflowExecutionCancelRequestedEventAttributesValidationError is
// the validation error returned by
// ExternalWorkflowExecutionCancelRequestedEventAttributes.Validate if the
// designated constraints aren't met.
type ExternalWorkflowExecutionCancelRequestedEventAttributesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExternalWorkflowExecutionCancelRequestedEventAttributesValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e ExternalWorkflowExecutionCancelRequestedEventAttributesValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ExternalWorkflowExecutionCancelRequestedEventAttributesValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e ExternalWorkflowExecutionCancelRequestedEventAttributesValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e ExternalWorkflowExecutionCancelRequestedEventAttributesValidationError) ErrorName() string {
	return "ExternalWorkflowExecutionCancelRequestedEventAttributesValidationError"
}

// Error satisfies the builtin error interface
func (e ExternalWorkflowExecutionCancelRequestedEventAttributesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExternalWorkflowExecutionCancelRequestedEventAttributes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExternalWorkflowExecutionCancelRequestedEventAttributesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExternalWorkflowExecutionCancelRequestedEventAttributesValidationError{}

// Validate checks the field values on
// SignalExternalWorkflowExecutionInitiatedEventAttributes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SignalExternalWorkflowExecutionInitiatedEventAttributes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SignalExternalWorkflowExecutionInitiatedEventAttributes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SignalExternalWorkflowExecutionInitiatedEventAttributesMultiError, or nil
// if none found.
func (m *SignalExternalWorkflowExecutionInitiatedEventAttributes) ValidateAll() error {
	return m.validate(true)
}

func (m *SignalExternalWorkflowExecutionInitiatedEventAttributes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WorkflowTaskCompletedEventId

	// no validation rules for Namespace

	// no validation rules for NamespaceId

	if all {
		switch v := interface{}(m.GetWorkflowExecution()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SignalExternalWorkflowExecutionInitiatedEventAttributesValidationError{
					field:  "WorkflowExecution",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SignalExternalWorkflowExecutionInitiatedEventAttributesValidationError{
					field:  "WorkflowExecution",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkflowExecution()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SignalExternalWorkflowExecutionInitiatedEventAttributesValidationError{
				field:  "WorkflowExecution",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for SignalName

	if all {
		switch v := interface{}(m.GetInput()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SignalExternalWorkflowExecutionInitiatedEventAttributesValidationError{
					field:  "Input",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SignalExternalWorkflowExecutionInitiatedEventAttributesValidationError{
					field:  "Input",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInput()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SignalExternalWorkflowExecutionInitiatedEventAttributesValidationError{
				field:  "Input",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Control

	// no validation rules for ChildWorkflowOnly

	if all {
		switch v := interface{}(m.GetHeader()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SignalExternalWorkflowExecutionInitiatedEventAttributesValidationError{
					field:  "Header",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SignalExternalWorkflowExecutionInitiatedEventAttributesValidationError{
					field:  "Header",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHeader()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SignalExternalWorkflowExecutionInitiatedEventAttributesValidationError{
				field:  "Header",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SignalExternalWorkflowExecutionInitiatedEventAttributesMultiError(errors)
	}

	return nil
}

// SignalExternalWorkflowExecutionInitiatedEventAttributesMultiError is an
// error wrapping multiple validation errors returned by
// SignalExternalWorkflowExecutionInitiatedEventAttributes.ValidateAll() if
// the designated constraints aren't met.
type SignalExternalWorkflowExecutionInitiatedEventAttributesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SignalExternalWorkflowExecutionInitiatedEventAttributesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SignalExternalWorkflowExecutionInitiatedEventAttributesMultiError) AllErrors() []error {
	return m
}

// SignalExternalWorkflowExecutionInitiatedEventAttributesValidationError is
// the validation error returned by
// SignalExternalWorkflowExecutionInitiatedEventAttributes.Validate if the
// designated constraints aren't met.
type SignalExternalWorkflowExecutionInitiatedEventAttributesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SignalExternalWorkflowExecutionInitiatedEventAttributesValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e SignalExternalWorkflowExecutionInitiatedEventAttributesValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e SignalExternalWorkflowExecutionInitiatedEventAttributesValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e SignalExternalWorkflowExecutionInitiatedEventAttributesValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e SignalExternalWorkflowExecutionInitiatedEventAttributesValidationError) ErrorName() string {
	return "SignalExternalWorkflowExecutionInitiatedEventAttributesValidationError"
}

// Error satisfies the builtin error interface
func (e SignalExternalWorkflowExecutionInitiatedEventAttributesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSignalExternalWorkflowExecutionInitiatedEventAttributes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SignalExternalWorkflowExecutionInitiatedEventAttributesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SignalExternalWorkflowExecutionInitiatedEventAttributesValidationError{}

// Validate checks the field values on
// SignalExternalWorkflowExecutionFailedEventAttributes with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SignalExternalWorkflowExecutionFailedEventAttributes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SignalExternalWorkflowExecutionFailedEventAttributes with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// SignalExternalWorkflowExecutionFailedEventAttributesMultiError, or nil if
// none found.
func (m *SignalExternalWorkflowExecutionFailedEventAttributes) ValidateAll() error {
	return m.validate(true)
}

func (m *SignalExternalWorkflowExecutionFailedEventAttributes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Cause

	// no validation rules for WorkflowTaskCompletedEventId

	// no validation rules for Namespace

	// no validation rules for NamespaceId

	if all {
		switch v := interface{}(m.GetWorkflowExecution()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SignalExternalWorkflowExecutionFailedEventAttributesValidationError{
					field:  "WorkflowExecution",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SignalExternalWorkflowExecutionFailedEventAttributesValidationError{
					field:  "WorkflowExecution",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkflowExecution()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SignalExternalWorkflowExecutionFailedEventAttributesValidationError{
				field:  "WorkflowExecution",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for InitiatedEventId

	// no validation rules for Control

	if len(errors) > 0 {
		return SignalExternalWorkflowExecutionFailedEventAttributesMultiError(errors)
	}

	return nil
}

// SignalExternalWorkflowExecutionFailedEventAttributesMultiError is an error
// wrapping multiple validation errors returned by
// SignalExternalWorkflowExecutionFailedEventAttributes.ValidateAll() if the
// designated constraints aren't met.
type SignalExternalWorkflowExecutionFailedEventAttributesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SignalExternalWorkflowExecutionFailedEventAttributesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SignalExternalWorkflowExecutionFailedEventAttributesMultiError) AllErrors() []error { return m }

// SignalExternalWorkflowExecutionFailedEventAttributesValidationError is the
// validation error returned by
// SignalExternalWorkflowExecutionFailedEventAttributes.Validate if the
// designated constraints aren't met.
type SignalExternalWorkflowExecutionFailedEventAttributesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SignalExternalWorkflowExecutionFailedEventAttributesValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e SignalExternalWorkflowExecutionFailedEventAttributesValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e SignalExternalWorkflowExecutionFailedEventAttributesValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e SignalExternalWorkflowExecutionFailedEventAttributesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SignalExternalWorkflowExecutionFailedEventAttributesValidationError) ErrorName() string {
	return "SignalExternalWorkflowExecutionFailedEventAttributesValidationError"
}

// Error satisfies the builtin error interface
func (e SignalExternalWorkflowExecutionFailedEventAttributesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSignalExternalWorkflowExecutionFailedEventAttributes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SignalExternalWorkflowExecutionFailedEventAttributesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SignalExternalWorkflowExecutionFailedEventAttributesValidationError{}

// Validate checks the field values on
// ExternalWorkflowExecutionSignaledEventAttributes with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ExternalWorkflowExecutionSignaledEventAttributes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ExternalWorkflowExecutionSignaledEventAttributes with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// ExternalWorkflowExecutionSignaledEventAttributesMultiError, or nil if none found.
func (m *ExternalWorkflowExecutionSignaledEventAttributes) ValidateAll() error {
	return m.validate(true)
}

func (m *ExternalWorkflowExecutionSignaledEventAttributes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for InitiatedEventId

	// no validation rules for Namespace

	// no validation rules for NamespaceId

	if all {
		switch v := interface{}(m.GetWorkflowExecution()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExternalWorkflowExecutionSignaledEventAttributesValidationError{
					field:  "WorkflowExecution",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExternalWorkflowExecutionSignaledEventAttributesValidationError{
					field:  "WorkflowExecution",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkflowExecution()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExternalWorkflowExecutionSignaledEventAttributesValidationError{
				field:  "WorkflowExecution",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Control

	if len(errors) > 0 {
		return ExternalWorkflowExecutionSignaledEventAttributesMultiError(errors)
	}

	return nil
}

// ExternalWorkflowExecutionSignaledEventAttributesMultiError is an error
// wrapping multiple validation errors returned by
// ExternalWorkflowExecutionSignaledEventAttributes.ValidateAll() if the
// designated constraints aren't met.
type ExternalWorkflowExecutionSignaledEventAttributesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExternalWorkflowExecutionSignaledEventAttributesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExternalWorkflowExecutionSignaledEventAttributesMultiError) AllErrors() []error { return m }

// ExternalWorkflowExecutionSignaledEventAttributesValidationError is the
// validation error returned by
// ExternalWorkflowExecutionSignaledEventAttributes.Validate if the designated
// constraints aren't met.
type ExternalWorkflowExecutionSignaledEventAttributesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExternalWorkflowExecutionSignaledEventAttributesValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e ExternalWorkflowExecutionSignaledEventAttributesValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ExternalWorkflowExecutionSignaledEventAttributesValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e ExternalWorkflowExecutionSignaledEventAttributesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExternalWorkflowExecutionSignaledEventAttributesValidationError) ErrorName() string {
	return "ExternalWorkflowExecutionSignaledEventAttributesValidationError"
}

// Error satisfies the builtin error interface
func (e ExternalWorkflowExecutionSignaledEventAttributesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExternalWorkflowExecutionSignaledEventAttributes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExternalWorkflowExecutionSignaledEventAttributesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExternalWorkflowExecutionSignaledEventAttributesValidationError{}

// Validate checks the field values on
// UpsertWorkflowSearchAttributesEventAttributes with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpsertWorkflowSearchAttributesEventAttributes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// UpsertWorkflowSearchAttributesEventAttributes with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// UpsertWorkflowSearchAttributesEventAttributesMultiError, or nil if none found.
func (m *UpsertWorkflowSearchAttributesEventAttributes) ValidateAll() error {
	return m.validate(true)
}

func (m *UpsertWorkflowSearchAttributesEventAttributes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WorkflowTaskCompletedEventId

	if all {
		switch v := interface{}(m.GetSearchAttributes()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpsertWorkflowSearchAttributesEventAttributesValidationError{
					field:  "SearchAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpsertWorkflowSearchAttributesEventAttributesValidationError{
					field:  "SearchAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSearchAttributes()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpsertWorkflowSearchAttributesEventAttributesValidationError{
				field:  "SearchAttributes",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpsertWorkflowSearchAttributesEventAttributesMultiError(errors)
	}

	return nil
}

// UpsertWorkflowSearchAttributesEventAttributesMultiError is an error wrapping
// multiple validation errors returned by
// UpsertWorkflowSearchAttributesEventAttributes.ValidateAll() if the
// designated constraints aren't met.
type UpsertWorkflowSearchAttributesEventAttributesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpsertWorkflowSearchAttributesEventAttributesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpsertWorkflowSearchAttributesEventAttributesMultiError) AllErrors() []error { return m }

// UpsertWorkflowSearchAttributesEventAttributesValidationError is the
// validation error returned by
// UpsertWorkflowSearchAttributesEventAttributes.Validate if the designated
// constraints aren't met.
type UpsertWorkflowSearchAttributesEventAttributesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertWorkflowSearchAttributesEventAttributesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertWorkflowSearchAttributesEventAttributesValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e UpsertWorkflowSearchAttributesEventAttributesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertWorkflowSearchAttributesEventAttributesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertWorkflowSearchAttributesEventAttributesValidationError) ErrorName() string {
	return "UpsertWorkflowSearchAttributesEventAttributesValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertWorkflowSearchAttributesEventAttributesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertWorkflowSearchAttributesEventAttributes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertWorkflowSearchAttributesEventAttributesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertWorkflowSearchAttributesEventAttributesValidationError{}

// Validate checks the field values on
// WorkflowPropertiesModifiedEventAttributes with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *WorkflowPropertiesModifiedEventAttributes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// WorkflowPropertiesModifiedEventAttributes with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// WorkflowPropertiesModifiedEventAttributesMultiError, or nil if none found.
func (m *WorkflowPropertiesModifiedEventAttributes) ValidateAll() error {
	return m.validate(true)
}

func (m *WorkflowPropertiesModifiedEventAttributes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WorkflowTaskCompletedEventId

	if all {
		switch v := interface{}(m.GetUpsertedMemo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkflowPropertiesModifiedEventAttributesValidationError{
					field:  "UpsertedMemo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkflowPropertiesModifiedEventAttributesValidationError{
					field:  "UpsertedMemo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpsertedMemo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkflowPropertiesModifiedEventAttributesValidationError{
				field:  "UpsertedMemo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return WorkflowPropertiesModifiedEventAttributesMultiError(errors)
	}

	return nil
}

// WorkflowPropertiesModifiedEventAttributesMultiError is an error wrapping
// multiple validation errors returned by
// WorkflowPropertiesModifiedEventAttributes.ValidateAll() if the designated
// constraints aren't met.
type WorkflowPropertiesModifiedEventAttributesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WorkflowPropertiesModifiedEventAttributesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WorkflowPropertiesModifiedEventAttributesMultiError) AllErrors() []error { return m }

// WorkflowPropertiesModifiedEventAttributesValidationError is the validation
// error returned by WorkflowPropertiesModifiedEventAttributes.Validate if the
// designated constraints aren't met.
type WorkflowPropertiesModifiedEventAttributesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkflowPropertiesModifiedEventAttributesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorkflowPropertiesModifiedEventAttributesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WorkflowPropertiesModifiedEventAttributesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorkflowPropertiesModifiedEventAttributesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkflowPropertiesModifiedEventAttributesValidationError) ErrorName() string {
	return "WorkflowPropertiesModifiedEventAttributesValidationError"
}

// Error satisfies the builtin error interface
func (e WorkflowPropertiesModifiedEventAttributesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorkflowPropertiesModifiedEventAttributes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkflowPropertiesModifiedEventAttributesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkflowPropertiesModifiedEventAttributesValidationError{}

// Validate checks the field values on
// StartChildWorkflowExecutionInitiatedEventAttributes with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *StartChildWorkflowExecutionInitiatedEventAttributes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// StartChildWorkflowExecutionInitiatedEventAttributes with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// StartChildWorkflowExecutionInitiatedEventAttributesMultiError, or nil if
// none found.
func (m *StartChildWorkflowExecutionInitiatedEventAttributes) ValidateAll() error {
	return m.validate(true)
}

func (m *StartChildWorkflowExecutionInitiatedEventAttributes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Namespace

	// no validation rules for NamespaceId

	// no validation rules for WorkflowId

	if all {
		switch v := interface{}(m.GetWorkflowType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StartChildWorkflowExecutionInitiatedEventAttributesValidationError{
					field:  "WorkflowType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StartChildWorkflowExecutionInitiatedEventAttributesValidationError{
					field:  "WorkflowType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkflowType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StartChildWorkflowExecutionInitiatedEventAttributesValidationError{
				field:  "WorkflowType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTaskQueue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StartChildWorkflowExecutionInitiatedEventAttributesValidationError{
					field:  "TaskQueue",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StartChildWorkflowExecutionInitiatedEventAttributesValidationError{
					field:  "TaskQueue",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTaskQueue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StartChildWorkflowExecutionInitiatedEventAttributesValidationError{
				field:  "TaskQueue",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetInput()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StartChildWorkflowExecutionInitiatedEventAttributesValidationError{
					field:  "Input",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StartChildWorkflowExecutionInitiatedEventAttributesValidationError{
					field:  "Input",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInput()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StartChildWorkflowExecutionInitiatedEventAttributesValidationError{
				field:  "Input",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetWorkflowExecutionTimeout()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StartChildWorkflowExecutionInitiatedEventAttributesValidationError{
					field:  "WorkflowExecutionTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StartChildWorkflowExecutionInitiatedEventAttributesValidationError{
					field:  "WorkflowExecutionTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkflowExecutionTimeout()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StartChildWorkflowExecutionInitiatedEventAttributesValidationError{
				field:  "WorkflowExecutionTimeout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetWorkflowRunTimeout()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StartChildWorkflowExecutionInitiatedEventAttributesValidationError{
					field:  "WorkflowRunTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StartChildWorkflowExecutionInitiatedEventAttributesValidationError{
					field:  "WorkflowRunTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkflowRunTimeout()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StartChildWorkflowExecutionInitiatedEventAttributesValidationError{
				field:  "WorkflowRunTimeout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetWorkflowTaskTimeout()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StartChildWorkflowExecutionInitiatedEventAttributesValidationError{
					field:  "WorkflowTaskTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StartChildWorkflowExecutionInitiatedEventAttributesValidationError{
					field:  "WorkflowTaskTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkflowTaskTimeout()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StartChildWorkflowExecutionInitiatedEventAttributesValidationError{
				field:  "WorkflowTaskTimeout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ParentClosePolicy

	// no validation rules for Control

	// no validation rules for WorkflowTaskCompletedEventId

	// no validation rules for WorkflowIdReusePolicy

	if all {
		switch v := interface{}(m.GetRetryPolicy()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StartChildWorkflowExecutionInitiatedEventAttributesValidationError{
					field:  "RetryPolicy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StartChildWorkflowExecutionInitiatedEventAttributesValidationError{
					field:  "RetryPolicy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRetryPolicy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StartChildWorkflowExecutionInitiatedEventAttributesValidationError{
				field:  "RetryPolicy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CronSchedule

	if all {
		switch v := interface{}(m.GetHeader()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StartChildWorkflowExecutionInitiatedEventAttributesValidationError{
					field:  "Header",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StartChildWorkflowExecutionInitiatedEventAttributesValidationError{
					field:  "Header",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHeader()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StartChildWorkflowExecutionInitiatedEventAttributesValidationError{
				field:  "Header",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMemo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StartChildWorkflowExecutionInitiatedEventAttributesValidationError{
					field:  "Memo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StartChildWorkflowExecutionInitiatedEventAttributesValidationError{
					field:  "Memo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMemo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StartChildWorkflowExecutionInitiatedEventAttributesValidationError{
				field:  "Memo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSearchAttributes()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StartChildWorkflowExecutionInitiatedEventAttributesValidationError{
					field:  "SearchAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StartChildWorkflowExecutionInitiatedEventAttributesValidationError{
					field:  "SearchAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSearchAttributes()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StartChildWorkflowExecutionInitiatedEventAttributesValidationError{
				field:  "SearchAttributes",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for UseCompatibleVersion

	if len(errors) > 0 {
		return StartChildWorkflowExecutionInitiatedEventAttributesMultiError(errors)
	}

	return nil
}

// StartChildWorkflowExecutionInitiatedEventAttributesMultiError is an error
// wrapping multiple validation errors returned by
// StartChildWorkflowExecutionInitiatedEventAttributes.ValidateAll() if the
// designated constraints aren't met.
type StartChildWorkflowExecutionInitiatedEventAttributesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartChildWorkflowExecutionInitiatedEventAttributesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartChildWorkflowExecutionInitiatedEventAttributesMultiError) AllErrors() []error { return m }

// StartChildWorkflowExecutionInitiatedEventAttributesValidationError is the
// validation error returned by
// StartChildWorkflowExecutionInitiatedEventAttributes.Validate if the
// designated constraints aren't met.
type StartChildWorkflowExecutionInitiatedEventAttributesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartChildWorkflowExecutionInitiatedEventAttributesValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e StartChildWorkflowExecutionInitiatedEventAttributesValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e StartChildWorkflowExecutionInitiatedEventAttributesValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e StartChildWorkflowExecutionInitiatedEventAttributesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartChildWorkflowExecutionInitiatedEventAttributesValidationError) ErrorName() string {
	return "StartChildWorkflowExecutionInitiatedEventAttributesValidationError"
}

// Error satisfies the builtin error interface
func (e StartChildWorkflowExecutionInitiatedEventAttributesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartChildWorkflowExecutionInitiatedEventAttributes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartChildWorkflowExecutionInitiatedEventAttributesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartChildWorkflowExecutionInitiatedEventAttributesValidationError{}

// Validate checks the field values on
// StartChildWorkflowExecutionFailedEventAttributes with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StartChildWorkflowExecutionFailedEventAttributes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// StartChildWorkflowExecutionFailedEventAttributes with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// StartChildWorkflowExecutionFailedEventAttributesMultiError, or nil if none found.
func (m *StartChildWorkflowExecutionFailedEventAttributes) ValidateAll() error {
	return m.validate(true)
}

func (m *StartChildWorkflowExecutionFailedEventAttributes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Namespace

	// no validation rules for NamespaceId

	// no validation rules for WorkflowId

	if all {
		switch v := interface{}(m.GetWorkflowType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StartChildWorkflowExecutionFailedEventAttributesValidationError{
					field:  "WorkflowType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StartChildWorkflowExecutionFailedEventAttributesValidationError{
					field:  "WorkflowType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkflowType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StartChildWorkflowExecutionFailedEventAttributesValidationError{
				field:  "WorkflowType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Cause

	// no validation rules for Control

	// no validation rules for InitiatedEventId

	// no validation rules for WorkflowTaskCompletedEventId

	if len(errors) > 0 {
		return StartChildWorkflowExecutionFailedEventAttributesMultiError(errors)
	}

	return nil
}

// StartChildWorkflowExecutionFailedEventAttributesMultiError is an error
// wrapping multiple validation errors returned by
// StartChildWorkflowExecutionFailedEventAttributes.ValidateAll() if the
// designated constraints aren't met.
type StartChildWorkflowExecutionFailedEventAttributesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartChildWorkflowExecutionFailedEventAttributesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartChildWorkflowExecutionFailedEventAttributesMultiError) AllErrors() []error { return m }

// StartChildWorkflowExecutionFailedEventAttributesValidationError is the
// validation error returned by
// StartChildWorkflowExecutionFailedEventAttributes.Validate if the designated
// constraints aren't met.
type StartChildWorkflowExecutionFailedEventAttributesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartChildWorkflowExecutionFailedEventAttributesValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e StartChildWorkflowExecutionFailedEventAttributesValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e StartChildWorkflowExecutionFailedEventAttributesValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e StartChildWorkflowExecutionFailedEventAttributesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartChildWorkflowExecutionFailedEventAttributesValidationError) ErrorName() string {
	return "StartChildWorkflowExecutionFailedEventAttributesValidationError"
}

// Error satisfies the builtin error interface
func (e StartChildWorkflowExecutionFailedEventAttributesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartChildWorkflowExecutionFailedEventAttributes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartChildWorkflowExecutionFailedEventAttributesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartChildWorkflowExecutionFailedEventAttributesValidationError{}

// Validate checks the field values on
// ChildWorkflowExecutionStartedEventAttributes with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ChildWorkflowExecutionStartedEventAttributes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ChildWorkflowExecutionStartedEventAttributes with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ChildWorkflowExecutionStartedEventAttributesMultiError, or nil if none found.
func (m *ChildWorkflowExecutionStartedEventAttributes) ValidateAll() error {
	return m.validate(true)
}

func (m *ChildWorkflowExecutionStartedEventAttributes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Namespace

	// no validation rules for NamespaceId

	// no validation rules for InitiatedEventId

	if all {
		switch v := interface{}(m.GetWorkflowExecution()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChildWorkflowExecutionStartedEventAttributesValidationError{
					field:  "WorkflowExecution",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChildWorkflowExecutionStartedEventAttributesValidationError{
					field:  "WorkflowExecution",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkflowExecution()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChildWorkflowExecutionStartedEventAttributesValidationError{
				field:  "WorkflowExecution",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetWorkflowType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChildWorkflowExecutionStartedEventAttributesValidationError{
					field:  "WorkflowType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChildWorkflowExecutionStartedEventAttributesValidationError{
					field:  "WorkflowType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkflowType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChildWorkflowExecutionStartedEventAttributesValidationError{
				field:  "WorkflowType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetHeader()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChildWorkflowExecutionStartedEventAttributesValidationError{
					field:  "Header",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChildWorkflowExecutionStartedEventAttributesValidationError{
					field:  "Header",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHeader()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChildWorkflowExecutionStartedEventAttributesValidationError{
				field:  "Header",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ChildWorkflowExecutionStartedEventAttributesMultiError(errors)
	}

	return nil
}

// ChildWorkflowExecutionStartedEventAttributesMultiError is an error wrapping
// multiple validation errors returned by
// ChildWorkflowExecutionStartedEventAttributes.ValidateAll() if the
// designated constraints aren't met.
type ChildWorkflowExecutionStartedEventAttributesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChildWorkflowExecutionStartedEventAttributesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChildWorkflowExecutionStartedEventAttributesMultiError) AllErrors() []error { return m }

// ChildWorkflowExecutionStartedEventAttributesValidationError is the
// validation error returned by
// ChildWorkflowExecutionStartedEventAttributes.Validate if the designated
// constraints aren't met.
type ChildWorkflowExecutionStartedEventAttributesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChildWorkflowExecutionStartedEventAttributesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChildWorkflowExecutionStartedEventAttributesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChildWorkflowExecutionStartedEventAttributesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChildWorkflowExecutionStartedEventAttributesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChildWorkflowExecutionStartedEventAttributesValidationError) ErrorName() string {
	return "ChildWorkflowExecutionStartedEventAttributesValidationError"
}

// Error satisfies the builtin error interface
func (e ChildWorkflowExecutionStartedEventAttributesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChildWorkflowExecutionStartedEventAttributes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChildWorkflowExecutionStartedEventAttributesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChildWorkflowExecutionStartedEventAttributesValidationError{}

// Validate checks the field values on
// ChildWorkflowExecutionCompletedEventAttributes with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ChildWorkflowExecutionCompletedEventAttributes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ChildWorkflowExecutionCompletedEventAttributes with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// ChildWorkflowExecutionCompletedEventAttributesMultiError, or nil if none found.
func (m *ChildWorkflowExecutionCompletedEventAttributes) ValidateAll() error {
	return m.validate(true)
}

func (m *ChildWorkflowExecutionCompletedEventAttributes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChildWorkflowExecutionCompletedEventAttributesValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChildWorkflowExecutionCompletedEventAttributesValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChildWorkflowExecutionCompletedEventAttributesValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Namespace

	// no validation rules for NamespaceId

	if all {
		switch v := interface{}(m.GetWorkflowExecution()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChildWorkflowExecutionCompletedEventAttributesValidationError{
					field:  "WorkflowExecution",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChildWorkflowExecutionCompletedEventAttributesValidationError{
					field:  "WorkflowExecution",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkflowExecution()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChildWorkflowExecutionCompletedEventAttributesValidationError{
				field:  "WorkflowExecution",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetWorkflowType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChildWorkflowExecutionCompletedEventAttributesValidationError{
					field:  "WorkflowType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChildWorkflowExecutionCompletedEventAttributesValidationError{
					field:  "WorkflowType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkflowType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChildWorkflowExecutionCompletedEventAttributesValidationError{
				field:  "WorkflowType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for InitiatedEventId

	// no validation rules for StartedEventId

	if len(errors) > 0 {
		return ChildWorkflowExecutionCompletedEventAttributesMultiError(errors)
	}

	return nil
}

// ChildWorkflowExecutionCompletedEventAttributesMultiError is an error
// wrapping multiple validation errors returned by
// ChildWorkflowExecutionCompletedEventAttributes.ValidateAll() if the
// designated constraints aren't met.
type ChildWorkflowExecutionCompletedEventAttributesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChildWorkflowExecutionCompletedEventAttributesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChildWorkflowExecutionCompletedEventAttributesMultiError) AllErrors() []error { return m }

// ChildWorkflowExecutionCompletedEventAttributesValidationError is the
// validation error returned by
// ChildWorkflowExecutionCompletedEventAttributes.Validate if the designated
// constraints aren't met.
type ChildWorkflowExecutionCompletedEventAttributesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChildWorkflowExecutionCompletedEventAttributesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChildWorkflowExecutionCompletedEventAttributesValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ChildWorkflowExecutionCompletedEventAttributesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChildWorkflowExecutionCompletedEventAttributesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChildWorkflowExecutionCompletedEventAttributesValidationError) ErrorName() string {
	return "ChildWorkflowExecutionCompletedEventAttributesValidationError"
}

// Error satisfies the builtin error interface
func (e ChildWorkflowExecutionCompletedEventAttributesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChildWorkflowExecutionCompletedEventAttributes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChildWorkflowExecutionCompletedEventAttributesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChildWorkflowExecutionCompletedEventAttributesValidationError{}

// Validate checks the field values on
// ChildWorkflowExecutionFailedEventAttributes with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ChildWorkflowExecutionFailedEventAttributes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ChildWorkflowExecutionFailedEventAttributes with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ChildWorkflowExecutionFailedEventAttributesMultiError, or nil if none found.
func (m *ChildWorkflowExecutionFailedEventAttributes) ValidateAll() error {
	return m.validate(true)
}

func (m *ChildWorkflowExecutionFailedEventAttributes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFailure()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChildWorkflowExecutionFailedEventAttributesValidationError{
					field:  "Failure",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChildWorkflowExecutionFailedEventAttributesValidationError{
					field:  "Failure",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFailure()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChildWorkflowExecutionFailedEventAttributesValidationError{
				field:  "Failure",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Namespace

	// no validation rules for NamespaceId

	if all {
		switch v := interface{}(m.GetWorkflowExecution()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChildWorkflowExecutionFailedEventAttributesValidationError{
					field:  "WorkflowExecution",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChildWorkflowExecutionFailedEventAttributesValidationError{
					field:  "WorkflowExecution",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkflowExecution()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChildWorkflowExecutionFailedEventAttributesValidationError{
				field:  "WorkflowExecution",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetWorkflowType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChildWorkflowExecutionFailedEventAttributesValidationError{
					field:  "WorkflowType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChildWorkflowExecutionFailedEventAttributesValidationError{
					field:  "WorkflowType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkflowType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChildWorkflowExecutionFailedEventAttributesValidationError{
				field:  "WorkflowType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for InitiatedEventId

	// no validation rules for StartedEventId

	// no validation rules for RetryState

	if len(errors) > 0 {
		return ChildWorkflowExecutionFailedEventAttributesMultiError(errors)
	}

	return nil
}

// ChildWorkflowExecutionFailedEventAttributesMultiError is an error wrapping
// multiple validation errors returned by
// ChildWorkflowExecutionFailedEventAttributes.ValidateAll() if the designated
// constraints aren't met.
type ChildWorkflowExecutionFailedEventAttributesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChildWorkflowExecutionFailedEventAttributesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChildWorkflowExecutionFailedEventAttributesMultiError) AllErrors() []error { return m }

// ChildWorkflowExecutionFailedEventAttributesValidationError is the validation
// error returned by ChildWorkflowExecutionFailedEventAttributes.Validate if
// the designated constraints aren't met.
type ChildWorkflowExecutionFailedEventAttributesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChildWorkflowExecutionFailedEventAttributesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChildWorkflowExecutionFailedEventAttributesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChildWorkflowExecutionFailedEventAttributesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChildWorkflowExecutionFailedEventAttributesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChildWorkflowExecutionFailedEventAttributesValidationError) ErrorName() string {
	return "ChildWorkflowExecutionFailedEventAttributesValidationError"
}

// Error satisfies the builtin error interface
func (e ChildWorkflowExecutionFailedEventAttributesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChildWorkflowExecutionFailedEventAttributes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChildWorkflowExecutionFailedEventAttributesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChildWorkflowExecutionFailedEventAttributesValidationError{}

// Validate checks the field values on
// ChildWorkflowExecutionCanceledEventAttributes with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ChildWorkflowExecutionCanceledEventAttributes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ChildWorkflowExecutionCanceledEventAttributes with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ChildWorkflowExecutionCanceledEventAttributesMultiError, or nil if none found.
func (m *ChildWorkflowExecutionCanceledEventAttributes) ValidateAll() error {
	return m.validate(true)
}

func (m *ChildWorkflowExecutionCanceledEventAttributes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDetails()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChildWorkflowExecutionCanceledEventAttributesValidationError{
					field:  "Details",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChildWorkflowExecutionCanceledEventAttributesValidationError{
					field:  "Details",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChildWorkflowExecutionCanceledEventAttributesValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Namespace

	// no validation rules for NamespaceId

	if all {
		switch v := interface{}(m.GetWorkflowExecution()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChildWorkflowExecutionCanceledEventAttributesValidationError{
					field:  "WorkflowExecution",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChildWorkflowExecutionCanceledEventAttributesValidationError{
					field:  "WorkflowExecution",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkflowExecution()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChildWorkflowExecutionCanceledEventAttributesValidationError{
				field:  "WorkflowExecution",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetWorkflowType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChildWorkflowExecutionCanceledEventAttributesValidationError{
					field:  "WorkflowType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChildWorkflowExecutionCanceledEventAttributesValidationError{
					field:  "WorkflowType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkflowType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChildWorkflowExecutionCanceledEventAttributesValidationError{
				field:  "WorkflowType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for InitiatedEventId

	// no validation rules for StartedEventId

	if len(errors) > 0 {
		return ChildWorkflowExecutionCanceledEventAttributesMultiError(errors)
	}

	return nil
}

// ChildWorkflowExecutionCanceledEventAttributesMultiError is an error wrapping
// multiple validation errors returned by
// ChildWorkflowExecutionCanceledEventAttributes.ValidateAll() if the
// designated constraints aren't met.
type ChildWorkflowExecutionCanceledEventAttributesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChildWorkflowExecutionCanceledEventAttributesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChildWorkflowExecutionCanceledEventAttributesMultiError) AllErrors() []error { return m }

// ChildWorkflowExecutionCanceledEventAttributesValidationError is the
// validation error returned by
// ChildWorkflowExecutionCanceledEventAttributes.Validate if the designated
// constraints aren't met.
type ChildWorkflowExecutionCanceledEventAttributesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChildWorkflowExecutionCanceledEventAttributesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChildWorkflowExecutionCanceledEventAttributesValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ChildWorkflowExecutionCanceledEventAttributesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChildWorkflowExecutionCanceledEventAttributesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChildWorkflowExecutionCanceledEventAttributesValidationError) ErrorName() string {
	return "ChildWorkflowExecutionCanceledEventAttributesValidationError"
}

// Error satisfies the builtin error interface
func (e ChildWorkflowExecutionCanceledEventAttributesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChildWorkflowExecutionCanceledEventAttributes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChildWorkflowExecutionCanceledEventAttributesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChildWorkflowExecutionCanceledEventAttributesValidationError{}

// Validate checks the field values on
// ChildWorkflowExecutionTimedOutEventAttributes with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ChildWorkflowExecutionTimedOutEventAttributes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ChildWorkflowExecutionTimedOutEventAttributes with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ChildWorkflowExecutionTimedOutEventAttributesMultiError, or nil if none found.
func (m *ChildWorkflowExecutionTimedOutEventAttributes) ValidateAll() error {
	return m.validate(true)
}

func (m *ChildWorkflowExecutionTimedOutEventAttributes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Namespace

	// no validation rules for NamespaceId

	if all {
		switch v := interface{}(m.GetWorkflowExecution()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChildWorkflowExecutionTimedOutEventAttributesValidationError{
					field:  "WorkflowExecution",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChildWorkflowExecutionTimedOutEventAttributesValidationError{
					field:  "WorkflowExecution",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkflowExecution()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChildWorkflowExecutionTimedOutEventAttributesValidationError{
				field:  "WorkflowExecution",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetWorkflowType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChildWorkflowExecutionTimedOutEventAttributesValidationError{
					field:  "WorkflowType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChildWorkflowExecutionTimedOutEventAttributesValidationError{
					field:  "WorkflowType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkflowType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChildWorkflowExecutionTimedOutEventAttributesValidationError{
				field:  "WorkflowType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for InitiatedEventId

	// no validation rules for StartedEventId

	// no validation rules for RetryState

	if len(errors) > 0 {
		return ChildWorkflowExecutionTimedOutEventAttributesMultiError(errors)
	}

	return nil
}

// ChildWorkflowExecutionTimedOutEventAttributesMultiError is an error wrapping
// multiple validation errors returned by
// ChildWorkflowExecutionTimedOutEventAttributes.ValidateAll() if the
// designated constraints aren't met.
type ChildWorkflowExecutionTimedOutEventAttributesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChildWorkflowExecutionTimedOutEventAttributesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChildWorkflowExecutionTimedOutEventAttributesMultiError) AllErrors() []error { return m }

// ChildWorkflowExecutionTimedOutEventAttributesValidationError is the
// validation error returned by
// ChildWorkflowExecutionTimedOutEventAttributes.Validate if the designated
// constraints aren't met.
type ChildWorkflowExecutionTimedOutEventAttributesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChildWorkflowExecutionTimedOutEventAttributesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChildWorkflowExecutionTimedOutEventAttributesValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ChildWorkflowExecutionTimedOutEventAttributesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChildWorkflowExecutionTimedOutEventAttributesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChildWorkflowExecutionTimedOutEventAttributesValidationError) ErrorName() string {
	return "ChildWorkflowExecutionTimedOutEventAttributesValidationError"
}

// Error satisfies the builtin error interface
func (e ChildWorkflowExecutionTimedOutEventAttributesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChildWorkflowExecutionTimedOutEventAttributes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChildWorkflowExecutionTimedOutEventAttributesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChildWorkflowExecutionTimedOutEventAttributesValidationError{}

// Validate checks the field values on
// ChildWorkflowExecutionTerminatedEventAttributes with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ChildWorkflowExecutionTerminatedEventAttributes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ChildWorkflowExecutionTerminatedEventAttributes with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// ChildWorkflowExecutionTerminatedEventAttributesMultiError, or nil if none found.
func (m *ChildWorkflowExecutionTerminatedEventAttributes) ValidateAll() error {
	return m.validate(true)
}

func (m *ChildWorkflowExecutionTerminatedEventAttributes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Namespace

	// no validation rules for NamespaceId

	if all {
		switch v := interface{}(m.GetWorkflowExecution()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChildWorkflowExecutionTerminatedEventAttributesValidationError{
					field:  "WorkflowExecution",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChildWorkflowExecutionTerminatedEventAttributesValidationError{
					field:  "WorkflowExecution",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkflowExecution()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChildWorkflowExecutionTerminatedEventAttributesValidationError{
				field:  "WorkflowExecution",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetWorkflowType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChildWorkflowExecutionTerminatedEventAttributesValidationError{
					field:  "WorkflowType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChildWorkflowExecutionTerminatedEventAttributesValidationError{
					field:  "WorkflowType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkflowType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChildWorkflowExecutionTerminatedEventAttributesValidationError{
				field:  "WorkflowType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for InitiatedEventId

	// no validation rules for StartedEventId

	if len(errors) > 0 {
		return ChildWorkflowExecutionTerminatedEventAttributesMultiError(errors)
	}

	return nil
}

// ChildWorkflowExecutionTerminatedEventAttributesMultiError is an error
// wrapping multiple validation errors returned by
// ChildWorkflowExecutionTerminatedEventAttributes.ValidateAll() if the
// designated constraints aren't met.
type ChildWorkflowExecutionTerminatedEventAttributesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChildWorkflowExecutionTerminatedEventAttributesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChildWorkflowExecutionTerminatedEventAttributesMultiError) AllErrors() []error { return m }

// ChildWorkflowExecutionTerminatedEventAttributesValidationError is the
// validation error returned by
// ChildWorkflowExecutionTerminatedEventAttributes.Validate if the designated
// constraints aren't met.
type ChildWorkflowExecutionTerminatedEventAttributesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChildWorkflowExecutionTerminatedEventAttributesValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e ChildWorkflowExecutionTerminatedEventAttributesValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ChildWorkflowExecutionTerminatedEventAttributesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChildWorkflowExecutionTerminatedEventAttributesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChildWorkflowExecutionTerminatedEventAttributesValidationError) ErrorName() string {
	return "ChildWorkflowExecutionTerminatedEventAttributesValidationError"
}

// Error satisfies the builtin error interface
func (e ChildWorkflowExecutionTerminatedEventAttributesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChildWorkflowExecutionTerminatedEventAttributes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChildWorkflowExecutionTerminatedEventAttributesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChildWorkflowExecutionTerminatedEventAttributesValidationError{}

// Validate checks the field values on
// WorkflowPropertiesModifiedExternallyEventAttributes with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *WorkflowPropertiesModifiedExternallyEventAttributes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// WorkflowPropertiesModifiedExternallyEventAttributes with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// WorkflowPropertiesModifiedExternallyEventAttributesMultiError, or nil if
// none found.
func (m *WorkflowPropertiesModifiedExternallyEventAttributes) ValidateAll() error {
	return m.validate(true)
}

func (m *WorkflowPropertiesModifiedExternallyEventAttributes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NewTaskQueue

	if all {
		switch v := interface{}(m.GetNewWorkflowTaskTimeout()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkflowPropertiesModifiedExternallyEventAttributesValidationError{
					field:  "NewWorkflowTaskTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkflowPropertiesModifiedExternallyEventAttributesValidationError{
					field:  "NewWorkflowTaskTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNewWorkflowTaskTimeout()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkflowPropertiesModifiedExternallyEventAttributesValidationError{
				field:  "NewWorkflowTaskTimeout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetNewWorkflowRunTimeout()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkflowPropertiesModifiedExternallyEventAttributesValidationError{
					field:  "NewWorkflowRunTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkflowPropertiesModifiedExternallyEventAttributesValidationError{
					field:  "NewWorkflowRunTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNewWorkflowRunTimeout()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkflowPropertiesModifiedExternallyEventAttributesValidationError{
				field:  "NewWorkflowRunTimeout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetNewWorkflowExecutionTimeout()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkflowPropertiesModifiedExternallyEventAttributesValidationError{
					field:  "NewWorkflowExecutionTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkflowPropertiesModifiedExternallyEventAttributesValidationError{
					field:  "NewWorkflowExecutionTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNewWorkflowExecutionTimeout()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkflowPropertiesModifiedExternallyEventAttributesValidationError{
				field:  "NewWorkflowExecutionTimeout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpsertedMemo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkflowPropertiesModifiedExternallyEventAttributesValidationError{
					field:  "UpsertedMemo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkflowPropertiesModifiedExternallyEventAttributesValidationError{
					field:  "UpsertedMemo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpsertedMemo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkflowPropertiesModifiedExternallyEventAttributesValidationError{
				field:  "UpsertedMemo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return WorkflowPropertiesModifiedExternallyEventAttributesMultiError(errors)
	}

	return nil
}

// WorkflowPropertiesModifiedExternallyEventAttributesMultiError is an error
// wrapping multiple validation errors returned by
// WorkflowPropertiesModifiedExternallyEventAttributes.ValidateAll() if the
// designated constraints aren't met.
type WorkflowPropertiesModifiedExternallyEventAttributesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WorkflowPropertiesModifiedExternallyEventAttributesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WorkflowPropertiesModifiedExternallyEventAttributesMultiError) AllErrors() []error { return m }

// WorkflowPropertiesModifiedExternallyEventAttributesValidationError is the
// validation error returned by
// WorkflowPropertiesModifiedExternallyEventAttributes.Validate if the
// designated constraints aren't met.
type WorkflowPropertiesModifiedExternallyEventAttributesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkflowPropertiesModifiedExternallyEventAttributesValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e WorkflowPropertiesModifiedExternallyEventAttributesValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e WorkflowPropertiesModifiedExternallyEventAttributesValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e WorkflowPropertiesModifiedExternallyEventAttributesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkflowPropertiesModifiedExternallyEventAttributesValidationError) ErrorName() string {
	return "WorkflowPropertiesModifiedExternallyEventAttributesValidationError"
}

// Error satisfies the builtin error interface
func (e WorkflowPropertiesModifiedExternallyEventAttributesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorkflowPropertiesModifiedExternallyEventAttributes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkflowPropertiesModifiedExternallyEventAttributesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkflowPropertiesModifiedExternallyEventAttributesValidationError{}

// Validate checks the field values on
// ActivityPropertiesModifiedExternallyEventAttributes with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ActivityPropertiesModifiedExternallyEventAttributes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ActivityPropertiesModifiedExternallyEventAttributes with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// ActivityPropertiesModifiedExternallyEventAttributesMultiError, or nil if
// none found.
func (m *ActivityPropertiesModifiedExternallyEventAttributes) ValidateAll() error {
	return m.validate(true)
}

func (m *ActivityPropertiesModifiedExternallyEventAttributes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ScheduledEventId

	if all {
		switch v := interface{}(m.GetNewRetryPolicy()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ActivityPropertiesModifiedExternallyEventAttributesValidationError{
					field:  "NewRetryPolicy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ActivityPropertiesModifiedExternallyEventAttributesValidationError{
					field:  "NewRetryPolicy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNewRetryPolicy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ActivityPropertiesModifiedExternallyEventAttributesValidationError{
				field:  "NewRetryPolicy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ActivityPropertiesModifiedExternallyEventAttributesMultiError(errors)
	}

	return nil
}

// ActivityPropertiesModifiedExternallyEventAttributesMultiError is an error
// wrapping multiple validation errors returned by
// ActivityPropertiesModifiedExternallyEventAttributes.ValidateAll() if the
// designated constraints aren't met.
type ActivityPropertiesModifiedExternallyEventAttributesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ActivityPropertiesModifiedExternallyEventAttributesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ActivityPropertiesModifiedExternallyEventAttributesMultiError) AllErrors() []error { return m }

// ActivityPropertiesModifiedExternallyEventAttributesValidationError is the
// validation error returned by
// ActivityPropertiesModifiedExternallyEventAttributes.Validate if the
// designated constraints aren't met.
type ActivityPropertiesModifiedExternallyEventAttributesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ActivityPropertiesModifiedExternallyEventAttributesValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e ActivityPropertiesModifiedExternallyEventAttributesValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ActivityPropertiesModifiedExternallyEventAttributesValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e ActivityPropertiesModifiedExternallyEventAttributesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ActivityPropertiesModifiedExternallyEventAttributesValidationError) ErrorName() string {
	return "ActivityPropertiesModifiedExternallyEventAttributesValidationError"
}

// Error satisfies the builtin error interface
func (e ActivityPropertiesModifiedExternallyEventAttributesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sActivityPropertiesModifiedExternallyEventAttributes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ActivityPropertiesModifiedExternallyEventAttributesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ActivityPropertiesModifiedExternallyEventAttributesValidationError{}

// Validate checks the field values on
// WorkflowExecutionUpdateAcceptedEventAttributes with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *WorkflowExecutionUpdateAcceptedEventAttributes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// WorkflowExecutionUpdateAcceptedEventAttributes with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// WorkflowExecutionUpdateAcceptedEventAttributesMultiError, or nil if none found.
func (m *WorkflowExecutionUpdateAcceptedEventAttributes) ValidateAll() error {
	return m.validate(true)
}

func (m *WorkflowExecutionUpdateAcceptedEventAttributes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProtocolInstanceId

	// no validation rules for AcceptedRequestMessageId

	// no validation rules for AcceptedRequestSequencingEventId

	if all {
		switch v := interface{}(m.GetAcceptedRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkflowExecutionUpdateAcceptedEventAttributesValidationError{
					field:  "AcceptedRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkflowExecutionUpdateAcceptedEventAttributesValidationError{
					field:  "AcceptedRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAcceptedRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkflowExecutionUpdateAcceptedEventAttributesValidationError{
				field:  "AcceptedRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return WorkflowExecutionUpdateAcceptedEventAttributesMultiError(errors)
	}

	return nil
}

// WorkflowExecutionUpdateAcceptedEventAttributesMultiError is an error
// wrapping multiple validation errors returned by
// WorkflowExecutionUpdateAcceptedEventAttributes.ValidateAll() if the
// designated constraints aren't met.
type WorkflowExecutionUpdateAcceptedEventAttributesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WorkflowExecutionUpdateAcceptedEventAttributesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WorkflowExecutionUpdateAcceptedEventAttributesMultiError) AllErrors() []error { return m }

// WorkflowExecutionUpdateAcceptedEventAttributesValidationError is the
// validation error returned by
// WorkflowExecutionUpdateAcceptedEventAttributes.Validate if the designated
// constraints aren't met.
type WorkflowExecutionUpdateAcceptedEventAttributesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkflowExecutionUpdateAcceptedEventAttributesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorkflowExecutionUpdateAcceptedEventAttributesValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e WorkflowExecutionUpdateAcceptedEventAttributesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorkflowExecutionUpdateAcceptedEventAttributesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkflowExecutionUpdateAcceptedEventAttributesValidationError) ErrorName() string {
	return "WorkflowExecutionUpdateAcceptedEventAttributesValidationError"
}

// Error satisfies the builtin error interface
func (e WorkflowExecutionUpdateAcceptedEventAttributesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorkflowExecutionUpdateAcceptedEventAttributes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkflowExecutionUpdateAcceptedEventAttributesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkflowExecutionUpdateAcceptedEventAttributesValidationError{}

// Validate checks the field values on
// WorkflowExecutionUpdateCompletedEventAttributes with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *WorkflowExecutionUpdateCompletedEventAttributes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// WorkflowExecutionUpdateCompletedEventAttributes with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// WorkflowExecutionUpdateCompletedEventAttributesMultiError, or nil if none found.
func (m *WorkflowExecutionUpdateCompletedEventAttributes) ValidateAll() error {
	return m.validate(true)
}

func (m *WorkflowExecutionUpdateCompletedEventAttributes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMeta()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkflowExecutionUpdateCompletedEventAttributesValidationError{
					field:  "Meta",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkflowExecutionUpdateCompletedEventAttributesValidationError{
					field:  "Meta",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMeta()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkflowExecutionUpdateCompletedEventAttributesValidationError{
				field:  "Meta",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for AcceptedEventId

	if all {
		switch v := interface{}(m.GetOutcome()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkflowExecutionUpdateCompletedEventAttributesValidationError{
					field:  "Outcome",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkflowExecutionUpdateCompletedEventAttributesValidationError{
					field:  "Outcome",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOutcome()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkflowExecutionUpdateCompletedEventAttributesValidationError{
				field:  "Outcome",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return WorkflowExecutionUpdateCompletedEventAttributesMultiError(errors)
	}

	return nil
}

// WorkflowExecutionUpdateCompletedEventAttributesMultiError is an error
// wrapping multiple validation errors returned by
// WorkflowExecutionUpdateCompletedEventAttributes.ValidateAll() if the
// designated constraints aren't met.
type WorkflowExecutionUpdateCompletedEventAttributesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WorkflowExecutionUpdateCompletedEventAttributesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WorkflowExecutionUpdateCompletedEventAttributesMultiError) AllErrors() []error { return m }

// WorkflowExecutionUpdateCompletedEventAttributesValidationError is the
// validation error returned by
// WorkflowExecutionUpdateCompletedEventAttributes.Validate if the designated
// constraints aren't met.
type WorkflowExecutionUpdateCompletedEventAttributesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkflowExecutionUpdateCompletedEventAttributesValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e WorkflowExecutionUpdateCompletedEventAttributesValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e WorkflowExecutionUpdateCompletedEventAttributesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorkflowExecutionUpdateCompletedEventAttributesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkflowExecutionUpdateCompletedEventAttributesValidationError) ErrorName() string {
	return "WorkflowExecutionUpdateCompletedEventAttributesValidationError"
}

// Error satisfies the builtin error interface
func (e WorkflowExecutionUpdateCompletedEventAttributesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorkflowExecutionUpdateCompletedEventAttributes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkflowExecutionUpdateCompletedEventAttributesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkflowExecutionUpdateCompletedEventAttributesValidationError{}

// Validate checks the field values on
// WorkflowExecutionUpdateRejectedEventAttributes with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *WorkflowExecutionUpdateRejectedEventAttributes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// WorkflowExecutionUpdateRejectedEventAttributes with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// WorkflowExecutionUpdateRejectedEventAttributesMultiError, or nil if none found.
func (m *WorkflowExecutionUpdateRejectedEventAttributes) ValidateAll() error {
	return m.validate(true)
}

func (m *WorkflowExecutionUpdateRejectedEventAttributes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProtocolInstanceId

	// no validation rules for RejectedRequestMessageId

	// no validation rules for RejectedRequestSequencingEventId

	if all {
		switch v := interface{}(m.GetRejectedRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkflowExecutionUpdateRejectedEventAttributesValidationError{
					field:  "RejectedRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkflowExecutionUpdateRejectedEventAttributesValidationError{
					field:  "RejectedRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRejectedRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkflowExecutionUpdateRejectedEventAttributesValidationError{
				field:  "RejectedRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetFailure()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkflowExecutionUpdateRejectedEventAttributesValidationError{
					field:  "Failure",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkflowExecutionUpdateRejectedEventAttributesValidationError{
					field:  "Failure",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFailure()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkflowExecutionUpdateRejectedEventAttributesValidationError{
				field:  "Failure",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return WorkflowExecutionUpdateRejectedEventAttributesMultiError(errors)
	}

	return nil
}

// WorkflowExecutionUpdateRejectedEventAttributesMultiError is an error
// wrapping multiple validation errors returned by
// WorkflowExecutionUpdateRejectedEventAttributes.ValidateAll() if the
// designated constraints aren't met.
type WorkflowExecutionUpdateRejectedEventAttributesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WorkflowExecutionUpdateRejectedEventAttributesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WorkflowExecutionUpdateRejectedEventAttributesMultiError) AllErrors() []error { return m }

// WorkflowExecutionUpdateRejectedEventAttributesValidationError is the
// validation error returned by
// WorkflowExecutionUpdateRejectedEventAttributes.Validate if the designated
// constraints aren't met.
type WorkflowExecutionUpdateRejectedEventAttributesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkflowExecutionUpdateRejectedEventAttributesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorkflowExecutionUpdateRejectedEventAttributesValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e WorkflowExecutionUpdateRejectedEventAttributesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorkflowExecutionUpdateRejectedEventAttributesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkflowExecutionUpdateRejectedEventAttributesValidationError) ErrorName() string {
	return "WorkflowExecutionUpdateRejectedEventAttributesValidationError"
}

// Error satisfies the builtin error interface
func (e WorkflowExecutionUpdateRejectedEventAttributesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorkflowExecutionUpdateRejectedEventAttributes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkflowExecutionUpdateRejectedEventAttributesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkflowExecutionUpdateRejectedEventAttributesValidationError{}

// Validate checks the field values on HistoryEvent with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *HistoryEvent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HistoryEvent with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in HistoryEventMultiError, or
// nil if none found.
func (m *HistoryEvent) ValidateAll() error {
	return m.validate(true)
}

func (m *HistoryEvent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventId

	if all {
		switch v := interface{}(m.GetEventTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, HistoryEventValidationError{
					field:  "EventTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, HistoryEventValidationError{
					field:  "EventTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEventTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return HistoryEventValidationError{
				field:  "EventTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for EventType

	// no validation rules for Version

	// no validation rules for TaskId

	// no validation rules for WorkerMayIgnore

	switch v := m.Attributes.(type) {
	case *HistoryEvent_WorkflowExecutionStartedEventAttributes:
		if v == nil {
			err := HistoryEventValidationError{
				field:  "Attributes",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetWorkflowExecutionStartedEventAttributes()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, HistoryEventValidationError{
						field:  "WorkflowExecutionStartedEventAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, HistoryEventValidationError{
						field:  "WorkflowExecutionStartedEventAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetWorkflowExecutionStartedEventAttributes()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HistoryEventValidationError{
					field:  "WorkflowExecutionStartedEventAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *HistoryEvent_WorkflowExecutionCompletedEventAttributes:
		if v == nil {
			err := HistoryEventValidationError{
				field:  "Attributes",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetWorkflowExecutionCompletedEventAttributes()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, HistoryEventValidationError{
						field:  "WorkflowExecutionCompletedEventAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, HistoryEventValidationError{
						field:  "WorkflowExecutionCompletedEventAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetWorkflowExecutionCompletedEventAttributes()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HistoryEventValidationError{
					field:  "WorkflowExecutionCompletedEventAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *HistoryEvent_WorkflowExecutionFailedEventAttributes:
		if v == nil {
			err := HistoryEventValidationError{
				field:  "Attributes",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetWorkflowExecutionFailedEventAttributes()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, HistoryEventValidationError{
						field:  "WorkflowExecutionFailedEventAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, HistoryEventValidationError{
						field:  "WorkflowExecutionFailedEventAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetWorkflowExecutionFailedEventAttributes()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HistoryEventValidationError{
					field:  "WorkflowExecutionFailedEventAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *HistoryEvent_WorkflowExecutionTimedOutEventAttributes:
		if v == nil {
			err := HistoryEventValidationError{
				field:  "Attributes",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetWorkflowExecutionTimedOutEventAttributes()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, HistoryEventValidationError{
						field:  "WorkflowExecutionTimedOutEventAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, HistoryEventValidationError{
						field:  "WorkflowExecutionTimedOutEventAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetWorkflowExecutionTimedOutEventAttributes()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HistoryEventValidationError{
					field:  "WorkflowExecutionTimedOutEventAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *HistoryEvent_WorkflowTaskScheduledEventAttributes:
		if v == nil {
			err := HistoryEventValidationError{
				field:  "Attributes",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetWorkflowTaskScheduledEventAttributes()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, HistoryEventValidationError{
						field:  "WorkflowTaskScheduledEventAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, HistoryEventValidationError{
						field:  "WorkflowTaskScheduledEventAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetWorkflowTaskScheduledEventAttributes()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HistoryEventValidationError{
					field:  "WorkflowTaskScheduledEventAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *HistoryEvent_WorkflowTaskStartedEventAttributes:
		if v == nil {
			err := HistoryEventValidationError{
				field:  "Attributes",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetWorkflowTaskStartedEventAttributes()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, HistoryEventValidationError{
						field:  "WorkflowTaskStartedEventAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, HistoryEventValidationError{
						field:  "WorkflowTaskStartedEventAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetWorkflowTaskStartedEventAttributes()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HistoryEventValidationError{
					field:  "WorkflowTaskStartedEventAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *HistoryEvent_WorkflowTaskCompletedEventAttributes:
		if v == nil {
			err := HistoryEventValidationError{
				field:  "Attributes",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetWorkflowTaskCompletedEventAttributes()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, HistoryEventValidationError{
						field:  "WorkflowTaskCompletedEventAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, HistoryEventValidationError{
						field:  "WorkflowTaskCompletedEventAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetWorkflowTaskCompletedEventAttributes()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HistoryEventValidationError{
					field:  "WorkflowTaskCompletedEventAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *HistoryEvent_WorkflowTaskTimedOutEventAttributes:
		if v == nil {
			err := HistoryEventValidationError{
				field:  "Attributes",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetWorkflowTaskTimedOutEventAttributes()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, HistoryEventValidationError{
						field:  "WorkflowTaskTimedOutEventAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, HistoryEventValidationError{
						field:  "WorkflowTaskTimedOutEventAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetWorkflowTaskTimedOutEventAttributes()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HistoryEventValidationError{
					field:  "WorkflowTaskTimedOutEventAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *HistoryEvent_WorkflowTaskFailedEventAttributes:
		if v == nil {
			err := HistoryEventValidationError{
				field:  "Attributes",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetWorkflowTaskFailedEventAttributes()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, HistoryEventValidationError{
						field:  "WorkflowTaskFailedEventAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, HistoryEventValidationError{
						field:  "WorkflowTaskFailedEventAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetWorkflowTaskFailedEventAttributes()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HistoryEventValidationError{
					field:  "WorkflowTaskFailedEventAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *HistoryEvent_ActivityTaskScheduledEventAttributes:
		if v == nil {
			err := HistoryEventValidationError{
				field:  "Attributes",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetActivityTaskScheduledEventAttributes()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, HistoryEventValidationError{
						field:  "ActivityTaskScheduledEventAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, HistoryEventValidationError{
						field:  "ActivityTaskScheduledEventAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetActivityTaskScheduledEventAttributes()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HistoryEventValidationError{
					field:  "ActivityTaskScheduledEventAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *HistoryEvent_ActivityTaskStartedEventAttributes:
		if v == nil {
			err := HistoryEventValidationError{
				field:  "Attributes",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetActivityTaskStartedEventAttributes()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, HistoryEventValidationError{
						field:  "ActivityTaskStartedEventAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, HistoryEventValidationError{
						field:  "ActivityTaskStartedEventAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetActivityTaskStartedEventAttributes()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HistoryEventValidationError{
					field:  "ActivityTaskStartedEventAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *HistoryEvent_ActivityTaskCompletedEventAttributes:
		if v == nil {
			err := HistoryEventValidationError{
				field:  "Attributes",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetActivityTaskCompletedEventAttributes()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, HistoryEventValidationError{
						field:  "ActivityTaskCompletedEventAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, HistoryEventValidationError{
						field:  "ActivityTaskCompletedEventAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetActivityTaskCompletedEventAttributes()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HistoryEventValidationError{
					field:  "ActivityTaskCompletedEventAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *HistoryEvent_ActivityTaskFailedEventAttributes:
		if v == nil {
			err := HistoryEventValidationError{
				field:  "Attributes",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetActivityTaskFailedEventAttributes()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, HistoryEventValidationError{
						field:  "ActivityTaskFailedEventAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, HistoryEventValidationError{
						field:  "ActivityTaskFailedEventAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetActivityTaskFailedEventAttributes()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HistoryEventValidationError{
					field:  "ActivityTaskFailedEventAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *HistoryEvent_ActivityTaskTimedOutEventAttributes:
		if v == nil {
			err := HistoryEventValidationError{
				field:  "Attributes",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetActivityTaskTimedOutEventAttributes()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, HistoryEventValidationError{
						field:  "ActivityTaskTimedOutEventAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, HistoryEventValidationError{
						field:  "ActivityTaskTimedOutEventAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetActivityTaskTimedOutEventAttributes()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HistoryEventValidationError{
					field:  "ActivityTaskTimedOutEventAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *HistoryEvent_TimerStartedEventAttributes:
		if v == nil {
			err := HistoryEventValidationError{
				field:  "Attributes",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetTimerStartedEventAttributes()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, HistoryEventValidationError{
						field:  "TimerStartedEventAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, HistoryEventValidationError{
						field:  "TimerStartedEventAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTimerStartedEventAttributes()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HistoryEventValidationError{
					field:  "TimerStartedEventAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *HistoryEvent_TimerFiredEventAttributes:
		if v == nil {
			err := HistoryEventValidationError{
				field:  "Attributes",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetTimerFiredEventAttributes()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, HistoryEventValidationError{
						field:  "TimerFiredEventAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, HistoryEventValidationError{
						field:  "TimerFiredEventAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTimerFiredEventAttributes()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HistoryEventValidationError{
					field:  "TimerFiredEventAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *HistoryEvent_ActivityTaskCancelRequestedEventAttributes:
		if v == nil {
			err := HistoryEventValidationError{
				field:  "Attributes",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetActivityTaskCancelRequestedEventAttributes()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, HistoryEventValidationError{
						field:  "ActivityTaskCancelRequestedEventAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, HistoryEventValidationError{
						field:  "ActivityTaskCancelRequestedEventAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetActivityTaskCancelRequestedEventAttributes()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HistoryEventValidationError{
					field:  "ActivityTaskCancelRequestedEventAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *HistoryEvent_ActivityTaskCanceledEventAttributes:
		if v == nil {
			err := HistoryEventValidationError{
				field:  "Attributes",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetActivityTaskCanceledEventAttributes()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, HistoryEventValidationError{
						field:  "ActivityTaskCanceledEventAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, HistoryEventValidationError{
						field:  "ActivityTaskCanceledEventAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetActivityTaskCanceledEventAttributes()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HistoryEventValidationError{
					field:  "ActivityTaskCanceledEventAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *HistoryEvent_TimerCanceledEventAttributes:
		if v == nil {
			err := HistoryEventValidationError{
				field:  "Attributes",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetTimerCanceledEventAttributes()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, HistoryEventValidationError{
						field:  "TimerCanceledEventAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, HistoryEventValidationError{
						field:  "TimerCanceledEventAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTimerCanceledEventAttributes()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HistoryEventValidationError{
					field:  "TimerCanceledEventAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *HistoryEvent_MarkerRecordedEventAttributes:
		if v == nil {
			err := HistoryEventValidationError{
				field:  "Attributes",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetMarkerRecordedEventAttributes()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, HistoryEventValidationError{
						field:  "MarkerRecordedEventAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, HistoryEventValidationError{
						field:  "MarkerRecordedEventAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMarkerRecordedEventAttributes()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HistoryEventValidationError{
					field:  "MarkerRecordedEventAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *HistoryEvent_WorkflowExecutionSignaledEventAttributes:
		if v == nil {
			err := HistoryEventValidationError{
				field:  "Attributes",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetWorkflowExecutionSignaledEventAttributes()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, HistoryEventValidationError{
						field:  "WorkflowExecutionSignaledEventAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, HistoryEventValidationError{
						field:  "WorkflowExecutionSignaledEventAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetWorkflowExecutionSignaledEventAttributes()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HistoryEventValidationError{
					field:  "WorkflowExecutionSignaledEventAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *HistoryEvent_WorkflowExecutionTerminatedEventAttributes:
		if v == nil {
			err := HistoryEventValidationError{
				field:  "Attributes",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetWorkflowExecutionTerminatedEventAttributes()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, HistoryEventValidationError{
						field:  "WorkflowExecutionTerminatedEventAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, HistoryEventValidationError{
						field:  "WorkflowExecutionTerminatedEventAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetWorkflowExecutionTerminatedEventAttributes()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HistoryEventValidationError{
					field:  "WorkflowExecutionTerminatedEventAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *HistoryEvent_WorkflowExecutionCancelRequestedEventAttributes:
		if v == nil {
			err := HistoryEventValidationError{
				field:  "Attributes",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetWorkflowExecutionCancelRequestedEventAttributes()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, HistoryEventValidationError{
						field:  "WorkflowExecutionCancelRequestedEventAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, HistoryEventValidationError{
						field:  "WorkflowExecutionCancelRequestedEventAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetWorkflowExecutionCancelRequestedEventAttributes()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HistoryEventValidationError{
					field:  "WorkflowExecutionCancelRequestedEventAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *HistoryEvent_WorkflowExecutionCanceledEventAttributes:
		if v == nil {
			err := HistoryEventValidationError{
				field:  "Attributes",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetWorkflowExecutionCanceledEventAttributes()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, HistoryEventValidationError{
						field:  "WorkflowExecutionCanceledEventAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, HistoryEventValidationError{
						field:  "WorkflowExecutionCanceledEventAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetWorkflowExecutionCanceledEventAttributes()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HistoryEventValidationError{
					field:  "WorkflowExecutionCanceledEventAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *HistoryEvent_RequestCancelExternalWorkflowExecutionInitiatedEventAttributes:
		if v == nil {
			err := HistoryEventValidationError{
				field:  "Attributes",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetRequestCancelExternalWorkflowExecutionInitiatedEventAttributes()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, HistoryEventValidationError{
						field:  "RequestCancelExternalWorkflowExecutionInitiatedEventAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, HistoryEventValidationError{
						field:  "RequestCancelExternalWorkflowExecutionInitiatedEventAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRequestCancelExternalWorkflowExecutionInitiatedEventAttributes()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HistoryEventValidationError{
					field:  "RequestCancelExternalWorkflowExecutionInitiatedEventAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *HistoryEvent_RequestCancelExternalWorkflowExecutionFailedEventAttributes:
		if v == nil {
			err := HistoryEventValidationError{
				field:  "Attributes",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetRequestCancelExternalWorkflowExecutionFailedEventAttributes()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, HistoryEventValidationError{
						field:  "RequestCancelExternalWorkflowExecutionFailedEventAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, HistoryEventValidationError{
						field:  "RequestCancelExternalWorkflowExecutionFailedEventAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRequestCancelExternalWorkflowExecutionFailedEventAttributes()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HistoryEventValidationError{
					field:  "RequestCancelExternalWorkflowExecutionFailedEventAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *HistoryEvent_ExternalWorkflowExecutionCancelRequestedEventAttributes:
		if v == nil {
			err := HistoryEventValidationError{
				field:  "Attributes",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetExternalWorkflowExecutionCancelRequestedEventAttributes()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, HistoryEventValidationError{
						field:  "ExternalWorkflowExecutionCancelRequestedEventAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, HistoryEventValidationError{
						field:  "ExternalWorkflowExecutionCancelRequestedEventAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetExternalWorkflowExecutionCancelRequestedEventAttributes()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HistoryEventValidationError{
					field:  "ExternalWorkflowExecutionCancelRequestedEventAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *HistoryEvent_WorkflowExecutionContinuedAsNewEventAttributes:
		if v == nil {
			err := HistoryEventValidationError{
				field:  "Attributes",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetWorkflowExecutionContinuedAsNewEventAttributes()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, HistoryEventValidationError{
						field:  "WorkflowExecutionContinuedAsNewEventAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, HistoryEventValidationError{
						field:  "WorkflowExecutionContinuedAsNewEventAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetWorkflowExecutionContinuedAsNewEventAttributes()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HistoryEventValidationError{
					field:  "WorkflowExecutionContinuedAsNewEventAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *HistoryEvent_StartChildWorkflowExecutionInitiatedEventAttributes:
		if v == nil {
			err := HistoryEventValidationError{
				field:  "Attributes",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetStartChildWorkflowExecutionInitiatedEventAttributes()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, HistoryEventValidationError{
						field:  "StartChildWorkflowExecutionInitiatedEventAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, HistoryEventValidationError{
						field:  "StartChildWorkflowExecutionInitiatedEventAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetStartChildWorkflowExecutionInitiatedEventAttributes()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HistoryEventValidationError{
					field:  "StartChildWorkflowExecutionInitiatedEventAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *HistoryEvent_StartChildWorkflowExecutionFailedEventAttributes:
		if v == nil {
			err := HistoryEventValidationError{
				field:  "Attributes",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetStartChildWorkflowExecutionFailedEventAttributes()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, HistoryEventValidationError{
						field:  "StartChildWorkflowExecutionFailedEventAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, HistoryEventValidationError{
						field:  "StartChildWorkflowExecutionFailedEventAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetStartChildWorkflowExecutionFailedEventAttributes()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HistoryEventValidationError{
					field:  "StartChildWorkflowExecutionFailedEventAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *HistoryEvent_ChildWorkflowExecutionStartedEventAttributes:
		if v == nil {
			err := HistoryEventValidationError{
				field:  "Attributes",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetChildWorkflowExecutionStartedEventAttributes()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, HistoryEventValidationError{
						field:  "ChildWorkflowExecutionStartedEventAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, HistoryEventValidationError{
						field:  "ChildWorkflowExecutionStartedEventAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetChildWorkflowExecutionStartedEventAttributes()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HistoryEventValidationError{
					field:  "ChildWorkflowExecutionStartedEventAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *HistoryEvent_ChildWorkflowExecutionCompletedEventAttributes:
		if v == nil {
			err := HistoryEventValidationError{
				field:  "Attributes",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetChildWorkflowExecutionCompletedEventAttributes()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, HistoryEventValidationError{
						field:  "ChildWorkflowExecutionCompletedEventAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, HistoryEventValidationError{
						field:  "ChildWorkflowExecutionCompletedEventAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetChildWorkflowExecutionCompletedEventAttributes()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HistoryEventValidationError{
					field:  "ChildWorkflowExecutionCompletedEventAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *HistoryEvent_ChildWorkflowExecutionFailedEventAttributes:
		if v == nil {
			err := HistoryEventValidationError{
				field:  "Attributes",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetChildWorkflowExecutionFailedEventAttributes()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, HistoryEventValidationError{
						field:  "ChildWorkflowExecutionFailedEventAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, HistoryEventValidationError{
						field:  "ChildWorkflowExecutionFailedEventAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetChildWorkflowExecutionFailedEventAttributes()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HistoryEventValidationError{
					field:  "ChildWorkflowExecutionFailedEventAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *HistoryEvent_ChildWorkflowExecutionCanceledEventAttributes:
		if v == nil {
			err := HistoryEventValidationError{
				field:  "Attributes",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetChildWorkflowExecutionCanceledEventAttributes()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, HistoryEventValidationError{
						field:  "ChildWorkflowExecutionCanceledEventAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, HistoryEventValidationError{
						field:  "ChildWorkflowExecutionCanceledEventAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetChildWorkflowExecutionCanceledEventAttributes()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HistoryEventValidationError{
					field:  "ChildWorkflowExecutionCanceledEventAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *HistoryEvent_ChildWorkflowExecutionTimedOutEventAttributes:
		if v == nil {
			err := HistoryEventValidationError{
				field:  "Attributes",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetChildWorkflowExecutionTimedOutEventAttributes()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, HistoryEventValidationError{
						field:  "ChildWorkflowExecutionTimedOutEventAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, HistoryEventValidationError{
						field:  "ChildWorkflowExecutionTimedOutEventAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetChildWorkflowExecutionTimedOutEventAttributes()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HistoryEventValidationError{
					field:  "ChildWorkflowExecutionTimedOutEventAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *HistoryEvent_ChildWorkflowExecutionTerminatedEventAttributes:
		if v == nil {
			err := HistoryEventValidationError{
				field:  "Attributes",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetChildWorkflowExecutionTerminatedEventAttributes()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, HistoryEventValidationError{
						field:  "ChildWorkflowExecutionTerminatedEventAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, HistoryEventValidationError{
						field:  "ChildWorkflowExecutionTerminatedEventAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetChildWorkflowExecutionTerminatedEventAttributes()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HistoryEventValidationError{
					field:  "ChildWorkflowExecutionTerminatedEventAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *HistoryEvent_SignalExternalWorkflowExecutionInitiatedEventAttributes:
		if v == nil {
			err := HistoryEventValidationError{
				field:  "Attributes",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetSignalExternalWorkflowExecutionInitiatedEventAttributes()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, HistoryEventValidationError{
						field:  "SignalExternalWorkflowExecutionInitiatedEventAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, HistoryEventValidationError{
						field:  "SignalExternalWorkflowExecutionInitiatedEventAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSignalExternalWorkflowExecutionInitiatedEventAttributes()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HistoryEventValidationError{
					field:  "SignalExternalWorkflowExecutionInitiatedEventAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *HistoryEvent_SignalExternalWorkflowExecutionFailedEventAttributes:
		if v == nil {
			err := HistoryEventValidationError{
				field:  "Attributes",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetSignalExternalWorkflowExecutionFailedEventAttributes()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, HistoryEventValidationError{
						field:  "SignalExternalWorkflowExecutionFailedEventAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, HistoryEventValidationError{
						field:  "SignalExternalWorkflowExecutionFailedEventAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSignalExternalWorkflowExecutionFailedEventAttributes()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HistoryEventValidationError{
					field:  "SignalExternalWorkflowExecutionFailedEventAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *HistoryEvent_ExternalWorkflowExecutionSignaledEventAttributes:
		if v == nil {
			err := HistoryEventValidationError{
				field:  "Attributes",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetExternalWorkflowExecutionSignaledEventAttributes()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, HistoryEventValidationError{
						field:  "ExternalWorkflowExecutionSignaledEventAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, HistoryEventValidationError{
						field:  "ExternalWorkflowExecutionSignaledEventAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetExternalWorkflowExecutionSignaledEventAttributes()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HistoryEventValidationError{
					field:  "ExternalWorkflowExecutionSignaledEventAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *HistoryEvent_UpsertWorkflowSearchAttributesEventAttributes:
		if v == nil {
			err := HistoryEventValidationError{
				field:  "Attributes",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetUpsertWorkflowSearchAttributesEventAttributes()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, HistoryEventValidationError{
						field:  "UpsertWorkflowSearchAttributesEventAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, HistoryEventValidationError{
						field:  "UpsertWorkflowSearchAttributesEventAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUpsertWorkflowSearchAttributesEventAttributes()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HistoryEventValidationError{
					field:  "UpsertWorkflowSearchAttributesEventAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *HistoryEvent_WorkflowExecutionUpdateAcceptedEventAttributes:
		if v == nil {
			err := HistoryEventValidationError{
				field:  "Attributes",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetWorkflowExecutionUpdateAcceptedEventAttributes()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, HistoryEventValidationError{
						field:  "WorkflowExecutionUpdateAcceptedEventAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, HistoryEventValidationError{
						field:  "WorkflowExecutionUpdateAcceptedEventAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetWorkflowExecutionUpdateAcceptedEventAttributes()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HistoryEventValidationError{
					field:  "WorkflowExecutionUpdateAcceptedEventAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *HistoryEvent_WorkflowExecutionUpdateRejectedEventAttributes:
		if v == nil {
			err := HistoryEventValidationError{
				field:  "Attributes",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetWorkflowExecutionUpdateRejectedEventAttributes()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, HistoryEventValidationError{
						field:  "WorkflowExecutionUpdateRejectedEventAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, HistoryEventValidationError{
						field:  "WorkflowExecutionUpdateRejectedEventAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetWorkflowExecutionUpdateRejectedEventAttributes()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HistoryEventValidationError{
					field:  "WorkflowExecutionUpdateRejectedEventAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *HistoryEvent_WorkflowExecutionUpdateCompletedEventAttributes:
		if v == nil {
			err := HistoryEventValidationError{
				field:  "Attributes",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetWorkflowExecutionUpdateCompletedEventAttributes()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, HistoryEventValidationError{
						field:  "WorkflowExecutionUpdateCompletedEventAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, HistoryEventValidationError{
						field:  "WorkflowExecutionUpdateCompletedEventAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetWorkflowExecutionUpdateCompletedEventAttributes()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HistoryEventValidationError{
					field:  "WorkflowExecutionUpdateCompletedEventAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *HistoryEvent_WorkflowPropertiesModifiedExternallyEventAttributes:
		if v == nil {
			err := HistoryEventValidationError{
				field:  "Attributes",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetWorkflowPropertiesModifiedExternallyEventAttributes()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, HistoryEventValidationError{
						field:  "WorkflowPropertiesModifiedExternallyEventAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, HistoryEventValidationError{
						field:  "WorkflowPropertiesModifiedExternallyEventAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetWorkflowPropertiesModifiedExternallyEventAttributes()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HistoryEventValidationError{
					field:  "WorkflowPropertiesModifiedExternallyEventAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *HistoryEvent_ActivityPropertiesModifiedExternallyEventAttributes:
		if v == nil {
			err := HistoryEventValidationError{
				field:  "Attributes",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetActivityPropertiesModifiedExternallyEventAttributes()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, HistoryEventValidationError{
						field:  "ActivityPropertiesModifiedExternallyEventAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, HistoryEventValidationError{
						field:  "ActivityPropertiesModifiedExternallyEventAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetActivityPropertiesModifiedExternallyEventAttributes()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HistoryEventValidationError{
					field:  "ActivityPropertiesModifiedExternallyEventAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *HistoryEvent_WorkflowPropertiesModifiedEventAttributes:
		if v == nil {
			err := HistoryEventValidationError{
				field:  "Attributes",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetWorkflowPropertiesModifiedEventAttributes()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, HistoryEventValidationError{
						field:  "WorkflowPropertiesModifiedEventAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, HistoryEventValidationError{
						field:  "WorkflowPropertiesModifiedEventAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetWorkflowPropertiesModifiedEventAttributes()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HistoryEventValidationError{
					field:  "WorkflowPropertiesModifiedEventAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return HistoryEventMultiError(errors)
	}

	return nil
}

// HistoryEventMultiError is an error wrapping multiple validation errors
// returned by HistoryEvent.ValidateAll() if the designated constraints aren't met.
type HistoryEventMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HistoryEventMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HistoryEventMultiError) AllErrors() []error { return m }

// HistoryEventValidationError is the validation error returned by
// HistoryEvent.Validate if the designated constraints aren't met.
type HistoryEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HistoryEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HistoryEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HistoryEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HistoryEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HistoryEventValidationError) ErrorName() string { return "HistoryEventValidationError" }

// Error satisfies the builtin error interface
func (e HistoryEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHistoryEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HistoryEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HistoryEventValidationError{}

// Validate checks the field values on History with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *History) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on History with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in HistoryMultiError, or nil if none found.
func (m *History) ValidateAll() error {
	return m.validate(true)
}

func (m *History) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetEvents() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, HistoryValidationError{
						field:  fmt.Sprintf("Events[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, HistoryValidationError{
						field:  fmt.Sprintf("Events[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HistoryValidationError{
					field:  fmt.Sprintf("Events[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return HistoryMultiError(errors)
	}

	return nil
}

// HistoryMultiError is an error wrapping multiple validation errors returned
// by History.ValidateAll() if the designated constraints aren't met.
type HistoryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HistoryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HistoryMultiError) AllErrors() []error { return m }

// HistoryValidationError is the validation error returned by History.Validate
// if the designated constraints aren't met.
type HistoryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HistoryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HistoryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HistoryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HistoryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HistoryValidationError) ErrorName() string { return "HistoryValidationError" }

// Error satisfies the builtin error interface
func (e HistoryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHistory.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HistoryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HistoryValidationError{}
