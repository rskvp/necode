// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: necode/workflow/message.proto

package workflow

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	enums "github.com/rskvp/necode/proto/gen/necode/enums"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = enums.WorkflowExecutionStatus(0)
)

// Validate checks the field values on WorkflowExecutionInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WorkflowExecutionInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WorkflowExecutionInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WorkflowExecutionInfoMultiError, or nil if none found.
func (m *WorkflowExecutionInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *WorkflowExecutionInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetExecution()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkflowExecutionInfoValidationError{
					field:  "Execution",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkflowExecutionInfoValidationError{
					field:  "Execution",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExecution()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkflowExecutionInfoValidationError{
				field:  "Execution",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkflowExecutionInfoValidationError{
					field:  "Type",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkflowExecutionInfoValidationError{
					field:  "Type",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkflowExecutionInfoValidationError{
				field:  "Type",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStartTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkflowExecutionInfoValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkflowExecutionInfoValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkflowExecutionInfoValidationError{
				field:  "StartTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCloseTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkflowExecutionInfoValidationError{
					field:  "CloseTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkflowExecutionInfoValidationError{
					field:  "CloseTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCloseTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkflowExecutionInfoValidationError{
				field:  "CloseTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Status

	// no validation rules for HistoryLength

	// no validation rules for ParentNamespaceId

	if all {
		switch v := interface{}(m.GetParentExecution()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkflowExecutionInfoValidationError{
					field:  "ParentExecution",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkflowExecutionInfoValidationError{
					field:  "ParentExecution",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParentExecution()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkflowExecutionInfoValidationError{
				field:  "ParentExecution",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetExecutionTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkflowExecutionInfoValidationError{
					field:  "ExecutionTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkflowExecutionInfoValidationError{
					field:  "ExecutionTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExecutionTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkflowExecutionInfoValidationError{
				field:  "ExecutionTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMemo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkflowExecutionInfoValidationError{
					field:  "Memo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkflowExecutionInfoValidationError{
					field:  "Memo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMemo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkflowExecutionInfoValidationError{
				field:  "Memo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSearchAttributes()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkflowExecutionInfoValidationError{
					field:  "SearchAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkflowExecutionInfoValidationError{
					field:  "SearchAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSearchAttributes()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkflowExecutionInfoValidationError{
				field:  "SearchAttributes",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAutoResetPoints()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkflowExecutionInfoValidationError{
					field:  "AutoResetPoints",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkflowExecutionInfoValidationError{
					field:  "AutoResetPoints",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAutoResetPoints()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkflowExecutionInfoValidationError{
				field:  "AutoResetPoints",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for TaskQueue

	// no validation rules for StateTransitionCount

	// no validation rules for HistorySizeBytes

	if all {
		switch v := interface{}(m.GetMostRecentWorkerVersionStamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkflowExecutionInfoValidationError{
					field:  "MostRecentWorkerVersionStamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkflowExecutionInfoValidationError{
					field:  "MostRecentWorkerVersionStamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMostRecentWorkerVersionStamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkflowExecutionInfoValidationError{
				field:  "MostRecentWorkerVersionStamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return WorkflowExecutionInfoMultiError(errors)
	}

	return nil
}

// WorkflowExecutionInfoMultiError is an error wrapping multiple validation
// errors returned by WorkflowExecutionInfo.ValidateAll() if the designated
// constraints aren't met.
type WorkflowExecutionInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WorkflowExecutionInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WorkflowExecutionInfoMultiError) AllErrors() []error { return m }

// WorkflowExecutionInfoValidationError is the validation error returned by
// WorkflowExecutionInfo.Validate if the designated constraints aren't met.
type WorkflowExecutionInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkflowExecutionInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorkflowExecutionInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WorkflowExecutionInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorkflowExecutionInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkflowExecutionInfoValidationError) ErrorName() string {
	return "WorkflowExecutionInfoValidationError"
}

// Error satisfies the builtin error interface
func (e WorkflowExecutionInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorkflowExecutionInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkflowExecutionInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkflowExecutionInfoValidationError{}

// Validate checks the field values on WorkflowExecutionConfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WorkflowExecutionConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WorkflowExecutionConfig with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WorkflowExecutionConfigMultiError, or nil if none found.
func (m *WorkflowExecutionConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *WorkflowExecutionConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTaskQueue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkflowExecutionConfigValidationError{
					field:  "TaskQueue",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkflowExecutionConfigValidationError{
					field:  "TaskQueue",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTaskQueue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkflowExecutionConfigValidationError{
				field:  "TaskQueue",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetWorkflowExecutionTimeout()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkflowExecutionConfigValidationError{
					field:  "WorkflowExecutionTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkflowExecutionConfigValidationError{
					field:  "WorkflowExecutionTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkflowExecutionTimeout()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkflowExecutionConfigValidationError{
				field:  "WorkflowExecutionTimeout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetWorkflowRunTimeout()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkflowExecutionConfigValidationError{
					field:  "WorkflowRunTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkflowExecutionConfigValidationError{
					field:  "WorkflowRunTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkflowRunTimeout()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkflowExecutionConfigValidationError{
				field:  "WorkflowRunTimeout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDefaultWorkflowTaskTimeout()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkflowExecutionConfigValidationError{
					field:  "DefaultWorkflowTaskTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkflowExecutionConfigValidationError{
					field:  "DefaultWorkflowTaskTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDefaultWorkflowTaskTimeout()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkflowExecutionConfigValidationError{
				field:  "DefaultWorkflowTaskTimeout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return WorkflowExecutionConfigMultiError(errors)
	}

	return nil
}

// WorkflowExecutionConfigMultiError is an error wrapping multiple validation
// errors returned by WorkflowExecutionConfig.ValidateAll() if the designated
// constraints aren't met.
type WorkflowExecutionConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WorkflowExecutionConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WorkflowExecutionConfigMultiError) AllErrors() []error { return m }

// WorkflowExecutionConfigValidationError is the validation error returned by
// WorkflowExecutionConfig.Validate if the designated constraints aren't met.
type WorkflowExecutionConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkflowExecutionConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorkflowExecutionConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WorkflowExecutionConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorkflowExecutionConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkflowExecutionConfigValidationError) ErrorName() string {
	return "WorkflowExecutionConfigValidationError"
}

// Error satisfies the builtin error interface
func (e WorkflowExecutionConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorkflowExecutionConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkflowExecutionConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkflowExecutionConfigValidationError{}

// Validate checks the field values on PendingActivityInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PendingActivityInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PendingActivityInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PendingActivityInfoMultiError, or nil if none found.
func (m *PendingActivityInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *PendingActivityInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ActivityId

	if all {
		switch v := interface{}(m.GetActivityType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PendingActivityInfoValidationError{
					field:  "ActivityType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PendingActivityInfoValidationError{
					field:  "ActivityType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetActivityType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PendingActivityInfoValidationError{
				field:  "ActivityType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for State

	if all {
		switch v := interface{}(m.GetHeartbeatDetails()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PendingActivityInfoValidationError{
					field:  "HeartbeatDetails",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PendingActivityInfoValidationError{
					field:  "HeartbeatDetails",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHeartbeatDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PendingActivityInfoValidationError{
				field:  "HeartbeatDetails",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetLastHeartbeatTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PendingActivityInfoValidationError{
					field:  "LastHeartbeatTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PendingActivityInfoValidationError{
					field:  "LastHeartbeatTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLastHeartbeatTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PendingActivityInfoValidationError{
				field:  "LastHeartbeatTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetLastStartedTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PendingActivityInfoValidationError{
					field:  "LastStartedTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PendingActivityInfoValidationError{
					field:  "LastStartedTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLastStartedTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PendingActivityInfoValidationError{
				field:  "LastStartedTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Attempt

	// no validation rules for MaximumAttempts

	if all {
		switch v := interface{}(m.GetScheduledTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PendingActivityInfoValidationError{
					field:  "ScheduledTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PendingActivityInfoValidationError{
					field:  "ScheduledTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetScheduledTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PendingActivityInfoValidationError{
				field:  "ScheduledTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetExpirationTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PendingActivityInfoValidationError{
					field:  "ExpirationTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PendingActivityInfoValidationError{
					field:  "ExpirationTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpirationTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PendingActivityInfoValidationError{
				field:  "ExpirationTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetLastFailure()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PendingActivityInfoValidationError{
					field:  "LastFailure",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PendingActivityInfoValidationError{
					field:  "LastFailure",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLastFailure()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PendingActivityInfoValidationError{
				field:  "LastFailure",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for LastWorkerIdentity

	if len(errors) > 0 {
		return PendingActivityInfoMultiError(errors)
	}

	return nil
}

// PendingActivityInfoMultiError is an error wrapping multiple validation
// errors returned by PendingActivityInfo.ValidateAll() if the designated
// constraints aren't met.
type PendingActivityInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PendingActivityInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PendingActivityInfoMultiError) AllErrors() []error { return m }

// PendingActivityInfoValidationError is the validation error returned by
// PendingActivityInfo.Validate if the designated constraints aren't met.
type PendingActivityInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PendingActivityInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PendingActivityInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PendingActivityInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PendingActivityInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PendingActivityInfoValidationError) ErrorName() string {
	return "PendingActivityInfoValidationError"
}

// Error satisfies the builtin error interface
func (e PendingActivityInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPendingActivityInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PendingActivityInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PendingActivityInfoValidationError{}

// Validate checks the field values on PendingChildExecutionInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PendingChildExecutionInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PendingChildExecutionInfo with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PendingChildExecutionInfoMultiError, or nil if none found.
func (m *PendingChildExecutionInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *PendingChildExecutionInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WorkflowId

	// no validation rules for RunId

	// no validation rules for WorkflowTypeName

	// no validation rules for InitiatedId

	// no validation rules for ParentClosePolicy

	if len(errors) > 0 {
		return PendingChildExecutionInfoMultiError(errors)
	}

	return nil
}

// PendingChildExecutionInfoMultiError is an error wrapping multiple validation
// errors returned by PendingChildExecutionInfo.ValidateAll() if the
// designated constraints aren't met.
type PendingChildExecutionInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PendingChildExecutionInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PendingChildExecutionInfoMultiError) AllErrors() []error { return m }

// PendingChildExecutionInfoValidationError is the validation error returned by
// PendingChildExecutionInfo.Validate if the designated constraints aren't met.
type PendingChildExecutionInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PendingChildExecutionInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PendingChildExecutionInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PendingChildExecutionInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PendingChildExecutionInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PendingChildExecutionInfoValidationError) ErrorName() string {
	return "PendingChildExecutionInfoValidationError"
}

// Error satisfies the builtin error interface
func (e PendingChildExecutionInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPendingChildExecutionInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PendingChildExecutionInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PendingChildExecutionInfoValidationError{}

// Validate checks the field values on PendingWorkflowTaskInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PendingWorkflowTaskInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PendingWorkflowTaskInfo with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PendingWorkflowTaskInfoMultiError, or nil if none found.
func (m *PendingWorkflowTaskInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *PendingWorkflowTaskInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for State

	if all {
		switch v := interface{}(m.GetScheduledTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PendingWorkflowTaskInfoValidationError{
					field:  "ScheduledTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PendingWorkflowTaskInfoValidationError{
					field:  "ScheduledTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetScheduledTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PendingWorkflowTaskInfoValidationError{
				field:  "ScheduledTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOriginalScheduledTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PendingWorkflowTaskInfoValidationError{
					field:  "OriginalScheduledTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PendingWorkflowTaskInfoValidationError{
					field:  "OriginalScheduledTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOriginalScheduledTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PendingWorkflowTaskInfoValidationError{
				field:  "OriginalScheduledTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStartedTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PendingWorkflowTaskInfoValidationError{
					field:  "StartedTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PendingWorkflowTaskInfoValidationError{
					field:  "StartedTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartedTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PendingWorkflowTaskInfoValidationError{
				field:  "StartedTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Attempt

	if len(errors) > 0 {
		return PendingWorkflowTaskInfoMultiError(errors)
	}

	return nil
}

// PendingWorkflowTaskInfoMultiError is an error wrapping multiple validation
// errors returned by PendingWorkflowTaskInfo.ValidateAll() if the designated
// constraints aren't met.
type PendingWorkflowTaskInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PendingWorkflowTaskInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PendingWorkflowTaskInfoMultiError) AllErrors() []error { return m }

// PendingWorkflowTaskInfoValidationError is the validation error returned by
// PendingWorkflowTaskInfo.Validate if the designated constraints aren't met.
type PendingWorkflowTaskInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PendingWorkflowTaskInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PendingWorkflowTaskInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PendingWorkflowTaskInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PendingWorkflowTaskInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PendingWorkflowTaskInfoValidationError) ErrorName() string {
	return "PendingWorkflowTaskInfoValidationError"
}

// Error satisfies the builtin error interface
func (e PendingWorkflowTaskInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPendingWorkflowTaskInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PendingWorkflowTaskInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PendingWorkflowTaskInfoValidationError{}

// Validate checks the field values on ResetPoints with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ResetPoints) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResetPoints with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ResetPointsMultiError, or
// nil if none found.
func (m *ResetPoints) ValidateAll() error {
	return m.validate(true)
}

func (m *ResetPoints) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPoints() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ResetPointsValidationError{
						field:  fmt.Sprintf("Points[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ResetPointsValidationError{
						field:  fmt.Sprintf("Points[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ResetPointsValidationError{
					field:  fmt.Sprintf("Points[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ResetPointsMultiError(errors)
	}

	return nil
}

// ResetPointsMultiError is an error wrapping multiple validation errors
// returned by ResetPoints.ValidateAll() if the designated constraints aren't met.
type ResetPointsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResetPointsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResetPointsMultiError) AllErrors() []error { return m }

// ResetPointsValidationError is the validation error returned by
// ResetPoints.Validate if the designated constraints aren't met.
type ResetPointsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetPointsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResetPointsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResetPointsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResetPointsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResetPointsValidationError) ErrorName() string { return "ResetPointsValidationError" }

// Error satisfies the builtin error interface
func (e ResetPointsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetPoints.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetPointsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetPointsValidationError{}

// Validate checks the field values on ResetPointInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ResetPointInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResetPointInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ResetPointInfoMultiError,
// or nil if none found.
func (m *ResetPointInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *ResetPointInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BinaryChecksum

	// no validation rules for RunId

	// no validation rules for FirstWorkflowTaskCompletedId

	if all {
		switch v := interface{}(m.GetCreateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ResetPointInfoValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ResetPointInfoValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResetPointInfoValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetExpireTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ResetPointInfoValidationError{
					field:  "ExpireTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ResetPointInfoValidationError{
					field:  "ExpireTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpireTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResetPointInfoValidationError{
				field:  "ExpireTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Resettable

	if len(errors) > 0 {
		return ResetPointInfoMultiError(errors)
	}

	return nil
}

// ResetPointInfoMultiError is an error wrapping multiple validation errors
// returned by ResetPointInfo.ValidateAll() if the designated constraints
// aren't met.
type ResetPointInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResetPointInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResetPointInfoMultiError) AllErrors() []error { return m }

// ResetPointInfoValidationError is the validation error returned by
// ResetPointInfo.Validate if the designated constraints aren't met.
type ResetPointInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetPointInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResetPointInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResetPointInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResetPointInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResetPointInfoValidationError) ErrorName() string { return "ResetPointInfoValidationError" }

// Error satisfies the builtin error interface
func (e ResetPointInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetPointInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetPointInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetPointInfoValidationError{}

// Validate checks the field values on NewWorkflowExecutionInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *NewWorkflowExecutionInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NewWorkflowExecutionInfo with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NewWorkflowExecutionInfoMultiError, or nil if none found.
func (m *NewWorkflowExecutionInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *NewWorkflowExecutionInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WorkflowId

	if all {
		switch v := interface{}(m.GetWorkflowType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NewWorkflowExecutionInfoValidationError{
					field:  "WorkflowType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NewWorkflowExecutionInfoValidationError{
					field:  "WorkflowType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkflowType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NewWorkflowExecutionInfoValidationError{
				field:  "WorkflowType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTaskQueue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NewWorkflowExecutionInfoValidationError{
					field:  "TaskQueue",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NewWorkflowExecutionInfoValidationError{
					field:  "TaskQueue",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTaskQueue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NewWorkflowExecutionInfoValidationError{
				field:  "TaskQueue",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetInput()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NewWorkflowExecutionInfoValidationError{
					field:  "Input",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NewWorkflowExecutionInfoValidationError{
					field:  "Input",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInput()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NewWorkflowExecutionInfoValidationError{
				field:  "Input",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetWorkflowExecutionTimeout()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NewWorkflowExecutionInfoValidationError{
					field:  "WorkflowExecutionTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NewWorkflowExecutionInfoValidationError{
					field:  "WorkflowExecutionTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkflowExecutionTimeout()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NewWorkflowExecutionInfoValidationError{
				field:  "WorkflowExecutionTimeout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetWorkflowRunTimeout()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NewWorkflowExecutionInfoValidationError{
					field:  "WorkflowRunTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NewWorkflowExecutionInfoValidationError{
					field:  "WorkflowRunTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkflowRunTimeout()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NewWorkflowExecutionInfoValidationError{
				field:  "WorkflowRunTimeout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetWorkflowTaskTimeout()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NewWorkflowExecutionInfoValidationError{
					field:  "WorkflowTaskTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NewWorkflowExecutionInfoValidationError{
					field:  "WorkflowTaskTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkflowTaskTimeout()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NewWorkflowExecutionInfoValidationError{
				field:  "WorkflowTaskTimeout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for WorkflowIdReusePolicy

	if all {
		switch v := interface{}(m.GetRetryPolicy()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NewWorkflowExecutionInfoValidationError{
					field:  "RetryPolicy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NewWorkflowExecutionInfoValidationError{
					field:  "RetryPolicy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRetryPolicy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NewWorkflowExecutionInfoValidationError{
				field:  "RetryPolicy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CronSchedule

	if all {
		switch v := interface{}(m.GetMemo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NewWorkflowExecutionInfoValidationError{
					field:  "Memo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NewWorkflowExecutionInfoValidationError{
					field:  "Memo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMemo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NewWorkflowExecutionInfoValidationError{
				field:  "Memo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSearchAttributes()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NewWorkflowExecutionInfoValidationError{
					field:  "SearchAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NewWorkflowExecutionInfoValidationError{
					field:  "SearchAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSearchAttributes()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NewWorkflowExecutionInfoValidationError{
				field:  "SearchAttributes",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetHeader()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NewWorkflowExecutionInfoValidationError{
					field:  "Header",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NewWorkflowExecutionInfoValidationError{
					field:  "Header",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHeader()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NewWorkflowExecutionInfoValidationError{
				field:  "Header",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return NewWorkflowExecutionInfoMultiError(errors)
	}

	return nil
}

// NewWorkflowExecutionInfoMultiError is an error wrapping multiple validation
// errors returned by NewWorkflowExecutionInfo.ValidateAll() if the designated
// constraints aren't met.
type NewWorkflowExecutionInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NewWorkflowExecutionInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NewWorkflowExecutionInfoMultiError) AllErrors() []error { return m }

// NewWorkflowExecutionInfoValidationError is the validation error returned by
// NewWorkflowExecutionInfo.Validate if the designated constraints aren't met.
type NewWorkflowExecutionInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NewWorkflowExecutionInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NewWorkflowExecutionInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NewWorkflowExecutionInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NewWorkflowExecutionInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NewWorkflowExecutionInfoValidationError) ErrorName() string {
	return "NewWorkflowExecutionInfoValidationError"
}

// Error satisfies the builtin error interface
func (e NewWorkflowExecutionInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNewWorkflowExecutionInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NewWorkflowExecutionInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NewWorkflowExecutionInfoValidationError{}
