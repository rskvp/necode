// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: necode/command/message.proto

package command

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	enums "github.com/rskvp/necode/proto/gen/necode/enums"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = enums.ContinueAsNewInitiator(0)
)

// Validate checks the field values on ScheduleActivityTaskCommandAttributes
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ScheduleActivityTaskCommandAttributes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ScheduleActivityTaskCommandAttributes
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ScheduleActivityTaskCommandAttributesMultiError, or nil if none found.
func (m *ScheduleActivityTaskCommandAttributes) ValidateAll() error {
	return m.validate(true)
}

func (m *ScheduleActivityTaskCommandAttributes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ActivityId

	if all {
		switch v := interface{}(m.GetActivityType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ScheduleActivityTaskCommandAttributesValidationError{
					field:  "ActivityType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ScheduleActivityTaskCommandAttributesValidationError{
					field:  "ActivityType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetActivityType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ScheduleActivityTaskCommandAttributesValidationError{
				field:  "ActivityType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTaskQueue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ScheduleActivityTaskCommandAttributesValidationError{
					field:  "TaskQueue",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ScheduleActivityTaskCommandAttributesValidationError{
					field:  "TaskQueue",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTaskQueue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ScheduleActivityTaskCommandAttributesValidationError{
				field:  "TaskQueue",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetHeader()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ScheduleActivityTaskCommandAttributesValidationError{
					field:  "Header",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ScheduleActivityTaskCommandAttributesValidationError{
					field:  "Header",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHeader()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ScheduleActivityTaskCommandAttributesValidationError{
				field:  "Header",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetInput()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ScheduleActivityTaskCommandAttributesValidationError{
					field:  "Input",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ScheduleActivityTaskCommandAttributesValidationError{
					field:  "Input",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInput()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ScheduleActivityTaskCommandAttributesValidationError{
				field:  "Input",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetScheduleToCloseTimeout()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ScheduleActivityTaskCommandAttributesValidationError{
					field:  "ScheduleToCloseTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ScheduleActivityTaskCommandAttributesValidationError{
					field:  "ScheduleToCloseTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetScheduleToCloseTimeout()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ScheduleActivityTaskCommandAttributesValidationError{
				field:  "ScheduleToCloseTimeout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetScheduleToStartTimeout()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ScheduleActivityTaskCommandAttributesValidationError{
					field:  "ScheduleToStartTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ScheduleActivityTaskCommandAttributesValidationError{
					field:  "ScheduleToStartTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetScheduleToStartTimeout()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ScheduleActivityTaskCommandAttributesValidationError{
				field:  "ScheduleToStartTimeout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStartToCloseTimeout()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ScheduleActivityTaskCommandAttributesValidationError{
					field:  "StartToCloseTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ScheduleActivityTaskCommandAttributesValidationError{
					field:  "StartToCloseTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartToCloseTimeout()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ScheduleActivityTaskCommandAttributesValidationError{
				field:  "StartToCloseTimeout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetHeartbeatTimeout()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ScheduleActivityTaskCommandAttributesValidationError{
					field:  "HeartbeatTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ScheduleActivityTaskCommandAttributesValidationError{
					field:  "HeartbeatTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHeartbeatTimeout()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ScheduleActivityTaskCommandAttributesValidationError{
				field:  "HeartbeatTimeout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRetryPolicy()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ScheduleActivityTaskCommandAttributesValidationError{
					field:  "RetryPolicy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ScheduleActivityTaskCommandAttributesValidationError{
					field:  "RetryPolicy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRetryPolicy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ScheduleActivityTaskCommandAttributesValidationError{
				field:  "RetryPolicy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for RequestEagerExecution

	// no validation rules for UseCompatibleVersion

	if len(errors) > 0 {
		return ScheduleActivityTaskCommandAttributesMultiError(errors)
	}

	return nil
}

// ScheduleActivityTaskCommandAttributesMultiError is an error wrapping
// multiple validation errors returned by
// ScheduleActivityTaskCommandAttributes.ValidateAll() if the designated
// constraints aren't met.
type ScheduleActivityTaskCommandAttributesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ScheduleActivityTaskCommandAttributesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ScheduleActivityTaskCommandAttributesMultiError) AllErrors() []error { return m }

// ScheduleActivityTaskCommandAttributesValidationError is the validation error
// returned by ScheduleActivityTaskCommandAttributes.Validate if the
// designated constraints aren't met.
type ScheduleActivityTaskCommandAttributesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScheduleActivityTaskCommandAttributesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScheduleActivityTaskCommandAttributesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScheduleActivityTaskCommandAttributesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScheduleActivityTaskCommandAttributesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScheduleActivityTaskCommandAttributesValidationError) ErrorName() string {
	return "ScheduleActivityTaskCommandAttributesValidationError"
}

// Error satisfies the builtin error interface
func (e ScheduleActivityTaskCommandAttributesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScheduleActivityTaskCommandAttributes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScheduleActivityTaskCommandAttributesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScheduleActivityTaskCommandAttributesValidationError{}

// Validate checks the field values on
// RequestCancelActivityTaskCommandAttributes with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RequestCancelActivityTaskCommandAttributes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// RequestCancelActivityTaskCommandAttributes with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// RequestCancelActivityTaskCommandAttributesMultiError, or nil if none found.
func (m *RequestCancelActivityTaskCommandAttributes) ValidateAll() error {
	return m.validate(true)
}

func (m *RequestCancelActivityTaskCommandAttributes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ScheduledEventId

	if len(errors) > 0 {
		return RequestCancelActivityTaskCommandAttributesMultiError(errors)
	}

	return nil
}

// RequestCancelActivityTaskCommandAttributesMultiError is an error wrapping
// multiple validation errors returned by
// RequestCancelActivityTaskCommandAttributes.ValidateAll() if the designated
// constraints aren't met.
type RequestCancelActivityTaskCommandAttributesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RequestCancelActivityTaskCommandAttributesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RequestCancelActivityTaskCommandAttributesMultiError) AllErrors() []error { return m }

// RequestCancelActivityTaskCommandAttributesValidationError is the validation
// error returned by RequestCancelActivityTaskCommandAttributes.Validate if
// the designated constraints aren't met.
type RequestCancelActivityTaskCommandAttributesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestCancelActivityTaskCommandAttributesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequestCancelActivityTaskCommandAttributesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequestCancelActivityTaskCommandAttributesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequestCancelActivityTaskCommandAttributesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequestCancelActivityTaskCommandAttributesValidationError) ErrorName() string {
	return "RequestCancelActivityTaskCommandAttributesValidationError"
}

// Error satisfies the builtin error interface
func (e RequestCancelActivityTaskCommandAttributesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequestCancelActivityTaskCommandAttributes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestCancelActivityTaskCommandAttributesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestCancelActivityTaskCommandAttributesValidationError{}

// Validate checks the field values on StartTimerCommandAttributes with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StartTimerCommandAttributes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartTimerCommandAttributes with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StartTimerCommandAttributesMultiError, or nil if none found.
func (m *StartTimerCommandAttributes) ValidateAll() error {
	return m.validate(true)
}

func (m *StartTimerCommandAttributes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TimerId

	if all {
		switch v := interface{}(m.GetStartToFireTimeout()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StartTimerCommandAttributesValidationError{
					field:  "StartToFireTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StartTimerCommandAttributesValidationError{
					field:  "StartToFireTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartToFireTimeout()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StartTimerCommandAttributesValidationError{
				field:  "StartToFireTimeout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return StartTimerCommandAttributesMultiError(errors)
	}

	return nil
}

// StartTimerCommandAttributesMultiError is an error wrapping multiple
// validation errors returned by StartTimerCommandAttributes.ValidateAll() if
// the designated constraints aren't met.
type StartTimerCommandAttributesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartTimerCommandAttributesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartTimerCommandAttributesMultiError) AllErrors() []error { return m }

// StartTimerCommandAttributesValidationError is the validation error returned
// by StartTimerCommandAttributes.Validate if the designated constraints
// aren't met.
type StartTimerCommandAttributesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartTimerCommandAttributesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartTimerCommandAttributesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartTimerCommandAttributesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartTimerCommandAttributesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartTimerCommandAttributesValidationError) ErrorName() string {
	return "StartTimerCommandAttributesValidationError"
}

// Error satisfies the builtin error interface
func (e StartTimerCommandAttributesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartTimerCommandAttributes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartTimerCommandAttributesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartTimerCommandAttributesValidationError{}

// Validate checks the field values on
// CompleteWorkflowExecutionCommandAttributes with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CompleteWorkflowExecutionCommandAttributes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CompleteWorkflowExecutionCommandAttributes with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// CompleteWorkflowExecutionCommandAttributesMultiError, or nil if none found.
func (m *CompleteWorkflowExecutionCommandAttributes) ValidateAll() error {
	return m.validate(true)
}

func (m *CompleteWorkflowExecutionCommandAttributes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CompleteWorkflowExecutionCommandAttributesValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CompleteWorkflowExecutionCommandAttributesValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CompleteWorkflowExecutionCommandAttributesValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CompleteWorkflowExecutionCommandAttributesMultiError(errors)
	}

	return nil
}

// CompleteWorkflowExecutionCommandAttributesMultiError is an error wrapping
// multiple validation errors returned by
// CompleteWorkflowExecutionCommandAttributes.ValidateAll() if the designated
// constraints aren't met.
type CompleteWorkflowExecutionCommandAttributesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CompleteWorkflowExecutionCommandAttributesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CompleteWorkflowExecutionCommandAttributesMultiError) AllErrors() []error { return m }

// CompleteWorkflowExecutionCommandAttributesValidationError is the validation
// error returned by CompleteWorkflowExecutionCommandAttributes.Validate if
// the designated constraints aren't met.
type CompleteWorkflowExecutionCommandAttributesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompleteWorkflowExecutionCommandAttributesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompleteWorkflowExecutionCommandAttributesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompleteWorkflowExecutionCommandAttributesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompleteWorkflowExecutionCommandAttributesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompleteWorkflowExecutionCommandAttributesValidationError) ErrorName() string {
	return "CompleteWorkflowExecutionCommandAttributesValidationError"
}

// Error satisfies the builtin error interface
func (e CompleteWorkflowExecutionCommandAttributesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompleteWorkflowExecutionCommandAttributes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompleteWorkflowExecutionCommandAttributesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompleteWorkflowExecutionCommandAttributesValidationError{}

// Validate checks the field values on FailWorkflowExecutionCommandAttributes
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *FailWorkflowExecutionCommandAttributes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// FailWorkflowExecutionCommandAttributes with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// FailWorkflowExecutionCommandAttributesMultiError, or nil if none found.
func (m *FailWorkflowExecutionCommandAttributes) ValidateAll() error {
	return m.validate(true)
}

func (m *FailWorkflowExecutionCommandAttributes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFailure()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FailWorkflowExecutionCommandAttributesValidationError{
					field:  "Failure",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FailWorkflowExecutionCommandAttributesValidationError{
					field:  "Failure",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFailure()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FailWorkflowExecutionCommandAttributesValidationError{
				field:  "Failure",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FailWorkflowExecutionCommandAttributesMultiError(errors)
	}

	return nil
}

// FailWorkflowExecutionCommandAttributesMultiError is an error wrapping
// multiple validation errors returned by
// FailWorkflowExecutionCommandAttributes.ValidateAll() if the designated
// constraints aren't met.
type FailWorkflowExecutionCommandAttributesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FailWorkflowExecutionCommandAttributesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FailWorkflowExecutionCommandAttributesMultiError) AllErrors() []error { return m }

// FailWorkflowExecutionCommandAttributesValidationError is the validation
// error returned by FailWorkflowExecutionCommandAttributes.Validate if the
// designated constraints aren't met.
type FailWorkflowExecutionCommandAttributesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FailWorkflowExecutionCommandAttributesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FailWorkflowExecutionCommandAttributesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FailWorkflowExecutionCommandAttributesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FailWorkflowExecutionCommandAttributesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FailWorkflowExecutionCommandAttributesValidationError) ErrorName() string {
	return "FailWorkflowExecutionCommandAttributesValidationError"
}

// Error satisfies the builtin error interface
func (e FailWorkflowExecutionCommandAttributesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFailWorkflowExecutionCommandAttributes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FailWorkflowExecutionCommandAttributesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FailWorkflowExecutionCommandAttributesValidationError{}

// Validate checks the field values on CancelTimerCommandAttributes with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CancelTimerCommandAttributes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelTimerCommandAttributes with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelTimerCommandAttributesMultiError, or nil if none found.
func (m *CancelTimerCommandAttributes) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelTimerCommandAttributes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TimerId

	if len(errors) > 0 {
		return CancelTimerCommandAttributesMultiError(errors)
	}

	return nil
}

// CancelTimerCommandAttributesMultiError is an error wrapping multiple
// validation errors returned by CancelTimerCommandAttributes.ValidateAll() if
// the designated constraints aren't met.
type CancelTimerCommandAttributesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelTimerCommandAttributesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelTimerCommandAttributesMultiError) AllErrors() []error { return m }

// CancelTimerCommandAttributesValidationError is the validation error returned
// by CancelTimerCommandAttributes.Validate if the designated constraints
// aren't met.
type CancelTimerCommandAttributesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelTimerCommandAttributesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelTimerCommandAttributesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelTimerCommandAttributesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelTimerCommandAttributesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelTimerCommandAttributesValidationError) ErrorName() string {
	return "CancelTimerCommandAttributesValidationError"
}

// Error satisfies the builtin error interface
func (e CancelTimerCommandAttributesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelTimerCommandAttributes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelTimerCommandAttributesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelTimerCommandAttributesValidationError{}

// Validate checks the field values on CancelWorkflowExecutionCommandAttributes
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CancelWorkflowExecutionCommandAttributes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CancelWorkflowExecutionCommandAttributes with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// CancelWorkflowExecutionCommandAttributesMultiError, or nil if none found.
func (m *CancelWorkflowExecutionCommandAttributes) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelWorkflowExecutionCommandAttributes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDetails()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CancelWorkflowExecutionCommandAttributesValidationError{
					field:  "Details",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CancelWorkflowExecutionCommandAttributesValidationError{
					field:  "Details",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CancelWorkflowExecutionCommandAttributesValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CancelWorkflowExecutionCommandAttributesMultiError(errors)
	}

	return nil
}

// CancelWorkflowExecutionCommandAttributesMultiError is an error wrapping
// multiple validation errors returned by
// CancelWorkflowExecutionCommandAttributes.ValidateAll() if the designated
// constraints aren't met.
type CancelWorkflowExecutionCommandAttributesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelWorkflowExecutionCommandAttributesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelWorkflowExecutionCommandAttributesMultiError) AllErrors() []error { return m }

// CancelWorkflowExecutionCommandAttributesValidationError is the validation
// error returned by CancelWorkflowExecutionCommandAttributes.Validate if the
// designated constraints aren't met.
type CancelWorkflowExecutionCommandAttributesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelWorkflowExecutionCommandAttributesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelWorkflowExecutionCommandAttributesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelWorkflowExecutionCommandAttributesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelWorkflowExecutionCommandAttributesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelWorkflowExecutionCommandAttributesValidationError) ErrorName() string {
	return "CancelWorkflowExecutionCommandAttributesValidationError"
}

// Error satisfies the builtin error interface
func (e CancelWorkflowExecutionCommandAttributesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelWorkflowExecutionCommandAttributes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelWorkflowExecutionCommandAttributesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelWorkflowExecutionCommandAttributesValidationError{}

// Validate checks the field values on
// RequestCancelExternalWorkflowExecutionCommandAttributes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RequestCancelExternalWorkflowExecutionCommandAttributes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// RequestCancelExternalWorkflowExecutionCommandAttributes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RequestCancelExternalWorkflowExecutionCommandAttributesMultiError, or nil
// if none found.
func (m *RequestCancelExternalWorkflowExecutionCommandAttributes) ValidateAll() error {
	return m.validate(true)
}

func (m *RequestCancelExternalWorkflowExecutionCommandAttributes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Namespace

	// no validation rules for WorkflowId

	// no validation rules for RunId

	// no validation rules for Control

	// no validation rules for ChildWorkflowOnly

	// no validation rules for Reason

	if len(errors) > 0 {
		return RequestCancelExternalWorkflowExecutionCommandAttributesMultiError(errors)
	}

	return nil
}

// RequestCancelExternalWorkflowExecutionCommandAttributesMultiError is an
// error wrapping multiple validation errors returned by
// RequestCancelExternalWorkflowExecutionCommandAttributes.ValidateAll() if
// the designated constraints aren't met.
type RequestCancelExternalWorkflowExecutionCommandAttributesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RequestCancelExternalWorkflowExecutionCommandAttributesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RequestCancelExternalWorkflowExecutionCommandAttributesMultiError) AllErrors() []error {
	return m
}

// RequestCancelExternalWorkflowExecutionCommandAttributesValidationError is
// the validation error returned by
// RequestCancelExternalWorkflowExecutionCommandAttributes.Validate if the
// designated constraints aren't met.
type RequestCancelExternalWorkflowExecutionCommandAttributesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestCancelExternalWorkflowExecutionCommandAttributesValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e RequestCancelExternalWorkflowExecutionCommandAttributesValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e RequestCancelExternalWorkflowExecutionCommandAttributesValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e RequestCancelExternalWorkflowExecutionCommandAttributesValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e RequestCancelExternalWorkflowExecutionCommandAttributesValidationError) ErrorName() string {
	return "RequestCancelExternalWorkflowExecutionCommandAttributesValidationError"
}

// Error satisfies the builtin error interface
func (e RequestCancelExternalWorkflowExecutionCommandAttributesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequestCancelExternalWorkflowExecutionCommandAttributes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestCancelExternalWorkflowExecutionCommandAttributesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestCancelExternalWorkflowExecutionCommandAttributesValidationError{}

// Validate checks the field values on
// SignalExternalWorkflowExecutionCommandAttributes with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SignalExternalWorkflowExecutionCommandAttributes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SignalExternalWorkflowExecutionCommandAttributes with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// SignalExternalWorkflowExecutionCommandAttributesMultiError, or nil if none found.
func (m *SignalExternalWorkflowExecutionCommandAttributes) ValidateAll() error {
	return m.validate(true)
}

func (m *SignalExternalWorkflowExecutionCommandAttributes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Namespace

	if all {
		switch v := interface{}(m.GetExecution()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SignalExternalWorkflowExecutionCommandAttributesValidationError{
					field:  "Execution",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SignalExternalWorkflowExecutionCommandAttributesValidationError{
					field:  "Execution",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExecution()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SignalExternalWorkflowExecutionCommandAttributesValidationError{
				field:  "Execution",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for SignalName

	if all {
		switch v := interface{}(m.GetInput()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SignalExternalWorkflowExecutionCommandAttributesValidationError{
					field:  "Input",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SignalExternalWorkflowExecutionCommandAttributesValidationError{
					field:  "Input",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInput()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SignalExternalWorkflowExecutionCommandAttributesValidationError{
				field:  "Input",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Control

	// no validation rules for ChildWorkflowOnly

	if all {
		switch v := interface{}(m.GetHeader()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SignalExternalWorkflowExecutionCommandAttributesValidationError{
					field:  "Header",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SignalExternalWorkflowExecutionCommandAttributesValidationError{
					field:  "Header",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHeader()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SignalExternalWorkflowExecutionCommandAttributesValidationError{
				field:  "Header",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SignalExternalWorkflowExecutionCommandAttributesMultiError(errors)
	}

	return nil
}

// SignalExternalWorkflowExecutionCommandAttributesMultiError is an error
// wrapping multiple validation errors returned by
// SignalExternalWorkflowExecutionCommandAttributes.ValidateAll() if the
// designated constraints aren't met.
type SignalExternalWorkflowExecutionCommandAttributesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SignalExternalWorkflowExecutionCommandAttributesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SignalExternalWorkflowExecutionCommandAttributesMultiError) AllErrors() []error { return m }

// SignalExternalWorkflowExecutionCommandAttributesValidationError is the
// validation error returned by
// SignalExternalWorkflowExecutionCommandAttributes.Validate if the designated
// constraints aren't met.
type SignalExternalWorkflowExecutionCommandAttributesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SignalExternalWorkflowExecutionCommandAttributesValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e SignalExternalWorkflowExecutionCommandAttributesValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e SignalExternalWorkflowExecutionCommandAttributesValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e SignalExternalWorkflowExecutionCommandAttributesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SignalExternalWorkflowExecutionCommandAttributesValidationError) ErrorName() string {
	return "SignalExternalWorkflowExecutionCommandAttributesValidationError"
}

// Error satisfies the builtin error interface
func (e SignalExternalWorkflowExecutionCommandAttributesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSignalExternalWorkflowExecutionCommandAttributes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SignalExternalWorkflowExecutionCommandAttributesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SignalExternalWorkflowExecutionCommandAttributesValidationError{}

// Validate checks the field values on
// UpsertWorkflowSearchAttributesCommandAttributes with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpsertWorkflowSearchAttributesCommandAttributes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// UpsertWorkflowSearchAttributesCommandAttributes with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// UpsertWorkflowSearchAttributesCommandAttributesMultiError, or nil if none found.
func (m *UpsertWorkflowSearchAttributesCommandAttributes) ValidateAll() error {
	return m.validate(true)
}

func (m *UpsertWorkflowSearchAttributesCommandAttributes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSearchAttributes()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpsertWorkflowSearchAttributesCommandAttributesValidationError{
					field:  "SearchAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpsertWorkflowSearchAttributesCommandAttributesValidationError{
					field:  "SearchAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSearchAttributes()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpsertWorkflowSearchAttributesCommandAttributesValidationError{
				field:  "SearchAttributes",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpsertWorkflowSearchAttributesCommandAttributesMultiError(errors)
	}

	return nil
}

// UpsertWorkflowSearchAttributesCommandAttributesMultiError is an error
// wrapping multiple validation errors returned by
// UpsertWorkflowSearchAttributesCommandAttributes.ValidateAll() if the
// designated constraints aren't met.
type UpsertWorkflowSearchAttributesCommandAttributesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpsertWorkflowSearchAttributesCommandAttributesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpsertWorkflowSearchAttributesCommandAttributesMultiError) AllErrors() []error { return m }

// UpsertWorkflowSearchAttributesCommandAttributesValidationError is the
// validation error returned by
// UpsertWorkflowSearchAttributesCommandAttributes.Validate if the designated
// constraints aren't met.
type UpsertWorkflowSearchAttributesCommandAttributesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertWorkflowSearchAttributesCommandAttributesValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e UpsertWorkflowSearchAttributesCommandAttributesValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e UpsertWorkflowSearchAttributesCommandAttributesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertWorkflowSearchAttributesCommandAttributesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertWorkflowSearchAttributesCommandAttributesValidationError) ErrorName() string {
	return "UpsertWorkflowSearchAttributesCommandAttributesValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertWorkflowSearchAttributesCommandAttributesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertWorkflowSearchAttributesCommandAttributes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertWorkflowSearchAttributesCommandAttributesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertWorkflowSearchAttributesCommandAttributesValidationError{}

// Validate checks the field values on
// ModifyWorkflowPropertiesCommandAttributes with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ModifyWorkflowPropertiesCommandAttributes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ModifyWorkflowPropertiesCommandAttributes with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ModifyWorkflowPropertiesCommandAttributesMultiError, or nil if none found.
func (m *ModifyWorkflowPropertiesCommandAttributes) ValidateAll() error {
	return m.validate(true)
}

func (m *ModifyWorkflowPropertiesCommandAttributes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUpsertedMemo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ModifyWorkflowPropertiesCommandAttributesValidationError{
					field:  "UpsertedMemo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ModifyWorkflowPropertiesCommandAttributesValidationError{
					field:  "UpsertedMemo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpsertedMemo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ModifyWorkflowPropertiesCommandAttributesValidationError{
				field:  "UpsertedMemo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ModifyWorkflowPropertiesCommandAttributesMultiError(errors)
	}

	return nil
}

// ModifyWorkflowPropertiesCommandAttributesMultiError is an error wrapping
// multiple validation errors returned by
// ModifyWorkflowPropertiesCommandAttributes.ValidateAll() if the designated
// constraints aren't met.
type ModifyWorkflowPropertiesCommandAttributesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ModifyWorkflowPropertiesCommandAttributesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ModifyWorkflowPropertiesCommandAttributesMultiError) AllErrors() []error { return m }

// ModifyWorkflowPropertiesCommandAttributesValidationError is the validation
// error returned by ModifyWorkflowPropertiesCommandAttributes.Validate if the
// designated constraints aren't met.
type ModifyWorkflowPropertiesCommandAttributesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModifyWorkflowPropertiesCommandAttributesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModifyWorkflowPropertiesCommandAttributesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModifyWorkflowPropertiesCommandAttributesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModifyWorkflowPropertiesCommandAttributesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModifyWorkflowPropertiesCommandAttributesValidationError) ErrorName() string {
	return "ModifyWorkflowPropertiesCommandAttributesValidationError"
}

// Error satisfies the builtin error interface
func (e ModifyWorkflowPropertiesCommandAttributesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModifyWorkflowPropertiesCommandAttributes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModifyWorkflowPropertiesCommandAttributesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModifyWorkflowPropertiesCommandAttributesValidationError{}

// Validate checks the field values on RecordMarkerCommandAttributes with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RecordMarkerCommandAttributes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RecordMarkerCommandAttributes with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RecordMarkerCommandAttributesMultiError, or nil if none found.
func (m *RecordMarkerCommandAttributes) ValidateAll() error {
	return m.validate(true)
}

func (m *RecordMarkerCommandAttributes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MarkerName

	{
		sorted_keys := make([]string, len(m.GetDetails()))
		i := 0
		for key := range m.GetDetails() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetDetails()[key]
			_ = val

			// no validation rules for Details[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, RecordMarkerCommandAttributesValidationError{
							field:  fmt.Sprintf("Details[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, RecordMarkerCommandAttributesValidationError{
							field:  fmt.Sprintf("Details[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return RecordMarkerCommandAttributesValidationError{
						field:  fmt.Sprintf("Details[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if all {
		switch v := interface{}(m.GetHeader()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RecordMarkerCommandAttributesValidationError{
					field:  "Header",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RecordMarkerCommandAttributesValidationError{
					field:  "Header",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHeader()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RecordMarkerCommandAttributesValidationError{
				field:  "Header",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetFailure()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RecordMarkerCommandAttributesValidationError{
					field:  "Failure",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RecordMarkerCommandAttributesValidationError{
					field:  "Failure",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFailure()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RecordMarkerCommandAttributesValidationError{
				field:  "Failure",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RecordMarkerCommandAttributesMultiError(errors)
	}

	return nil
}

// RecordMarkerCommandAttributesMultiError is an error wrapping multiple
// validation errors returned by RecordMarkerCommandAttributes.ValidateAll()
// if the designated constraints aren't met.
type RecordMarkerCommandAttributesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RecordMarkerCommandAttributesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RecordMarkerCommandAttributesMultiError) AllErrors() []error { return m }

// RecordMarkerCommandAttributesValidationError is the validation error
// returned by RecordMarkerCommandAttributes.Validate if the designated
// constraints aren't met.
type RecordMarkerCommandAttributesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RecordMarkerCommandAttributesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RecordMarkerCommandAttributesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RecordMarkerCommandAttributesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RecordMarkerCommandAttributesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RecordMarkerCommandAttributesValidationError) ErrorName() string {
	return "RecordMarkerCommandAttributesValidationError"
}

// Error satisfies the builtin error interface
func (e RecordMarkerCommandAttributesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRecordMarkerCommandAttributes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RecordMarkerCommandAttributesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RecordMarkerCommandAttributesValidationError{}

// Validate checks the field values on
// ContinueAsNewWorkflowExecutionCommandAttributes with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ContinueAsNewWorkflowExecutionCommandAttributes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ContinueAsNewWorkflowExecutionCommandAttributes with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// ContinueAsNewWorkflowExecutionCommandAttributesMultiError, or nil if none found.
func (m *ContinueAsNewWorkflowExecutionCommandAttributes) ValidateAll() error {
	return m.validate(true)
}

func (m *ContinueAsNewWorkflowExecutionCommandAttributes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetWorkflowType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ContinueAsNewWorkflowExecutionCommandAttributesValidationError{
					field:  "WorkflowType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ContinueAsNewWorkflowExecutionCommandAttributesValidationError{
					field:  "WorkflowType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkflowType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ContinueAsNewWorkflowExecutionCommandAttributesValidationError{
				field:  "WorkflowType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTaskQueue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ContinueAsNewWorkflowExecutionCommandAttributesValidationError{
					field:  "TaskQueue",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ContinueAsNewWorkflowExecutionCommandAttributesValidationError{
					field:  "TaskQueue",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTaskQueue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ContinueAsNewWorkflowExecutionCommandAttributesValidationError{
				field:  "TaskQueue",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetInput()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ContinueAsNewWorkflowExecutionCommandAttributesValidationError{
					field:  "Input",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ContinueAsNewWorkflowExecutionCommandAttributesValidationError{
					field:  "Input",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInput()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ContinueAsNewWorkflowExecutionCommandAttributesValidationError{
				field:  "Input",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetWorkflowRunTimeout()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ContinueAsNewWorkflowExecutionCommandAttributesValidationError{
					field:  "WorkflowRunTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ContinueAsNewWorkflowExecutionCommandAttributesValidationError{
					field:  "WorkflowRunTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkflowRunTimeout()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ContinueAsNewWorkflowExecutionCommandAttributesValidationError{
				field:  "WorkflowRunTimeout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetWorkflowTaskTimeout()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ContinueAsNewWorkflowExecutionCommandAttributesValidationError{
					field:  "WorkflowTaskTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ContinueAsNewWorkflowExecutionCommandAttributesValidationError{
					field:  "WorkflowTaskTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkflowTaskTimeout()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ContinueAsNewWorkflowExecutionCommandAttributesValidationError{
				field:  "WorkflowTaskTimeout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetBackoffStartInterval()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ContinueAsNewWorkflowExecutionCommandAttributesValidationError{
					field:  "BackoffStartInterval",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ContinueAsNewWorkflowExecutionCommandAttributesValidationError{
					field:  "BackoffStartInterval",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBackoffStartInterval()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ContinueAsNewWorkflowExecutionCommandAttributesValidationError{
				field:  "BackoffStartInterval",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRetryPolicy()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ContinueAsNewWorkflowExecutionCommandAttributesValidationError{
					field:  "RetryPolicy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ContinueAsNewWorkflowExecutionCommandAttributesValidationError{
					field:  "RetryPolicy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRetryPolicy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ContinueAsNewWorkflowExecutionCommandAttributesValidationError{
				field:  "RetryPolicy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Initiator

	if all {
		switch v := interface{}(m.GetFailure()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ContinueAsNewWorkflowExecutionCommandAttributesValidationError{
					field:  "Failure",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ContinueAsNewWorkflowExecutionCommandAttributesValidationError{
					field:  "Failure",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFailure()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ContinueAsNewWorkflowExecutionCommandAttributesValidationError{
				field:  "Failure",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetLastCompletionResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ContinueAsNewWorkflowExecutionCommandAttributesValidationError{
					field:  "LastCompletionResult",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ContinueAsNewWorkflowExecutionCommandAttributesValidationError{
					field:  "LastCompletionResult",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLastCompletionResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ContinueAsNewWorkflowExecutionCommandAttributesValidationError{
				field:  "LastCompletionResult",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CronSchedule

	if all {
		switch v := interface{}(m.GetHeader()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ContinueAsNewWorkflowExecutionCommandAttributesValidationError{
					field:  "Header",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ContinueAsNewWorkflowExecutionCommandAttributesValidationError{
					field:  "Header",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHeader()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ContinueAsNewWorkflowExecutionCommandAttributesValidationError{
				field:  "Header",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMemo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ContinueAsNewWorkflowExecutionCommandAttributesValidationError{
					field:  "Memo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ContinueAsNewWorkflowExecutionCommandAttributesValidationError{
					field:  "Memo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMemo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ContinueAsNewWorkflowExecutionCommandAttributesValidationError{
				field:  "Memo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSearchAttributes()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ContinueAsNewWorkflowExecutionCommandAttributesValidationError{
					field:  "SearchAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ContinueAsNewWorkflowExecutionCommandAttributesValidationError{
					field:  "SearchAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSearchAttributes()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ContinueAsNewWorkflowExecutionCommandAttributesValidationError{
				field:  "SearchAttributes",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for UseCompatibleVersion

	if len(errors) > 0 {
		return ContinueAsNewWorkflowExecutionCommandAttributesMultiError(errors)
	}

	return nil
}

// ContinueAsNewWorkflowExecutionCommandAttributesMultiError is an error
// wrapping multiple validation errors returned by
// ContinueAsNewWorkflowExecutionCommandAttributes.ValidateAll() if the
// designated constraints aren't met.
type ContinueAsNewWorkflowExecutionCommandAttributesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContinueAsNewWorkflowExecutionCommandAttributesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContinueAsNewWorkflowExecutionCommandAttributesMultiError) AllErrors() []error { return m }

// ContinueAsNewWorkflowExecutionCommandAttributesValidationError is the
// validation error returned by
// ContinueAsNewWorkflowExecutionCommandAttributes.Validate if the designated
// constraints aren't met.
type ContinueAsNewWorkflowExecutionCommandAttributesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContinueAsNewWorkflowExecutionCommandAttributesValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e ContinueAsNewWorkflowExecutionCommandAttributesValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ContinueAsNewWorkflowExecutionCommandAttributesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContinueAsNewWorkflowExecutionCommandAttributesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContinueAsNewWorkflowExecutionCommandAttributesValidationError) ErrorName() string {
	return "ContinueAsNewWorkflowExecutionCommandAttributesValidationError"
}

// Error satisfies the builtin error interface
func (e ContinueAsNewWorkflowExecutionCommandAttributesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContinueAsNewWorkflowExecutionCommandAttributes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContinueAsNewWorkflowExecutionCommandAttributesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContinueAsNewWorkflowExecutionCommandAttributesValidationError{}

// Validate checks the field values on
// StartChildWorkflowExecutionCommandAttributes with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StartChildWorkflowExecutionCommandAttributes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// StartChildWorkflowExecutionCommandAttributes with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// StartChildWorkflowExecutionCommandAttributesMultiError, or nil if none found.
func (m *StartChildWorkflowExecutionCommandAttributes) ValidateAll() error {
	return m.validate(true)
}

func (m *StartChildWorkflowExecutionCommandAttributes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Namespace

	// no validation rules for WorkflowId

	if all {
		switch v := interface{}(m.GetWorkflowType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StartChildWorkflowExecutionCommandAttributesValidationError{
					field:  "WorkflowType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StartChildWorkflowExecutionCommandAttributesValidationError{
					field:  "WorkflowType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkflowType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StartChildWorkflowExecutionCommandAttributesValidationError{
				field:  "WorkflowType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTaskQueue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StartChildWorkflowExecutionCommandAttributesValidationError{
					field:  "TaskQueue",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StartChildWorkflowExecutionCommandAttributesValidationError{
					field:  "TaskQueue",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTaskQueue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StartChildWorkflowExecutionCommandAttributesValidationError{
				field:  "TaskQueue",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetInput()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StartChildWorkflowExecutionCommandAttributesValidationError{
					field:  "Input",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StartChildWorkflowExecutionCommandAttributesValidationError{
					field:  "Input",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInput()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StartChildWorkflowExecutionCommandAttributesValidationError{
				field:  "Input",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetWorkflowExecutionTimeout()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StartChildWorkflowExecutionCommandAttributesValidationError{
					field:  "WorkflowExecutionTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StartChildWorkflowExecutionCommandAttributesValidationError{
					field:  "WorkflowExecutionTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkflowExecutionTimeout()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StartChildWorkflowExecutionCommandAttributesValidationError{
				field:  "WorkflowExecutionTimeout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetWorkflowRunTimeout()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StartChildWorkflowExecutionCommandAttributesValidationError{
					field:  "WorkflowRunTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StartChildWorkflowExecutionCommandAttributesValidationError{
					field:  "WorkflowRunTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkflowRunTimeout()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StartChildWorkflowExecutionCommandAttributesValidationError{
				field:  "WorkflowRunTimeout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetWorkflowTaskTimeout()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StartChildWorkflowExecutionCommandAttributesValidationError{
					field:  "WorkflowTaskTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StartChildWorkflowExecutionCommandAttributesValidationError{
					field:  "WorkflowTaskTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkflowTaskTimeout()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StartChildWorkflowExecutionCommandAttributesValidationError{
				field:  "WorkflowTaskTimeout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ParentClosePolicy

	// no validation rules for Control

	// no validation rules for WorkflowIdReusePolicy

	if all {
		switch v := interface{}(m.GetRetryPolicy()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StartChildWorkflowExecutionCommandAttributesValidationError{
					field:  "RetryPolicy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StartChildWorkflowExecutionCommandAttributesValidationError{
					field:  "RetryPolicy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRetryPolicy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StartChildWorkflowExecutionCommandAttributesValidationError{
				field:  "RetryPolicy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CronSchedule

	if all {
		switch v := interface{}(m.GetHeader()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StartChildWorkflowExecutionCommandAttributesValidationError{
					field:  "Header",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StartChildWorkflowExecutionCommandAttributesValidationError{
					field:  "Header",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHeader()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StartChildWorkflowExecutionCommandAttributesValidationError{
				field:  "Header",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMemo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StartChildWorkflowExecutionCommandAttributesValidationError{
					field:  "Memo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StartChildWorkflowExecutionCommandAttributesValidationError{
					field:  "Memo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMemo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StartChildWorkflowExecutionCommandAttributesValidationError{
				field:  "Memo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSearchAttributes()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StartChildWorkflowExecutionCommandAttributesValidationError{
					field:  "SearchAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StartChildWorkflowExecutionCommandAttributesValidationError{
					field:  "SearchAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSearchAttributes()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StartChildWorkflowExecutionCommandAttributesValidationError{
				field:  "SearchAttributes",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for UseCompatibleVersion

	if len(errors) > 0 {
		return StartChildWorkflowExecutionCommandAttributesMultiError(errors)
	}

	return nil
}

// StartChildWorkflowExecutionCommandAttributesMultiError is an error wrapping
// multiple validation errors returned by
// StartChildWorkflowExecutionCommandAttributes.ValidateAll() if the
// designated constraints aren't met.
type StartChildWorkflowExecutionCommandAttributesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartChildWorkflowExecutionCommandAttributesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartChildWorkflowExecutionCommandAttributesMultiError) AllErrors() []error { return m }

// StartChildWorkflowExecutionCommandAttributesValidationError is the
// validation error returned by
// StartChildWorkflowExecutionCommandAttributes.Validate if the designated
// constraints aren't met.
type StartChildWorkflowExecutionCommandAttributesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartChildWorkflowExecutionCommandAttributesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartChildWorkflowExecutionCommandAttributesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartChildWorkflowExecutionCommandAttributesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartChildWorkflowExecutionCommandAttributesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartChildWorkflowExecutionCommandAttributesValidationError) ErrorName() string {
	return "StartChildWorkflowExecutionCommandAttributesValidationError"
}

// Error satisfies the builtin error interface
func (e StartChildWorkflowExecutionCommandAttributesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartChildWorkflowExecutionCommandAttributes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartChildWorkflowExecutionCommandAttributesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartChildWorkflowExecutionCommandAttributesValidationError{}

// Validate checks the field values on ProtocolMessageCommandAttributes with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ProtocolMessageCommandAttributes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProtocolMessageCommandAttributes with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ProtocolMessageCommandAttributesMultiError, or nil if none found.
func (m *ProtocolMessageCommandAttributes) ValidateAll() error {
	return m.validate(true)
}

func (m *ProtocolMessageCommandAttributes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MessageId

	if len(errors) > 0 {
		return ProtocolMessageCommandAttributesMultiError(errors)
	}

	return nil
}

// ProtocolMessageCommandAttributesMultiError is an error wrapping multiple
// validation errors returned by
// ProtocolMessageCommandAttributes.ValidateAll() if the designated
// constraints aren't met.
type ProtocolMessageCommandAttributesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProtocolMessageCommandAttributesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProtocolMessageCommandAttributesMultiError) AllErrors() []error { return m }

// ProtocolMessageCommandAttributesValidationError is the validation error
// returned by ProtocolMessageCommandAttributes.Validate if the designated
// constraints aren't met.
type ProtocolMessageCommandAttributesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProtocolMessageCommandAttributesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProtocolMessageCommandAttributesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProtocolMessageCommandAttributesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProtocolMessageCommandAttributesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProtocolMessageCommandAttributesValidationError) ErrorName() string {
	return "ProtocolMessageCommandAttributesValidationError"
}

// Error satisfies the builtin error interface
func (e ProtocolMessageCommandAttributesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProtocolMessageCommandAttributes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProtocolMessageCommandAttributesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProtocolMessageCommandAttributesValidationError{}

// Validate checks the field values on Command with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Command) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Command with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in CommandMultiError, or nil if none found.
func (m *Command) ValidateAll() error {
	return m.validate(true)
}

func (m *Command) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CommandType

	switch v := m.Attributes.(type) {
	case *Command_ScheduleActivityTaskCommandAttributes:
		if v == nil {
			err := CommandValidationError{
				field:  "Attributes",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetScheduleActivityTaskCommandAttributes()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CommandValidationError{
						field:  "ScheduleActivityTaskCommandAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CommandValidationError{
						field:  "ScheduleActivityTaskCommandAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetScheduleActivityTaskCommandAttributes()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CommandValidationError{
					field:  "ScheduleActivityTaskCommandAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Command_StartTimerCommandAttributes:
		if v == nil {
			err := CommandValidationError{
				field:  "Attributes",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetStartTimerCommandAttributes()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CommandValidationError{
						field:  "StartTimerCommandAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CommandValidationError{
						field:  "StartTimerCommandAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetStartTimerCommandAttributes()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CommandValidationError{
					field:  "StartTimerCommandAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Command_CompleteWorkflowExecutionCommandAttributes:
		if v == nil {
			err := CommandValidationError{
				field:  "Attributes",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetCompleteWorkflowExecutionCommandAttributes()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CommandValidationError{
						field:  "CompleteWorkflowExecutionCommandAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CommandValidationError{
						field:  "CompleteWorkflowExecutionCommandAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCompleteWorkflowExecutionCommandAttributes()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CommandValidationError{
					field:  "CompleteWorkflowExecutionCommandAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Command_FailWorkflowExecutionCommandAttributes:
		if v == nil {
			err := CommandValidationError{
				field:  "Attributes",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetFailWorkflowExecutionCommandAttributes()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CommandValidationError{
						field:  "FailWorkflowExecutionCommandAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CommandValidationError{
						field:  "FailWorkflowExecutionCommandAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetFailWorkflowExecutionCommandAttributes()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CommandValidationError{
					field:  "FailWorkflowExecutionCommandAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Command_RequestCancelActivityTaskCommandAttributes:
		if v == nil {
			err := CommandValidationError{
				field:  "Attributes",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetRequestCancelActivityTaskCommandAttributes()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CommandValidationError{
						field:  "RequestCancelActivityTaskCommandAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CommandValidationError{
						field:  "RequestCancelActivityTaskCommandAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRequestCancelActivityTaskCommandAttributes()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CommandValidationError{
					field:  "RequestCancelActivityTaskCommandAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Command_CancelTimerCommandAttributes:
		if v == nil {
			err := CommandValidationError{
				field:  "Attributes",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetCancelTimerCommandAttributes()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CommandValidationError{
						field:  "CancelTimerCommandAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CommandValidationError{
						field:  "CancelTimerCommandAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCancelTimerCommandAttributes()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CommandValidationError{
					field:  "CancelTimerCommandAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Command_CancelWorkflowExecutionCommandAttributes:
		if v == nil {
			err := CommandValidationError{
				field:  "Attributes",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetCancelWorkflowExecutionCommandAttributes()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CommandValidationError{
						field:  "CancelWorkflowExecutionCommandAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CommandValidationError{
						field:  "CancelWorkflowExecutionCommandAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCancelWorkflowExecutionCommandAttributes()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CommandValidationError{
					field:  "CancelWorkflowExecutionCommandAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Command_RequestCancelExternalWorkflowExecutionCommandAttributes:
		if v == nil {
			err := CommandValidationError{
				field:  "Attributes",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetRequestCancelExternalWorkflowExecutionCommandAttributes()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CommandValidationError{
						field:  "RequestCancelExternalWorkflowExecutionCommandAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CommandValidationError{
						field:  "RequestCancelExternalWorkflowExecutionCommandAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRequestCancelExternalWorkflowExecutionCommandAttributes()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CommandValidationError{
					field:  "RequestCancelExternalWorkflowExecutionCommandAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Command_RecordMarkerCommandAttributes:
		if v == nil {
			err := CommandValidationError{
				field:  "Attributes",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetRecordMarkerCommandAttributes()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CommandValidationError{
						field:  "RecordMarkerCommandAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CommandValidationError{
						field:  "RecordMarkerCommandAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRecordMarkerCommandAttributes()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CommandValidationError{
					field:  "RecordMarkerCommandAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Command_ContinueAsNewWorkflowExecutionCommandAttributes:
		if v == nil {
			err := CommandValidationError{
				field:  "Attributes",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetContinueAsNewWorkflowExecutionCommandAttributes()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CommandValidationError{
						field:  "ContinueAsNewWorkflowExecutionCommandAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CommandValidationError{
						field:  "ContinueAsNewWorkflowExecutionCommandAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetContinueAsNewWorkflowExecutionCommandAttributes()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CommandValidationError{
					field:  "ContinueAsNewWorkflowExecutionCommandAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Command_StartChildWorkflowExecutionCommandAttributes:
		if v == nil {
			err := CommandValidationError{
				field:  "Attributes",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetStartChildWorkflowExecutionCommandAttributes()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CommandValidationError{
						field:  "StartChildWorkflowExecutionCommandAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CommandValidationError{
						field:  "StartChildWorkflowExecutionCommandAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetStartChildWorkflowExecutionCommandAttributes()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CommandValidationError{
					field:  "StartChildWorkflowExecutionCommandAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Command_SignalExternalWorkflowExecutionCommandAttributes:
		if v == nil {
			err := CommandValidationError{
				field:  "Attributes",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetSignalExternalWorkflowExecutionCommandAttributes()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CommandValidationError{
						field:  "SignalExternalWorkflowExecutionCommandAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CommandValidationError{
						field:  "SignalExternalWorkflowExecutionCommandAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSignalExternalWorkflowExecutionCommandAttributes()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CommandValidationError{
					field:  "SignalExternalWorkflowExecutionCommandAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Command_UpsertWorkflowSearchAttributesCommandAttributes:
		if v == nil {
			err := CommandValidationError{
				field:  "Attributes",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetUpsertWorkflowSearchAttributesCommandAttributes()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CommandValidationError{
						field:  "UpsertWorkflowSearchAttributesCommandAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CommandValidationError{
						field:  "UpsertWorkflowSearchAttributesCommandAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUpsertWorkflowSearchAttributesCommandAttributes()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CommandValidationError{
					field:  "UpsertWorkflowSearchAttributesCommandAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Command_ProtocolMessageCommandAttributes:
		if v == nil {
			err := CommandValidationError{
				field:  "Attributes",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetProtocolMessageCommandAttributes()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CommandValidationError{
						field:  "ProtocolMessageCommandAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CommandValidationError{
						field:  "ProtocolMessageCommandAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetProtocolMessageCommandAttributes()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CommandValidationError{
					field:  "ProtocolMessageCommandAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Command_ModifyWorkflowPropertiesCommandAttributes:
		if v == nil {
			err := CommandValidationError{
				field:  "Attributes",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetModifyWorkflowPropertiesCommandAttributes()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CommandValidationError{
						field:  "ModifyWorkflowPropertiesCommandAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CommandValidationError{
						field:  "ModifyWorkflowPropertiesCommandAttributes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetModifyWorkflowPropertiesCommandAttributes()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CommandValidationError{
					field:  "ModifyWorkflowPropertiesCommandAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return CommandMultiError(errors)
	}

	return nil
}

// CommandMultiError is an error wrapping multiple validation errors returned
// by Command.ValidateAll() if the designated constraints aren't met.
type CommandMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommandMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommandMultiError) AllErrors() []error { return m }

// CommandValidationError is the validation error returned by Command.Validate
// if the designated constraints aren't met.
type CommandValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommandValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommandValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommandValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommandValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommandValidationError) ErrorName() string { return "CommandValidationError" }

// Error satisfies the builtin error interface
func (e CommandValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommand.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommandValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommandValidationError{}
