// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: necode/command/message.proto

package command

import (
	common "github.com/rskvp/necode/proto/gen/necode/common"
	enums "github.com/rskvp/necode/proto/gen/necode/enums"
	failure "github.com/rskvp/necode/proto/gen/necode/failure"
	_ "github.com/rskvp/necode/proto/gen/necode/gogoproto"
	taskqueue "github.com/rskvp/necode/proto/gen/necode/taskqueue"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ScheduleActivityTaskCommandAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId   string               `protobuf:"bytes,1,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
	ActivityType *common.ActivityType `protobuf:"bytes,2,opt,name=activity_type,json=activityType,proto3" json:"activity_type,omitempty"`
	TaskQueue    *taskqueue.TaskQueue `protobuf:"bytes,4,opt,name=task_queue,json=taskQueue,proto3" json:"task_queue,omitempty"`
	Header       *common.Header       `protobuf:"bytes,5,opt,name=header,proto3" json:"header,omitempty"`
	Input        *common.Payloads     `protobuf:"bytes,6,opt,name=input,proto3" json:"input,omitempty"`
	// Indicates how long the caller is willing to wait for activity completion. The "schedule" time
	// is when the activity is initially scheduled, not when the most recent retry is scheduled.
	// Limits how long retries will be attempted. Either this or `start_to_close_timeout` must be
	// specified. When not specified, defaults to the workflow execution timeout.
	//
	// (-- api-linter: core::0140::prepositions=disabled
	//
	//	aip.dev/not-precedent: "to" is used to indicate interval. --)
	ScheduleToCloseTimeout *durationpb.Duration `protobuf:"bytes,7,opt,name=schedule_to_close_timeout,json=scheduleToCloseTimeout,proto3" json:"schedule_to_close_timeout,omitempty"`
	// Limits the time an activity task can stay in a task queue before a worker picks it up. The
	// "schedule" time is when the most recent retry is scheduled. This timeout should usually not
	// be set: it's useful in specific scenarios like worker-specific task queues. This timeout is
	// always non retryable, as all a retry would achieve is to put it back into the same queue.
	// Defaults to `schedule_to_close_timeout` or workflow execution timeout if that is not
	// specified. More info:
	// https://docs.temporal.io/docs/content/what-is-a-schedule-to-start-timeout/
	//
	// (-- api-linter: core::0140::prepositions=disabled
	//
	//	aip.dev/not-precedent: "to" is used to indicate interval. --)
	ScheduleToStartTimeout *durationpb.Duration `protobuf:"bytes,8,opt,name=schedule_to_start_timeout,json=scheduleToStartTimeout,proto3" json:"schedule_to_start_timeout,omitempty"`
	// Maximum time an activity is allowed to execute after being picked up by a worker. This
	// timeout is always retryable. Either this or `schedule_to_close_timeout` must be specified.
	//
	// (-- api-linter: core::0140::prepositions=disabled
	//
	//	aip.dev/not-precedent: "to" is used to indicate interval. --)
	StartToCloseTimeout *durationpb.Duration `protobuf:"bytes,9,opt,name=start_to_close_timeout,json=startToCloseTimeout,proto3" json:"start_to_close_timeout,omitempty"`
	// Maximum permitted time between successful worker heartbeats.
	HeartbeatTimeout *durationpb.Duration `protobuf:"bytes,10,opt,name=heartbeat_timeout,json=heartbeatTimeout,proto3" json:"heartbeat_timeout,omitempty"`
	// Activities are provided by a default retry policy which is controlled through the service's
	// dynamic configuration. Retries will be attempted until `schedule_to_close_timeout` has
	// elapsed. To disable retries set retry_policy.maximum_attempts to 1.
	RetryPolicy *common.RetryPolicy `protobuf:"bytes,11,opt,name=retry_policy,json=retryPolicy,proto3" json:"retry_policy,omitempty"`
	// Request to start the activity directly bypassing matching service and worker polling
	// The slot for executing the activity should be reserved when setting this field to true.
	RequestEagerExecution bool `protobuf:"varint,12,opt,name=request_eager_execution,json=requestEagerExecution,proto3" json:"request_eager_execution,omitempty"`
	// If this is set, the workflow executing this command wishes to start the activity using
	// a version compatible with the version that this workflow most recently ran on, if such
	// behavior is possible.
	UseCompatibleVersion bool `protobuf:"varint,13,opt,name=use_compatible_version,json=useCompatibleVersion,proto3" json:"use_compatible_version,omitempty"`
}

func (x *ScheduleActivityTaskCommandAttributes) Reset() {
	*x = ScheduleActivityTaskCommandAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_command_message_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduleActivityTaskCommandAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleActivityTaskCommandAttributes) ProtoMessage() {}

func (x *ScheduleActivityTaskCommandAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_necode_command_message_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleActivityTaskCommandAttributes.ProtoReflect.Descriptor instead.
func (*ScheduleActivityTaskCommandAttributes) Descriptor() ([]byte, []int) {
	return file_necode_command_message_proto_rawDescGZIP(), []int{0}
}

func (x *ScheduleActivityTaskCommandAttributes) GetActivityId() string {
	if x != nil {
		return x.ActivityId
	}
	return ""
}

func (x *ScheduleActivityTaskCommandAttributes) GetActivityType() *common.ActivityType {
	if x != nil {
		return x.ActivityType
	}
	return nil
}

func (x *ScheduleActivityTaskCommandAttributes) GetTaskQueue() *taskqueue.TaskQueue {
	if x != nil {
		return x.TaskQueue
	}
	return nil
}

func (x *ScheduleActivityTaskCommandAttributes) GetHeader() *common.Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *ScheduleActivityTaskCommandAttributes) GetInput() *common.Payloads {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *ScheduleActivityTaskCommandAttributes) GetScheduleToCloseTimeout() *durationpb.Duration {
	if x != nil {
		return x.ScheduleToCloseTimeout
	}
	return nil
}

func (x *ScheduleActivityTaskCommandAttributes) GetScheduleToStartTimeout() *durationpb.Duration {
	if x != nil {
		return x.ScheduleToStartTimeout
	}
	return nil
}

func (x *ScheduleActivityTaskCommandAttributes) GetStartToCloseTimeout() *durationpb.Duration {
	if x != nil {
		return x.StartToCloseTimeout
	}
	return nil
}

func (x *ScheduleActivityTaskCommandAttributes) GetHeartbeatTimeout() *durationpb.Duration {
	if x != nil {
		return x.HeartbeatTimeout
	}
	return nil
}

func (x *ScheduleActivityTaskCommandAttributes) GetRetryPolicy() *common.RetryPolicy {
	if x != nil {
		return x.RetryPolicy
	}
	return nil
}

func (x *ScheduleActivityTaskCommandAttributes) GetRequestEagerExecution() bool {
	if x != nil {
		return x.RequestEagerExecution
	}
	return false
}

func (x *ScheduleActivityTaskCommandAttributes) GetUseCompatibleVersion() bool {
	if x != nil {
		return x.UseCompatibleVersion
	}
	return false
}

type RequestCancelActivityTaskCommandAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The `ACTIVITY_TASK_SCHEDULED` event id for the activity being cancelled.
	ScheduledEventId int64 `protobuf:"varint,1,opt,name=scheduled_event_id,json=scheduledEventId,proto3" json:"scheduled_event_id,omitempty"`
}

func (x *RequestCancelActivityTaskCommandAttributes) Reset() {
	*x = RequestCancelActivityTaskCommandAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_command_message_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestCancelActivityTaskCommandAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestCancelActivityTaskCommandAttributes) ProtoMessage() {}

func (x *RequestCancelActivityTaskCommandAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_necode_command_message_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestCancelActivityTaskCommandAttributes.ProtoReflect.Descriptor instead.
func (*RequestCancelActivityTaskCommandAttributes) Descriptor() ([]byte, []int) {
	return file_necode_command_message_proto_rawDescGZIP(), []int{1}
}

func (x *RequestCancelActivityTaskCommandAttributes) GetScheduledEventId() int64 {
	if x != nil {
		return x.ScheduledEventId
	}
	return 0
}

type StartTimerCommandAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An id for the timer, currently live timers must have different ids. Typically autogenerated
	// by the SDK.
	TimerId string `protobuf:"bytes,1,opt,name=timer_id,json=timerId,proto3" json:"timer_id,omitempty"`
	// How long until the timer fires, producing a `TIMER_FIRED` event.
	//
	// (-- api-linter: core::0140::prepositions=disabled
	//
	//	aip.dev/not-precedent: "to" is used to indicate interval. --)
	StartToFireTimeout *durationpb.Duration `protobuf:"bytes,2,opt,name=start_to_fire_timeout,json=startToFireTimeout,proto3" json:"start_to_fire_timeout,omitempty"`
}

func (x *StartTimerCommandAttributes) Reset() {
	*x = StartTimerCommandAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_command_message_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartTimerCommandAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartTimerCommandAttributes) ProtoMessage() {}

func (x *StartTimerCommandAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_necode_command_message_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartTimerCommandAttributes.ProtoReflect.Descriptor instead.
func (*StartTimerCommandAttributes) Descriptor() ([]byte, []int) {
	return file_necode_command_message_proto_rawDescGZIP(), []int{2}
}

func (x *StartTimerCommandAttributes) GetTimerId() string {
	if x != nil {
		return x.TimerId
	}
	return ""
}

func (x *StartTimerCommandAttributes) GetStartToFireTimeout() *durationpb.Duration {
	if x != nil {
		return x.StartToFireTimeout
	}
	return nil
}

type CompleteWorkflowExecutionCommandAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *common.Payloads `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *CompleteWorkflowExecutionCommandAttributes) Reset() {
	*x = CompleteWorkflowExecutionCommandAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_command_message_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompleteWorkflowExecutionCommandAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompleteWorkflowExecutionCommandAttributes) ProtoMessage() {}

func (x *CompleteWorkflowExecutionCommandAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_necode_command_message_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompleteWorkflowExecutionCommandAttributes.ProtoReflect.Descriptor instead.
func (*CompleteWorkflowExecutionCommandAttributes) Descriptor() ([]byte, []int) {
	return file_necode_command_message_proto_rawDescGZIP(), []int{3}
}

func (x *CompleteWorkflowExecutionCommandAttributes) GetResult() *common.Payloads {
	if x != nil {
		return x.Result
	}
	return nil
}

type FailWorkflowExecutionCommandAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Failure *failure.Failure `protobuf:"bytes,1,opt,name=failure,proto3" json:"failure,omitempty"`
}

func (x *FailWorkflowExecutionCommandAttributes) Reset() {
	*x = FailWorkflowExecutionCommandAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_command_message_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FailWorkflowExecutionCommandAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FailWorkflowExecutionCommandAttributes) ProtoMessage() {}

func (x *FailWorkflowExecutionCommandAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_necode_command_message_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FailWorkflowExecutionCommandAttributes.ProtoReflect.Descriptor instead.
func (*FailWorkflowExecutionCommandAttributes) Descriptor() ([]byte, []int) {
	return file_necode_command_message_proto_rawDescGZIP(), []int{4}
}

func (x *FailWorkflowExecutionCommandAttributes) GetFailure() *failure.Failure {
	if x != nil {
		return x.Failure
	}
	return nil
}

type CancelTimerCommandAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The same timer id from the start timer command
	TimerId string `protobuf:"bytes,1,opt,name=timer_id,json=timerId,proto3" json:"timer_id,omitempty"`
}

func (x *CancelTimerCommandAttributes) Reset() {
	*x = CancelTimerCommandAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_command_message_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelTimerCommandAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelTimerCommandAttributes) ProtoMessage() {}

func (x *CancelTimerCommandAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_necode_command_message_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelTimerCommandAttributes.ProtoReflect.Descriptor instead.
func (*CancelTimerCommandAttributes) Descriptor() ([]byte, []int) {
	return file_necode_command_message_proto_rawDescGZIP(), []int{5}
}

func (x *CancelTimerCommandAttributes) GetTimerId() string {
	if x != nil {
		return x.TimerId
	}
	return ""
}

type CancelWorkflowExecutionCommandAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *common.Payloads `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *CancelWorkflowExecutionCommandAttributes) Reset() {
	*x = CancelWorkflowExecutionCommandAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_command_message_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelWorkflowExecutionCommandAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelWorkflowExecutionCommandAttributes) ProtoMessage() {}

func (x *CancelWorkflowExecutionCommandAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_necode_command_message_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelWorkflowExecutionCommandAttributes.ProtoReflect.Descriptor instead.
func (*CancelWorkflowExecutionCommandAttributes) Descriptor() ([]byte, []int) {
	return file_necode_command_message_proto_rawDescGZIP(), []int{6}
}

func (x *CancelWorkflowExecutionCommandAttributes) GetDetails() *common.Payloads {
	if x != nil {
		return x.Details
	}
	return nil
}

type RequestCancelExternalWorkflowExecutionCommandAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace  string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	WorkflowId string `protobuf:"bytes,2,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	RunId      string `protobuf:"bytes,3,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	// Deprecated.
	Control string `protobuf:"bytes,4,opt,name=control,proto3" json:"control,omitempty"`
	// Set this to true if the workflow being cancelled is a child of the workflow originating this
	// command. The request will be rejected if it is set to true and the target workflow is *not*
	// a child of the requesting workflow.
	ChildWorkflowOnly bool `protobuf:"varint,5,opt,name=child_workflow_only,json=childWorkflowOnly,proto3" json:"child_workflow_only,omitempty"`
	// Reason for requesting the cancellation
	Reason string `protobuf:"bytes,6,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *RequestCancelExternalWorkflowExecutionCommandAttributes) Reset() {
	*x = RequestCancelExternalWorkflowExecutionCommandAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_command_message_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestCancelExternalWorkflowExecutionCommandAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestCancelExternalWorkflowExecutionCommandAttributes) ProtoMessage() {}

func (x *RequestCancelExternalWorkflowExecutionCommandAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_necode_command_message_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestCancelExternalWorkflowExecutionCommandAttributes.ProtoReflect.Descriptor instead.
func (*RequestCancelExternalWorkflowExecutionCommandAttributes) Descriptor() ([]byte, []int) {
	return file_necode_command_message_proto_rawDescGZIP(), []int{7}
}

func (x *RequestCancelExternalWorkflowExecutionCommandAttributes) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *RequestCancelExternalWorkflowExecutionCommandAttributes) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *RequestCancelExternalWorkflowExecutionCommandAttributes) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *RequestCancelExternalWorkflowExecutionCommandAttributes) GetControl() string {
	if x != nil {
		return x.Control
	}
	return ""
}

func (x *RequestCancelExternalWorkflowExecutionCommandAttributes) GetChildWorkflowOnly() bool {
	if x != nil {
		return x.ChildWorkflowOnly
	}
	return false
}

func (x *RequestCancelExternalWorkflowExecutionCommandAttributes) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type SignalExternalWorkflowExecutionCommandAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace string                    `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Execution *common.WorkflowExecution `protobuf:"bytes,2,opt,name=execution,proto3" json:"execution,omitempty"`
	// The workflow author-defined name of the signal to send to the workflow.
	SignalName string `protobuf:"bytes,3,opt,name=signal_name,json=signalName,proto3" json:"signal_name,omitempty"`
	// Serialized value(s) to provide with the signal.
	Input *common.Payloads `protobuf:"bytes,4,opt,name=input,proto3" json:"input,omitempty"`
	// Deprecated
	Control string `protobuf:"bytes,5,opt,name=control,proto3" json:"control,omitempty"`
	// Set this to true if the workflow being cancelled is a child of the workflow originating this
	// command. The request will be rejected if it is set to true and the target workflow is *not*
	// a child of the requesting workflow.
	ChildWorkflowOnly bool `protobuf:"varint,6,opt,name=child_workflow_only,json=childWorkflowOnly,proto3" json:"child_workflow_only,omitempty"`
	// Headers that are passed by the workflow that is sending a signal to the external
	// workflow that is receiving this signal.
	Header *common.Header `protobuf:"bytes,7,opt,name=header,proto3" json:"header,omitempty"`
}

func (x *SignalExternalWorkflowExecutionCommandAttributes) Reset() {
	*x = SignalExternalWorkflowExecutionCommandAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_command_message_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignalExternalWorkflowExecutionCommandAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalExternalWorkflowExecutionCommandAttributes) ProtoMessage() {}

func (x *SignalExternalWorkflowExecutionCommandAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_necode_command_message_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalExternalWorkflowExecutionCommandAttributes.ProtoReflect.Descriptor instead.
func (*SignalExternalWorkflowExecutionCommandAttributes) Descriptor() ([]byte, []int) {
	return file_necode_command_message_proto_rawDescGZIP(), []int{8}
}

func (x *SignalExternalWorkflowExecutionCommandAttributes) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *SignalExternalWorkflowExecutionCommandAttributes) GetExecution() *common.WorkflowExecution {
	if x != nil {
		return x.Execution
	}
	return nil
}

func (x *SignalExternalWorkflowExecutionCommandAttributes) GetSignalName() string {
	if x != nil {
		return x.SignalName
	}
	return ""
}

func (x *SignalExternalWorkflowExecutionCommandAttributes) GetInput() *common.Payloads {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *SignalExternalWorkflowExecutionCommandAttributes) GetControl() string {
	if x != nil {
		return x.Control
	}
	return ""
}

func (x *SignalExternalWorkflowExecutionCommandAttributes) GetChildWorkflowOnly() bool {
	if x != nil {
		return x.ChildWorkflowOnly
	}
	return false
}

func (x *SignalExternalWorkflowExecutionCommandAttributes) GetHeader() *common.Header {
	if x != nil {
		return x.Header
	}
	return nil
}

type UpsertWorkflowSearchAttributesCommandAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SearchAttributes *common.SearchAttributes `protobuf:"bytes,1,opt,name=search_attributes,json=searchAttributes,proto3" json:"search_attributes,omitempty"`
}

func (x *UpsertWorkflowSearchAttributesCommandAttributes) Reset() {
	*x = UpsertWorkflowSearchAttributesCommandAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_command_message_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertWorkflowSearchAttributesCommandAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertWorkflowSearchAttributesCommandAttributes) ProtoMessage() {}

func (x *UpsertWorkflowSearchAttributesCommandAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_necode_command_message_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertWorkflowSearchAttributesCommandAttributes.ProtoReflect.Descriptor instead.
func (*UpsertWorkflowSearchAttributesCommandAttributes) Descriptor() ([]byte, []int) {
	return file_necode_command_message_proto_rawDescGZIP(), []int{9}
}

func (x *UpsertWorkflowSearchAttributesCommandAttributes) GetSearchAttributes() *common.SearchAttributes {
	if x != nil {
		return x.SearchAttributes
	}
	return nil
}

type ModifyWorkflowPropertiesCommandAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If set, update the workflow memo with the provided values. The values will be merged with
	// the existing memo. If the user wants to delete values, a default/empty Payload should be
	// used as the value for the key being deleted.
	UpsertedMemo *common.Memo `protobuf:"bytes,1,opt,name=upserted_memo,json=upsertedMemo,proto3" json:"upserted_memo,omitempty"`
}

func (x *ModifyWorkflowPropertiesCommandAttributes) Reset() {
	*x = ModifyWorkflowPropertiesCommandAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_command_message_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyWorkflowPropertiesCommandAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyWorkflowPropertiesCommandAttributes) ProtoMessage() {}

func (x *ModifyWorkflowPropertiesCommandAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_necode_command_message_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyWorkflowPropertiesCommandAttributes.ProtoReflect.Descriptor instead.
func (*ModifyWorkflowPropertiesCommandAttributes) Descriptor() ([]byte, []int) {
	return file_necode_command_message_proto_rawDescGZIP(), []int{10}
}

func (x *ModifyWorkflowPropertiesCommandAttributes) GetUpsertedMemo() *common.Memo {
	if x != nil {
		return x.UpsertedMemo
	}
	return nil
}

type RecordMarkerCommandAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MarkerName string                      `protobuf:"bytes,1,opt,name=marker_name,json=markerName,proto3" json:"marker_name,omitempty"`
	Details    map[string]*common.Payloads `protobuf:"bytes,2,rep,name=details,proto3" json:"details,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Header     *common.Header              `protobuf:"bytes,3,opt,name=header,proto3" json:"header,omitempty"`
	Failure    *failure.Failure            `protobuf:"bytes,4,opt,name=failure,proto3" json:"failure,omitempty"`
}

func (x *RecordMarkerCommandAttributes) Reset() {
	*x = RecordMarkerCommandAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_command_message_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordMarkerCommandAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordMarkerCommandAttributes) ProtoMessage() {}

func (x *RecordMarkerCommandAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_necode_command_message_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordMarkerCommandAttributes.ProtoReflect.Descriptor instead.
func (*RecordMarkerCommandAttributes) Descriptor() ([]byte, []int) {
	return file_necode_command_message_proto_rawDescGZIP(), []int{11}
}

func (x *RecordMarkerCommandAttributes) GetMarkerName() string {
	if x != nil {
		return x.MarkerName
	}
	return ""
}

func (x *RecordMarkerCommandAttributes) GetDetails() map[string]*common.Payloads {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *RecordMarkerCommandAttributes) GetHeader() *common.Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *RecordMarkerCommandAttributes) GetFailure() *failure.Failure {
	if x != nil {
		return x.Failure
	}
	return nil
}

type ContinueAsNewWorkflowExecutionCommandAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkflowType *common.WorkflowType `protobuf:"bytes,1,opt,name=workflow_type,json=workflowType,proto3" json:"workflow_type,omitempty"`
	TaskQueue    *taskqueue.TaskQueue `protobuf:"bytes,2,opt,name=task_queue,json=taskQueue,proto3" json:"task_queue,omitempty"`
	Input        *common.Payloads     `protobuf:"bytes,3,opt,name=input,proto3" json:"input,omitempty"`
	// Timeout of a single workflow run.
	WorkflowRunTimeout *durationpb.Duration `protobuf:"bytes,4,opt,name=workflow_run_timeout,json=workflowRunTimeout,proto3" json:"workflow_run_timeout,omitempty"`
	// Timeout of a single workflow task.
	WorkflowTaskTimeout *durationpb.Duration `protobuf:"bytes,5,opt,name=workflow_task_timeout,json=workflowTaskTimeout,proto3" json:"workflow_task_timeout,omitempty"`
	// How long the workflow start will be delayed - not really a "backoff" in the traditional sense.
	BackoffStartInterval *durationpb.Duration `protobuf:"bytes,6,opt,name=backoff_start_interval,json=backoffStartInterval,proto3" json:"backoff_start_interval,omitempty"`
	RetryPolicy          *common.RetryPolicy  `protobuf:"bytes,7,opt,name=retry_policy,json=retryPolicy,proto3" json:"retry_policy,omitempty"`
	// Should be removed
	Initiator enums.ContinueAsNewInitiator `protobuf:"varint,8,opt,name=initiator,proto3,enum=necode.enums.ContinueAsNewInitiator" json:"initiator,omitempty"`
	// Should be removed
	Failure *failure.Failure `protobuf:"bytes,9,opt,name=failure,proto3" json:"failure,omitempty"`
	// Should be removed
	LastCompletionResult *common.Payloads `protobuf:"bytes,10,opt,name=last_completion_result,json=lastCompletionResult,proto3" json:"last_completion_result,omitempty"`
	// Should be removed. Not necessarily unused but unclear and not exposed by SDKs.
	CronSchedule     string                   `protobuf:"bytes,11,opt,name=cron_schedule,json=cronSchedule,proto3" json:"cron_schedule,omitempty"`
	Header           *common.Header           `protobuf:"bytes,12,opt,name=header,proto3" json:"header,omitempty"`
	Memo             *common.Memo             `protobuf:"bytes,13,opt,name=memo,proto3" json:"memo,omitempty"`
	SearchAttributes *common.SearchAttributes `protobuf:"bytes,14,opt,name=search_attributes,json=searchAttributes,proto3" json:"search_attributes,omitempty"`
	// If this is set, the workflow executing this command wishes to continue as new using a version
	// compatible with the version that this workflow most recently ran on.
	UseCompatibleVersion bool `protobuf:"varint,15,opt,name=use_compatible_version,json=useCompatibleVersion,proto3" json:"use_compatible_version,omitempty"`
}

func (x *ContinueAsNewWorkflowExecutionCommandAttributes) Reset() {
	*x = ContinueAsNewWorkflowExecutionCommandAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_command_message_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContinueAsNewWorkflowExecutionCommandAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContinueAsNewWorkflowExecutionCommandAttributes) ProtoMessage() {}

func (x *ContinueAsNewWorkflowExecutionCommandAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_necode_command_message_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContinueAsNewWorkflowExecutionCommandAttributes.ProtoReflect.Descriptor instead.
func (*ContinueAsNewWorkflowExecutionCommandAttributes) Descriptor() ([]byte, []int) {
	return file_necode_command_message_proto_rawDescGZIP(), []int{12}
}

func (x *ContinueAsNewWorkflowExecutionCommandAttributes) GetWorkflowType() *common.WorkflowType {
	if x != nil {
		return x.WorkflowType
	}
	return nil
}

func (x *ContinueAsNewWorkflowExecutionCommandAttributes) GetTaskQueue() *taskqueue.TaskQueue {
	if x != nil {
		return x.TaskQueue
	}
	return nil
}

func (x *ContinueAsNewWorkflowExecutionCommandAttributes) GetInput() *common.Payloads {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *ContinueAsNewWorkflowExecutionCommandAttributes) GetWorkflowRunTimeout() *durationpb.Duration {
	if x != nil {
		return x.WorkflowRunTimeout
	}
	return nil
}

func (x *ContinueAsNewWorkflowExecutionCommandAttributes) GetWorkflowTaskTimeout() *durationpb.Duration {
	if x != nil {
		return x.WorkflowTaskTimeout
	}
	return nil
}

func (x *ContinueAsNewWorkflowExecutionCommandAttributes) GetBackoffStartInterval() *durationpb.Duration {
	if x != nil {
		return x.BackoffStartInterval
	}
	return nil
}

func (x *ContinueAsNewWorkflowExecutionCommandAttributes) GetRetryPolicy() *common.RetryPolicy {
	if x != nil {
		return x.RetryPolicy
	}
	return nil
}

func (x *ContinueAsNewWorkflowExecutionCommandAttributes) GetInitiator() enums.ContinueAsNewInitiator {
	if x != nil {
		return x.Initiator
	}
	return enums.ContinueAsNewInitiator(0)
}

func (x *ContinueAsNewWorkflowExecutionCommandAttributes) GetFailure() *failure.Failure {
	if x != nil {
		return x.Failure
	}
	return nil
}

func (x *ContinueAsNewWorkflowExecutionCommandAttributes) GetLastCompletionResult() *common.Payloads {
	if x != nil {
		return x.LastCompletionResult
	}
	return nil
}

func (x *ContinueAsNewWorkflowExecutionCommandAttributes) GetCronSchedule() string {
	if x != nil {
		return x.CronSchedule
	}
	return ""
}

func (x *ContinueAsNewWorkflowExecutionCommandAttributes) GetHeader() *common.Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *ContinueAsNewWorkflowExecutionCommandAttributes) GetMemo() *common.Memo {
	if x != nil {
		return x.Memo
	}
	return nil
}

func (x *ContinueAsNewWorkflowExecutionCommandAttributes) GetSearchAttributes() *common.SearchAttributes {
	if x != nil {
		return x.SearchAttributes
	}
	return nil
}

func (x *ContinueAsNewWorkflowExecutionCommandAttributes) GetUseCompatibleVersion() bool {
	if x != nil {
		return x.UseCompatibleVersion
	}
	return false
}

type StartChildWorkflowExecutionCommandAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace    string               `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	WorkflowId   string               `protobuf:"bytes,2,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	WorkflowType *common.WorkflowType `protobuf:"bytes,3,opt,name=workflow_type,json=workflowType,proto3" json:"workflow_type,omitempty"`
	TaskQueue    *taskqueue.TaskQueue `protobuf:"bytes,4,opt,name=task_queue,json=taskQueue,proto3" json:"task_queue,omitempty"`
	Input        *common.Payloads     `protobuf:"bytes,5,opt,name=input,proto3" json:"input,omitempty"`
	// Total workflow execution timeout including retries and continue as new.
	WorkflowExecutionTimeout *durationpb.Duration `protobuf:"bytes,6,opt,name=workflow_execution_timeout,json=workflowExecutionTimeout,proto3" json:"workflow_execution_timeout,omitempty"`
	// Timeout of a single workflow run.
	WorkflowRunTimeout *durationpb.Duration `protobuf:"bytes,7,opt,name=workflow_run_timeout,json=workflowRunTimeout,proto3" json:"workflow_run_timeout,omitempty"`
	// Timeout of a single workflow task.
	WorkflowTaskTimeout *durationpb.Duration `protobuf:"bytes,8,opt,name=workflow_task_timeout,json=workflowTaskTimeout,proto3" json:"workflow_task_timeout,omitempty"`
	// Default: PARENT_CLOSE_POLICY_TERMINATE.
	ParentClosePolicy enums.ParentClosePolicy `protobuf:"varint,9,opt,name=parent_close_policy,json=parentClosePolicy,proto3,enum=necode.enums.ParentClosePolicy" json:"parent_close_policy,omitempty"`
	Control           string                  `protobuf:"bytes,10,opt,name=control,proto3" json:"control,omitempty"`
	// Default: WORKFLOW_ID_REUSE_POLICY_ALLOW_DUPLICATE.
	WorkflowIdReusePolicy enums.WorkflowIdReusePolicy `protobuf:"varint,11,opt,name=workflow_id_reuse_policy,json=workflowIdReusePolicy,proto3,enum=necode.enums.WorkflowIdReusePolicy" json:"workflow_id_reuse_policy,omitempty"`
	RetryPolicy           *common.RetryPolicy         `protobuf:"bytes,12,opt,name=retry_policy,json=retryPolicy,proto3" json:"retry_policy,omitempty"`
	// Establish a cron schedule for the child workflow.
	CronSchedule     string                   `protobuf:"bytes,13,opt,name=cron_schedule,json=cronSchedule,proto3" json:"cron_schedule,omitempty"`
	Header           *common.Header           `protobuf:"bytes,14,opt,name=header,proto3" json:"header,omitempty"`
	Memo             *common.Memo             `protobuf:"bytes,15,opt,name=memo,proto3" json:"memo,omitempty"`
	SearchAttributes *common.SearchAttributes `protobuf:"bytes,16,opt,name=search_attributes,json=searchAttributes,proto3" json:"search_attributes,omitempty"`
	// If this is set, the workflow executing this command wishes to start the child workflow using
	// a version compatible with the version that this workflow most recently ran on, if such
	// behavior is possible.
	UseCompatibleVersion bool `protobuf:"varint,17,opt,name=use_compatible_version,json=useCompatibleVersion,proto3" json:"use_compatible_version,omitempty"`
}

func (x *StartChildWorkflowExecutionCommandAttributes) Reset() {
	*x = StartChildWorkflowExecutionCommandAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_command_message_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartChildWorkflowExecutionCommandAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartChildWorkflowExecutionCommandAttributes) ProtoMessage() {}

func (x *StartChildWorkflowExecutionCommandAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_necode_command_message_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartChildWorkflowExecutionCommandAttributes.ProtoReflect.Descriptor instead.
func (*StartChildWorkflowExecutionCommandAttributes) Descriptor() ([]byte, []int) {
	return file_necode_command_message_proto_rawDescGZIP(), []int{13}
}

func (x *StartChildWorkflowExecutionCommandAttributes) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *StartChildWorkflowExecutionCommandAttributes) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *StartChildWorkflowExecutionCommandAttributes) GetWorkflowType() *common.WorkflowType {
	if x != nil {
		return x.WorkflowType
	}
	return nil
}

func (x *StartChildWorkflowExecutionCommandAttributes) GetTaskQueue() *taskqueue.TaskQueue {
	if x != nil {
		return x.TaskQueue
	}
	return nil
}

func (x *StartChildWorkflowExecutionCommandAttributes) GetInput() *common.Payloads {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *StartChildWorkflowExecutionCommandAttributes) GetWorkflowExecutionTimeout() *durationpb.Duration {
	if x != nil {
		return x.WorkflowExecutionTimeout
	}
	return nil
}

func (x *StartChildWorkflowExecutionCommandAttributes) GetWorkflowRunTimeout() *durationpb.Duration {
	if x != nil {
		return x.WorkflowRunTimeout
	}
	return nil
}

func (x *StartChildWorkflowExecutionCommandAttributes) GetWorkflowTaskTimeout() *durationpb.Duration {
	if x != nil {
		return x.WorkflowTaskTimeout
	}
	return nil
}

func (x *StartChildWorkflowExecutionCommandAttributes) GetParentClosePolicy() enums.ParentClosePolicy {
	if x != nil {
		return x.ParentClosePolicy
	}
	return enums.ParentClosePolicy(0)
}

func (x *StartChildWorkflowExecutionCommandAttributes) GetControl() string {
	if x != nil {
		return x.Control
	}
	return ""
}

func (x *StartChildWorkflowExecutionCommandAttributes) GetWorkflowIdReusePolicy() enums.WorkflowIdReusePolicy {
	if x != nil {
		return x.WorkflowIdReusePolicy
	}
	return enums.WorkflowIdReusePolicy(0)
}

func (x *StartChildWorkflowExecutionCommandAttributes) GetRetryPolicy() *common.RetryPolicy {
	if x != nil {
		return x.RetryPolicy
	}
	return nil
}

func (x *StartChildWorkflowExecutionCommandAttributes) GetCronSchedule() string {
	if x != nil {
		return x.CronSchedule
	}
	return ""
}

func (x *StartChildWorkflowExecutionCommandAttributes) GetHeader() *common.Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *StartChildWorkflowExecutionCommandAttributes) GetMemo() *common.Memo {
	if x != nil {
		return x.Memo
	}
	return nil
}

func (x *StartChildWorkflowExecutionCommandAttributes) GetSearchAttributes() *common.SearchAttributes {
	if x != nil {
		return x.SearchAttributes
	}
	return nil
}

func (x *StartChildWorkflowExecutionCommandAttributes) GetUseCompatibleVersion() bool {
	if x != nil {
		return x.UseCompatibleVersion
	}
	return false
}

type ProtocolMessageCommandAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The message ID of the message to which this command is a pointer.
	MessageId string `protobuf:"bytes,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
}

func (x *ProtocolMessageCommandAttributes) Reset() {
	*x = ProtocolMessageCommandAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_command_message_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtocolMessageCommandAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtocolMessageCommandAttributes) ProtoMessage() {}

func (x *ProtocolMessageCommandAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_necode_command_message_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtocolMessageCommandAttributes.ProtoReflect.Descriptor instead.
func (*ProtocolMessageCommandAttributes) Descriptor() ([]byte, []int) {
	return file_necode_command_message_proto_rawDescGZIP(), []int{14}
}

func (x *ProtocolMessageCommandAttributes) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

type Command struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommandType enums.CommandType `protobuf:"varint,1,opt,name=command_type,json=commandType,proto3,enum=necode.enums.CommandType" json:"command_type,omitempty"`
	// Types that are assignable to Attributes:
	//
	//	*Command_ScheduleActivityTaskCommandAttributes
	//	*Command_StartTimerCommandAttributes
	//	*Command_CompleteWorkflowExecutionCommandAttributes
	//	*Command_FailWorkflowExecutionCommandAttributes
	//	*Command_RequestCancelActivityTaskCommandAttributes
	//	*Command_CancelTimerCommandAttributes
	//	*Command_CancelWorkflowExecutionCommandAttributes
	//	*Command_RequestCancelExternalWorkflowExecutionCommandAttributes
	//	*Command_RecordMarkerCommandAttributes
	//	*Command_ContinueAsNewWorkflowExecutionCommandAttributes
	//	*Command_StartChildWorkflowExecutionCommandAttributes
	//	*Command_SignalExternalWorkflowExecutionCommandAttributes
	//	*Command_UpsertWorkflowSearchAttributesCommandAttributes
	//	*Command_ProtocolMessageCommandAttributes
	//	*Command_ModifyWorkflowPropertiesCommandAttributes
	Attributes isCommand_Attributes `protobuf_oneof:"attributes"`
}

func (x *Command) Reset() {
	*x = Command{}
	if protoimpl.UnsafeEnabled {
		mi := &file_necode_command_message_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Command) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Command) ProtoMessage() {}

func (x *Command) ProtoReflect() protoreflect.Message {
	mi := &file_necode_command_message_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Command.ProtoReflect.Descriptor instead.
func (*Command) Descriptor() ([]byte, []int) {
	return file_necode_command_message_proto_rawDescGZIP(), []int{15}
}

func (x *Command) GetCommandType() enums.CommandType {
	if x != nil {
		return x.CommandType
	}
	return enums.CommandType(0)
}

func (m *Command) GetAttributes() isCommand_Attributes {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (x *Command) GetScheduleActivityTaskCommandAttributes() *ScheduleActivityTaskCommandAttributes {
	if x, ok := x.GetAttributes().(*Command_ScheduleActivityTaskCommandAttributes); ok {
		return x.ScheduleActivityTaskCommandAttributes
	}
	return nil
}

func (x *Command) GetStartTimerCommandAttributes() *StartTimerCommandAttributes {
	if x, ok := x.GetAttributes().(*Command_StartTimerCommandAttributes); ok {
		return x.StartTimerCommandAttributes
	}
	return nil
}

func (x *Command) GetCompleteWorkflowExecutionCommandAttributes() *CompleteWorkflowExecutionCommandAttributes {
	if x, ok := x.GetAttributes().(*Command_CompleteWorkflowExecutionCommandAttributes); ok {
		return x.CompleteWorkflowExecutionCommandAttributes
	}
	return nil
}

func (x *Command) GetFailWorkflowExecutionCommandAttributes() *FailWorkflowExecutionCommandAttributes {
	if x, ok := x.GetAttributes().(*Command_FailWorkflowExecutionCommandAttributes); ok {
		return x.FailWorkflowExecutionCommandAttributes
	}
	return nil
}

func (x *Command) GetRequestCancelActivityTaskCommandAttributes() *RequestCancelActivityTaskCommandAttributes {
	if x, ok := x.GetAttributes().(*Command_RequestCancelActivityTaskCommandAttributes); ok {
		return x.RequestCancelActivityTaskCommandAttributes
	}
	return nil
}

func (x *Command) GetCancelTimerCommandAttributes() *CancelTimerCommandAttributes {
	if x, ok := x.GetAttributes().(*Command_CancelTimerCommandAttributes); ok {
		return x.CancelTimerCommandAttributes
	}
	return nil
}

func (x *Command) GetCancelWorkflowExecutionCommandAttributes() *CancelWorkflowExecutionCommandAttributes {
	if x, ok := x.GetAttributes().(*Command_CancelWorkflowExecutionCommandAttributes); ok {
		return x.CancelWorkflowExecutionCommandAttributes
	}
	return nil
}

func (x *Command) GetRequestCancelExternalWorkflowExecutionCommandAttributes() *RequestCancelExternalWorkflowExecutionCommandAttributes {
	if x, ok := x.GetAttributes().(*Command_RequestCancelExternalWorkflowExecutionCommandAttributes); ok {
		return x.RequestCancelExternalWorkflowExecutionCommandAttributes
	}
	return nil
}

func (x *Command) GetRecordMarkerCommandAttributes() *RecordMarkerCommandAttributes {
	if x, ok := x.GetAttributes().(*Command_RecordMarkerCommandAttributes); ok {
		return x.RecordMarkerCommandAttributes
	}
	return nil
}

func (x *Command) GetContinueAsNewWorkflowExecutionCommandAttributes() *ContinueAsNewWorkflowExecutionCommandAttributes {
	if x, ok := x.GetAttributes().(*Command_ContinueAsNewWorkflowExecutionCommandAttributes); ok {
		return x.ContinueAsNewWorkflowExecutionCommandAttributes
	}
	return nil
}

func (x *Command) GetStartChildWorkflowExecutionCommandAttributes() *StartChildWorkflowExecutionCommandAttributes {
	if x, ok := x.GetAttributes().(*Command_StartChildWorkflowExecutionCommandAttributes); ok {
		return x.StartChildWorkflowExecutionCommandAttributes
	}
	return nil
}

func (x *Command) GetSignalExternalWorkflowExecutionCommandAttributes() *SignalExternalWorkflowExecutionCommandAttributes {
	if x, ok := x.GetAttributes().(*Command_SignalExternalWorkflowExecutionCommandAttributes); ok {
		return x.SignalExternalWorkflowExecutionCommandAttributes
	}
	return nil
}

func (x *Command) GetUpsertWorkflowSearchAttributesCommandAttributes() *UpsertWorkflowSearchAttributesCommandAttributes {
	if x, ok := x.GetAttributes().(*Command_UpsertWorkflowSearchAttributesCommandAttributes); ok {
		return x.UpsertWorkflowSearchAttributesCommandAttributes
	}
	return nil
}

func (x *Command) GetProtocolMessageCommandAttributes() *ProtocolMessageCommandAttributes {
	if x, ok := x.GetAttributes().(*Command_ProtocolMessageCommandAttributes); ok {
		return x.ProtocolMessageCommandAttributes
	}
	return nil
}

func (x *Command) GetModifyWorkflowPropertiesCommandAttributes() *ModifyWorkflowPropertiesCommandAttributes {
	if x, ok := x.GetAttributes().(*Command_ModifyWorkflowPropertiesCommandAttributes); ok {
		return x.ModifyWorkflowPropertiesCommandAttributes
	}
	return nil
}

type isCommand_Attributes interface {
	isCommand_Attributes()
}

type Command_ScheduleActivityTaskCommandAttributes struct {
	ScheduleActivityTaskCommandAttributes *ScheduleActivityTaskCommandAttributes `protobuf:"bytes,2,opt,name=schedule_activity_task_command_attributes,json=scheduleActivityTaskCommandAttributes,proto3,oneof"`
}

type Command_StartTimerCommandAttributes struct {
	StartTimerCommandAttributes *StartTimerCommandAttributes `protobuf:"bytes,3,opt,name=start_timer_command_attributes,json=startTimerCommandAttributes,proto3,oneof"`
}

type Command_CompleteWorkflowExecutionCommandAttributes struct {
	CompleteWorkflowExecutionCommandAttributes *CompleteWorkflowExecutionCommandAttributes `protobuf:"bytes,4,opt,name=complete_workflow_execution_command_attributes,json=completeWorkflowExecutionCommandAttributes,proto3,oneof"`
}

type Command_FailWorkflowExecutionCommandAttributes struct {
	FailWorkflowExecutionCommandAttributes *FailWorkflowExecutionCommandAttributes `protobuf:"bytes,5,opt,name=fail_workflow_execution_command_attributes,json=failWorkflowExecutionCommandAttributes,proto3,oneof"`
}

type Command_RequestCancelActivityTaskCommandAttributes struct {
	RequestCancelActivityTaskCommandAttributes *RequestCancelActivityTaskCommandAttributes `protobuf:"bytes,6,opt,name=request_cancel_activity_task_command_attributes,json=requestCancelActivityTaskCommandAttributes,proto3,oneof"`
}

type Command_CancelTimerCommandAttributes struct {
	CancelTimerCommandAttributes *CancelTimerCommandAttributes `protobuf:"bytes,7,opt,name=cancel_timer_command_attributes,json=cancelTimerCommandAttributes,proto3,oneof"`
}

type Command_CancelWorkflowExecutionCommandAttributes struct {
	CancelWorkflowExecutionCommandAttributes *CancelWorkflowExecutionCommandAttributes `protobuf:"bytes,8,opt,name=cancel_workflow_execution_command_attributes,json=cancelWorkflowExecutionCommandAttributes,proto3,oneof"`
}

type Command_RequestCancelExternalWorkflowExecutionCommandAttributes struct {
	RequestCancelExternalWorkflowExecutionCommandAttributes *RequestCancelExternalWorkflowExecutionCommandAttributes `protobuf:"bytes,9,opt,name=request_cancel_external_workflow_execution_command_attributes,json=requestCancelExternalWorkflowExecutionCommandAttributes,proto3,oneof"`
}

type Command_RecordMarkerCommandAttributes struct {
	RecordMarkerCommandAttributes *RecordMarkerCommandAttributes `protobuf:"bytes,10,opt,name=record_marker_command_attributes,json=recordMarkerCommandAttributes,proto3,oneof"`
}

type Command_ContinueAsNewWorkflowExecutionCommandAttributes struct {
	ContinueAsNewWorkflowExecutionCommandAttributes *ContinueAsNewWorkflowExecutionCommandAttributes `protobuf:"bytes,11,opt,name=continue_as_new_workflow_execution_command_attributes,json=continueAsNewWorkflowExecutionCommandAttributes,proto3,oneof"`
}

type Command_StartChildWorkflowExecutionCommandAttributes struct {
	StartChildWorkflowExecutionCommandAttributes *StartChildWorkflowExecutionCommandAttributes `protobuf:"bytes,12,opt,name=start_child_workflow_execution_command_attributes,json=startChildWorkflowExecutionCommandAttributes,proto3,oneof"`
}

type Command_SignalExternalWorkflowExecutionCommandAttributes struct {
	SignalExternalWorkflowExecutionCommandAttributes *SignalExternalWorkflowExecutionCommandAttributes `protobuf:"bytes,13,opt,name=signal_external_workflow_execution_command_attributes,json=signalExternalWorkflowExecutionCommandAttributes,proto3,oneof"`
}

type Command_UpsertWorkflowSearchAttributesCommandAttributes struct {
	UpsertWorkflowSearchAttributesCommandAttributes *UpsertWorkflowSearchAttributesCommandAttributes `protobuf:"bytes,14,opt,name=upsert_workflow_search_attributes_command_attributes,json=upsertWorkflowSearchAttributesCommandAttributes,proto3,oneof"`
}

type Command_ProtocolMessageCommandAttributes struct {
	ProtocolMessageCommandAttributes *ProtocolMessageCommandAttributes `protobuf:"bytes,15,opt,name=protocol_message_command_attributes,json=protocolMessageCommandAttributes,proto3,oneof"`
}

type Command_ModifyWorkflowPropertiesCommandAttributes struct {
	// 16 is available for use - it was used as part of a prototype that never made it into a release
	ModifyWorkflowPropertiesCommandAttributes *ModifyWorkflowPropertiesCommandAttributes `protobuf:"bytes,17,opt,name=modify_workflow_properties_command_attributes,json=modifyWorkflowPropertiesCommandAttributes,proto3,oneof"`
}

func (*Command_ScheduleActivityTaskCommandAttributes) isCommand_Attributes() {}

func (*Command_StartTimerCommandAttributes) isCommand_Attributes() {}

func (*Command_CompleteWorkflowExecutionCommandAttributes) isCommand_Attributes() {}

func (*Command_FailWorkflowExecutionCommandAttributes) isCommand_Attributes() {}

func (*Command_RequestCancelActivityTaskCommandAttributes) isCommand_Attributes() {}

func (*Command_CancelTimerCommandAttributes) isCommand_Attributes() {}

func (*Command_CancelWorkflowExecutionCommandAttributes) isCommand_Attributes() {}

func (*Command_RequestCancelExternalWorkflowExecutionCommandAttributes) isCommand_Attributes() {}

func (*Command_RecordMarkerCommandAttributes) isCommand_Attributes() {}

func (*Command_ContinueAsNewWorkflowExecutionCommandAttributes) isCommand_Attributes() {}

func (*Command_StartChildWorkflowExecutionCommandAttributes) isCommand_Attributes() {}

func (*Command_SignalExternalWorkflowExecutionCommandAttributes) isCommand_Attributes() {}

func (*Command_UpsertWorkflowSearchAttributesCommandAttributes) isCommand_Attributes() {}

func (*Command_ProtocolMessageCommandAttributes) isCommand_Attributes() {}

func (*Command_ModifyWorkflowPropertiesCommandAttributes) isCommand_Attributes() {}

var File_necode_command_message_proto protoreflect.FileDescriptor

var file_necode_command_message_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e,
	0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x1a, 0x1e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b,
	0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x6e, 0x65, 0x63,
	0x6f, 0x64, 0x65, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65,
	0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x6e, 0x65, 0x63, 0x6f, 0x64,
	0x65, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2f, 0x66,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2f, 0x74, 0x61, 0x73,
	0x6b, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb3, 0x06, 0x0a, 0x25, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12,
	0x40, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74,
	0x61, 0x73, 0x6b, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x52, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x2d, 0x0a,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x05,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65,
	0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x73, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x5a, 0x0a, 0x19, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x04, 0x98, 0xdf, 0x1f, 0x01, 0x52,
	0x16, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x6f, 0x43, 0x6c, 0x6f, 0x73, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x5a, 0x0a, 0x19, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x04, 0x98, 0xdf, 0x1f, 0x01, 0x52, 0x16, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x6f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x12, 0x54, 0x0a, 0x16, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x6f, 0x5f,
	0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x04,
	0x98, 0xdf, 0x1f, 0x01, 0x52, 0x13, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x6f, 0x43, 0x6c, 0x6f,
	0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x4c, 0x0a, 0x11, 0x68, 0x65, 0x61,
	0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x04, 0x98, 0xdf, 0x1f, 0x01, 0x52, 0x10, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x3d, 0x0a, 0x0c, 0x72, 0x65, 0x74, 0x72, 0x79,
	0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65,
	0x74, 0x72, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0b, 0x72, 0x65, 0x74, 0x72, 0x79,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x65, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x45, 0x61, 0x67, 0x65, 0x72, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34,
	0x0a, 0x16, 0x75, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14,
	0x75, 0x73, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x22, 0x5a, 0x0a, 0x2a, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x8c, 0x01, 0x0a, 0x1b, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x52, 0x0a, 0x15, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x66, 0x69,
	0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x04, 0x98, 0xdf, 0x1f,
	0x01, 0x52, 0x12, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x6f, 0x46, 0x69, 0x72, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0x5d, 0x0a, 0x2a, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x5b, 0x0a, 0x26, 0x46, 0x61, 0x69, 0x6c, 0x57, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x31,
	0x0a, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x2e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x22, 0x39, 0x0a, 0x1c, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x72,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x22, 0x5d, 0x0a, 0x28,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x63, 0x6f,
	0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0xf1, 0x01, 0x0a, 0x37,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x45, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x68, 0x69, 0x6c, 0x64,
	0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22,
	0xd9, 0x02, 0x0a, 0x30, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x12, 0x3e, 0x0a, 0x09, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x52, 0x05, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x2e, 0x0a, 0x13,
	0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6f,
	0x6e, 0x6c, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x63, 0x68, 0x69, 0x6c, 0x64,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x2d, 0x0a, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6e,
	0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x7f, 0x0a, 0x2f, 0x55,
	0x70, 0x73, 0x65, 0x72, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x4c,
	0x0a, 0x11, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6e, 0x65, 0x63, 0x6f,
	0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x10, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x22, 0x65, 0x0a, 0x29,
	0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x0d, 0x75, 0x70, 0x73,
	0x65, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x52, 0x0c, 0x75, 0x70, 0x73, 0x65, 0x72, 0x74, 0x65, 0x64, 0x4d,
	0x65, 0x6d, 0x6f, 0x22, 0xcd, 0x02, 0x0a, 0x1d, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x54, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x2d, 0x0a, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6e,
	0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x07, 0x66,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e,
	0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x2e, 0x46, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x1a, 0x53,
	0x0a, 0x0c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xe3, 0x07, 0x0a, 0x2f, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65,
	0x41, 0x73, 0x4e, 0x65, 0x77, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x57,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x2e, 0x54, 0x61, 0x73, 0x6b, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x09, 0x74, 0x61, 0x73, 0x6b,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x2d, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x52, 0x05, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x12, 0x51, 0x0a, 0x14, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x04, 0x98,
	0xdf, 0x1f, 0x01, 0x52, 0x12, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x53, 0x0a, 0x15, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x04, 0x98, 0xdf, 0x1f, 0x01, 0x52, 0x13, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x55, 0x0a, 0x16,
	0x62, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x04, 0x98, 0xdf, 0x1f, 0x01, 0x52, 0x14, 0x62,
	0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x53, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x12, 0x3d, 0x0a, 0x0c, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6e, 0x65, 0x63, 0x6f,
	0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x79, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0b, 0x72, 0x65, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x12, 0x42, 0x0a, 0x09, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x65,
	0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x41, 0x73, 0x4e,
	0x65, 0x77, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x31, 0x0a, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65,
	0x2e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x52, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x4d, 0x0a, 0x16, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x63, 0x6f,
	0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x73, 0x52, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x72, 0x6f, 0x6e,
	0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x63, 0x72, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x2d, 0x0a,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x04,
	0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x65, 0x63,
	0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x52,
	0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x4c, 0x0a, 0x11, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x52, 0x10, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x75, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x74, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x14, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62,
	0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xaa, 0x08, 0x0a, 0x2c, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x0d, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x77,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x09, 0x74, 0x61,
	0x73, 0x6b, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x2d, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x52,
	0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x5d, 0x0a, 0x1a, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x04, 0x98, 0xdf, 0x1f, 0x01, 0x52, 0x18, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x51, 0x0a, 0x14, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x04,
	0x98, 0xdf, 0x1f, 0x01, 0x52, 0x12, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x75,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x53, 0x0a, 0x15, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x04, 0x98, 0xdf, 0x1f, 0x01, 0x52, 0x13, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x4f, 0x0a,
	0x13, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x6e, 0x65, 0x63,
	0x6f, 0x64, 0x65, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x11, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x5c, 0x0a, 0x18, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x75, 0x73, 0x65, 0x5f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6e, 0x65, 0x63,
	0x6f, 0x64, 0x65, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x49, 0x64, 0x52, 0x65, 0x75, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x15, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x52, 0x65, 0x75, 0x73, 0x65,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x3d, 0x0a, 0x0c, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6e,
	0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x74,
	0x72, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0b, 0x72, 0x65, 0x74, 0x72, 0x79, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x72, 0x6f, 0x6e, 0x5f, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x72,
	0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x2d, 0x0a, 0x06, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6e, 0x65, 0x63,
	0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x04, 0x6d, 0x65, 0x6d,
	0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x52, 0x04, 0x6d, 0x65,
	0x6d, 0x6f, 0x12, 0x4c, 0x0a, 0x11, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x10,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x12, 0x34, 0x0a, 0x16, 0x75, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62,
	0x6c, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x14, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x41, 0x0a, 0x20, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0x80, 0x13, 0x0a, 0x07, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x3c, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x6e, 0x65,
	0x63, 0x6f, 0x64, 0x65, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x91, 0x01, 0x0a, 0x29, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x48, 0x00,
	0x52, 0x25, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x72, 0x0a, 0x1e, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x48, 0x00, 0x52, 0x1b,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0xa0, 0x01, 0x0a, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x48, 0x00, 0x52, 0x2a, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x94,
	0x01, 0x0a, 0x2a, 0x66, 0x61, 0x69, 0x6c, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x48, 0x00, 0x52, 0x26, 0x66,
	0x61, 0x69, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0xa1, 0x01, 0x0a, 0x2f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3a, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x48, 0x00, 0x52, 0x2a, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x75, 0x0a, 0x1f, 0x63, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x48, 0x00, 0x52, 0x1c, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x12, 0x9a, 0x01, 0x0a, 0x2c, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x57,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x48, 0x00, 0x52, 0x28, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0xc9, 0x01,
	0x0a, 0x3d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x48, 0x00,
	0x52, 0x37, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x45,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x78, 0x0a, 0x20, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x48, 0x00, 0x52, 0x1d, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x12, 0xb1, 0x01, 0x0a, 0x35, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65,
	0x5f, 0x61, 0x73, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x41, 0x73, 0x4e,
	0x65, 0x77, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x48, 0x00, 0x52, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65,
	0x41, 0x73, 0x4e, 0x65, 0x77, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0xa7, 0x01, 0x0a, 0x31, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x57,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x48, 0x00, 0x52, 0x2c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x57,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x12, 0xb3, 0x01, 0x0a, 0x35, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x40, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x48, 0x00, 0x52, 0x30, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x45, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0xb0, 0x01, 0x0a, 0x34, 0x75, 0x70, 0x73, 0x65,
	0x72, 0x74, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x57, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x48, 0x00, 0x52, 0x2f, 0x75, 0x70, 0x73, 0x65, 0x72,
	0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x81, 0x01, 0x0a, 0x23, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64,
	0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x48, 0x00, 0x52, 0x20, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x9d,
	0x01, 0x0a, 0x2d, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x57, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x48, 0x00, 0x52, 0x29, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x57, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x42, 0x0c,
	0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x42, 0xad, 0x01, 0x0a,
	0x12, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x42, 0x0c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x50, 0x01, 0x5a, 0x30, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x72, 0x73, 0x6b, 0x76, 0x70, 0x2f, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x6e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0xa2, 0x02, 0x03, 0x4e, 0x43, 0x58, 0xaa, 0x02, 0x0e, 0x4e, 0x65,
	0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0xca, 0x02, 0x0e, 0x4e,
	0x65, 0x63, 0x6f, 0x64, 0x65, 0x5c, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0xe2, 0x02, 0x1a,
	0x4e, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x5c, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5c, 0x47,
	0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0f, 0x4e, 0x65, 0x63,
	0x6f, 0x64, 0x65, 0x3a, 0x3a, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_necode_command_message_proto_rawDescOnce sync.Once
	file_necode_command_message_proto_rawDescData = file_necode_command_message_proto_rawDesc
)

func file_necode_command_message_proto_rawDescGZIP() []byte {
	file_necode_command_message_proto_rawDescOnce.Do(func() {
		file_necode_command_message_proto_rawDescData = protoimpl.X.CompressGZIP(file_necode_command_message_proto_rawDescData)
	})
	return file_necode_command_message_proto_rawDescData
}

var file_necode_command_message_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_necode_command_message_proto_goTypes = []interface{}{
	(*ScheduleActivityTaskCommandAttributes)(nil),                   // 0: necode.command.ScheduleActivityTaskCommandAttributes
	(*RequestCancelActivityTaskCommandAttributes)(nil),              // 1: necode.command.RequestCancelActivityTaskCommandAttributes
	(*StartTimerCommandAttributes)(nil),                             // 2: necode.command.StartTimerCommandAttributes
	(*CompleteWorkflowExecutionCommandAttributes)(nil),              // 3: necode.command.CompleteWorkflowExecutionCommandAttributes
	(*FailWorkflowExecutionCommandAttributes)(nil),                  // 4: necode.command.FailWorkflowExecutionCommandAttributes
	(*CancelTimerCommandAttributes)(nil),                            // 5: necode.command.CancelTimerCommandAttributes
	(*CancelWorkflowExecutionCommandAttributes)(nil),                // 6: necode.command.CancelWorkflowExecutionCommandAttributes
	(*RequestCancelExternalWorkflowExecutionCommandAttributes)(nil), // 7: necode.command.RequestCancelExternalWorkflowExecutionCommandAttributes
	(*SignalExternalWorkflowExecutionCommandAttributes)(nil),        // 8: necode.command.SignalExternalWorkflowExecutionCommandAttributes
	(*UpsertWorkflowSearchAttributesCommandAttributes)(nil),         // 9: necode.command.UpsertWorkflowSearchAttributesCommandAttributes
	(*ModifyWorkflowPropertiesCommandAttributes)(nil),               // 10: necode.command.ModifyWorkflowPropertiesCommandAttributes
	(*RecordMarkerCommandAttributes)(nil),                           // 11: necode.command.RecordMarkerCommandAttributes
	(*ContinueAsNewWorkflowExecutionCommandAttributes)(nil),         // 12: necode.command.ContinueAsNewWorkflowExecutionCommandAttributes
	(*StartChildWorkflowExecutionCommandAttributes)(nil),            // 13: necode.command.StartChildWorkflowExecutionCommandAttributes
	(*ProtocolMessageCommandAttributes)(nil),                        // 14: necode.command.ProtocolMessageCommandAttributes
	(*Command)(nil),                                                 // 15: necode.command.Command
	nil,                                                             // 16: necode.command.RecordMarkerCommandAttributes.DetailsEntry
	(*common.ActivityType)(nil),                                     // 17: necode.common.ActivityType
	(*taskqueue.TaskQueue)(nil),                                     // 18: necode.taskqueue.TaskQueue
	(*common.Header)(nil),                                           // 19: necode.common.Header
	(*common.Payloads)(nil),                                         // 20: necode.common.Payloads
	(*durationpb.Duration)(nil),                                     // 21: google.protobuf.Duration
	(*common.RetryPolicy)(nil),                                      // 22: necode.common.RetryPolicy
	(*failure.Failure)(nil),                                         // 23: necode.failure.Failure
	(*common.WorkflowExecution)(nil),                                // 24: necode.common.WorkflowExecution
	(*common.SearchAttributes)(nil),                                 // 25: necode.common.SearchAttributes
	(*common.Memo)(nil),                                             // 26: necode.common.Memo
	(*common.WorkflowType)(nil),                                     // 27: necode.common.WorkflowType
	(enums.ContinueAsNewInitiator)(0),                               // 28: necode.enums.ContinueAsNewInitiator
	(enums.ParentClosePolicy)(0),                                    // 29: necode.enums.ParentClosePolicy
	(enums.WorkflowIdReusePolicy)(0),                                // 30: necode.enums.WorkflowIdReusePolicy
	(enums.CommandType)(0),                                          // 31: necode.enums.CommandType
}
var file_necode_command_message_proto_depIdxs = []int32{
	17, // 0: necode.command.ScheduleActivityTaskCommandAttributes.activity_type:type_name -> necode.common.ActivityType
	18, // 1: necode.command.ScheduleActivityTaskCommandAttributes.task_queue:type_name -> necode.taskqueue.TaskQueue
	19, // 2: necode.command.ScheduleActivityTaskCommandAttributes.header:type_name -> necode.common.Header
	20, // 3: necode.command.ScheduleActivityTaskCommandAttributes.input:type_name -> necode.common.Payloads
	21, // 4: necode.command.ScheduleActivityTaskCommandAttributes.schedule_to_close_timeout:type_name -> google.protobuf.Duration
	21, // 5: necode.command.ScheduleActivityTaskCommandAttributes.schedule_to_start_timeout:type_name -> google.protobuf.Duration
	21, // 6: necode.command.ScheduleActivityTaskCommandAttributes.start_to_close_timeout:type_name -> google.protobuf.Duration
	21, // 7: necode.command.ScheduleActivityTaskCommandAttributes.heartbeat_timeout:type_name -> google.protobuf.Duration
	22, // 8: necode.command.ScheduleActivityTaskCommandAttributes.retry_policy:type_name -> necode.common.RetryPolicy
	21, // 9: necode.command.StartTimerCommandAttributes.start_to_fire_timeout:type_name -> google.protobuf.Duration
	20, // 10: necode.command.CompleteWorkflowExecutionCommandAttributes.result:type_name -> necode.common.Payloads
	23, // 11: necode.command.FailWorkflowExecutionCommandAttributes.failure:type_name -> necode.failure.Failure
	20, // 12: necode.command.CancelWorkflowExecutionCommandAttributes.details:type_name -> necode.common.Payloads
	24, // 13: necode.command.SignalExternalWorkflowExecutionCommandAttributes.execution:type_name -> necode.common.WorkflowExecution
	20, // 14: necode.command.SignalExternalWorkflowExecutionCommandAttributes.input:type_name -> necode.common.Payloads
	19, // 15: necode.command.SignalExternalWorkflowExecutionCommandAttributes.header:type_name -> necode.common.Header
	25, // 16: necode.command.UpsertWorkflowSearchAttributesCommandAttributes.search_attributes:type_name -> necode.common.SearchAttributes
	26, // 17: necode.command.ModifyWorkflowPropertiesCommandAttributes.upserted_memo:type_name -> necode.common.Memo
	16, // 18: necode.command.RecordMarkerCommandAttributes.details:type_name -> necode.command.RecordMarkerCommandAttributes.DetailsEntry
	19, // 19: necode.command.RecordMarkerCommandAttributes.header:type_name -> necode.common.Header
	23, // 20: necode.command.RecordMarkerCommandAttributes.failure:type_name -> necode.failure.Failure
	27, // 21: necode.command.ContinueAsNewWorkflowExecutionCommandAttributes.workflow_type:type_name -> necode.common.WorkflowType
	18, // 22: necode.command.ContinueAsNewWorkflowExecutionCommandAttributes.task_queue:type_name -> necode.taskqueue.TaskQueue
	20, // 23: necode.command.ContinueAsNewWorkflowExecutionCommandAttributes.input:type_name -> necode.common.Payloads
	21, // 24: necode.command.ContinueAsNewWorkflowExecutionCommandAttributes.workflow_run_timeout:type_name -> google.protobuf.Duration
	21, // 25: necode.command.ContinueAsNewWorkflowExecutionCommandAttributes.workflow_task_timeout:type_name -> google.protobuf.Duration
	21, // 26: necode.command.ContinueAsNewWorkflowExecutionCommandAttributes.backoff_start_interval:type_name -> google.protobuf.Duration
	22, // 27: necode.command.ContinueAsNewWorkflowExecutionCommandAttributes.retry_policy:type_name -> necode.common.RetryPolicy
	28, // 28: necode.command.ContinueAsNewWorkflowExecutionCommandAttributes.initiator:type_name -> necode.enums.ContinueAsNewInitiator
	23, // 29: necode.command.ContinueAsNewWorkflowExecutionCommandAttributes.failure:type_name -> necode.failure.Failure
	20, // 30: necode.command.ContinueAsNewWorkflowExecutionCommandAttributes.last_completion_result:type_name -> necode.common.Payloads
	19, // 31: necode.command.ContinueAsNewWorkflowExecutionCommandAttributes.header:type_name -> necode.common.Header
	26, // 32: necode.command.ContinueAsNewWorkflowExecutionCommandAttributes.memo:type_name -> necode.common.Memo
	25, // 33: necode.command.ContinueAsNewWorkflowExecutionCommandAttributes.search_attributes:type_name -> necode.common.SearchAttributes
	27, // 34: necode.command.StartChildWorkflowExecutionCommandAttributes.workflow_type:type_name -> necode.common.WorkflowType
	18, // 35: necode.command.StartChildWorkflowExecutionCommandAttributes.task_queue:type_name -> necode.taskqueue.TaskQueue
	20, // 36: necode.command.StartChildWorkflowExecutionCommandAttributes.input:type_name -> necode.common.Payloads
	21, // 37: necode.command.StartChildWorkflowExecutionCommandAttributes.workflow_execution_timeout:type_name -> google.protobuf.Duration
	21, // 38: necode.command.StartChildWorkflowExecutionCommandAttributes.workflow_run_timeout:type_name -> google.protobuf.Duration
	21, // 39: necode.command.StartChildWorkflowExecutionCommandAttributes.workflow_task_timeout:type_name -> google.protobuf.Duration
	29, // 40: necode.command.StartChildWorkflowExecutionCommandAttributes.parent_close_policy:type_name -> necode.enums.ParentClosePolicy
	30, // 41: necode.command.StartChildWorkflowExecutionCommandAttributes.workflow_id_reuse_policy:type_name -> necode.enums.WorkflowIdReusePolicy
	22, // 42: necode.command.StartChildWorkflowExecutionCommandAttributes.retry_policy:type_name -> necode.common.RetryPolicy
	19, // 43: necode.command.StartChildWorkflowExecutionCommandAttributes.header:type_name -> necode.common.Header
	26, // 44: necode.command.StartChildWorkflowExecutionCommandAttributes.memo:type_name -> necode.common.Memo
	25, // 45: necode.command.StartChildWorkflowExecutionCommandAttributes.search_attributes:type_name -> necode.common.SearchAttributes
	31, // 46: necode.command.Command.command_type:type_name -> necode.enums.CommandType
	0,  // 47: necode.command.Command.schedule_activity_task_command_attributes:type_name -> necode.command.ScheduleActivityTaskCommandAttributes
	2,  // 48: necode.command.Command.start_timer_command_attributes:type_name -> necode.command.StartTimerCommandAttributes
	3,  // 49: necode.command.Command.complete_workflow_execution_command_attributes:type_name -> necode.command.CompleteWorkflowExecutionCommandAttributes
	4,  // 50: necode.command.Command.fail_workflow_execution_command_attributes:type_name -> necode.command.FailWorkflowExecutionCommandAttributes
	1,  // 51: necode.command.Command.request_cancel_activity_task_command_attributes:type_name -> necode.command.RequestCancelActivityTaskCommandAttributes
	5,  // 52: necode.command.Command.cancel_timer_command_attributes:type_name -> necode.command.CancelTimerCommandAttributes
	6,  // 53: necode.command.Command.cancel_workflow_execution_command_attributes:type_name -> necode.command.CancelWorkflowExecutionCommandAttributes
	7,  // 54: necode.command.Command.request_cancel_external_workflow_execution_command_attributes:type_name -> necode.command.RequestCancelExternalWorkflowExecutionCommandAttributes
	11, // 55: necode.command.Command.record_marker_command_attributes:type_name -> necode.command.RecordMarkerCommandAttributes
	12, // 56: necode.command.Command.continue_as_new_workflow_execution_command_attributes:type_name -> necode.command.ContinueAsNewWorkflowExecutionCommandAttributes
	13, // 57: necode.command.Command.start_child_workflow_execution_command_attributes:type_name -> necode.command.StartChildWorkflowExecutionCommandAttributes
	8,  // 58: necode.command.Command.signal_external_workflow_execution_command_attributes:type_name -> necode.command.SignalExternalWorkflowExecutionCommandAttributes
	9,  // 59: necode.command.Command.upsert_workflow_search_attributes_command_attributes:type_name -> necode.command.UpsertWorkflowSearchAttributesCommandAttributes
	14, // 60: necode.command.Command.protocol_message_command_attributes:type_name -> necode.command.ProtocolMessageCommandAttributes
	10, // 61: necode.command.Command.modify_workflow_properties_command_attributes:type_name -> necode.command.ModifyWorkflowPropertiesCommandAttributes
	20, // 62: necode.command.RecordMarkerCommandAttributes.DetailsEntry.value:type_name -> necode.common.Payloads
	63, // [63:63] is the sub-list for method output_type
	63, // [63:63] is the sub-list for method input_type
	63, // [63:63] is the sub-list for extension type_name
	63, // [63:63] is the sub-list for extension extendee
	0,  // [0:63] is the sub-list for field type_name
}

func init() { file_necode_command_message_proto_init() }
func file_necode_command_message_proto_init() {
	if File_necode_command_message_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_necode_command_message_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduleActivityTaskCommandAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_command_message_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestCancelActivityTaskCommandAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_command_message_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartTimerCommandAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_command_message_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompleteWorkflowExecutionCommandAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_command_message_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FailWorkflowExecutionCommandAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_command_message_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelTimerCommandAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_command_message_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelWorkflowExecutionCommandAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_command_message_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestCancelExternalWorkflowExecutionCommandAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_command_message_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignalExternalWorkflowExecutionCommandAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_command_message_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertWorkflowSearchAttributesCommandAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_command_message_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyWorkflowPropertiesCommandAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_command_message_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordMarkerCommandAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_command_message_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContinueAsNewWorkflowExecutionCommandAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_command_message_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartChildWorkflowExecutionCommandAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_command_message_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtocolMessageCommandAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_necode_command_message_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Command); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_necode_command_message_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*Command_ScheduleActivityTaskCommandAttributes)(nil),
		(*Command_StartTimerCommandAttributes)(nil),
		(*Command_CompleteWorkflowExecutionCommandAttributes)(nil),
		(*Command_FailWorkflowExecutionCommandAttributes)(nil),
		(*Command_RequestCancelActivityTaskCommandAttributes)(nil),
		(*Command_CancelTimerCommandAttributes)(nil),
		(*Command_CancelWorkflowExecutionCommandAttributes)(nil),
		(*Command_RequestCancelExternalWorkflowExecutionCommandAttributes)(nil),
		(*Command_RecordMarkerCommandAttributes)(nil),
		(*Command_ContinueAsNewWorkflowExecutionCommandAttributes)(nil),
		(*Command_StartChildWorkflowExecutionCommandAttributes)(nil),
		(*Command_SignalExternalWorkflowExecutionCommandAttributes)(nil),
		(*Command_UpsertWorkflowSearchAttributesCommandAttributes)(nil),
		(*Command_ProtocolMessageCommandAttributes)(nil),
		(*Command_ModifyWorkflowPropertiesCommandAttributes)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_necode_command_message_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_necode_command_message_proto_goTypes,
		DependencyIndexes: file_necode_command_message_proto_depIdxs,
		MessageInfos:      file_necode_command_message_proto_msgTypes,
	}.Build()
	File_necode_command_message_proto = out.File
	file_necode_command_message_proto_rawDesc = nil
	file_necode_command_message_proto_goTypes = nil
	file_necode_command_message_proto_depIdxs = nil
}
