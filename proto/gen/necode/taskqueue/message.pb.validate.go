// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: necode/taskqueue/message.proto

package taskqueue

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	enums "github.com/rskvp/necode/proto/gen/necode/enums"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = enums.TaskQueueKind(0)
)

// Validate checks the field values on TaskQueue with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TaskQueue) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TaskQueue with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TaskQueueMultiError, or nil
// if none found.
func (m *TaskQueue) ValidateAll() error {
	return m.validate(true)
}

func (m *TaskQueue) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Kind

	// no validation rules for NormalName

	if len(errors) > 0 {
		return TaskQueueMultiError(errors)
	}

	return nil
}

// TaskQueueMultiError is an error wrapping multiple validation errors returned
// by TaskQueue.ValidateAll() if the designated constraints aren't met.
type TaskQueueMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TaskQueueMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TaskQueueMultiError) AllErrors() []error { return m }

// TaskQueueValidationError is the validation error returned by
// TaskQueue.Validate if the designated constraints aren't met.
type TaskQueueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TaskQueueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TaskQueueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TaskQueueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TaskQueueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TaskQueueValidationError) ErrorName() string { return "TaskQueueValidationError" }

// Error satisfies the builtin error interface
func (e TaskQueueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTaskQueue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TaskQueueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TaskQueueValidationError{}

// Validate checks the field values on TaskQueueMetadata with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TaskQueueMetadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TaskQueueMetadata with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TaskQueueMetadataMultiError, or nil if none found.
func (m *TaskQueueMetadata) ValidateAll() error {
	return m.validate(true)
}

func (m *TaskQueueMetadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMaxTasksPerSecond()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TaskQueueMetadataValidationError{
					field:  "MaxTasksPerSecond",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TaskQueueMetadataValidationError{
					field:  "MaxTasksPerSecond",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMaxTasksPerSecond()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TaskQueueMetadataValidationError{
				field:  "MaxTasksPerSecond",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TaskQueueMetadataMultiError(errors)
	}

	return nil
}

// TaskQueueMetadataMultiError is an error wrapping multiple validation errors
// returned by TaskQueueMetadata.ValidateAll() if the designated constraints
// aren't met.
type TaskQueueMetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TaskQueueMetadataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TaskQueueMetadataMultiError) AllErrors() []error { return m }

// TaskQueueMetadataValidationError is the validation error returned by
// TaskQueueMetadata.Validate if the designated constraints aren't met.
type TaskQueueMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TaskQueueMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TaskQueueMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TaskQueueMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TaskQueueMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TaskQueueMetadataValidationError) ErrorName() string {
	return "TaskQueueMetadataValidationError"
}

// Error satisfies the builtin error interface
func (e TaskQueueMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTaskQueueMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TaskQueueMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TaskQueueMetadataValidationError{}

// Validate checks the field values on TaskQueueStatus with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TaskQueueStatus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TaskQueueStatus with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TaskQueueStatusMultiError, or nil if none found.
func (m *TaskQueueStatus) ValidateAll() error {
	return m.validate(true)
}

func (m *TaskQueueStatus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BacklogCountHint

	// no validation rules for ReadLevel

	// no validation rules for AckLevel

	// no validation rules for RatePerSecond

	if all {
		switch v := interface{}(m.GetTaskIdBlock()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TaskQueueStatusValidationError{
					field:  "TaskIdBlock",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TaskQueueStatusValidationError{
					field:  "TaskIdBlock",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTaskIdBlock()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TaskQueueStatusValidationError{
				field:  "TaskIdBlock",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TaskQueueStatusMultiError(errors)
	}

	return nil
}

// TaskQueueStatusMultiError is an error wrapping multiple validation errors
// returned by TaskQueueStatus.ValidateAll() if the designated constraints
// aren't met.
type TaskQueueStatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TaskQueueStatusMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TaskQueueStatusMultiError) AllErrors() []error { return m }

// TaskQueueStatusValidationError is the validation error returned by
// TaskQueueStatus.Validate if the designated constraints aren't met.
type TaskQueueStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TaskQueueStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TaskQueueStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TaskQueueStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TaskQueueStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TaskQueueStatusValidationError) ErrorName() string { return "TaskQueueStatusValidationError" }

// Error satisfies the builtin error interface
func (e TaskQueueStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTaskQueueStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TaskQueueStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TaskQueueStatusValidationError{}

// Validate checks the field values on TaskIdBlock with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TaskIdBlock) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TaskIdBlock with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TaskIdBlockMultiError, or
// nil if none found.
func (m *TaskIdBlock) ValidateAll() error {
	return m.validate(true)
}

func (m *TaskIdBlock) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StartId

	// no validation rules for EndId

	if len(errors) > 0 {
		return TaskIdBlockMultiError(errors)
	}

	return nil
}

// TaskIdBlockMultiError is an error wrapping multiple validation errors
// returned by TaskIdBlock.ValidateAll() if the designated constraints aren't met.
type TaskIdBlockMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TaskIdBlockMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TaskIdBlockMultiError) AllErrors() []error { return m }

// TaskIdBlockValidationError is the validation error returned by
// TaskIdBlock.Validate if the designated constraints aren't met.
type TaskIdBlockValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TaskIdBlockValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TaskIdBlockValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TaskIdBlockValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TaskIdBlockValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TaskIdBlockValidationError) ErrorName() string { return "TaskIdBlockValidationError" }

// Error satisfies the builtin error interface
func (e TaskIdBlockValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTaskIdBlock.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TaskIdBlockValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TaskIdBlockValidationError{}

// Validate checks the field values on TaskQueuePartitionMetadata with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TaskQueuePartitionMetadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TaskQueuePartitionMetadata with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TaskQueuePartitionMetadataMultiError, or nil if none found.
func (m *TaskQueuePartitionMetadata) ValidateAll() error {
	return m.validate(true)
}

func (m *TaskQueuePartitionMetadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	// no validation rules for OwnerHostName

	if len(errors) > 0 {
		return TaskQueuePartitionMetadataMultiError(errors)
	}

	return nil
}

// TaskQueuePartitionMetadataMultiError is an error wrapping multiple
// validation errors returned by TaskQueuePartitionMetadata.ValidateAll() if
// the designated constraints aren't met.
type TaskQueuePartitionMetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TaskQueuePartitionMetadataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TaskQueuePartitionMetadataMultiError) AllErrors() []error { return m }

// TaskQueuePartitionMetadataValidationError is the validation error returned
// by TaskQueuePartitionMetadata.Validate if the designated constraints aren't met.
type TaskQueuePartitionMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TaskQueuePartitionMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TaskQueuePartitionMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TaskQueuePartitionMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TaskQueuePartitionMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TaskQueuePartitionMetadataValidationError) ErrorName() string {
	return "TaskQueuePartitionMetadataValidationError"
}

// Error satisfies the builtin error interface
func (e TaskQueuePartitionMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTaskQueuePartitionMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TaskQueuePartitionMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TaskQueuePartitionMetadataValidationError{}

// Validate checks the field values on PollerInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PollerInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PollerInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PollerInfoMultiError, or
// nil if none found.
func (m *PollerInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *PollerInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetLastAccessTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PollerInfoValidationError{
					field:  "LastAccessTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PollerInfoValidationError{
					field:  "LastAccessTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLastAccessTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PollerInfoValidationError{
				field:  "LastAccessTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Identity

	// no validation rules for RatePerSecond

	if all {
		switch v := interface{}(m.GetWorkerVersionCapabilities()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PollerInfoValidationError{
					field:  "WorkerVersionCapabilities",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PollerInfoValidationError{
					field:  "WorkerVersionCapabilities",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkerVersionCapabilities()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PollerInfoValidationError{
				field:  "WorkerVersionCapabilities",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PollerInfoMultiError(errors)
	}

	return nil
}

// PollerInfoMultiError is an error wrapping multiple validation errors
// returned by PollerInfo.ValidateAll() if the designated constraints aren't met.
type PollerInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PollerInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PollerInfoMultiError) AllErrors() []error { return m }

// PollerInfoValidationError is the validation error returned by
// PollerInfo.Validate if the designated constraints aren't met.
type PollerInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PollerInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PollerInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PollerInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PollerInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PollerInfoValidationError) ErrorName() string { return "PollerInfoValidationError" }

// Error satisfies the builtin error interface
func (e PollerInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPollerInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PollerInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PollerInfoValidationError{}

// Validate checks the field values on StickyExecutionAttributes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StickyExecutionAttributes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StickyExecutionAttributes with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StickyExecutionAttributesMultiError, or nil if none found.
func (m *StickyExecutionAttributes) ValidateAll() error {
	return m.validate(true)
}

func (m *StickyExecutionAttributes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetWorkerTaskQueue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StickyExecutionAttributesValidationError{
					field:  "WorkerTaskQueue",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StickyExecutionAttributesValidationError{
					field:  "WorkerTaskQueue",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkerTaskQueue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StickyExecutionAttributesValidationError{
				field:  "WorkerTaskQueue",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetScheduleToStartTimeout()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StickyExecutionAttributesValidationError{
					field:  "ScheduleToStartTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StickyExecutionAttributesValidationError{
					field:  "ScheduleToStartTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetScheduleToStartTimeout()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StickyExecutionAttributesValidationError{
				field:  "ScheduleToStartTimeout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return StickyExecutionAttributesMultiError(errors)
	}

	return nil
}

// StickyExecutionAttributesMultiError is an error wrapping multiple validation
// errors returned by StickyExecutionAttributes.ValidateAll() if the
// designated constraints aren't met.
type StickyExecutionAttributesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StickyExecutionAttributesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StickyExecutionAttributesMultiError) AllErrors() []error { return m }

// StickyExecutionAttributesValidationError is the validation error returned by
// StickyExecutionAttributes.Validate if the designated constraints aren't met.
type StickyExecutionAttributesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StickyExecutionAttributesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StickyExecutionAttributesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StickyExecutionAttributesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StickyExecutionAttributesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StickyExecutionAttributesValidationError) ErrorName() string {
	return "StickyExecutionAttributesValidationError"
}

// Error satisfies the builtin error interface
func (e StickyExecutionAttributesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStickyExecutionAttributes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StickyExecutionAttributesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StickyExecutionAttributesValidationError{}

// Validate checks the field values on CompatibleVersionSet with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CompatibleVersionSet) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CompatibleVersionSet with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CompatibleVersionSetMultiError, or nil if none found.
func (m *CompatibleVersionSet) ValidateAll() error {
	return m.validate(true)
}

func (m *CompatibleVersionSet) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CompatibleVersionSetMultiError(errors)
	}

	return nil
}

// CompatibleVersionSetMultiError is an error wrapping multiple validation
// errors returned by CompatibleVersionSet.ValidateAll() if the designated
// constraints aren't met.
type CompatibleVersionSetMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CompatibleVersionSetMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CompatibleVersionSetMultiError) AllErrors() []error { return m }

// CompatibleVersionSetValidationError is the validation error returned by
// CompatibleVersionSet.Validate if the designated constraints aren't met.
type CompatibleVersionSetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompatibleVersionSetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompatibleVersionSetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompatibleVersionSetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompatibleVersionSetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompatibleVersionSetValidationError) ErrorName() string {
	return "CompatibleVersionSetValidationError"
}

// Error satisfies the builtin error interface
func (e CompatibleVersionSetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompatibleVersionSet.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompatibleVersionSetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompatibleVersionSetValidationError{}

// Validate checks the field values on TaskQueueReachability with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TaskQueueReachability) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TaskQueueReachability with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TaskQueueReachabilityMultiError, or nil if none found.
func (m *TaskQueueReachability) ValidateAll() error {
	return m.validate(true)
}

func (m *TaskQueueReachability) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TaskQueue

	if len(errors) > 0 {
		return TaskQueueReachabilityMultiError(errors)
	}

	return nil
}

// TaskQueueReachabilityMultiError is an error wrapping multiple validation
// errors returned by TaskQueueReachability.ValidateAll() if the designated
// constraints aren't met.
type TaskQueueReachabilityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TaskQueueReachabilityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TaskQueueReachabilityMultiError) AllErrors() []error { return m }

// TaskQueueReachabilityValidationError is the validation error returned by
// TaskQueueReachability.Validate if the designated constraints aren't met.
type TaskQueueReachabilityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TaskQueueReachabilityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TaskQueueReachabilityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TaskQueueReachabilityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TaskQueueReachabilityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TaskQueueReachabilityValidationError) ErrorName() string {
	return "TaskQueueReachabilityValidationError"
}

// Error satisfies the builtin error interface
func (e TaskQueueReachabilityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTaskQueueReachability.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TaskQueueReachabilityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TaskQueueReachabilityValidationError{}

// Validate checks the field values on BuildIdReachability with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BuildIdReachability) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BuildIdReachability with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BuildIdReachabilityMultiError, or nil if none found.
func (m *BuildIdReachability) ValidateAll() error {
	return m.validate(true)
}

func (m *BuildIdReachability) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BuildId

	for idx, item := range m.GetTaskQueueReachability() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BuildIdReachabilityValidationError{
						field:  fmt.Sprintf("TaskQueueReachability[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BuildIdReachabilityValidationError{
						field:  fmt.Sprintf("TaskQueueReachability[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BuildIdReachabilityValidationError{
					field:  fmt.Sprintf("TaskQueueReachability[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return BuildIdReachabilityMultiError(errors)
	}

	return nil
}

// BuildIdReachabilityMultiError is an error wrapping multiple validation
// errors returned by BuildIdReachability.ValidateAll() if the designated
// constraints aren't met.
type BuildIdReachabilityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BuildIdReachabilityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BuildIdReachabilityMultiError) AllErrors() []error { return m }

// BuildIdReachabilityValidationError is the validation error returned by
// BuildIdReachability.Validate if the designated constraints aren't met.
type BuildIdReachabilityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BuildIdReachabilityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BuildIdReachabilityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BuildIdReachabilityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BuildIdReachabilityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BuildIdReachabilityValidationError) ErrorName() string {
	return "BuildIdReachabilityValidationError"
}

// Error satisfies the builtin error interface
func (e BuildIdReachabilityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBuildIdReachability.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BuildIdReachabilityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BuildIdReachabilityValidationError{}
