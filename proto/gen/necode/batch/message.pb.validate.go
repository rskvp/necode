// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: necode/batch/message.proto

package batch

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	enums "github.com/rskvp/necode/proto/gen/necode/enums"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = enums.BatchOperationState(0)
)

// Validate checks the field values on BatchOperationInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BatchOperationInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchOperationInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BatchOperationInfoMultiError, or nil if none found.
func (m *BatchOperationInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchOperationInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for JobId

	// no validation rules for State

	if all {
		switch v := interface{}(m.GetStartTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BatchOperationInfoValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BatchOperationInfoValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BatchOperationInfoValidationError{
				field:  "StartTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCloseTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BatchOperationInfoValidationError{
					field:  "CloseTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BatchOperationInfoValidationError{
					field:  "CloseTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCloseTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BatchOperationInfoValidationError{
				field:  "CloseTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BatchOperationInfoMultiError(errors)
	}

	return nil
}

// BatchOperationInfoMultiError is an error wrapping multiple validation errors
// returned by BatchOperationInfo.ValidateAll() if the designated constraints
// aren't met.
type BatchOperationInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchOperationInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchOperationInfoMultiError) AllErrors() []error { return m }

// BatchOperationInfoValidationError is the validation error returned by
// BatchOperationInfo.Validate if the designated constraints aren't met.
type BatchOperationInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchOperationInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchOperationInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchOperationInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchOperationInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchOperationInfoValidationError) ErrorName() string {
	return "BatchOperationInfoValidationError"
}

// Error satisfies the builtin error interface
func (e BatchOperationInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchOperationInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchOperationInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchOperationInfoValidationError{}

// Validate checks the field values on BatchOperationTermination with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BatchOperationTermination) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchOperationTermination with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BatchOperationTerminationMultiError, or nil if none found.
func (m *BatchOperationTermination) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchOperationTermination) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDetails()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BatchOperationTerminationValidationError{
					field:  "Details",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BatchOperationTerminationValidationError{
					field:  "Details",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BatchOperationTerminationValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Identity

	if len(errors) > 0 {
		return BatchOperationTerminationMultiError(errors)
	}

	return nil
}

// BatchOperationTerminationMultiError is an error wrapping multiple validation
// errors returned by BatchOperationTermination.ValidateAll() if the
// designated constraints aren't met.
type BatchOperationTerminationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchOperationTerminationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchOperationTerminationMultiError) AllErrors() []error { return m }

// BatchOperationTerminationValidationError is the validation error returned by
// BatchOperationTermination.Validate if the designated constraints aren't met.
type BatchOperationTerminationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchOperationTerminationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchOperationTerminationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchOperationTerminationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchOperationTerminationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchOperationTerminationValidationError) ErrorName() string {
	return "BatchOperationTerminationValidationError"
}

// Error satisfies the builtin error interface
func (e BatchOperationTerminationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchOperationTermination.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchOperationTerminationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchOperationTerminationValidationError{}

// Validate checks the field values on BatchOperationSignal with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BatchOperationSignal) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchOperationSignal with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BatchOperationSignalMultiError, or nil if none found.
func (m *BatchOperationSignal) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchOperationSignal) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Signal

	if all {
		switch v := interface{}(m.GetInput()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BatchOperationSignalValidationError{
					field:  "Input",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BatchOperationSignalValidationError{
					field:  "Input",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInput()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BatchOperationSignalValidationError{
				field:  "Input",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetHeader()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BatchOperationSignalValidationError{
					field:  "Header",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BatchOperationSignalValidationError{
					field:  "Header",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHeader()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BatchOperationSignalValidationError{
				field:  "Header",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Identity

	if len(errors) > 0 {
		return BatchOperationSignalMultiError(errors)
	}

	return nil
}

// BatchOperationSignalMultiError is an error wrapping multiple validation
// errors returned by BatchOperationSignal.ValidateAll() if the designated
// constraints aren't met.
type BatchOperationSignalMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchOperationSignalMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchOperationSignalMultiError) AllErrors() []error { return m }

// BatchOperationSignalValidationError is the validation error returned by
// BatchOperationSignal.Validate if the designated constraints aren't met.
type BatchOperationSignalValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchOperationSignalValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchOperationSignalValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchOperationSignalValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchOperationSignalValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchOperationSignalValidationError) ErrorName() string {
	return "BatchOperationSignalValidationError"
}

// Error satisfies the builtin error interface
func (e BatchOperationSignalValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchOperationSignal.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchOperationSignalValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchOperationSignalValidationError{}

// Validate checks the field values on BatchOperationCancellation with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BatchOperationCancellation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchOperationCancellation with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BatchOperationCancellationMultiError, or nil if none found.
func (m *BatchOperationCancellation) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchOperationCancellation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Identity

	if len(errors) > 0 {
		return BatchOperationCancellationMultiError(errors)
	}

	return nil
}

// BatchOperationCancellationMultiError is an error wrapping multiple
// validation errors returned by BatchOperationCancellation.ValidateAll() if
// the designated constraints aren't met.
type BatchOperationCancellationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchOperationCancellationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchOperationCancellationMultiError) AllErrors() []error { return m }

// BatchOperationCancellationValidationError is the validation error returned
// by BatchOperationCancellation.Validate if the designated constraints aren't met.
type BatchOperationCancellationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchOperationCancellationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchOperationCancellationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchOperationCancellationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchOperationCancellationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchOperationCancellationValidationError) ErrorName() string {
	return "BatchOperationCancellationValidationError"
}

// Error satisfies the builtin error interface
func (e BatchOperationCancellationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchOperationCancellation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchOperationCancellationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchOperationCancellationValidationError{}

// Validate checks the field values on BatchOperationDeletion with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BatchOperationDeletion) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchOperationDeletion with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BatchOperationDeletionMultiError, or nil if none found.
func (m *BatchOperationDeletion) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchOperationDeletion) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Identity

	if len(errors) > 0 {
		return BatchOperationDeletionMultiError(errors)
	}

	return nil
}

// BatchOperationDeletionMultiError is an error wrapping multiple validation
// errors returned by BatchOperationDeletion.ValidateAll() if the designated
// constraints aren't met.
type BatchOperationDeletionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchOperationDeletionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchOperationDeletionMultiError) AllErrors() []error { return m }

// BatchOperationDeletionValidationError is the validation error returned by
// BatchOperationDeletion.Validate if the designated constraints aren't met.
type BatchOperationDeletionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchOperationDeletionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchOperationDeletionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchOperationDeletionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchOperationDeletionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchOperationDeletionValidationError) ErrorName() string {
	return "BatchOperationDeletionValidationError"
}

// Error satisfies the builtin error interface
func (e BatchOperationDeletionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchOperationDeletion.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchOperationDeletionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchOperationDeletionValidationError{}

// Validate checks the field values on BatchOperationReset with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BatchOperationReset) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchOperationReset with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BatchOperationResetMultiError, or nil if none found.
func (m *BatchOperationReset) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchOperationReset) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ResetType

	// no validation rules for ResetReapplyType

	// no validation rules for Identity

	if len(errors) > 0 {
		return BatchOperationResetMultiError(errors)
	}

	return nil
}

// BatchOperationResetMultiError is an error wrapping multiple validation
// errors returned by BatchOperationReset.ValidateAll() if the designated
// constraints aren't met.
type BatchOperationResetMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchOperationResetMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchOperationResetMultiError) AllErrors() []error { return m }

// BatchOperationResetValidationError is the validation error returned by
// BatchOperationReset.Validate if the designated constraints aren't met.
type BatchOperationResetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchOperationResetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchOperationResetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchOperationResetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchOperationResetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchOperationResetValidationError) ErrorName() string {
	return "BatchOperationResetValidationError"
}

// Error satisfies the builtin error interface
func (e BatchOperationResetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchOperationReset.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchOperationResetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchOperationResetValidationError{}
