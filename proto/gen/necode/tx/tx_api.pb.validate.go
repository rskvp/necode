// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: necode/tx/tx_api.proto

package tx

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateTransferRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTransferRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTransferRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTransferRequestMultiError, or nil if none found.
func (m *CreateTransferRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTransferRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SrcTargetUri

	// no validation rules for DestTargetUri

	if all {
		switch v := interface{}(m.GetShareId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateTransferRequestValidationError{
					field:  "ShareId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateTransferRequestValidationError{
					field:  "ShareId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetShareId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateTransferRequestValidationError{
				field:  "ShareId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateTransferRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateTransferRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateTransferRequestValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateTransferRequestMultiError(errors)
	}

	return nil
}

// CreateTransferRequestMultiError is an error wrapping multiple validation
// errors returned by CreateTransferRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateTransferRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTransferRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTransferRequestMultiError) AllErrors() []error { return m }

// CreateTransferRequestValidationError is the validation error returned by
// CreateTransferRequest.Validate if the designated constraints aren't met.
type CreateTransferRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTransferRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTransferRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTransferRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTransferRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTransferRequestValidationError) ErrorName() string {
	return "CreateTransferRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTransferRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTransferRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTransferRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTransferRequestValidationError{}

// Validate checks the field values on CreateTransferResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTransferResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTransferResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTransferResponseMultiError, or nil if none found.
func (m *CreateTransferResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTransferResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateTransferResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateTransferResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateTransferResponseValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTxInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateTransferResponseValidationError{
					field:  "TxInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateTransferResponseValidationError{
					field:  "TxInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTxInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateTransferResponseValidationError{
				field:  "TxInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateTransferResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateTransferResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateTransferResponseValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateTransferResponseMultiError(errors)
	}

	return nil
}

// CreateTransferResponseMultiError is an error wrapping multiple validation
// errors returned by CreateTransferResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateTransferResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTransferResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTransferResponseMultiError) AllErrors() []error { return m }

// CreateTransferResponseValidationError is the validation error returned by
// CreateTransferResponse.Validate if the designated constraints aren't met.
type CreateTransferResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTransferResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTransferResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTransferResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTransferResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTransferResponseValidationError) ErrorName() string {
	return "CreateTransferResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTransferResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTransferResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTransferResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTransferResponseValidationError{}

// Validate checks the field values on GetTransferStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTransferStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTransferStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTransferStatusRequestMultiError, or nil if none found.
func (m *GetTransferStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTransferStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTxId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTransferStatusRequestValidationError{
					field:  "TxId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTransferStatusRequestValidationError{
					field:  "TxId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTxId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTransferStatusRequestValidationError{
				field:  "TxId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTransferStatusRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTransferStatusRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTransferStatusRequestValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetTransferStatusRequestMultiError(errors)
	}

	return nil
}

// GetTransferStatusRequestMultiError is an error wrapping multiple validation
// errors returned by GetTransferStatusRequest.ValidateAll() if the designated
// constraints aren't met.
type GetTransferStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTransferStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTransferStatusRequestMultiError) AllErrors() []error { return m }

// GetTransferStatusRequestValidationError is the validation error returned by
// GetTransferStatusRequest.Validate if the designated constraints aren't met.
type GetTransferStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTransferStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTransferStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTransferStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTransferStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTransferStatusRequestValidationError) ErrorName() string {
	return "GetTransferStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTransferStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTransferStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTransferStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTransferStatusRequestValidationError{}

// Validate checks the field values on GetTransferStatusResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTransferStatusResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTransferStatusResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTransferStatusResponseMultiError, or nil if none found.
func (m *GetTransferStatusResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTransferStatusResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTransferStatusResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTransferStatusResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTransferStatusResponseValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTxInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTransferStatusResponseValidationError{
					field:  "TxInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTransferStatusResponseValidationError{
					field:  "TxInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTxInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTransferStatusResponseValidationError{
				field:  "TxInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTransferStatusResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTransferStatusResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTransferStatusResponseValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetTransferStatusResponseMultiError(errors)
	}

	return nil
}

// GetTransferStatusResponseMultiError is an error wrapping multiple validation
// errors returned by GetTransferStatusResponse.ValidateAll() if the
// designated constraints aren't met.
type GetTransferStatusResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTransferStatusResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTransferStatusResponseMultiError) AllErrors() []error { return m }

// GetTransferStatusResponseValidationError is the validation error returned by
// GetTransferStatusResponse.Validate if the designated constraints aren't met.
type GetTransferStatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTransferStatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTransferStatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTransferStatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTransferStatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTransferStatusResponseValidationError) ErrorName() string {
	return "GetTransferStatusResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetTransferStatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTransferStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTransferStatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTransferStatusResponseValidationError{}

// Validate checks the field values on CancelTransferRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CancelTransferRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelTransferRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelTransferRequestMultiError, or nil if none found.
func (m *CancelTransferRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelTransferRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTxId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CancelTransferRequestValidationError{
					field:  "TxId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CancelTransferRequestValidationError{
					field:  "TxId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTxId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CancelTransferRequestValidationError{
				field:  "TxId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CancelTransferRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CancelTransferRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CancelTransferRequestValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CancelTransferRequestMultiError(errors)
	}

	return nil
}

// CancelTransferRequestMultiError is an error wrapping multiple validation
// errors returned by CancelTransferRequest.ValidateAll() if the designated
// constraints aren't met.
type CancelTransferRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelTransferRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelTransferRequestMultiError) AllErrors() []error { return m }

// CancelTransferRequestValidationError is the validation error returned by
// CancelTransferRequest.Validate if the designated constraints aren't met.
type CancelTransferRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelTransferRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelTransferRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelTransferRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelTransferRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelTransferRequestValidationError) ErrorName() string {
	return "CancelTransferRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CancelTransferRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelTransferRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelTransferRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelTransferRequestValidationError{}

// Validate checks the field values on CancelTransferResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CancelTransferResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelTransferResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelTransferResponseMultiError, or nil if none found.
func (m *CancelTransferResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelTransferResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CancelTransferResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CancelTransferResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CancelTransferResponseValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTxInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CancelTransferResponseValidationError{
					field:  "TxInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CancelTransferResponseValidationError{
					field:  "TxInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTxInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CancelTransferResponseValidationError{
				field:  "TxInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CancelTransferResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CancelTransferResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CancelTransferResponseValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CancelTransferResponseMultiError(errors)
	}

	return nil
}

// CancelTransferResponseMultiError is an error wrapping multiple validation
// errors returned by CancelTransferResponse.ValidateAll() if the designated
// constraints aren't met.
type CancelTransferResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelTransferResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelTransferResponseMultiError) AllErrors() []error { return m }

// CancelTransferResponseValidationError is the validation error returned by
// CancelTransferResponse.Validate if the designated constraints aren't met.
type CancelTransferResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelTransferResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelTransferResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelTransferResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelTransferResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelTransferResponseValidationError) ErrorName() string {
	return "CancelTransferResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CancelTransferResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelTransferResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelTransferResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelTransferResponseValidationError{}

// Validate checks the field values on ListTransfersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTransfersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTransfersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTransfersRequestMultiError, or nil if none found.
func (m *ListTransfersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTransfersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListTransfersRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListTransfersRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListTransfersRequestValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetFilters() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListTransfersRequestValidationError{
						field:  fmt.Sprintf("Filters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListTransfersRequestValidationError{
						field:  fmt.Sprintf("Filters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTransfersRequestValidationError{
					field:  fmt.Sprintf("Filters[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListTransfersRequestMultiError(errors)
	}

	return nil
}

// ListTransfersRequestMultiError is an error wrapping multiple validation
// errors returned by ListTransfersRequest.ValidateAll() if the designated
// constraints aren't met.
type ListTransfersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTransfersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTransfersRequestMultiError) AllErrors() []error { return m }

// ListTransfersRequestValidationError is the validation error returned by
// ListTransfersRequest.Validate if the designated constraints aren't met.
type ListTransfersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTransfersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTransfersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTransfersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTransfersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTransfersRequestValidationError) ErrorName() string {
	return "ListTransfersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListTransfersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTransfersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTransfersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTransfersRequestValidationError{}

// Validate checks the field values on ListTransfersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTransfersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTransfersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTransfersResponseMultiError, or nil if none found.
func (m *ListTransfersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTransfersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListTransfersResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListTransfersResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListTransfersResponseValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetTransfers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListTransfersResponseValidationError{
						field:  fmt.Sprintf("Transfers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListTransfersResponseValidationError{
						field:  fmt.Sprintf("Transfers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTransfersResponseValidationError{
					field:  fmt.Sprintf("Transfers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListTransfersResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListTransfersResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListTransfersResponseValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListTransfersResponseMultiError(errors)
	}

	return nil
}

// ListTransfersResponseMultiError is an error wrapping multiple validation
// errors returned by ListTransfersResponse.ValidateAll() if the designated
// constraints aren't met.
type ListTransfersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTransfersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTransfersResponseMultiError) AllErrors() []error { return m }

// ListTransfersResponseValidationError is the validation error returned by
// ListTransfersResponse.Validate if the designated constraints aren't met.
type ListTransfersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTransfersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTransfersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTransfersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTransfersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTransfersResponseValidationError) ErrorName() string {
	return "ListTransfersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListTransfersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTransfersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTransfersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTransfersResponseValidationError{}

// Validate checks the field values on RetryTransferRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RetryTransferRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RetryTransferRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RetryTransferRequestMultiError, or nil if none found.
func (m *RetryTransferRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RetryTransferRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTxId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RetryTransferRequestValidationError{
					field:  "TxId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RetryTransferRequestValidationError{
					field:  "TxId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTxId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RetryTransferRequestValidationError{
				field:  "TxId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RetryTransferRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RetryTransferRequestValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RetryTransferRequestValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RetryTransferRequestMultiError(errors)
	}

	return nil
}

// RetryTransferRequestMultiError is an error wrapping multiple validation
// errors returned by RetryTransferRequest.ValidateAll() if the designated
// constraints aren't met.
type RetryTransferRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RetryTransferRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RetryTransferRequestMultiError) AllErrors() []error { return m }

// RetryTransferRequestValidationError is the validation error returned by
// RetryTransferRequest.Validate if the designated constraints aren't met.
type RetryTransferRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RetryTransferRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RetryTransferRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RetryTransferRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RetryTransferRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RetryTransferRequestValidationError) ErrorName() string {
	return "RetryTransferRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RetryTransferRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRetryTransferRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RetryTransferRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RetryTransferRequestValidationError{}

// Validate checks the field values on RetryTransferResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RetryTransferResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RetryTransferResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RetryTransferResponseMultiError, or nil if none found.
func (m *RetryTransferResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RetryTransferResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RetryTransferResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RetryTransferResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RetryTransferResponseValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTxInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RetryTransferResponseValidationError{
					field:  "TxInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RetryTransferResponseValidationError{
					field:  "TxInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTxInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RetryTransferResponseValidationError{
				field:  "TxInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOpaque()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RetryTransferResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RetryTransferResponseValidationError{
					field:  "Opaque",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpaque()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RetryTransferResponseValidationError{
				field:  "Opaque",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RetryTransferResponseMultiError(errors)
	}

	return nil
}

// RetryTransferResponseMultiError is an error wrapping multiple validation
// errors returned by RetryTransferResponse.ValidateAll() if the designated
// constraints aren't met.
type RetryTransferResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RetryTransferResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RetryTransferResponseMultiError) AllErrors() []error { return m }

// RetryTransferResponseValidationError is the validation error returned by
// RetryTransferResponse.Validate if the designated constraints aren't met.
type RetryTransferResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RetryTransferResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RetryTransferResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RetryTransferResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RetryTransferResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RetryTransferResponseValidationError) ErrorName() string {
	return "RetryTransferResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RetryTransferResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRetryTransferResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RetryTransferResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RetryTransferResponseValidationError{}

// Validate checks the field values on ListTransfersRequest_Filter with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTransfersRequest_Filter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTransfersRequest_Filter with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTransfersRequest_FilterMultiError, or nil if none found.
func (m *ListTransfersRequest_Filter) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTransfersRequest_Filter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	switch v := m.Term.(type) {
	case *ListTransfersRequest_Filter_Status:
		if v == nil {
			err := ListTransfersRequest_FilterValidationError{
				field:  "Term",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Status
	case *ListTransfersRequest_Filter_ShareId:
		if v == nil {
			err := ListTransfersRequest_FilterValidationError{
				field:  "Term",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetShareId()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListTransfersRequest_FilterValidationError{
						field:  "ShareId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListTransfersRequest_FilterValidationError{
						field:  "ShareId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetShareId()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTransfersRequest_FilterValidationError{
					field:  "ShareId",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ListTransfersRequest_Filter_TxId:
		if v == nil {
			err := ListTransfersRequest_FilterValidationError{
				field:  "Term",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetTxId()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListTransfersRequest_FilterValidationError{
						field:  "TxId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListTransfersRequest_FilterValidationError{
						field:  "TxId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTxId()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTransfersRequest_FilterValidationError{
					field:  "TxId",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return ListTransfersRequest_FilterMultiError(errors)
	}

	return nil
}

// ListTransfersRequest_FilterMultiError is an error wrapping multiple
// validation errors returned by ListTransfersRequest_Filter.ValidateAll() if
// the designated constraints aren't met.
type ListTransfersRequest_FilterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTransfersRequest_FilterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTransfersRequest_FilterMultiError) AllErrors() []error { return m }

// ListTransfersRequest_FilterValidationError is the validation error returned
// by ListTransfersRequest_Filter.Validate if the designated constraints
// aren't met.
type ListTransfersRequest_FilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTransfersRequest_FilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTransfersRequest_FilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTransfersRequest_FilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTransfersRequest_FilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTransfersRequest_FilterValidationError) ErrorName() string {
	return "ListTransfersRequest_FilterValidationError"
}

// Error satisfies the builtin error interface
func (e ListTransfersRequest_FilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTransfersRequest_Filter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTransfersRequest_FilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTransfersRequest_FilterValidationError{}
