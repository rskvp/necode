// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: necode/errordetails/message.proto

package errordetails

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	enums "github.com/rskvp/necode/proto/gen/necode/enums"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = enums.NamespaceState(0)
)

// Validate checks the field values on NotFoundFailure with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *NotFoundFailure) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NotFoundFailure with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NotFoundFailureMultiError, or nil if none found.
func (m *NotFoundFailure) ValidateAll() error {
	return m.validate(true)
}

func (m *NotFoundFailure) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CurrentCluster

	// no validation rules for ActiveCluster

	if len(errors) > 0 {
		return NotFoundFailureMultiError(errors)
	}

	return nil
}

// NotFoundFailureMultiError is an error wrapping multiple validation errors
// returned by NotFoundFailure.ValidateAll() if the designated constraints
// aren't met.
type NotFoundFailureMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NotFoundFailureMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NotFoundFailureMultiError) AllErrors() []error { return m }

// NotFoundFailureValidationError is the validation error returned by
// NotFoundFailure.Validate if the designated constraints aren't met.
type NotFoundFailureValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotFoundFailureValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotFoundFailureValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotFoundFailureValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotFoundFailureValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotFoundFailureValidationError) ErrorName() string { return "NotFoundFailureValidationError" }

// Error satisfies the builtin error interface
func (e NotFoundFailureValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotFoundFailure.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotFoundFailureValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotFoundFailureValidationError{}

// Validate checks the field values on WorkflowExecutionAlreadyStartedFailure
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *WorkflowExecutionAlreadyStartedFailure) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// WorkflowExecutionAlreadyStartedFailure with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// WorkflowExecutionAlreadyStartedFailureMultiError, or nil if none found.
func (m *WorkflowExecutionAlreadyStartedFailure) ValidateAll() error {
	return m.validate(true)
}

func (m *WorkflowExecutionAlreadyStartedFailure) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StartRequestId

	// no validation rules for RunId

	if len(errors) > 0 {
		return WorkflowExecutionAlreadyStartedFailureMultiError(errors)
	}

	return nil
}

// WorkflowExecutionAlreadyStartedFailureMultiError is an error wrapping
// multiple validation errors returned by
// WorkflowExecutionAlreadyStartedFailure.ValidateAll() if the designated
// constraints aren't met.
type WorkflowExecutionAlreadyStartedFailureMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WorkflowExecutionAlreadyStartedFailureMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WorkflowExecutionAlreadyStartedFailureMultiError) AllErrors() []error { return m }

// WorkflowExecutionAlreadyStartedFailureValidationError is the validation
// error returned by WorkflowExecutionAlreadyStartedFailure.Validate if the
// designated constraints aren't met.
type WorkflowExecutionAlreadyStartedFailureValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkflowExecutionAlreadyStartedFailureValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorkflowExecutionAlreadyStartedFailureValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WorkflowExecutionAlreadyStartedFailureValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorkflowExecutionAlreadyStartedFailureValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkflowExecutionAlreadyStartedFailureValidationError) ErrorName() string {
	return "WorkflowExecutionAlreadyStartedFailureValidationError"
}

// Error satisfies the builtin error interface
func (e WorkflowExecutionAlreadyStartedFailureValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorkflowExecutionAlreadyStartedFailure.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkflowExecutionAlreadyStartedFailureValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkflowExecutionAlreadyStartedFailureValidationError{}

// Validate checks the field values on NamespaceNotActiveFailure with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *NamespaceNotActiveFailure) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NamespaceNotActiveFailure with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NamespaceNotActiveFailureMultiError, or nil if none found.
func (m *NamespaceNotActiveFailure) ValidateAll() error {
	return m.validate(true)
}

func (m *NamespaceNotActiveFailure) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Namespace

	// no validation rules for CurrentCluster

	// no validation rules for ActiveCluster

	if len(errors) > 0 {
		return NamespaceNotActiveFailureMultiError(errors)
	}

	return nil
}

// NamespaceNotActiveFailureMultiError is an error wrapping multiple validation
// errors returned by NamespaceNotActiveFailure.ValidateAll() if the
// designated constraints aren't met.
type NamespaceNotActiveFailureMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NamespaceNotActiveFailureMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NamespaceNotActiveFailureMultiError) AllErrors() []error { return m }

// NamespaceNotActiveFailureValidationError is the validation error returned by
// NamespaceNotActiveFailure.Validate if the designated constraints aren't met.
type NamespaceNotActiveFailureValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NamespaceNotActiveFailureValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NamespaceNotActiveFailureValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NamespaceNotActiveFailureValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NamespaceNotActiveFailureValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NamespaceNotActiveFailureValidationError) ErrorName() string {
	return "NamespaceNotActiveFailureValidationError"
}

// Error satisfies the builtin error interface
func (e NamespaceNotActiveFailureValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNamespaceNotActiveFailure.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NamespaceNotActiveFailureValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NamespaceNotActiveFailureValidationError{}

// Validate checks the field values on NamespaceInvalidStateFailure with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *NamespaceInvalidStateFailure) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NamespaceInvalidStateFailure with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NamespaceInvalidStateFailureMultiError, or nil if none found.
func (m *NamespaceInvalidStateFailure) ValidateAll() error {
	return m.validate(true)
}

func (m *NamespaceInvalidStateFailure) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Namespace

	// no validation rules for State

	if len(errors) > 0 {
		return NamespaceInvalidStateFailureMultiError(errors)
	}

	return nil
}

// NamespaceInvalidStateFailureMultiError is an error wrapping multiple
// validation errors returned by NamespaceInvalidStateFailure.ValidateAll() if
// the designated constraints aren't met.
type NamespaceInvalidStateFailureMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NamespaceInvalidStateFailureMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NamespaceInvalidStateFailureMultiError) AllErrors() []error { return m }

// NamespaceInvalidStateFailureValidationError is the validation error returned
// by NamespaceInvalidStateFailure.Validate if the designated constraints
// aren't met.
type NamespaceInvalidStateFailureValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NamespaceInvalidStateFailureValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NamespaceInvalidStateFailureValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NamespaceInvalidStateFailureValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NamespaceInvalidStateFailureValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NamespaceInvalidStateFailureValidationError) ErrorName() string {
	return "NamespaceInvalidStateFailureValidationError"
}

// Error satisfies the builtin error interface
func (e NamespaceInvalidStateFailureValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNamespaceInvalidStateFailure.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NamespaceInvalidStateFailureValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NamespaceInvalidStateFailureValidationError{}

// Validate checks the field values on NamespaceNotFoundFailure with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *NamespaceNotFoundFailure) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NamespaceNotFoundFailure with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NamespaceNotFoundFailureMultiError, or nil if none found.
func (m *NamespaceNotFoundFailure) ValidateAll() error {
	return m.validate(true)
}

func (m *NamespaceNotFoundFailure) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Namespace

	if len(errors) > 0 {
		return NamespaceNotFoundFailureMultiError(errors)
	}

	return nil
}

// NamespaceNotFoundFailureMultiError is an error wrapping multiple validation
// errors returned by NamespaceNotFoundFailure.ValidateAll() if the designated
// constraints aren't met.
type NamespaceNotFoundFailureMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NamespaceNotFoundFailureMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NamespaceNotFoundFailureMultiError) AllErrors() []error { return m }

// NamespaceNotFoundFailureValidationError is the validation error returned by
// NamespaceNotFoundFailure.Validate if the designated constraints aren't met.
type NamespaceNotFoundFailureValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NamespaceNotFoundFailureValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NamespaceNotFoundFailureValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NamespaceNotFoundFailureValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NamespaceNotFoundFailureValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NamespaceNotFoundFailureValidationError) ErrorName() string {
	return "NamespaceNotFoundFailureValidationError"
}

// Error satisfies the builtin error interface
func (e NamespaceNotFoundFailureValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNamespaceNotFoundFailure.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NamespaceNotFoundFailureValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NamespaceNotFoundFailureValidationError{}

// Validate checks the field values on NamespaceAlreadyExistsFailure with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *NamespaceAlreadyExistsFailure) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NamespaceAlreadyExistsFailure with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// NamespaceAlreadyExistsFailureMultiError, or nil if none found.
func (m *NamespaceAlreadyExistsFailure) ValidateAll() error {
	return m.validate(true)
}

func (m *NamespaceAlreadyExistsFailure) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return NamespaceAlreadyExistsFailureMultiError(errors)
	}

	return nil
}

// NamespaceAlreadyExistsFailureMultiError is an error wrapping multiple
// validation errors returned by NamespaceAlreadyExistsFailure.ValidateAll()
// if the designated constraints aren't met.
type NamespaceAlreadyExistsFailureMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NamespaceAlreadyExistsFailureMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NamespaceAlreadyExistsFailureMultiError) AllErrors() []error { return m }

// NamespaceAlreadyExistsFailureValidationError is the validation error
// returned by NamespaceAlreadyExistsFailure.Validate if the designated
// constraints aren't met.
type NamespaceAlreadyExistsFailureValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NamespaceAlreadyExistsFailureValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NamespaceAlreadyExistsFailureValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NamespaceAlreadyExistsFailureValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NamespaceAlreadyExistsFailureValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NamespaceAlreadyExistsFailureValidationError) ErrorName() string {
	return "NamespaceAlreadyExistsFailureValidationError"
}

// Error satisfies the builtin error interface
func (e NamespaceAlreadyExistsFailureValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNamespaceAlreadyExistsFailure.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NamespaceAlreadyExistsFailureValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NamespaceAlreadyExistsFailureValidationError{}

// Validate checks the field values on ClientVersionNotSupportedFailure with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ClientVersionNotSupportedFailure) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ClientVersionNotSupportedFailure with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ClientVersionNotSupportedFailureMultiError, or nil if none found.
func (m *ClientVersionNotSupportedFailure) ValidateAll() error {
	return m.validate(true)
}

func (m *ClientVersionNotSupportedFailure) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClientVersion

	// no validation rules for ClientName

	// no validation rules for SupportedVersions

	if len(errors) > 0 {
		return ClientVersionNotSupportedFailureMultiError(errors)
	}

	return nil
}

// ClientVersionNotSupportedFailureMultiError is an error wrapping multiple
// validation errors returned by
// ClientVersionNotSupportedFailure.ValidateAll() if the designated
// constraints aren't met.
type ClientVersionNotSupportedFailureMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClientVersionNotSupportedFailureMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClientVersionNotSupportedFailureMultiError) AllErrors() []error { return m }

// ClientVersionNotSupportedFailureValidationError is the validation error
// returned by ClientVersionNotSupportedFailure.Validate if the designated
// constraints aren't met.
type ClientVersionNotSupportedFailureValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClientVersionNotSupportedFailureValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClientVersionNotSupportedFailureValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClientVersionNotSupportedFailureValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClientVersionNotSupportedFailureValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClientVersionNotSupportedFailureValidationError) ErrorName() string {
	return "ClientVersionNotSupportedFailureValidationError"
}

// Error satisfies the builtin error interface
func (e ClientVersionNotSupportedFailureValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClientVersionNotSupportedFailure.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClientVersionNotSupportedFailureValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClientVersionNotSupportedFailureValidationError{}

// Validate checks the field values on ServerVersionNotSupportedFailure with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ServerVersionNotSupportedFailure) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServerVersionNotSupportedFailure with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ServerVersionNotSupportedFailureMultiError, or nil if none found.
func (m *ServerVersionNotSupportedFailure) ValidateAll() error {
	return m.validate(true)
}

func (m *ServerVersionNotSupportedFailure) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServerVersion

	// no validation rules for ClientSupportedServerVersions

	if len(errors) > 0 {
		return ServerVersionNotSupportedFailureMultiError(errors)
	}

	return nil
}

// ServerVersionNotSupportedFailureMultiError is an error wrapping multiple
// validation errors returned by
// ServerVersionNotSupportedFailure.ValidateAll() if the designated
// constraints aren't met.
type ServerVersionNotSupportedFailureMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServerVersionNotSupportedFailureMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServerVersionNotSupportedFailureMultiError) AllErrors() []error { return m }

// ServerVersionNotSupportedFailureValidationError is the validation error
// returned by ServerVersionNotSupportedFailure.Validate if the designated
// constraints aren't met.
type ServerVersionNotSupportedFailureValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServerVersionNotSupportedFailureValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServerVersionNotSupportedFailureValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServerVersionNotSupportedFailureValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServerVersionNotSupportedFailureValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServerVersionNotSupportedFailureValidationError) ErrorName() string {
	return "ServerVersionNotSupportedFailureValidationError"
}

// Error satisfies the builtin error interface
func (e ServerVersionNotSupportedFailureValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServerVersionNotSupportedFailure.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServerVersionNotSupportedFailureValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServerVersionNotSupportedFailureValidationError{}

// Validate checks the field values on CancellationAlreadyRequestedFailure with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CancellationAlreadyRequestedFailure) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancellationAlreadyRequestedFailure
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CancellationAlreadyRequestedFailureMultiError, or nil if none found.
func (m *CancellationAlreadyRequestedFailure) ValidateAll() error {
	return m.validate(true)
}

func (m *CancellationAlreadyRequestedFailure) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CancellationAlreadyRequestedFailureMultiError(errors)
	}

	return nil
}

// CancellationAlreadyRequestedFailureMultiError is an error wrapping multiple
// validation errors returned by
// CancellationAlreadyRequestedFailure.ValidateAll() if the designated
// constraints aren't met.
type CancellationAlreadyRequestedFailureMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancellationAlreadyRequestedFailureMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancellationAlreadyRequestedFailureMultiError) AllErrors() []error { return m }

// CancellationAlreadyRequestedFailureValidationError is the validation error
// returned by CancellationAlreadyRequestedFailure.Validate if the designated
// constraints aren't met.
type CancellationAlreadyRequestedFailureValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancellationAlreadyRequestedFailureValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancellationAlreadyRequestedFailureValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancellationAlreadyRequestedFailureValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancellationAlreadyRequestedFailureValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancellationAlreadyRequestedFailureValidationError) ErrorName() string {
	return "CancellationAlreadyRequestedFailureValidationError"
}

// Error satisfies the builtin error interface
func (e CancellationAlreadyRequestedFailureValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancellationAlreadyRequestedFailure.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancellationAlreadyRequestedFailureValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancellationAlreadyRequestedFailureValidationError{}

// Validate checks the field values on QueryFailedFailure with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryFailedFailure) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryFailedFailure with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryFailedFailureMultiError, or nil if none found.
func (m *QueryFailedFailure) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryFailedFailure) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return QueryFailedFailureMultiError(errors)
	}

	return nil
}

// QueryFailedFailureMultiError is an error wrapping multiple validation errors
// returned by QueryFailedFailure.ValidateAll() if the designated constraints
// aren't met.
type QueryFailedFailureMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryFailedFailureMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryFailedFailureMultiError) AllErrors() []error { return m }

// QueryFailedFailureValidationError is the validation error returned by
// QueryFailedFailure.Validate if the designated constraints aren't met.
type QueryFailedFailureValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryFailedFailureValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryFailedFailureValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryFailedFailureValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryFailedFailureValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryFailedFailureValidationError) ErrorName() string {
	return "QueryFailedFailureValidationError"
}

// Error satisfies the builtin error interface
func (e QueryFailedFailureValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryFailedFailure.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryFailedFailureValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryFailedFailureValidationError{}

// Validate checks the field values on PermissionDeniedFailure with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PermissionDeniedFailure) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PermissionDeniedFailure with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PermissionDeniedFailureMultiError, or nil if none found.
func (m *PermissionDeniedFailure) ValidateAll() error {
	return m.validate(true)
}

func (m *PermissionDeniedFailure) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Reason

	if len(errors) > 0 {
		return PermissionDeniedFailureMultiError(errors)
	}

	return nil
}

// PermissionDeniedFailureMultiError is an error wrapping multiple validation
// errors returned by PermissionDeniedFailure.ValidateAll() if the designated
// constraints aren't met.
type PermissionDeniedFailureMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PermissionDeniedFailureMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PermissionDeniedFailureMultiError) AllErrors() []error { return m }

// PermissionDeniedFailureValidationError is the validation error returned by
// PermissionDeniedFailure.Validate if the designated constraints aren't met.
type PermissionDeniedFailureValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PermissionDeniedFailureValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PermissionDeniedFailureValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PermissionDeniedFailureValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PermissionDeniedFailureValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PermissionDeniedFailureValidationError) ErrorName() string {
	return "PermissionDeniedFailureValidationError"
}

// Error satisfies the builtin error interface
func (e PermissionDeniedFailureValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPermissionDeniedFailure.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PermissionDeniedFailureValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PermissionDeniedFailureValidationError{}

// Validate checks the field values on ResourceExhaustedFailure with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResourceExhaustedFailure) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResourceExhaustedFailure with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResourceExhaustedFailureMultiError, or nil if none found.
func (m *ResourceExhaustedFailure) ValidateAll() error {
	return m.validate(true)
}

func (m *ResourceExhaustedFailure) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Cause

	if len(errors) > 0 {
		return ResourceExhaustedFailureMultiError(errors)
	}

	return nil
}

// ResourceExhaustedFailureMultiError is an error wrapping multiple validation
// errors returned by ResourceExhaustedFailure.ValidateAll() if the designated
// constraints aren't met.
type ResourceExhaustedFailureMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResourceExhaustedFailureMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResourceExhaustedFailureMultiError) AllErrors() []error { return m }

// ResourceExhaustedFailureValidationError is the validation error returned by
// ResourceExhaustedFailure.Validate if the designated constraints aren't met.
type ResourceExhaustedFailureValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourceExhaustedFailureValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourceExhaustedFailureValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourceExhaustedFailureValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourceExhaustedFailureValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourceExhaustedFailureValidationError) ErrorName() string {
	return "ResourceExhaustedFailureValidationError"
}

// Error satisfies the builtin error interface
func (e ResourceExhaustedFailureValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResourceExhaustedFailure.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourceExhaustedFailureValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourceExhaustedFailureValidationError{}

// Validate checks the field values on SystemWorkflowFailure with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SystemWorkflowFailure) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SystemWorkflowFailure with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SystemWorkflowFailureMultiError, or nil if none found.
func (m *SystemWorkflowFailure) ValidateAll() error {
	return m.validate(true)
}

func (m *SystemWorkflowFailure) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetWorkflowExecution()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SystemWorkflowFailureValidationError{
					field:  "WorkflowExecution",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SystemWorkflowFailureValidationError{
					field:  "WorkflowExecution",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkflowExecution()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SystemWorkflowFailureValidationError{
				field:  "WorkflowExecution",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for WorkflowError

	if len(errors) > 0 {
		return SystemWorkflowFailureMultiError(errors)
	}

	return nil
}

// SystemWorkflowFailureMultiError is an error wrapping multiple validation
// errors returned by SystemWorkflowFailure.ValidateAll() if the designated
// constraints aren't met.
type SystemWorkflowFailureMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SystemWorkflowFailureMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SystemWorkflowFailureMultiError) AllErrors() []error { return m }

// SystemWorkflowFailureValidationError is the validation error returned by
// SystemWorkflowFailure.Validate if the designated constraints aren't met.
type SystemWorkflowFailureValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SystemWorkflowFailureValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SystemWorkflowFailureValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SystemWorkflowFailureValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SystemWorkflowFailureValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SystemWorkflowFailureValidationError) ErrorName() string {
	return "SystemWorkflowFailureValidationError"
}

// Error satisfies the builtin error interface
func (e SystemWorkflowFailureValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSystemWorkflowFailure.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SystemWorkflowFailureValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SystemWorkflowFailureValidationError{}

// Validate checks the field values on WorkflowNotReadyFailure with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WorkflowNotReadyFailure) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WorkflowNotReadyFailure with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WorkflowNotReadyFailureMultiError, or nil if none found.
func (m *WorkflowNotReadyFailure) ValidateAll() error {
	return m.validate(true)
}

func (m *WorkflowNotReadyFailure) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return WorkflowNotReadyFailureMultiError(errors)
	}

	return nil
}

// WorkflowNotReadyFailureMultiError is an error wrapping multiple validation
// errors returned by WorkflowNotReadyFailure.ValidateAll() if the designated
// constraints aren't met.
type WorkflowNotReadyFailureMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WorkflowNotReadyFailureMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WorkflowNotReadyFailureMultiError) AllErrors() []error { return m }

// WorkflowNotReadyFailureValidationError is the validation error returned by
// WorkflowNotReadyFailure.Validate if the designated constraints aren't met.
type WorkflowNotReadyFailureValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkflowNotReadyFailureValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorkflowNotReadyFailureValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WorkflowNotReadyFailureValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorkflowNotReadyFailureValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkflowNotReadyFailureValidationError) ErrorName() string {
	return "WorkflowNotReadyFailureValidationError"
}

// Error satisfies the builtin error interface
func (e WorkflowNotReadyFailureValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorkflowNotReadyFailure.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkflowNotReadyFailureValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkflowNotReadyFailureValidationError{}

// Validate checks the field values on NewerBuildExistsFailure with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *NewerBuildExistsFailure) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NewerBuildExistsFailure with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NewerBuildExistsFailureMultiError, or nil if none found.
func (m *NewerBuildExistsFailure) ValidateAll() error {
	return m.validate(true)
}

func (m *NewerBuildExistsFailure) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DefaultBuildId

	if len(errors) > 0 {
		return NewerBuildExistsFailureMultiError(errors)
	}

	return nil
}

// NewerBuildExistsFailureMultiError is an error wrapping multiple validation
// errors returned by NewerBuildExistsFailure.ValidateAll() if the designated
// constraints aren't met.
type NewerBuildExistsFailureMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NewerBuildExistsFailureMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NewerBuildExistsFailureMultiError) AllErrors() []error { return m }

// NewerBuildExistsFailureValidationError is the validation error returned by
// NewerBuildExistsFailure.Validate if the designated constraints aren't met.
type NewerBuildExistsFailureValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NewerBuildExistsFailureValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NewerBuildExistsFailureValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NewerBuildExistsFailureValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NewerBuildExistsFailureValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NewerBuildExistsFailureValidationError) ErrorName() string {
	return "NewerBuildExistsFailureValidationError"
}

// Error satisfies the builtin error interface
func (e NewerBuildExistsFailureValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNewerBuildExistsFailure.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NewerBuildExistsFailureValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NewerBuildExistsFailureValidationError{}
