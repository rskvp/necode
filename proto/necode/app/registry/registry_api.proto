syntax = "proto3";

package necode.app.registry;

import "necode/app/registry/resources.proto";
import "necode/rpc/status.proto";
import "necode/storage/provider/resources.proto";
import "necode/types/types.proto";

// App Registry API
//
// The App Registry API is meant to as registry that
// contains mappings between mime types and app providers.
//
// The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
// NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED",  "MAY", and
// "OPTIONAL" in this document are to be interpreted as described in
// RFC 2119.
//
// The following are global requirements that apply to all methods:
// Any method MUST return CODE_OK on a succesful operation.
// Any method MAY return NOT_IMPLEMENTED.
// Any method MAY return INTERNAL.
// Any method MAY return UNKNOWN.
// Any method MAY return UNAUTHENTICATED.
service RegistryAPI {
  // Returns the app providers that are capable of handling this resource info.
  // MUST return CODE_NOT_FOUND if no providers are available.
  rpc GetAppProviders(GetAppProvidersRequest) returns (GetAppProvidersResponse);
  // Registers a new app provider to the registry.
  rpc AddAppProvider(AddAppProviderRequest) returns (AddAppProviderResponse);
  // Returns a list of the available app providers known by this registry.
  rpc ListAppProviders(ListAppProvidersRequest) returns (ListAppProvidersResponse);
  // Returns a list of the supported mime types along with the apps which they can be opened with.
  rpc ListSupportedMimeTypes(ListSupportedMimeTypesRequest) returns (ListSupportedMimeTypesResponse);
  // Returns the default app provider which serves a specified mime type.
  rpc GetDefaultAppProviderForMimeType(GetDefaultAppProviderForMimeTypeRequest) returns (GetDefaultAppProviderForMimeTypeResponse);
  // Sets the default app provider for a specified mime type.
  rpc SetDefaultAppProviderForMimeType(SetDefaultAppProviderForMimeTypeRequest) returns (SetDefaultAppProviderForMimeTypeResponse);
}

message GetAppProvidersRequest {
  // OPTIONAL.
  // Opaque information.
  necode.types.Opaque opaque = 1;
  // REQUIRED.
  // The resource information.
  storage.provider.ResourceInfo resource_info = 2;
}

message GetAppProvidersResponse {
  // REQUIRED.
  // The response status.
  necode.rpc.Status status = 1;
  // OPTIONAL.
  // Opaque information.
  necode.types.Opaque opaque = 2;
  // REQUIRED.
  // The app providers available for the given resource info.
  repeated ProviderInfo providers = 3;
}

message AddAppProviderRequest {
  // OPTIONAL.
  // Opaque information.
  necode.types.Opaque opaque = 1;
  // REQUIRED.
  // The app provider to be registered.
  ProviderInfo provider = 2;
}

message AddAppProviderResponse {
  // REQUIRED.
  // The response status.
  necode.rpc.Status status = 1;
  // OPTIONAL.
  // Opaque information.
  necode.types.Opaque opaque = 2;
}

message ListAppProvidersRequest {
  // OPTIONAL.
  // Opaque information.
  necode.types.Opaque opaque = 1;
}

message ListAppProvidersResponse {
  // REQUIRED.
  // The response status.
  necode.rpc.Status status = 1;
  // OPTIONAL.
  // Opaque information.
  necode.types.Opaque opaque = 2;
  // REQUIRED.
  // The list of app providers this registry knows about.
  repeated ProviderInfo providers = 3;
}

message ListSupportedMimeTypesRequest {
  // OPTIONAL.
  // Opaque information.
  necode.types.Opaque opaque = 1;
}

message ListSupportedMimeTypesResponse {
  // REQUIRED.
  // The response status.
  necode.rpc.Status status = 1;
  // OPTIONAL.
  // Opaque information.
  necode.types.Opaque opaque = 2;
  // REQUIRED.
  // The list of supported mime types and their properties.
  repeated MimeTypeInfo mime_types = 3;
}

message GetDefaultAppProviderForMimeTypeRequest {
  // OPTIONAL.
  // Opaque information.
  necode.types.Opaque opaque = 1;
  // REQUIRED.
  // The mimetype for which the default app has to be returned.
  string mime_type = 2;
}

message GetDefaultAppProviderForMimeTypeResponse {
  // REQUIRED.
  // The response status.
  necode.rpc.Status status = 1;
  // OPTIONAL.
  // Opaque information.
  necode.types.Opaque opaque = 2;
  // REQUIRED.
  // The default app provider for the specified mime type.
  ProviderInfo provider = 3;
}

message SetDefaultAppProviderForMimeTypeRequest {
  // OPTIONAL.
  // Opaque information.
  necode.types.Opaque opaque = 1;
  // REQUIRED.
  // The mimetype for which the default app has to be returned.
  string mime_type = 2;
  // REQUIRED.
  // The app provider to be marked as default for the specified mime type.
  ProviderInfo provider = 3;
}

message SetDefaultAppProviderForMimeTypeResponse {
  // REQUIRED.
  // The response status.
  necode.rpc.Status status = 1;
  // OPTIONAL.
  // Opaque information.
  necode.types.Opaque opaque = 2;
}
