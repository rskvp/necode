syntax = "proto3";

package necode.ocm.provider;

import "necode/ocm/provider/resources.proto";
import "necode/rpc/status.proto";
import "necode/types/types.proto";

// OCM Auth Provider API
//
// The Auth Provider API is meant to authenticate a sync'n'share provider regsistered in the mesh.
//
// The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
// NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED",  "MAY", and
// "OPTIONAL" in this document are to be interpreted as described in
// RFC 2119.
//
// The following are global requirements that apply to all methods:
// Any method MUST return CODE_OK on a succesful operation.
// Any method MAY return NOT_IMPLEMENTED.
// Any method MAY return INTERNAL.
// Any method MAY return UNKNOWN.
// Any method MAY return UNAUTHENTICATED.
service ProviderAPI {
  // Check if a given system provider is registered in the mesh or not.
  // MUST return CODE_UNAUTHENTICATED if the system is not registered
  rpc IsProviderAllowed(IsProviderAllowedRequest) returns (IsProviderAllowedResponse);
  // Get the information of the provider identified by a specific domain.
  // MUST return CODE_NOT_FOUND if the sync'n'share system provider does not exist.
  rpc GetInfoByDomain(GetInfoByDomainRequest) returns (GetInfoByDomainResponse);
  // Get the information of all the providers registered in the mesh.
  rpc ListAllProviders(ListAllProvidersRequest) returns (ListAllProvidersResponse);
}

message IsProviderAllowedRequest {
  // OPTIONAL.
  // Opaque information.
  necode.types.Opaque opaque = 1;
  // REQUIRED.
  // The provider that we need to check against the list of verified mesh providers.
  ProviderInfo provider = 2;
}

message IsProviderAllowedResponse {
  // REQUIRED.
  // The response status.
  necode.rpc.Status status = 1;
  // OPTIONAL.
  // Opaque information.
  necode.types.Opaque opaque = 2;
}

message GetInfoByDomainRequest {
  // OPTIONAL.
  // Opaque information.
  necode.types.Opaque opaque = 1;
  // REQUIRED.
  // The domain of the system provider.
  string domain = 2;
}

message GetInfoByDomainResponse {
  // REQUIRED.
  // The response status.
  necode.rpc.Status status = 1;
  // OPTIONAL.
  // Opaque information.
  necode.types.Opaque opaque = 2;
  // REQUIRED.
  // The info of the provider
  ProviderInfo provider_info = 3;
}

message ListAllProvidersRequest {
  // OPTIONAL.
  // Opaque information.
  necode.types.Opaque opaque = 1;
}

message ListAllProvidersResponse {
  // REQUIRED.
  // The response status.
  necode.rpc.Status status = 1;
  // OPTIONAL.
  // Opaque information.
  necode.types.Opaque opaque = 2;
  // REQUIRED.
  // The share.
  repeated ProviderInfo providers = 3;
}
