syntax = "proto3";

// These error details are supplied in google.rpc.Status#details as described in "Google APIs, Error Model" (https://cloud.google.com/apis/design/errors#error_model)
// and extend standard Error Details defined in https://github.com/googleapis/googleapis/blob/master/google/rpc/error_details.proto

package necode.errordetails;

import "necode/common/message.proto";

import "necode/enums/failed_cause.proto";
import "necode/enums/namespace.proto";

message NotFoundFailure {
    string current_cluster = 1;
    string active_cluster = 2;
}

message WorkflowExecutionAlreadyStartedFailure {
    string start_request_id = 1;
    string run_id = 2;
}

message NamespaceNotActiveFailure {
    string namespace = 1;
    string current_cluster = 2;
    string active_cluster = 3;
}

message NamespaceInvalidStateFailure {
    string namespace = 1;
    // Current state of the requested namespace.
    necode.enums.NamespaceState state = 2;
    // Allowed namespace states for requested operation.
    // For example NAMESPACE_STATE_DELETED is forbidden for most operations but allowed for DescribeNamespace.
    repeated necode.enums.NamespaceState allowed_states = 3;
}

message NamespaceNotFoundFailure {
    string namespace = 1;
}

message NamespaceAlreadyExistsFailure {
}

message ClientVersionNotSupportedFailure {
    string client_version = 1;
    string client_name = 2;
    string supported_versions = 3;
}

message ServerVersionNotSupportedFailure {
    string server_version = 1;
    string client_supported_server_versions = 2;
}

message CancellationAlreadyRequestedFailure {
}

message QueryFailedFailure {
}

message PermissionDeniedFailure {
    string reason = 1;
}

message ResourceExhaustedFailure {
    necode.enums.ResourceExhaustedCause cause = 1;
}

message SystemWorkflowFailure {
    // WorkflowId and RunId of the Temporal system workflow performing the underlying operation.
    // Looking up the info of the system workflow run may help identify the issue causing the failure.
    necode.common.WorkflowExecution workflow_execution = 1;
    // Serialized error returned by the system workflow performing the underlying operation.
    string workflow_error = 2;
}

message WorkflowNotReadyFailure {
}

message NewerBuildExistsFailure {
    // The current default compatible build ID which will receive tasks
    string default_build_id = 1;
}
