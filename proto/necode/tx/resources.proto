syntax = "proto3";

package necode.tx;

import "necode/identity/user/resources.proto";
import "necode/sharing/ocm/resources.proto";
import "necode/storage/provider/resources.proto";
import "necode/types/types.proto";

// TxId uniquely identifies a transfer in the transfer provider namespace.
message TxId {
  // REQUIRED.
  // The internal transfer id used by the service implementor
  // to uniquely identity the transfer in the internal
  // implementation of the service.
  string opaque_id = 1;
}

// TxInfo represents information about a transfer.
message TxInfo {
  // REQUIRED.
  // The transfer identifier.
  TxId id = 1;
  // REQUIRED.
  // The transfer status. Eg.: STATUS_TRANSFER_FAILED.
  // Note: the description field may provide additional information on the transfer status.
  Status status = 2;
  // REQUIRED.
  // The destination (receiver of the transfer)
  necode.storage.provider.Grantee grantee = 3;
  // REQUIRED.
  // Uniquely identifies a principal who initiates the transfer creation.
  necode.identity.user.UserId creator = 4;
  // REQUIRED.
  // Creation time of the transfer.
  necode.types.Timestamp ctime = 5;
  // OPTIONAL.
  // Information to describe the transfer status.
  // Eg. may contain information about a transfer failure.
  // Meant to be human-readable.
  string description = 6;
  // REQUIRED.
  // Opaque unique identifier of the share on which the transfer is based.
  necode.sharing.ocm.ShareId share_id = 7;
}

// Status represents transfer status.
enum Status {
  STATUS_INVALID = 0;
  // The destination could not be found.
  STATUS_DESTINATION_NOT_FOUND = 1;
  // A new data transfer
  STATUS_TRANSFER_NEW = 2;
  // The data transfer is awaiting acceptance from the destination
  STATUS_TRANSFER_AWAITING_ACCEPTANCE = 3;
  // The data transfer is accepted by the destination.
  STATUS_TRANSFER_ACCEPTED = 4;
  // The data transfer has started and not yet completed.
  STATUS_TRANSFER_IN_PROGRESS = 5;
  // The data transfer has completed.
  STATUS_TRANSFER_COMPLETE = 6;
  // The data transfer has failed.
  STATUS_TRANSFER_FAILED = 7;
  // The data transfer had been cancelled.
  STATUS_TRANSFER_CANCELLED = 8;
  // The request for cancelling the data transfer has failed.
  STATUS_TRANSFER_CANCEL_FAILED = 9;
  // The transfer has expired somewhere down the line.
  STATUS_TRANSFER_EXPIRED = 10;
}
