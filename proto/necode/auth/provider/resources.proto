
syntax = "proto3";

package necode.auth.provider;

import "necode/types/types.proto";

// Scope defines role-based permissions for various resources.
message Scope {
  // REQUIRED.
  // The resource embedded in the request of a particular method. It depends on
  // the method, hence is left as opaque.
  necode.types.OpaqueEntry resource = 1;
  // REQUIRED.
  // The role associated with the resource.
  Role role = 2;
}

// The role associated with the scope.
enum Role {
  // Used for invalid roles
  ROLE_INVALID = 0;
  // Grants owner permissions on a resource
  ROLE_OWNER = 1;
  // Provides backwards compatibility
  ROLE_LEGACY = 2;
  // Grants non-editor role on a resource
  ROLE_VIEWER = 3;
  // Grants editor permission on a resource, including folders
  ROLE_EDITOR = 4;
  // Grants editor permission on a single file
  ROLE_FILE_EDITOR = 5;
  // Grants co-owner permissions on a resource
  ROLE_COOWNER = 6;
  // Role with only write permission can use InitiateFileUpload, nothing else
  ROLE_UPLOADER = 7;
}
