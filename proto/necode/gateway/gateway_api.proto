syntax = "proto3";

package necode.gateway;


import "necode/app/provider/provider_api.proto";
import "necode/app/registry/registry_api.proto";
import "necode/auth/applications/applications_api.proto";
import "necode/auth/registry/registry_api.proto";
import "necode/gateway/resources.proto";
import "necode/identity/group/group_api.proto";
import "necode/identity/user/resources.proto";
import "necode/identity/user/user_api.proto";
import "necode/ocm/core/ocm_core_api.proto";
import "necode/ocm/invite/invite_api.proto";
import "necode/ocm/provider/provider_api.proto";
import "necode/permissions/permissions_api.proto";
import "necode/preferences/preferences_api.proto";
import "necode/rpc/status.proto";
import "necode/sharing/collaboration/collaboration_api.proto";
import "necode/sharing/link/link_api.proto";
import "necode/sharing/ocm/ocm_api.proto";
import "necode/storage/provider/provider_api.proto";
import "necode/storage/provider/resources.proto";
import "necode/tx/tx_api.proto";
import "necode/types/types.proto";

// Gateway API
//
// The Gateway API is the only API exposed direclty to end-clients.
// It is a facade API that all clients should connect to.
// Other APIS like the StorageProviderAPI are internal APIS.
//
// The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
// NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED",  "MAY", and
// "OPTIONAL" in this document are to be interpreted as described in
// RFC 2119.
//
// The following are global requirements that apply to all methods:
// Any method MUST return CODE_OK on a succesful operation.
// Any method MAY return NOT_IMPLEMENTED.
// Any method MAY return INTERNAL.
// Any method MAY return UNKNOWN.
// Any method MAY return UNAUTHENTICATED.
service GatewayAPI {
  // *****************************************************************/
  // ************************ AUTH ******** **************************/
  // *****************************************************************/

  // Authenticates a user.
  rpc Authenticate(AuthenticateRequest) returns (AuthenticateResponse);
  // WhoAmI returns the information for a user.
  rpc WhoAmI(WhoAmIRequest) returns (WhoAmIResponse);
  // *****************************************************************/
  // ********************** APPLICATIONS AUTH ************************/
  // *****************************************************************/

  // GenerateAppPassword creates a password with specified scope to be used by
  // third-party applications.
  rpc GenerateAppPassword(necode.auth.applications.GenerateAppPasswordRequest) returns (necode.auth.applications.GenerateAppPasswordResponse);
  // ListAppPasswords lists the application passwords created by a user.
  rpc ListAppPasswords(necode.auth.applications.ListAppPasswordsRequest) returns (necode.auth.applications.ListAppPasswordsResponse);
  // InvalidateAppPassword invalidates a generated password.
  rpc InvalidateAppPassword(necode.auth.applications.InvalidateAppPasswordRequest) returns (necode.auth.applications.InvalidateAppPasswordResponse);
  // GetAppPassword retrieves the password information by the combination of username and password.
  rpc GetAppPassword(necode.auth.applications.GetAppPasswordRequest) returns (necode.auth.applications.GetAppPasswordResponse);
  // *****************************************************************/
  // ************************ STORAGE PROVIDER ***********************/
  // *****************************************************************/

  // Creates a new resource of type container.
  // MUST return CODE_FAILED_PRECONDITION if the container
  // cannot be created at the specified reference.
  rpc CreateContainer(necode.storage.provider.CreateContainerRequest) returns (necode.storage.provider.CreateContainerResponse);
  // Creates a new resource of type file.
  // MUST return CODE_FAILED_PRECONDITION if the file
  // cannot be created at the specified reference.
  rpc TouchFile(necode.storage.provider.TouchFileRequest) returns (necode.storage.provider.TouchFileResponse);
  // Deletes a resource.
  // If a resource specifies the non-empty container (directory, ...),
  // then the entire directory is deleted recursively.
  // If a resource specifies a reference or symlink type, only the reference is removed (not the target).
  // MUST return CODE_NOT_FOUND if the reference does not exist.
  rpc Delete(necode.storage.provider.DeleteRequest) returns (necode.storage.provider.DeleteResponse);
  // Returns the path reference for
  // the provided resource id reference.
  // MUST return CODE_NOT_FOUND if the reference does not exist
  rpc GetPath(necode.storage.provider.GetPathRequest) returns (necode.storage.provider.GetPathResponse);
  // Returns the quota available under the provided
  // reference.
  // MUST return CODE_NOT_FOUND if the reference does not exist
  // MUST return CODE_RESOURCE_EXHAUSTED on exceeded quota limits.
  rpc GetQuota(GetQuotaRequest) returns (necode.storage.provider.GetQuotaResponse);
  // Initiates the download of a file using an
  // out-of-band data transfer mechanism.
  rpc InitiateFileDownload(necode.storage.provider.InitiateFileDownloadRequest) returns (InitiateFileDownloadResponse);
  // Initiates the upload of a file using an
  // out-of-band data transfer mechanism.
  rpc InitiateFileUpload(necode.storage.provider.InitiateFileUploadRequest) returns (InitiateFileUploadResponse);
  // Returns a stream of resource informations
  // for the provided reference.
  // MUST return CODE_NOT_FOUND if the reference does not exists.
  rpc ListContainerStream(necode.storage.provider.ListContainerStreamRequest) returns (stream necode.storage.provider.ListContainerStreamResponse);
  // Returns a list of resource information
  // for the provided reference.
  // MUST return CODE_NOT_FOUND if the reference does not exists.
  rpc ListContainer(necode.storage.provider.ListContainerRequest) returns (necode.storage.provider.ListContainerResponse);
  // Returns a list of the versions for a resource of
  // type file at the provided reference.
  // MUST return CODE_NOT_FOUND if the reference does not exist.
  // MUST return CODE_OK and MUST return an empty list if no versions are available.
  // TODO: What code if resource not of type file?
  rpc ListFileVersions(necode.storage.provider.ListFileVersionsRequest) returns (necode.storage.provider.ListFileVersionsResponse);
  // Returns a stream of recycle items for this storage provider.
  rpc ListRecycleStream(necode.storage.provider.ListRecycleStreamRequest) returns (stream necode.storage.provider.ListRecycleStreamResponse);
  // Returns a list of recycle items for this storage provider.
  // MUST return CODE_OK and MUST return an empty list if no recycle items are available.
  rpc ListRecycle(necode.storage.provider.ListRecycleRequest) returns (necode.storage.provider.ListRecycleResponse);
  // Moves a resource from one reference to another.
  // MUST return CODE_NOT_FOUND if any of the references do not exist.
  // MUST return CODE_FAILED_PRECONDITION if the source reference
  // cannot be moved to the destination reference.
  rpc Move(necode.storage.provider.MoveRequest) returns (necode.storage.provider.MoveResponse);
  // Permanently removes a recycle item from the recycle.
  // This operation is irrevocable.
  // MUST return CODE_NOT_FOUND if the recycle item id does not exist.
  rpc PurgeRecycle(necode.storage.provider.PurgeRecycleRequest) returns (necode.storage.provider.PurgeRecycleResponse);
  // Restores a file version for the provided reference.
  // MUST return CODE_NOT_FOUND if the reference does not exist.
  // MUST return CODE_NOT_FOUND if the version does not exist.
  rpc RestoreFileVersion(necode.storage.provider.RestoreFileVersionRequest) returns (necode.storage.provider.RestoreFileVersionResponse);
  // Restores a recycle item from the recycle.
  // MUST return CODE_NOT_FOUND if the recycle item id does not exist.
  // MUST return CODE_FAILED_PRECONDITION if the restore_path is non-empty
  // and the recycle item cannot be restored to the restore_path.
  rpc RestoreRecycleItem(necode.storage.provider.RestoreRecycleItemRequest) returns (necode.storage.provider.RestoreRecycleItemResponse);
  // Returns the resource information at the provided reference.
  // MUST return CODE_NOT_FOUND if the reference does not exist.
  rpc Stat(necode.storage.provider.StatRequest) returns (necode.storage.provider.StatResponse);
  // Creates a symlink to another resource.
  rpc CreateSymlink(necode.storage.provider.CreateSymlinkRequest) returns (necode.storage.provider.CreateSymlinkResponse);
  // Sets arbitrary metadata into a storage resource.
  // Arbitrary metadata is returned in a necode.storage.provider.ResourceInfo.
  rpc SetArbitraryMetadata(necode.storage.provider.SetArbitraryMetadataRequest) returns (necode.storage.provider.SetArbitraryMetadataResponse);
  // Unsets arbitrary metdata into a storage resource.
  // Arbitrary metadata is returned in a necode.storage.provider.ResourceInfo.
  rpc UnsetArbitraryMetadata(necode.storage.provider.UnsetArbitraryMetadataRequest) returns (necode.storage.provider.UnsetArbitraryMetadataResponse);
  // Locks a storage resource.
  // MUST return CODE_NOT_FOUND if the reference does not exist.
  // MUST return CODE_FAILED_PRECONDITION if the reference is already locked.
  // In addition, the implementation MUST ensure atomicity when multiple users
  // concurrently attempt to set a lock.
  // The caller MUST have write permissions on the resource.
  rpc SetLock(necode.storage.provider.SetLockRequest) returns (necode.storage.provider.SetLockResponse);
  // Gets the lock metadata of a storage resource.
  // MUST return CODE_NOT_FOUND if the reference does not exist or is not locked.
  // The caller MUST have read permissions on the resource.
  rpc GetLock(necode.storage.provider.GetLockRequest) returns (necode.storage.provider.GetLockResponse);
  // Refreshes the lock metadata of a storage resource.
  // MUST return CODE_NOT_FOUND if the reference does not exist.
  // MUST return CODE_FAILED_PRECONDITION if the reference is not locked
  // or if the caller does not hold the lock.
  // The caller MUST have write permissions on the resource.
  rpc RefreshLock(necode.storage.provider.RefreshLockRequest) returns (necode.storage.provider.RefreshLockResponse);
  // Unlocks a storage resource.
  // MUST return CODE_NOT_FOUND if the reference does not exist.
  // MUST return CODE_FAILED_PRECONDITION if the reference is not locked
  // or if the caller does not hold the lock.
  // The caller MUST have write permissions on the resource.
  rpc Unlock(necode.storage.provider.UnlockRequest) returns (necode.storage.provider.UnlockResponse);
  // Creates the home directory for a user.
  rpc CreateHome(necode.storage.provider.CreateHomeRequest) returns (necode.storage.provider.CreateHomeResponse);
  // Creates a storage space.
  rpc CreateStorageSpace(necode.storage.provider.CreateStorageSpaceRequest) returns (necode.storage.provider.CreateStorageSpaceResponse);
  // Lists storage spaces.
  rpc ListStorageSpaces(necode.storage.provider.ListStorageSpacesRequest) returns (necode.storage.provider.ListStorageSpacesResponse);
  // Updates a storage space.
  rpc UpdateStorageSpace(necode.storage.provider.UpdateStorageSpaceRequest) returns (necode.storage.provider.UpdateStorageSpaceResponse);
  // Deletes a storage space.
  rpc DeleteStorageSpace(necode.storage.provider.DeleteStorageSpaceRequest) returns (necode.storage.provider.DeleteStorageSpaceResponse);
  // *****************************************************************/
  // ************************ APP PROVIDER ********************/
  // *****************************************************************/

  // Returns the App URL and all necessary info to open a resource in an online editor.
  // MUST return CODE_NOT_FOUND if the resource does not exist.
  rpc OpenInApp(OpenInAppRequest) returns (necode.app.provider.OpenInAppResponse);
  // *****************************************************************/
  // ************************ USER SHARE PROVIDER ********************/
  // *****************************************************************/

  // Creates a new share.
  // MUST return CODE_NOT_FOUND if the resource reference does not exist.
  // MUST return CODE_LOCKED if the resource reference already locked.
  // MUST return CODE_ALREADY_EXISTS if the share already exists for the 4-tuple consisting of
  // (owner, shared_resource, grantee).
  // New shares MUST be created in the state SHARE_STATE_PENDING.
  rpc CreateShare(necode.sharing.collaboration.CreateShareRequest) returns (necode.sharing.collaboration.CreateShareResponse);
  // Removes a share.
  // MUST return CODE_NOT_FOUND if the share reference does not exist.
  rpc RemoveShare(necode.sharing.collaboration.RemoveShareRequest) returns (necode.sharing.collaboration.RemoveShareResponse);
  // Gets share information for a single share.
  // MUST return CODE_NOT_FOUND if the share reference does not exist.
  rpc GetShare(necode.sharing.collaboration.GetShareRequest) returns (necode.sharing.collaboration.GetShareResponse);
  // List the shares the authproviderenticated principal has created,
  // both as owner and creator. If a filter is specified, only
  // shares satisfying the filter MUST be returned.
  rpc ListShares(necode.sharing.collaboration.ListSharesRequest) returns (necode.sharing.collaboration.ListSharesResponse);
  // Updates a share.
  // MUST return CODE_NOT_FOUND if the share reference does not exist.
  rpc UpdateShare(necode.sharing.collaboration.UpdateShareRequest) returns (necode.sharing.collaboration.UpdateShareResponse);
  // List all shares the authproviderenticated principal has received.
  rpc ListReceivedShares(necode.sharing.collaboration.ListReceivedSharesRequest) returns (necode.sharing.collaboration.ListReceivedSharesResponse);
  // Update the received share to change the share state or the display name.
  // MUST return CODE_NOT_FOUND if the share reference does not exist.
  rpc UpdateReceivedShare(necode.sharing.collaboration.UpdateReceivedShareRequest) returns (necode.sharing.collaboration.UpdateReceivedShareResponse);
  // Get the information for the given received share reference.
  // MUST return CODE_NOT_FOUND if the received share reference does not exist.
  rpc GetReceivedShare(necode.sharing.collaboration.GetReceivedShareRequest) returns (necode.sharing.collaboration.GetReceivedShareResponse);
  // *****************************************************************/
  // ************************ PREFERENCES ***************************/
  // *****************************************************************/

  // Maps the key-value pair.
  rpc SetKey(necode.preferences.SetKeyRequest) returns (necode.preferences.SetKeyResponse);
  // Returns the value associated with the
  // requested key.
  rpc GetKey(necode.preferences.GetKeyRequest) returns (necode.preferences.GetKeyResponse);
  // *****************************************************************/
  // ************************ PUBLIC SHARE ***************************/
  // *****************************************************************/

  // Creates a new share.
  // MUST return CODE_NOT_FOUND if the resource reference does not exist.
  // MUST return CODE_ALREADY_EXISTS if the share already exists for the 4-tuple consisting of
  // (owner, shared_resource, grantee).
  // New shares MUST be created in the state SHARE_STATE_PENDING.
  rpc CreatePublicShare(necode.sharing.link.CreatePublicShareRequest) returns (necode.sharing.link.CreatePublicShareResponse);
  // Removes a share.
  // MUST return CODE_NOT_FOUND if the share reference does not exist.
  rpc RemovePublicShare(necode.sharing.link.RemovePublicShareRequest) returns (necode.sharing.link.RemovePublicShareResponse);
  // Gets share information for a single share.
  // MUST return CODE_NOT_FOUND if the share reference does not exist.
  rpc GetPublicShare(necode.sharing.link.GetPublicShareRequest) returns (necode.sharing.link.GetPublicShareResponse);
  // Gets share information for a single share by its unlisted token.
  // MUST return CODE_NOT_FOUND if the share does not exist.
  rpc GetPublicShareByToken(necode.sharing.link.GetPublicShareByTokenRequest) returns (necode.sharing.link.GetPublicShareByTokenResponse);
  // List the shares the authproviderenticated principal has created,
  // both as owner and creator. If a filter is specified, only
  // shares satisfying the filter MUST be returned.
  rpc ListPublicShares(necode.sharing.link.ListPublicSharesRequest) returns (necode.sharing.link.ListPublicSharesResponse);
  // Updates a share.
  // MUST return CODE_NOT_FOUND if the share reference does not exist.
  rpc UpdatePublicShare(necode.sharing.link.UpdatePublicShareRequest) returns (necode.sharing.link.UpdatePublicShareResponse);
  // *****************************************************************/
  // ************************ OCM SHARE PROVIDER *********************/
  // *****************************************************************/

  // Creates a new ocm share.
  // MUST return CODE_NOT_FOUND if the resource reference does not exist.
  // MUST return CODE_ALREADY_EXISTS if the share already exists for the 4-tuple consisting of
  // (owner, shared_resource, grantee).
  // New shares MUST be created in the state SHARE_STATE_PENDING.
  rpc CreateOCMShare(necode.sharing.ocm.CreateOCMShareRequest) returns (necode.sharing.ocm.CreateOCMShareResponse);
  // Removes a share.
  // MUST return CODE_NOT_FOUND if the share reference does not exist.
  rpc RemoveOCMShare(necode.sharing.ocm.RemoveOCMShareRequest) returns (necode.sharing.ocm.RemoveOCMShareResponse);
  // Gets share information for a single share.
  // MUST return CODE_NOT_FOUND if the share reference does not exist.
  rpc GetOCMShare(necode.sharing.ocm.GetOCMShareRequest) returns (necode.sharing.ocm.GetOCMShareResponse);
  // Gets share information for a single share by its unlisted token.
  // MUST return CODE_NOT_FOUND if the share does not exist.
  rpc GetOCMShareByToken(necode.sharing.ocm.GetOCMShareByTokenRequest) returns (necode.sharing.ocm.GetOCMShareByTokenResponse);
  // List the shares the authproviderenticated principal has created,
  // both as owner and creator. If a filter is specified, only
  // shares satisfying the filter MUST be returned.
  rpc ListOCMShares(necode.sharing.ocm.ListOCMSharesRequest) returns (necode.sharing.ocm.ListOCMSharesResponse);
  // Updates a share.
  // MUST return CODE_NOT_FOUND if the share reference does not exist.
  rpc UpdateOCMShare(necode.sharing.ocm.UpdateOCMShareRequest) returns (necode.sharing.ocm.UpdateOCMShareResponse);
  // List all shares the authproviderenticated principal has received.
  rpc ListReceivedOCMShares(necode.sharing.ocm.ListReceivedOCMSharesRequest) returns (necode.sharing.ocm.ListReceivedOCMSharesResponse);
  // Update the received share to change the share state or the display name.
  // MUST return CODE_NOT_FOUND if the share reference does not exist.
  rpc UpdateReceivedOCMShare(necode.sharing.ocm.UpdateReceivedOCMShareRequest) returns (necode.sharing.ocm.UpdateReceivedOCMShareResponse);
  // Get the information for the given received share reference.
  // MUST return CODE_NOT_FOUND if the received share reference does not exist.
  rpc GetReceivedOCMShare(necode.sharing.ocm.GetReceivedOCMShareRequest) returns (necode.sharing.ocm.GetReceivedOCMShareResponse);
  // *****************************************************************/
  // ************************ APP REGISTRY ****************************/
  // *****************************************************************/

  // Returns the app providers that are capable of handling this resource info.
  // MUST return CODE_NOT_FOUND if no providers are available.
  rpc GetAppProviders(necode.app.registry.GetAppProvidersRequest) returns (necode.app.registry.GetAppProvidersResponse);
  // Registers a new app provider to the registry.
  rpc AddAppProvider(necode.app.registry.AddAppProviderRequest) returns (necode.app.registry.AddAppProviderResponse);
  // Returns a list of the available app providers known by this registry.
  rpc ListAppProviders(necode.app.registry.ListAppProvidersRequest) returns (necode.app.registry.ListAppProvidersResponse);
  // Returns a list of the supported mime types along with the apps which they can opened with.
  rpc ListSupportedMimeTypes(necode.app.registry.ListSupportedMimeTypesRequest) returns (necode.app.registry.ListSupportedMimeTypesResponse);
  // Returns the default app provider which serves a specified mime type.
  rpc GetDefaultAppProviderForMimeType(necode.app.registry.GetDefaultAppProviderForMimeTypeRequest) returns (necode.app.registry.GetDefaultAppProviderForMimeTypeResponse);
  // Sets the default app provider for a specified mime type.
  rpc SetDefaultAppProviderForMimeType(necode.app.registry.SetDefaultAppProviderForMimeTypeRequest) returns (necode.app.registry.SetDefaultAppProviderForMimeTypeResponse);
  // *****************************************************************/
  // ************************ USER PROVIDER **************************/
  // *****************************************************************/

  // Gets the information about a user by the user id.
  rpc GetUser(necode.identity.user.GetUserRequest) returns (necode.identity.user.GetUserResponse);
  // Gets the information about a user based on a specified claim.
  rpc GetUserByClaim(necode.identity.user.GetUserByClaimRequest) returns (necode.identity.user.GetUserByClaimResponse);
  // Gets the groups of a user.
  rpc GetUserGroups(necode.identity.user.GetUserGroupsRequest) returns (necode.identity.user.GetUserGroupsResponse);
  // Finds users by any attribute of the user.
  // TODO(labkode): to define the filters that make more sense.
  rpc FindUsers(necode.identity.user.FindUsersRequest) returns (necode.identity.user.FindUsersResponse);
  // *****************************************************************/
  // ************************ GROUP PROVIDER **************************/
  // *****************************************************************/

  // Gets the information about a group by the group id.
  rpc GetGroup(necode.identity.group.GetGroupRequest) returns (necode.identity.group.GetGroupResponse);
  // Gets the information about a group based on a specified claim.
  rpc GetGroupByClaim(necode.identity.group.GetGroupByClaimRequest) returns (necode.identity.group.GetGroupByClaimResponse);
  // Gets the members of a group.
  rpc GetMembers(necode.identity.group.GetMembersRequest) returns (necode.identity.group.GetMembersResponse);
  // Tells if the group has a certain member.
  rpc HasMember(necode.identity.group.HasMemberRequest) returns (necode.identity.group.HasMemberResponse);
  // TODO(labkode): to define the filters that make more sense.
  // Finds groups whose names match the specified filter.
  rpc FindGroups(necode.identity.group.FindGroupsRequest) returns (necode.identity.group.FindGroupsResponse);
  // *****************************************************************/
  // ************************ AUTH REGISTRY  **************************/
  // *****************************************************************/

  // Returns a list of the available auth providers known by this registry.
  rpc ListAuthProviders(necode.auth.registry.ListAuthProvidersRequest) returns (ListAuthProvidersResponse);
  // ************************ STORAGE REGISTRY ** ********************/
  // *****************************************************************/

  // Returns the home path for the given authenticated user.
  // When a user has access to multiple storage providers, one of them is the home.
  rpc GetHome(necode.storage.provider.GetHomeRequest) returns (necode.storage.provider.GetHomeResponse);
  // *****************************************************************/
  // ************************ OCM INVITE MANAGER *********************/
  // *****************************************************************/

  // Generates a new token for the user with a validity of 24 hours.
  rpc GenerateInviteToken(necode.ocm.invite.GenerateInviteTokenRequest) returns (necode.ocm.invite.GenerateInviteTokenResponse);
  // Lists the valid tokens generated by the user.
  rpc ListInviteTokens(necode.ocm.invite.ListInviteTokensRequest) returns (necode.ocm.invite.ListInviteTokensResponse);
  // Forwards a received invite to the sync'n'share system provider.
  rpc ForwardInvite(necode.ocm.invite.ForwardInviteRequest) returns (necode.ocm.invite.ForwardInviteResponse);
  // Completes an invitation acceptance.
  rpc AcceptInvite(necode.ocm.invite.AcceptInviteRequest) returns (necode.ocm.invite.AcceptInviteResponse);
  // Retrieves details about a remote user who has accepted an invite to share.
  rpc GetAcceptedUser(necode.ocm.invite.GetAcceptedUserRequest) returns (necode.ocm.invite.GetAcceptedUserResponse);
  // Finds users who accepted invite tokens by their attributes.
  rpc FindAcceptedUsers(necode.ocm.invite.FindAcceptedUsersRequest) returns (necode.ocm.invite.FindAcceptedUsersResponse);
  // Delete a previously accepted remote user, that is unfriend that user.
  rpc DeleteAcceptedUser(necode.ocm.invite.DeleteAcceptedUserRequest) returns (necode.ocm.invite.DeleteAcceptedUserResponse);
  // *****************************************************************/
  // ******************** OCM PROVIDER AUTHORIZER ********************/
  // *****************************************************************/

  // Check if a given system provider is registered in the mesh or not.
  // MUST return CODE_UNAUTHENTICATED if the system is not registered
  rpc IsProviderAllowed(necode.ocm.provider.IsProviderAllowedRequest) returns (necode.ocm.provider.IsProviderAllowedResponse);
  // Get the information of the provider identified by a specific domain.
  // MUST return CODE_NOT_FOUND if the sync'n'share system provider does not exist.
  rpc GetInfoByDomain(necode.ocm.provider.GetInfoByDomainRequest) returns (necode.ocm.provider.GetInfoByDomainResponse);
  // Get the information of all the providers registered in the mesh.
  rpc ListAllProviders(necode.ocm.provider.ListAllProvidersRequest) returns (necode.ocm.provider.ListAllProvidersResponse);
  // *****************************************************************/
  // **************************** OCM CORE ***************************/
  // *****************************************************************/

  // Creates a new OCM share.
  rpc CreateOCMCoreShare(necode.ocm.core.CreateOCMCoreShareRequest) returns (necode.ocm.core.CreateOCMCoreShareResponse);
  // Updates an OCM share.
  rpc UpdateOCMCoreShare(necode.ocm.core.UpdateOCMCoreShareRequest) returns (necode.ocm.core.UpdateOCMCoreShareResponse);
  // Deletes an OCM share.
  rpc DeleteOCMCoreShare(necode.ocm.core.DeleteOCMCoreShareRequest) returns (necode.ocm.core.DeleteOCMCoreShareResponse);
  // *****************************************************************/
  // ************************** FILE TRANSFER ************************/
  // *****************************************************************/

  //  Requests creation of a transfer.
  rpc CreateTransfer(necode.tx.CreateTransferRequest) returns (necode.tx.CreateTransferResponse);
  // Requests a transfer status.
  rpc GetTransferStatus(necode.tx.GetTransferStatusRequest) returns (necode.tx.GetTransferStatusResponse);
  // Requests to cancel a transfer.
  rpc CancelTransfer(necode.tx.CancelTransferRequest) returns (necode.tx.CancelTransferResponse);
  // Requests a list of transfers received by the authenticated principle.
  rpc ListTransfers(necode.tx.ListTransfersRequest) returns (necode.tx.ListTransfersResponse);
  // Requests retrying a transfer.
  rpc RetryTransfer(necode.tx.RetryTransferRequest) returns (necode.tx.RetryTransferResponse);
  // *****************************************************************/
  // ************************** Permissions **************************/
  // *****************************************************************/

  // CheckPermission checks if a user or group has a certain permission.
  rpc CheckPermission(necode.permissions.CheckPermissionRequest) returns (necode.permissions.CheckPermissionResponse);
}

// CAUTION:
// The request and responses differ from the non-gateway APIs because they need to be routable.

message AuthenticateRequest {
  // OPTIONAL.
  // Opaque information.
  necode.types.Opaque opaque = 1;
  // REQUIRED.
  // The type of authentication to use.
  string type = 2;
  // OPTIONAL.
  // The id of the client.
  // For basic authentication with username and password
  // both client_id and client_secret are expected to be filled.
  // However, for example, for OIDC only a token is necessary.
  string client_id = 3;
  // OPTIONAL.
  // The secret of the client.
  string client_secret = 4;
}

message AuthenticateResponse {
  // REQUIRED.
  // The response status.
  necode.rpc.Status status = 1;
  // OPTIONAL.
  // Opaque information.
  necode.types.Opaque opaque = 2;
  // REQUIRED.
  // The access token.
  string token = 3;
  // REQUIRED.
  // The authenticated user.
  necode.identity.user.User user = 4;
}

message WhoAmIRequest {
  // OPTIONAL.
  // Opaque information.
  necode.types.Opaque opaque = 1;
  // REQUIRED.
  // The access token.
  string token = 2;
}

message WhoAmIResponse {
  // REQUIRED.
  // The response status.
  necode.rpc.Status status = 1;
  // OPTIONAL.
  // Opaque information.
  necode.types.Opaque opaque = 2;
  // REQUIRED.
  // The user information.
  necode.identity.user.User user = 3;
}

message GetQuotaRequest {
  // OPTIONAL.
  // Opaque information.
  necode.types.Opaque opaque = 1;
  // REQUIRED.
  // The reference to which the action should be performed.
  necode.storage.provider.Reference ref = 2;
}

message InitiateFileDownloadResponse {
  // REQUIRED.
  // The response status.
  necode.rpc.Status status = 1;
  // OPTIONAL.
  // Opaque information.
  necode.types.Opaque opaque = 2;
  // REQUIRED.
  // The protocols through which data can be downloaded.
  repeated FileDownloadProtocol protocols = 3;
}

message InitiateFileUploadResponse {
  // REQUIRED.
  // The response status.
  necode.rpc.Status status = 1;
  // OPTIONAL.
  // Opaque information.
  necode.types.Opaque opaque = 2;
  // REQUIRED.
  // The protocols through which data can be uploaded.
  repeated FileUploadProtocol protocols = 3;
}

message ListAuthProvidersResponse {
  // REQUIRED.
  // The response status.
  necode.rpc.Status status = 1;
  // OPTIONAL.
  // Opaque information.
  necode.types.Opaque opaque = 2;
  // REQUIRED.
  // The list of auth types.
  // TODO(labkode): maybe add description?
  repeated string types = 3;
}

message OpenInAppRequest {
  // OPTIONAL.
  // Opaque information.
  necode.types.Opaque opaque = 1;
  // REQUIRED.
  // The resource reference. If a path is given, it will be resolved via Stat() to a ResourceInfo
  // in case a call to the WOPI server is to be issued (cf. the provider grpc message)
  storage.provider.Reference ref = 2;
  // REQUIRED.
  // View mode.
  enum ViewMode {
    VIEW_MODE_INVALID = 0;
    // The resource can be opened but not downloaded.
    VIEW_MODE_VIEW_ONLY = 1;
    // The resource can be downloaded.
    VIEW_MODE_READ_ONLY = 2;
    // The resource can be downloaded and updated. The underlying application
    // MUST be a fully capable editor to support this mode.
    VIEW_MODE_READ_WRITE = 3;
    // The resource can be downloaded and updated, but must be shown in
    // preview mode. If the underlying application does not support a preview mode,
    // or if in a view-only mode users are not allowed to switch to edit mode,
    // then this mode MUST fall back to READ_WRITE.
    VIEW_MODE_PREVIEW = 4;
  }
  ViewMode view_mode = 3;
  // OPTIONAL.
  // A reference to the application to be used to open the resource, should the
  // default inferred from the resource's mimetype be overridden by user's choice.
  // If the targeted resource is a directory, this parameter is required and
  // in its absence the implementation MUST return INVALID_ARGUMENT.
  string app = 4;
  // OPTIONAL.
  // A lock_id: should the reference be locked and the lock type be LOCK_TYPE_EXCL,
  // the stored lock_id MUST be equal to the given value.
  string lock_id = 5;
}
