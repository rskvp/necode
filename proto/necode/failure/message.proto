syntax = "proto3";

package necode.failure;

import "necode/common/message.proto";
import "necode/enums/workflow.proto";

message ApplicationFailureInfo {
    string type = 1;
    bool non_retryable = 2;
    necode.common.Payloads details = 3;
}

message TimeoutFailureInfo {
    necode.enums.TimeoutType timeout_type = 1;
    necode.common.Payloads last_heartbeat_details = 2;
}

message CanceledFailureInfo {
    necode.common.Payloads details = 1;
}

message TerminatedFailureInfo {
}

message ServerFailureInfo {
    bool non_retryable = 1;
}

message ResetWorkflowFailureInfo {
    necode.common.Payloads last_heartbeat_details = 1;
}

message ActivityFailureInfo {
    int64 scheduled_event_id = 1;
    int64 started_event_id = 2;
    string identity = 3;
    necode.common.ActivityType activity_type = 4;
    string activity_id = 5;
    necode.enums.RetryState retry_state = 6;
}

message ChildWorkflowExecutionFailureInfo {
    string namespace = 1;
    necode.common.WorkflowExecution workflow_execution = 2;
    necode.common.WorkflowType workflow_type = 3;
    int64 initiated_event_id = 4;
    int64 started_event_id = 5;
    necode.enums.RetryState retry_state = 6;
}

message Failure {
    string message = 1;
    // The source this Failure originated in, e.g. TypeScriptSDK / JavaSDK
    // In some SDKs this is used to rehydrate the stack trace into an exception object.
    string source = 2;
    string stack_trace = 3;
    // Alternative way to supply `message` and `stack_trace` and possibly other attributes, used for encryption of
    // errors originating in user code which might contain sensitive information.
    // The `encoded_attributes` Payload could represent any serializable object, e.g. JSON object or a `Failure` proto
    // message.
    //
    // SDK authors: 
    // - The SDK should provide a default `encodeFailureAttributes` and `decodeFailureAttributes` implementation that:
    //   - Uses a JSON object to represent `{ message, stack_trace }`.
    //   - Overwrites the original message with "Encoded failure" to indicate that more information could be extracted.
    //   - Overwrites the original stack_trace with an empty string.
    //   - The resulting JSON object is converted to Payload using the default PayloadConverter and should be processed
    //     by the user-provided PayloadCodec
    //
    // - If there's demand, we could allow overriding the default SDK implementation to encode other opaque Failure attributes.
    // (-- api-linter: core::0203::optional=disabled --)
    necode.common.Payload encoded_attributes = 20;
    Failure cause = 4;
    oneof failure_info {
        ApplicationFailureInfo application_failure_info = 5;
        TimeoutFailureInfo timeout_failure_info = 6;
        CanceledFailureInfo canceled_failure_info = 7;
        TerminatedFailureInfo terminated_failure_info = 8;
        ServerFailureInfo server_failure_info = 9;
        ResetWorkflowFailureInfo reset_workflow_failure_info = 10;
        ActivityFailureInfo activity_failure_info = 11;
        ChildWorkflowExecutionFailureInfo child_workflow_execution_failure_info = 12;
    }
}
